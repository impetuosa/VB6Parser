Class {
	#name : #VBParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_VB6Parser'
}

{ #category : #generated }
VBParser class >> ambiguousTransitions [
^#(
#[ 0 170 0 174] 
#[ 0 174 0 198] 
#[ 0 174 0 206] 
#[ 0 174 0 226] 
#[ 0 174 1 30] 
#[ 1 114 1 118 1 122] 
#[ 1 114 1 118 1 122 1 165] 
#[ 0 6 6 153] 
#[ 2 90 6 197] 
#[ 0 209 2 90] 
#[ 0 213 2 90] 
#[ 2 190 2 194] 
#[ 1 230 3 10] 
#[ 3 26 5 169] 
#[ 3 26 5 197] 
#[ 3 26 5 229] 
#[ 3 30 5 169] 
#[ 3 30 5 197] 
#[ 3 30 5 229] 
#[ 1 158 3 38] 
#[ 1 158 3 46] 
#[ 3 70 5 169] 
#[ 3 70 5 197] 
#[ 3 70 5 229] 
#[ 3 82 7 145] 
#[ 2 129 3 82] 
#[ 2 133 3 82] 
#[ 2 137 3 82] 
#[ 2 141 3 82] 
#[ 2 145 3 82] 
#[ 2 149 3 82] 
#[ 2 153 3 82] 
#[ 2 157 3 82] 
#[ 2 161 3 82] 
#[ 2 165 3 82] 
#[ 2 169 3 82] 
#[ 1 37 3 82] 
#[ 1 85 3 82] 
#[ 2 173 3 82] 
#[ 2 177 3 82] 
#[ 2 181 3 82] 
#[ 0 209 3 82] 
#[ 0 213 3 82] 
#[ 0 6 1 37] 
#[ 0 6 1 173] 
#[ 0 6 1 126] 
#[ 2 129 3 218] 
#[ 2 133 3 218] 
#[ 2 137 3 218] 
#[ 2 141 3 218] 
#[ 0 9 3 218] 
#[ 0 21 3 218] 
#[ 3 218 4 5] 
#[ 0 25 3 218] 
#[ 0 29 3 218] 
#[ 2 145 3 218] 
#[ 3 218 4 9] 
#[ 0 33 3 218] 
#[ 0 41 3 218] 
#[ 3 218 4 13] 
#[ 3 218 4 17] 
#[ 3 218 4 21] 
#[ 2 149 3 218] 
#[ 2 153 3 218] 
#[ 3 218 4 25] 
#[ 0 49 3 218] 
#[ 0 57 3 218] 
#[ 0 61 3 218] 
#[ 3 218 4 29] 
#[ 3 218 8 141] 
#[ 2 157 3 218] 
#[ 3 218 4 33] 
#[ 0 73 3 218] 
#[ 3 218 4 37] 
#[ 3 218 4 41] 
#[ 2 161 3 218] 
#[ 2 165 3 218] 
#[ 2 169 3 218] 
#[ 1 37 3 218] 
#[ 1 85 3 218] 
#[ 2 173 3 218] 
#[ 2 177 3 218] 
#[ 2 181 3 218] 
#[ 0 209 3 218] 
#[ 0 213 3 218] 
#[ 0 6 3 222] 
#[ 3 254 5 169] 
#[ 3 254 5 197] 
#[ 3 254 5 229] 
#[ 3 82 9 109] 
#[ 4 6 9 121] 
#[ 4 14 5 169] 
#[ 4 14 5 197] 
#[ 4 14 5 229] 
#[ 4 22 5 169] 
#[ 4 22 5 197] 
#[ 4 22 5 229] 
#[ 4 26 5 169] 
#[ 4 26 5 197] 
#[ 4 26 5 229] 
#[ 4 30 5 169] 
#[ 4 30 5 197] 
#[ 4 30 5 229] 
#[ 4 34 5 169] 
#[ 4 34 5 197] 
#[ 4 34 5 229] 
#[ 4 38 5 169] 
#[ 4 38 5 197] 
#[ 4 38 5 229] 
#[ 0 6 2 129] 
#[ 0 6 2 133] 
#[ 0 6 2 137] 
#[ 0 6 2 141] 
#[ 0 6 2 145] 
#[ 0 6 2 149] 
#[ 0 6 2 153] 
#[ 0 6 2 157] 
#[ 0 6 2 161] 
#[ 0 6 2 165] 
#[ 0 6 2 169] 
#[ 0 6 1 85] 
#[ 0 6 2 173] 
#[ 0 6 2 177] 
#[ 0 6 2 181] 
#[ 0 6 0 209] 
#[ 0 6 0 213] 
#[ 1 82 10 41] 
#[ 4 26 4 122 5 165] 
#[ 4 26 4 122 5 169] 
#[ 4 26 4 122 5 173] 
#[ 4 26 4 122 5 177] 
#[ 4 26 4 122 5 181] 
#[ 4 26 4 122 5 185] 
#[ 4 26 4 122 5 189] 
#[ 4 26 4 122 5 193] 
#[ 4 26 4 122 5 197] 
#[ 4 26 4 122 5 201] 
#[ 4 26 4 122 5 205] 
#[ 4 26 4 122 5 209] 
#[ 4 26 4 122 5 213] 
#[ 4 26 4 122 5 217] 
#[ 4 26 4 122 5 221] 
#[ 4 26 4 122 5 225] 
#[ 4 26 4 122 5 229] 
#[ 4 26 4 122 5 233] 
#[ 4 26 4 122 5 237] 
#[ 4 26 4 122 5 241] 
#[ 4 26 4 122 5 245] 
#[ 4 26 4 122 5 249] 
#[ 4 26 4 122 5 253] 
#[ 4 26 4 122 6 1] 
#[ 4 130 5 169] 
#[ 4 130 5 197] 
#[ 4 130 5 229] 
#[ 4 134 5 169] 
#[ 4 134 5 197] 
#[ 4 134 5 229] 
#[ 4 146 9 121] 
#[ 2 129 4 150] 
#[ 2 133 4 150] 
#[ 2 137 4 150] 
#[ 2 141 4 150] 
#[ 2 145 4 150] 
#[ 2 149 4 150] 
#[ 2 153 4 150] 
#[ 2 157 4 150] 
#[ 2 161 4 150] 
#[ 2 165 4 150] 
#[ 2 169 4 150] 
#[ 1 37 4 150] 
#[ 1 85 4 150] 
#[ 2 173 4 150] 
#[ 2 177 4 150] 
#[ 2 181 4 150] 
#[ 0 209 4 150] 
#[ 0 213 4 150] 
#[ 2 129 4 154] 
#[ 2 133 4 154] 
#[ 2 137 4 154] 
#[ 2 141 4 154] 
#[ 2 145 4 154] 
#[ 2 149 4 154] 
#[ 2 153 4 154] 
#[ 2 157 4 154] 
#[ 2 161 4 154] 
#[ 2 165 4 154] 
#[ 2 169 4 154] 
#[ 1 37 4 154] 
#[ 1 85 4 154] 
#[ 2 173 4 154] 
#[ 2 177 4 154] 
#[ 2 181 4 154] 
#[ 0 209 4 154] 
#[ 0 213 4 154] 
#[ 4 218 11 77] 
#[ 5 14 5 169] 
#[ 5 14 5 197] 
#[ 5 14 5 229] 
#[ 5 74 12 77] 
#[ 5 78 12 85] 
#[ 1 126 5 166] 
#[ 5 170 13 53] 
#[ 1 126 6 22] 
#[ 1 126 6 26] 
#[ 1 126 6 30] 
#[ 1 126 6 94] 
#[ 1 126 6 98] 
#[ 0 209 6 102] 
#[ 0 213 6 102] 
#[ 0 6 6 106] 
#[ 0 209 6 130] 
#[ 0 213 6 130] 
#[ 0 209 6 134] 
#[ 0 213 6 134] 
#[ 0 209 6 158] 
#[ 0 213 6 158]
	).
]

{ #category : #'generated-accessing' }
VBParser class >> cacheId [
	^'2020-08-27T16:51:31.8383+02:00'
]

{ #category : #generated }
VBParser class >> definitionComment [
"%glr;
%ignorecase;
%annotate_tokens;

#expression operators -- lowest precedence are first.
%left "")""  ;
%left  ""="";
%left "","";
%right "":"";
%left ""eqv"" ;
%left ""||"" ""or"" ""xor"";
%left ""&&"" ""and"";
%left ""is"" ""like"" ""!="" ""<>"";
%left ""<"" ""<="" "">"" "">="";
%left ""+"" ""-"";
%left ""*"" ""/"" ""Mod"";
%right ""^"";
%right ""delete"" ""~"";
%right ""["" ""("";
%left ""."" ""!"" ;
%prefix VB;
%root Program;
%suffix Node;
%start module;

<lineContinuation>
   :    [_ \r? \n ]
   ;


<DECIMAL_INTEGER>
	: 0 | [1-9] [0-9]*	
	;
<HEX_INTEGER>
	: 0[xX][0-9a-fA-F]+	
	;
<OCTAL_INTEGER>
	: 0[0-7]+	
	;
<EXPONENT>
	: [eE] [\-\+]? [0-9]+ 	
	;
<FLOAT_TYPE>
	: [fFdD]	
	;

<DATE_LITERAL>
   : ""#"" ([^\#\r\n])*  ""#""
   ;
<COLOR_LITERAL>
   : \&H <HEX_INTEGER>+ ""&""?
   ;

<INTEGER_LITERAL>
	: (<DECIMAL_INTEGER> | <HEX_INTEGER> | <OCTAL_INTEGER>) [lL]?	
	;
<FLOATING_POINT_LITERAL>
	: [0-9]+ \. [0-9]* <EXPONENT>? <FLOAT_TYPE>? 
	| \. [0-9]+ <EXPONENT>? <FLOAT_TYPE>? 
	| [0-9]+ <EXPONENT> <FLOAT_TYPE>? 
	| [0-9]+ <FLOAT_TYPE>	
	| <HEX_INTEGER> \. [0-9a-fA-F]+ [pP] [\-\+]? [0-9]+ <FLOAT_TYPE>?
	;
<BOOLEAN_LITERAL>
	: true
	| false
	;
<STRING_LITERAL>
   : \"" ([^\""\r\n] | \""\"")* \""
   ;
<NULL_LITERAL>
	: Nothing	
	;


<IDENTIFIER>
	: (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|$)*	
	;
<HASH_IDENTIFIER>
	: ( \#) (<isLetter>|\w|$)*
	;
	
<whitespace>
	: \s+ | \s 
	;


<eol>
   :  (\r? \n | : \ ) 
   ;

<comment>
   :  (\' | :?  REM  \ ) ( [^\n\r])* 
   ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Basic module
########## ########## ########## ########## ########## ########## ########## ########## 

module: (header 'header' <eol>*)? ModuleStatement 'element'  (<eol>* ModuleStatement 'element' )*   <eol>* {{Module}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Literals
########## ########## ########## ########## ########## ########## ########## ########## 
literal 
	: IntegerLiteral
	| ColorLiteral
	| DateLiteral
	| FloatLiteral
	| BooleanLiteral
	| StringLiteral
	| Null
	| GuidLiteral
;
IntegerLiteral :  <INTEGER_LITERAL> 'token' {{IntegerLiteral}};
ColorLiteral: <COLOR_LITERAL> 'token' {{ColorLiteral}} ; 
DateLiteral:  <DATE_LITERAL> 'token' {{DateLiteral}};
FloatLiteral: <FLOATING_POINT_LITERAL> 'token' {{FloatLiteral}};
BooleanLiteral: <BOOLEAN_LITERAL> 'token' {{BooleanLiteral}};
StringLiteral:  <STRING_LITERAL> 'token' {{StringLiteral}};
Null: <NULL_LITERAL> 'token' {{Null}};
GuidLiteral: ""{""<HEX_INTEGER> + ""-""<HEX_INTEGER>+""-"" <HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""}"" {{GuidLiteral}};

Identifier : 
	   SimpleIdentifier 
	| HashIdentifier
	| QualifiedIdentifier | HeadlessIdentifier;

HashIdentifier :  <HASH_IDENTIFIER> 'token'   {{HashIdentifier}};
SimpleIdentifier : <IDENTIFIER> 'token'  {{SimpleIdentifier}};
HeadlessIdentifier  : "".""  Identifier 'token'  {{HeadlessIdentifier}};
QualifiedIdentifier : Identifier 'token'  "".""  <IDENTIFIER> 'member' {{QualifiedIdentifier}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Module header and configuration
########## ########## ########## ########## ########## ########## ########## ########## 

header: ""version""   FloatLiteral  'version'  (""class"")?  {{}};
Option
   :   ""option"" IntegerLiteral 'value' {{OptionValue}}
   |   ""option"" ""compare"" ""database"" {{OptionCompareDatabase}}
   |   ""option"" ""compare""  (""binary""| ""text"" 'compare') {{OptionCompare}}
   |   ""option"" ""explicit"" {{OptionExplicit}}
   |  ""option"" ""private"" ""module""{{OptionPrivateModule}}
   ;

SetUpAssignation :  
	Identifier  'identifier' ""="" Expression 'value' {{SetUpAssignation}} 
;
Attribute
 : ""attribute"" SetUpAssignation 'setting' {{ModuleAttribute}}
 ;
Configuration 
:	""begin""  <eol>* SetUpAssignation 'setting' ( <eol>+ SetUpAssignation 'setting')* ""end"" {{Configuration}};

ModuleStatement :  
	Option  | Configuration | Attribute | DeclareExternal | VariableDefinition | BehaviourDefinition | Types
 ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Body statements
########## ########## ########## ########## ########## ########## ########## ########## 



Statement :   VariableDefinition | Attribute | Expression | ControlFlowStatement | Types ;
Block: Statement 'statement' (<eol>* Statement 'statement'  )* {{Block}};

BaseType: ""boolean"" | ""byte"" | ""collection"" | ""date"" | ""double"" | ""integer"" | ""long"" | ""object"" | ""single"" | ""string"" | ""variant"" {{BaseType}};
Visibility: ""private"" | ""public"" | ""friend"" | ""global"" ; 

ComplexType: Identifier 'name' {{ComplexType}};
Type: BaseType | ComplexType ;

TypedThing: ""as""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsType}}; 
TypedAndInstantiatedThing: ""as"" ""new""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsTypeAndNew}}; 

AsType: TypedThing | TypedAndInstantiatedThing;



########## ########## ########## ########## ########## ########## ########## ########## 
########## Types
########## ########## ########## ########## ########## ########## ########## ########## 
Types : DefineEnum | DefineType | Event ;

DefineType : 	 (Visibility 'visibility')? ""type"" Identifier 'name' ( <eol>* TypeEntry 'field' )* <eol>* ""end"" ""type"" {{DefineType}}    ;
TypeEntry    : Identifier 'name' AsType 'type' (""*"" IntegerLiteral 'size' )? {{TypeEntry}}     ;
Event  : (Visibility 'visibility')?  ""event"" Identifier 'selector' ParameterList 'parameters' {{Event}} ;
DefineEnum    :  (Visibility 'visibility')?  ""enum"" Identifier 'name'  ( <eol>* EnumEntry 'field')* <eol>*  ""end"" ""enum"" {{DefineEnum}}    ;
EnumEntry    : Identifier 'name'  ( ""=""  Expression 'value')? {{EnumEntry}}    ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Parameters
########## ########## ########## ########## ########## ########## ########## ########## 
ParameterPassingStrategy :  ""byval"" | ""byref"" {{ParameterPassingStrategy}};
ParameterList:  ""("" (Parameter 'parameter' ( "","" Parameter 'parameter')* )? "")"" {{ParameterList}};
Parameter: ""optional"" ? (ParameterPassingStrategy 'strategy')? ""paramarray""? Identifier 'name'  (AsType 'type')? (""="" Expression 'default')? {{Parameter}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## External declaration
########## ########## ########## ########## ########## ########## ########## ########## 
DeclareSub: (Visibility 'visibility')? ""declare""  ""sub"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  {{ExternalSub}};
DeclareFunction: (Visibility 'visibility')? ""declare""  ""function"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  AsType 'type' {{ExternalFunction}};
DeclareExternal : DeclareSub|DeclareFunction; 

########## ########## ########## ########## ########## ########## ########## ########## 
########## Function / Sub Definition 
########## ########## ########## ########## ########## ########## ########## ########## 

Modifier: ""static"" ;
DefineFunction: (Visibility 'visibility')? (Modifier 'modifier')? ""function"" Identifier 'selector' ParameterList 'parameters' (AsType 'type')? <eol>* Block 'block' ""end"" ""function"" {{FunctionDefinition}};
DefineSub:  (Visibility 'visibility')? (Modifier 'modifier')? ""sub"" Identifier 'selector' (ParameterList 'parameters') ? <eol>* Block 'block' ""end"" ""sub"" {{SubDefinition}};


ModulePropertyGet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""get"" Identifier 'selector' (ParameterList 'parameters') ? (AsType 'type')? <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 
ModulePropertySet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""set"" Identifier 'selector'  (ParameterList 'parameters') ?   <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 
ModulePropertyLet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""let"" Identifier 'selector' (ParameterList 'parameters') ?    <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 


BehaviourDefinition:  DefineFunction | DefineSub | ModulePropertyGet | ModulePropertySet | ModulePropertyLet ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Variable / And Multiple Variables
########## ########## ########## ########## ########## ########## ########## ########## 

ModuleProperty : Visibility 'visibility' Variable 'variable' {{ModuleProperty}};
ModuleConstant : (Visibility 'visibility') ""const"" Identifier 'constant' (AsType 'type')?  ""="" Expression 'value'  {{ModuleConstant}};
DefineVariable : ""dim"" Variable 'variable' {{DimVariable}};
ReDefineVariable : ""redim"" ""preserve""? Variable 'variable' {{ReDimVariable}};
StaticVariable : ""static"" Variable 'variable' {{StaticVariable}};
Variable : ""WithEvents"" ? Identifier 'name' (AsType 'type') ? {{Variable}};

ModuleProperties : Visibility 'visibility' VariableList 'variables' {{ModuleMultipleProperties}};
DefineVariables : ""dim"" VariableList 'variables' {{DimMultipleVariables}};
ReDefineVariables : ""redim""  ""preserve""?  VariableList 'variables' {{ReDimMultipleVariables}};
StaticVariables : ""static"" VariableList 'variables' {{StaticMultipleVariables}};
VariableList : Variable 'variable' ("",""  Variable 'variable' )* {{VariableList}};

VariableDefinition : ModuleProperties | ModuleProperty | ModuleConstant | DefineVariable | ReDefineVariable |  DefineVariables |  ReDefineVariables | StaticVariable | StaticVariables ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Value Statements
########## ########## ########## ########## ########## ########## ########## ########## 

ValueStatement :  Operation | ValueClause | ImplicitCall | StateAccess | ExplicitCall | RaiseEvent  ;
Expression :  ValueStatement |  Identifier | literal  | ParentheseesExpression | Exits ; 
ParentheseesExpression : ""("" Expression 'expression' "")"" {{ParentheseesExpression}};
ValueStatementList : ValueStatement 'value' ("","" ValueStatement 'value' ) * {{ValueStatementList}} ; 

### Ops

Operation : UnaryOperation | BinaryOperation ;

DictionaryAccess :   Expression 'receiver' ""!"" Identifier 'member' {{DictionaryAccess}} ;
MemberAccess : Expression 'receiver' ""."" Identifier 'member' {{MemberAccess}} ;
ImplicitParenthesesLessCall : Identifier 'identifier' ArgumentList 'arguments' {{ImplicitParenthesesLessCall}} ;
ProcedureCallOrArrayAccess :  Expression 'receiver' ""("" ArgumentList 'arguments' "")"" {{ProcedureCallOrArrayAccess}} ;

Argument : (ParameterPassingStrategy 'strategy')?  ""paramarray""?  Expression 'value' {{Argument}};
ArgumentList : (Argument 'argument' ? ("","" | "";"" ))* Argument 'argument'? ( ("","" | "";"" )Argument 'argument' ?)* {{ArgumentList}};

ImplicitCall : Identifier | ProcedureCallOrArrayAccess | ImplicitParenthesesLessCall ;
StateAccess : DictionaryAccess | MemberAccess ;

ExplicitCall : ""Call""  ImplicitCall 'call'  {{ExplicitCall}}; 
RaiseEvent : ""RaiseEvent""  ImplicitCall 'call'  {{RaiseEvent}}; 

### Unary Ops 
UnaryOperation:  NegatedOperation | PositiveOperation |  NotOperation ; 

NegatedOperation : ""-""  Expression 'value' {{NegatedOperation}} ;
PositiveOperation : ""+"" Expression 'value' {{PositiveOperation}} ;
NotOperation : ""not""  Expression 'value'  {{NotOperation}};

### Binary Ops 
BinaryOperation: ComparisonOperation  
				| ArithmeticOperation | BooleanBinaryOperation 
				| ExplicitAssignement | AssignementOrEquals  | ConcatenationOperation ;

ComparisonOperator : "">"" | ""<""  |  ""<>"" | ""<="" | "">="" | ""is"" | ""like""  ;
ComparisonOperation : Expression 'left' ComparisonOperator Expression 'right' {{ComparisonOperation}};
ArithmeticOperator : ""*"" | ""+"" | ""-"" | ""/"" | ""^"" | ""\"" | ""Mod"";
ArithmeticOperation : Expression 'left' ArithmeticOperator Expression 'right' {{ArithmeticOperation}};
BooleanOperator : ""and"" | ""or"" | ""xor"" | ""eqv"";
BooleanBinaryOperation : Expression 'left' BooleanOperator Expression 'right' {{ArithmeticOperation}};
ConcatenationOperation : Expression 'left' ""&"" Expression 'right' {{ConcatenationOperation}}; 
AssignementOrEquals : Expression 'left' ""="" Expression  'right' {{AssignementOrEquals}}; 
ExplicitAssignement : ""let"" | ""set""  Expression 'left' ""=""  Expression 'right' {{ExplicitAssignement}}; 
ExplicitAssignement :  Expression 'left' "":=""  Expression 'right' {{ExplicitAssignement}}; 
### Value Clause 
ValueClause: AddressOfClause | NewClause ;
AddressOfClause : ""AddressOf"" Identifier 'name'  {{AddressOfClause}}; 
NewClause : ""New"" Identifier 'typeName' {{NewClause}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Control flow statements
########## ########## ########## ########## ########## ########## ########## ########## 


ControlFlowStatement : Exits| Loops | If  | On | Resume| Go | To | Label | With ; 

#### Loops
Loops : DoLoop | WhileWend | ForLoop ;

########## Do
DoLoop : InfinityLoop | WhileTrue | UntilTrue | DoWhileTrue | DoUntilTrue; 
InfinityLoop : 
	""do""  
		<eol>* (Block 'body')? <eol>* 
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{InfinityLoop}} ;

WhileTrue :  
	""do"" ""while"" ValueStatement 'condition' 
		<eol>* ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{WhileTrue}}; 
UntilTrue : 
	""do"" ""until"" ValueStatement 'condition'
		 <eol>*  Block 'body' <eol>* 
	(IntegerLiteral 'endLineNumber')?""loop"" 
 {{UntilTrue}}; 

DoWhileTrue :  
	""do""<eol>* ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')?  ""loop""  ""while"" ValueStatement 'condition' 
{{DoWhileTrue}}; 

DoUntilTrue : 
	""do"" <eol>*  Block 'body' <eol>* 
	(IntegerLiteral 'endLineNumber')? ""loop"" ""until"" ValueStatement 'condition'
 {{DoUntilTrue}}; 



########## WhileWend
WhileWend: 
	""while"" ValueStatement 'condition'
		 <eol>* ( Block 'body')? <eol>*  (IntegerLiteral 'endLineNumber')? 
	""wend""  {{WhileWend}}; 

########## For 
ForLoop : ForEach | ForNext | ForStepNext;

ForEach :  
	""for"" ""each"" Identifier 'element' ""in"" Expression 'group' 
		 <eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next"" (Identifier 'element' )? 
{{ForEach}} ;
 
ForNext :   
	""for"" Expression 'counter' ""="" Expression  'initialValue'  ""to"" Expression  'limit'   
		<eol>*  ( Block 'body')? <eol>* 
	 (IntegerLiteral 'endLineNumber')? 	""next"" 
{{ForNext}} ;
ForStepNext:   
	""for"" Expression 'counter' ""="" Expression  'initialValue'  ""to"" Expression  'limit' ""step"" Expression 'step'   
		<eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next""
 {{ForStepNext}} ;

########## If

If : IfThenColon | IfThen | IfThenElse | IfThenElseIfElse ; 

IfThenColon : ""if"" Expression 'condition' ""then"" Expression  'ifTrue' {{IfThenColon}} ;
IfThen : 
	""if"" Expression 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>*  
	(IntegerLiteral 'endLineNumber')?  ""end"" ""if"" 
{{IfThen}};
IfThenElse : 
	""if"" Expression 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>* 
	(IntegerLiteral 'elseLineNumber')? ""else"" 
		 <eol>* (Block 'ifFalse')? <eol>* 
	(IntegerLiteral 'endLineNumber')? ""end"" ""if"" 
{{IfThenElse}};
IfThenElseIfElse  : 
""if"" Expression 'condition' ""then"" 
	<eol>* (Block 'ifTrue')? <eol>* 
(ElseIf 'case') + 
""else""  
	<eol>* (Block 'otherwise')? <eol>*
 ""end"" ""if""
{{IfThenElseIfElse}};

ElseIf: ElseIfBlock | ElseIfColon ;

ElseIfBlock : ""elseif"" Expression 'condition' ""then"" 
	<eol>* (Block 'ifMatch')? <eol>*  {{ElseIfBlock}};
ElseIfColon : ""elseif"" Expression 'condition' ""then"" (  Expression 'ifMatch' ?  "":"" )* {{ElseIfColon}} ;

###### Label / LabelSub
To : Label | LabelSub ;
Label : Identifier 'label' "":""  {{GoToLabel}}; 
LabelSub : Identifier 'label' "":"" (Block 'block' )? (IntegerLiteral 'endLineNumber')? ""return"" {{GoSubLabel}}; 

###### Resume
	Resume : ResumeLabel | ResumeNext | ResumeEmpty ;
	
	ResumeLabel : ""resume"" Identifier 'label' {{ResumeLabel}} ; 
	ResumeNext : ""resume"" ""next"" {{ResumeNext}} ; 
	ResumeEmpty : ""resume"" ; 

###### GoTo / GoSub 
Go: GoTo | GoSub ;

GoTo :  GoToLabel | GoToLine ;
GoToLabel : ""goto"" Identifier 'label' {{GoToLabel}}  ;
GoToLine :  ""goto"" IntegerLiteral 'lineNumber' {{GoToLine}}  ;

GoSub: GoSubLabel | GoSubLine ;
GoSubLabel :  ""gosub"" Identifier 'label'  {{GoSubLabel}} ;
GoSubLine :  ""gosub""  IntegerLiteral 'lineNumber'{{GoSubLine}} ;

########## On 

On: OnErrorGoTo | OnErrorResumeNext |  OnExpressionGo  ; 

OnErrorGoTo : ""on"" ""error"" GoTo 'to' {{OnErrorGoTo}}  ;
OnErrorResumeNext : ""on"" ""error"" ""resume""  ""next"" {{OnErrorResumeNext }} ;
OnExpressionGo : ""on"" Expression 'integerExpression' Go 'to' {{OnExpressionGo}} ;

########## Error
Error: ""error"" Expression 'errorCode' {{Error}} ;

########## With
With : ""with"" Identifier 'with' <eol>* (Block 'block' )? <eol>*  (IntegerLiteral 'endLineNumber')?""end"" ""with"" {{With}} ;

########## Exits

Exits : ExitFunction | ExitSub | ExitProperty | ExitDo |ExitFor ; 
ExitFunction : ""exit"" ""function"" {{Exits}} ; 
ExitSub : ""exit"" ""sub"" {{Exits}} ; 
ExitDo : ""exit"" ""do"" {{Exits}} ; 
ExitFor : ""exit"" ""for"" {{Exits}} ; 
ExitProperty : ""exit"" ""property"" {{Exits}} ;"
]

{ #category : #generated }
VBParser class >> reduceTable [
^#(
	#(133 0 #reduceActionFor_eol__1: 1723393 false ) 
	#(164 1 #liftFirstValue: 4638723 false ) 
	#(164 1 #liftFirstValue: 4638724 false ) 
	#(164 1 #liftFirstValue: 4638721 false ) 
	#(164 1 #liftFirstValue: 4638722 false ) 
	#(192 1 #liftFirstValue: 7312385 false ) 
	#(158 1 #liftFirstValue: 3975169 false ) 
	#(158 1 #liftFirstValue: 3975171 false ) 
	#(158 1 #liftFirstValue: 3975170 false ) 
	#(132 0 #reduceActionFor__eol___ModuleStatement__element____1: 1722369 false ) 
	#(158 1 #liftFirstValue: 3975175 false ) 
	#(172 1 #liftFirstValue: 5250050 false ) 
	#(172 1 #liftFirstValue: 5250051 false ) 
	#(172 1 #liftFirstValue: 5250049 false ) 
	#(191 1 #liftFirstValue: 7041025 false ) 
	#(191 1 #liftFirstValue: 7041026 false ) 
	#(158 1 #liftFirstValue: 3975172 false ) 
	#(198 1 #liftFirstValue: 8369153 false ) 
	#(198 1 #liftFirstValue: 8369154 false ) 
	#(198 1 #liftFirstValue: 8369155 false ) 
	#(198 1 #liftFirstValue: 8369156 false ) 
	#(198 1 #liftFirstValue: 8369157 false ) 
	#(158 1 #liftFirstValue: 3975174 false ) 
	#(212 1 #liftFirstValue: 9664514 false ) 
	#(212 1 #liftFirstValue: 9664515 false ) 
	#(212 1 #liftFirstValue: 9664516 false ) 
	#(212 1 #liftFirstValue: 9664517 false ) 
	#(212 1 #liftFirstValue: 9664520 false ) 
	#(212 1 #liftFirstValue: 9664513 false ) 
	#(212 1 #liftFirstValue: 9664518 false ) 
	#(212 1 #liftFirstValue: 9664519 false ) 
	#(212 1 #liftFirstValue: 9664521 false ) 
	#(158 1 #liftFirstValue: 3975173 false ) 
	#(147 1 #reduceActionForSimpleIdentifier1: 2833409 false ) 
	#(146 1 #reduceActionForHashIdentifier1: 2765825 false ) 
	#(145 1 #liftFirstValue: 2663426 false ) 
	#(145 1 #liftFirstValue: 2663425 false ) 
	#(145 1 #liftFirstValue: 2663428 false ) 
	#(145 1 #liftFirstValue: 2663427 false ) 
	#(153 2 #reduceActionForAttribute1: 3771393 false ) 
	#(204 1 #reduceActionForVariable1: 9143297 false ) 
	#(201 2 #reduceActionForDefineVariable1: 8934401 false ) 
	#(211 0 #reduceActionFor__eol___ModuleStatement__element____1: 9615361 false ) 
	#(206 2 #reduceActionForDefineVariables1: 9322497 false ) 
	#(180 0 #reduceActionFor__eol___ModuleStatement__element____1: 5714945 false ) 
	#(151 2 #reduceActionForOption5: 3359749 false ) 
	#(135 1 #reduceActionForIntegerLiteral1: 2122753 false ) 
	#(151 2 #reduceActionForOption1: 3359745 false ) 
	#(202 2 #reduceActionForReDefineVariable1: 8995841 false ) 
	#(207 2 #reduceActionForReDefineVariables1: 9399297 false ) 
	#(203 2 #reduceActionForStaticVariable1: 9075713 false ) 
	#(208 2 #reduceActionForStaticVariables1: 9496577 false ) 
	#(175 0 #reduceActionFor__eol___ModuleStatement__element____1: 5362689 false ) 
	#(138 1 #reduceActionForFloatLiteral1: 2302977 false ) 
	#(150 2 #reduceActionForheader1: 3295233 false ) 
	#(199 2 #reduceActionForModuleProperty1: 8713217 false ) 
	#(205 2 #reduceActionForModuleProperties1: 9222145 false ) 
	#(148 2 #reduceActionForHeadlessIdentifier1: 2897921 false ) 
	#(133 2 #reduceActionFor_eol__2: 1723394 false ) 
	#(156 0 #reduceActionFor__eol___ModuleStatement__element____1: 3909633 false ) 
	#(204 2 #reduceActionForVariable3: 9143299 false ) 
	#(171 1 #liftFirstValue: 4998145 false ) 
	#(171 1 #liftFirstValue: 4998146 false ) 
	#(204 2 #reduceActionForVariable2: 9143298 false ) 
	#(209 2 #reduceActionForVariableList1: 9579521 false ) 
	#(177 3 #reduceActionForEvent1: 5533697 false ) 
	#(151 3 #reduceActionForOption3: 3359747 false ) 
	#(151 3 #reduceActionForOption2: 3359746 false ) 
	#(151 3 #reduceActionForOption4: 3359748 false ) 
	#(151 3 #reduceActionForOption6: 3359750 false ) 
	#(202 3 #reduceActionForReDefineVariable2: 8995842 false ) 
	#(207 3 #reduceActionForReDefineVariables2: 9399298 false ) 
	#(150 3 #reduceActionForheader2: 3295234 false ) 
	#(132 2 #reduceActionFor__eol___ModuleStatement__element____2: 1722370 false ) 
	#(130 3 #reduceActionFormodule1: 1659905 false ) 
	#(149 3 #reduceActionForQualifiedIdentifier1: 2970625 false ) 
	#(247 1 #liftFirstValue: 12606465 false ) 
	#(137 1 #reduceActionForDateLiteral1: 2247681 false ) 
	#(136 1 #reduceActionForColorLiteral1: 2188289 false ) 
	#(139 1 #reduceActionForBooleanLiteral1: 2369537 false ) 
	#(140 1 #reduceActionForStringLiteral1: 2433025 false ) 
	#(141 1 #reduceActionForNull1: 2494465 false ) 
	#(214 1 #liftFirstValue: 10171395 false ) 
	#(134 1 #liftFirstValue: 1985537 false ) 
	#(134 1 #liftFirstValue: 1985538 false ) 
	#(134 1 #liftFirstValue: 1985539 false ) 
	#(134 1 #liftFirstValue: 1985540 false ) 
	#(134 1 #liftFirstValue: 1985541 false ) 
	#(134 1 #liftFirstValue: 1985542 false ) 
	#(134 1 #liftFirstValue: 1985543 false ) 
	#(134 1 #liftFirstValue: 1985544 false ) 
	#(227 0 #reduceActionFor_Argument__argument__________________1: 11042817 false ) 
	#(230 1 #liftFirstValue: 11161601 false ) 
	#(214 1 #liftFirstValue: 10171394 false ) 
	#(214 1 #liftFirstValue: 10171393 false ) 
	#(152 3 #reduceActionForSetUpAssignation1: 3675137 false ) 
	#(214 1 #liftFirstValue: 10171396 false ) 
	#(213 1 #liftFirstValue: 10066945 false ) 
	#(231 1 #liftFirstValue: 11250689 false ) 
	#(231 1 #liftFirstValue: 11250690 false ) 
	#(230 1 #liftFirstValue: 11161603 false ) 
	#(230 1 #liftFirstValue: 11161602 false ) 
	#(213 1 #liftFirstValue: 10066947 false ) 
	#(213 1 #liftFirstValue: 10066948 false ) 
	#(213 1 #liftFirstValue: 10066949 false ) 
	#(213 1 #liftFirstValue: 10066950 false ) 
	#(219 1 #liftFirstValue: 10465281 false ) 
	#(234 1 #liftFirstValue: 11448321 false ) 
	#(234 1 #liftFirstValue: 11448322 false ) 
	#(234 1 #liftFirstValue: 11448323 false ) 
	#(219 1 #liftFirstValue: 10465282 false ) 
	#(238 1 #liftFirstValue: 11739137 false ) 
	#(238 1 #liftFirstValue: 11739138 false ) 
	#(238 1 #liftFirstValue: 11739139 false ) 
	#(238 1 #liftFirstValue: 11739142 false ) 
	#(238 1 #liftFirstValue: 11739141 false ) 
	#(238 1 #liftFirstValue: 11739140 false ) 
	#(213 1 #liftFirstValue: 10066946 false ) 
	#(248 1 #liftFirstValue: 12826625 false ) 
	#(248 1 #liftFirstValue: 12826626 false ) 
	#(214 1 #liftFirstValue: 10171397 false ) 
	#(296 1 #liftFirstValue: 17355777 false ) 
	#(296 1 #liftFirstValue: 17355778 false ) 
	#(296 1 #liftFirstValue: 17355780 false ) 
	#(296 1 #liftFirstValue: 17355781 false ) 
	#(296 1 #liftFirstValue: 17355779 false ) 
	#(204 3 #reduceActionForVariable4: 9143300 false ) 
	#(163 1 #liftFirstValue: 4491265 false ) 
	#(163 1 #liftFirstValue: 4491266 false ) 
	#(163 1 #liftFirstValue: 4491267 false ) 
	#(163 1 #liftFirstValue: 4491268 false ) 
	#(163 1 #liftFirstValue: 4491269 false ) 
	#(163 1 #liftFirstValue: 4491270 false ) 
	#(163 1 #liftFirstValue: 4491271 false ) 
	#(163 1 #liftFirstValue: 4491272 false ) 
	#(163 1 #liftFirstValue: 4491273 false ) 
	#(163 1 #liftFirstValue: 4491274 false ) 
	#(163 1 #reduceActionForBaseType11: 4491275 false ) 
	#(165 1 #reduceActionForComplexType1: 4699137 false ) 
	#(166 1 #liftFirstValue: 4748289 false ) 
	#(166 1 #liftFirstValue: 4748290 false ) 
	#(167 2 #reduceActionForTypedThing1: 4781057 false ) 
	#(211 2 #reduceActionFor______Variable__variable____2: 9615362 false ) 
	#(180 2 #reduceActionFor___eol___EnumEntry__field___2: 5714946 false ) 
	#(183 2 #reduceActionForParameterList1: 6153217 false ) 
	#(182 1 #reduceActionForParameterPassingStrategy2: 6075394 false ) 
	#(182 1 #liftFirstValue: 6075393 false ) 
	#(188 0 #reduceActionFor_____Expression__default___1: 6370305 false ) 
	#(185 0 #reduceActionFor__eol___ModuleStatement__element____1: 6197249 false ) 
	#(282 1 #liftFirstValue: 16445441 false ) 
	#(159 1 #liftFirstValue: 4321282 false ) 
	#(162 0 #reduceActionFor__eol___ModuleStatement__element____1: 4444161 false ) 
	#(159 1 #liftFirstValue: 4321285 false ) 
	#(159 1 #liftFirstValue: 4321281 false ) 
	#(159 1 #liftFirstValue: 4321283 false ) 
	#(159 1 #liftFirstValue: 4321284 false ) 
	#(251 1 #liftFirstValue: 13220866 false ) 
	#(252 1 #liftFirstValue: 13318145 false ) 
	#(253 1 #liftFirstValue: 13373441 false ) 
	#(253 1 #liftFirstValue: 13373442 false ) 
	#(253 1 #liftFirstValue: 13373443 false ) 
	#(253 1 #liftFirstValue: 13373444 false ) 
	#(253 1 #liftFirstValue: 13373445 false ) 
	#(252 1 #liftFirstValue: 13318146 false ) 
	#(252 1 #liftFirstValue: 13318147 false ) 
	#(260 1 #liftFirstValue: 14373889 false ) 
	#(260 1 #liftFirstValue: 14373890 false ) 
	#(260 1 #liftFirstValue: 14373891 false ) 
	#(251 1 #liftFirstValue: 13220867 false ) 
	#(264 1 #liftFirstValue: 15064065 false ) 
	#(264 1 #liftFirstValue: 15064066 false ) 
	#(264 1 #liftFirstValue: 15064067 false ) 
	#(264 1 #liftFirstValue: 15064068 false ) 
	#(251 1 #liftFirstValue: 13220871 false ) 
	#(251 1 #liftFirstValue: 13220872 false ) 
	#(276 1 #liftFirstValue: 16073729 false ) 
	#(276 1 #liftFirstValue: 16073730 false ) 
	#(251 1 #liftFirstValue: 13220869 false ) 
	#(279 1 #liftFirstValue: 16278529 false ) 
	#(279 1 #liftFirstValue: 16278530 false ) 
	#(279 1 #liftFirstValue: 16278531 false ) 
	#(251 1 #liftFirstValue: 13220870 false ) 
	#(283 1 #liftFirstValue: 16494593 false ) 
	#(284 1 #liftFirstValue: 16515073 false ) 
	#(284 1 #liftFirstValue: 16515074 false ) 
	#(283 1 #liftFirstValue: 16494594 false ) 
	#(287 1 #liftFirstValue: 16668673 false ) 
	#(287 1 #liftFirstValue: 16668674 false ) 
	#(251 1 #liftFirstValue: 13220868 false ) 
	#(290 1 #liftFirstValue: 16845825 false ) 
	#(290 1 #liftFirstValue: 16845826 false ) 
	#(290 1 #liftFirstValue: 16845827 false ) 
	#(251 1 #liftFirstValue: 13220873 false ) 
	#(251 1 #liftFirstValue: 13220865 false ) 
	#(175 2 #reduceActionFor___eol___EnumEntry__field___2: 5362690 false ) 
	#(131 2 #reduceActionFor__eol___ModuleStatement__element___1: 1722369 false ) 
	#(177 4 #reduceActionForEvent2: 5533698 false ) 
	#(236 2 #reduceActionForPositiveOperation1: 11591681 false ) 
	#(235 2 #reduceActionForNegatedOperation1: 11524097 false ) 
	#(249 2 #reduceActionForAddressOfClause1: 12870657 false ) 
	#(232 2 #reduceActionForExplicitCall1: 11300865 false ) 
	#(250 2 #reduceActionForNewClause1: 12943361 false ) 
	#(233 2 #reduceActionForRaiseEvent1: 11365377 false ) 
	#(299 2 #reduceActionForExitDo1: 17508353 false ) 
	#(300 2 #reduceActionForExitFor1: 17543169 false ) 
	#(297 2 #reduceActionForExitFunction1: 17424385 false ) 
	#(301 2 #reduceActionForExitProperty1: 17580033 false ) 
	#(298 2 #reduceActionForExitSub1: 17471489 false ) 
	#(237 2 #reduceActionForNotOperation1: 11660289 false ) 
	#(143 1 #reduceActionFor_HEX_INTEGER___1: 2550785 false ) 
	#(222 2 #reduceActionForImplicitParenthesesLessCall1: 10688513 false ) 
	#(229 0 #reduceActionFor_Argument__argument__________________1: 11103233 false ) 
	#(241 1 #reduceActionForArithmeticOperator1: 12091393 false ) 
	#(241 1 #reduceActionForArithmeticOperator2: 12091394 false ) 
	#(241 1 #reduceActionForArithmeticOperator3: 12091395 false ) 
	#(241 1 #reduceActionForArithmeticOperator4: 12091396 false ) 
	#(239 1 #reduceActionForArithmeticOperator2: 11911170 false ) 
	#(239 1 #reduceActionForArithmeticOperator4: 11911172 false ) 
	#(239 1 #reduceActionForArithmeticOperator3: 11911171 false ) 
	#(239 1 #reduceActionForArithmeticOperator1: 11911169 false ) 
	#(239 1 #reduceActionForComparisonOperator5: 11911173 false ) 
	#(241 1 #reduceActionForArithmeticOperator7: 12091399 false ) 
	#(241 1 #reduceActionForArithmeticOperator6: 12091398 false ) 
	#(241 1 #reduceActionForComparisonOperator5: 12091397 false ) 
	#(243 1 #reduceActionForBooleanOperator1: 12262401 false ) 
	#(243 1 #reduceActionForBooleanOperator4: 12262404 false ) 
	#(239 1 #reduceActionForArithmeticOperator6: 11911174 false ) 
	#(239 1 #reduceActionForArithmeticOperator7: 11911175 false ) 
	#(243 1 #reduceActionForBooleanOperator2: 12262402 false ) 
	#(243 1 #reduceActionForBooleanOperator3: 12262403 false ) 
	#(154 5 #reduceActionForConfiguration1: 3848193 false ) 
	#(157 1 #reduceActionFor_HEX_INTEGER___1: 3911681 false ) 
	#(156 2 #reduceActionFor__eol___ModuleStatement__element____2: 3909634 false ) 
	#(170 3 #reduceActionForTypedAndInstantiatedThing1: 4875265 false ) 
	#(210 2 #reduceActionFor______Variable__variable___1: 9615361 false ) 
	#(181 1 #reduceActionForEnumEntry1: 5786625 false ) 
	#(179 2 #reduceActionFor__eol___ModuleStatement__element___1: 5714945 false ) 
	#(188 1 #reduceActionFor_____Expression__default___2: 6370306 false ) 
	#(186 2 #reduceActionForParameter1: 6254593 false ) 
	#(289 2 #reduceActionForGoSubLine1: 16761857 false ) 
	#(288 2 #reduceActionForGoSubLabel1: 16701441 false ) 
	#(286 2 #reduceActionForGoToLine1: 16603137 false ) 
	#(285 2 #reduceActionForGoToLabel1: 16546817 false ) 
	#(281 2 #reduceActionForResumeNext1: 16396289 false ) 
	#(280 2 #reduceActionForResumeLabel1: 16332801 false ) 
	#(277 2 #reduceActionForLabel1: 16098305 false ) 
	#(160 2 #reduceActionForBlock1: 4414465 false ) 
	#(174 2 #reduceActionFor__eol___ModuleStatement__element___1: 5362689 false ) 
	#(130 5 #reduceActionFormodule2: 1659906 false ) 
	#(200 5 #reduceActionForModuleConstant1: 8796161 false ) 
	#(215 3 #reduceActionForParentheseesExpression1: 10263553 false ) 
	#(143 2 #reduceActionFor_eol__2: 2550786 false ) 
	#(226 1 #reduceActionFor_Argument__argument_________________1: 11042817 false ) 
	#(226 1 #reduceActionFor_Argument__argument_________________2: 11042818 false ) 
	#(224 1 #reduceActionForArgument1: 10926081 false ) 
	#(227 2 #reduceActionFor_Argument__argument__________________2: 11042818 false ) 
	#(225 2 #reduceActionForArgumentList1: 11027457 false ) 
	#(220 3 #reduceActionForDictionaryAccess1: 10514433 false ) 
	#(245 3 #reduceActionForConcatenationOperation1: 12417025 false ) 
	#(221 3 #reduceActionForMemberAccess1: 10606593 false ) 
	#(247 3 #reduceActionForExplicitAssignement3: 12606467 false ) 
	#(246 3 #reduceActionForAssignementOrEquals1: 12514305 false ) 
	#(240 3 #reduceActionForComparisonOperation1: 11985921 false ) 
	#(242 3 #reduceActionForArithmeticOperation1: 12156929 false ) 
	#(244 3 #reduceActionForBooleanBinaryOperation1: 12311553 false ) 
	#(157 2 #reduceActionFor_eol__2: 3911682 false ) 
	#(155 2 #reduceActionFor__eol___ModuleStatement__element___1: 3909633 false ) 
	#(189 6 #reduceActionForDeclareSub1: 6630401 false ) 
	#(169 0 #reduceActionFor__eol___ModuleStatement__element____1: 4832257 false ) 
	#(178 6 #reduceActionForDefineEnum1: 5642241 false ) 
	#(186 3 #reduceActionForParameter9: 6254601 false ) 
	#(186 3 #reduceActionForParameter3: 6254595 false ) 
	#(187 2 #reduceActionFor______Variable__variable___1: 6370305 false ) 
	#(186 3 #reduceActionForParameter2: 6254594 false ) 
	#(186 3 #reduceActionForParameter5: 6254597 false ) 
	#(183 4 #reduceActionForParameterList2: 6153218 false ) 
	#(185 2 #reduceActionFor______Variable__variable____2: 6197250 false ) 
	#(291 3 #reduceActionForOnErrorGoTo1: 16906241 false ) 
	#(293 3 #reduceActionForOnExpressionGo1: 17040385 false ) 
	#(278 3 #reduceActionForLabelSub1: 16147457 false ) 
	#(162 2 #reduceActionFor___eol___EnumEntry__field___2: 4444162 false ) 
	#(194 6 #reduceActionForDefineSub1: 7543809 false ) 
	#(173 6 #reduceActionForDefineType1: 5294081 false ) 
	#(176 2 #reduceActionForTypeEntry1: 5434369 false ) 
	#(200 6 #reduceActionForModuleConstant2: 8796162 false ) 
	#(247 4 #reduceActionForExplicitAssignement2: 12606466 false ) 
	#(144 1 #reduceActionFor_HEX_INTEGER___1: 2570241 false ) 
	#(224 2 #reduceActionForArgument2: 10926082 false ) 
	#(224 2 #reduceActionForArgument3: 10926083 false ) 
	#(226 2 #reduceActionFor_Argument__argument_________________3: 11042819 false ) 
	#(226 2 #reduceActionFor_Argument__argument_________________4: 11042820 false ) 
	#(225 3 #reduceActionForArgumentList2: 11027458 false ) 
	#(228 1 #reduceActionFor_Argument__argument_________________1: 11103233 false ) 
	#(228 1 #reduceActionFor______________Argument__argument____3: 11103235 false ) 
	#(229 2 #reduceActionFor_Argument__argument__________________2: 11103234 false ) 
	#(223 4 #reduceActionForProcedureCallOrArrayAccess1: 10804225 false ) 
	#(190 7 #reduceActionForDeclareFunction1: 6820865 false ) 
	#(181 3 #reduceActionForEnumEntry2: 5786626 false ) 
	#(186 4 #reduceActionForParameter11: 6254603 false ) 
	#(186 4 #reduceActionForParameter10: 6254602 false ) 
	#(186 4 #reduceActionForParameter13: 6254605 false ) 
	#(186 4 #reduceActionForParameter4: 6254596 false ) 
	#(186 4 #reduceActionForParameter7: 6254599 false ) 
	#(186 4 #reduceActionForParameter6: 6254598 false ) 
	#(184 2 #reduceActionFor______Variable__variable___1: 6197249 false ) 
	#(193 7 #reduceActionForDefineFunction1: 7333889 false ) 
	#(195 7 #reduceActionForModulePropertyGet1: 7723009 false ) 
	#(197 7 #reduceActionForModulePropertyLet1: 8157185 false ) 
	#(196 7 #reduceActionForModulePropertySet1: 7947265 false ) 
	#(254 4 #reduceActionForInfinityLoop1: 13451265 false ) 
	#(265 4 #reduceActionForIfThenColon1: 15127553 false ) 
	#(292 4 #reduceActionForOnErrorResumeNext1: 16963585 false ) 
	#(278 4 #reduceActionForLabelSub2: 16147458 false ) 
	#(278 4 #reduceActionForLabelSub3: 16147459 false ) 
	#(161 2 #reduceActionFor__eol___ModuleStatement__element___1: 4444161 false ) 
	#(194 7 #reduceActionForDefineSub2: 7543810 false ) 
	#(189 7 #reduceActionForDeclareSub3: 6630403 false ) 
	#(178 7 #reduceActionForDefineEnum2: 5642242 false ) 
	#(194 7 #reduceActionForDefineSub5: 7543813 false ) 
	#(173 7 #reduceActionForDefineType2: 5294082 false ) 
	#(194 7 #reduceActionForDefineSub3: 7543811 false ) 
	#(144 2 #reduceActionFor_eol__2: 2570242 false ) 
	#(224 3 #reduceActionForArgument4: 10926084 false ) 
	#(228 2 #reduceActionFor______________Argument__argument____2: 11103234 false ) 
	#(228 2 #reduceActionFor_Argument__argument_________________4: 11103236 false ) 
	#(189 8 #reduceActionForDeclareSub2: 6630402 false ) 
	#(167 6 #reduceActionForTypedThing2: 4781058 false ) 
	#(169 2 #reduceActionFor______Variable__variable____2: 4832258 false ) 
	#(186 5 #reduceActionForParameter12: 6254604 false ) 
	#(186 5 #reduceActionForParameter15: 6254607 false ) 
	#(186 5 #reduceActionForParameter14: 6254606 false ) 
	#(186 5 #reduceActionForParameter8: 6254600 false ) 
	#(193 8 #reduceActionForDefineFunction2: 7333890 false ) 
	#(195 8 #reduceActionForModulePropertyGet2: 7723010 false ) 
	#(195 8 #reduceActionForModulePropertyGet3: 7723011 false ) 
	#(197 8 #reduceActionForModulePropertyLet2: 8157186 false ) 
	#(196 8 #reduceActionForModulePropertySet2: 7947266 false ) 
	#(254 5 #reduceActionForInfinityLoop2: 13451266 false ) 
	#(254 5 #reduceActionForInfinityLoop3: 13451267 false ) 
	#(259 5 #reduceActionForWhileWend1: 14210049 false ) 
	#(278 5 #reduceActionForLabelSub4: 16147460 false ) 
	#(176 4 #reduceActionForTypeEntry2: 5434370 false ) 
	#(190 8 #reduceActionForDeclareFunction3: 6820867 false ) 
	#(193 8 #reduceActionForDefineFunction5: 7333893 false ) 
	#(195 8 #reduceActionForModulePropertyGet9: 7723017 false ) 
	#(197 8 #reduceActionForModulePropertyLet5: 8157189 false ) 
	#(196 8 #reduceActionForModulePropertySet5: 7947269 false ) 
	#(194 8 #reduceActionForDefineSub6: 7543814 false ) 
	#(194 8 #reduceActionForDefineSub7: 7543815 false ) 
	#(193 8 #reduceActionForDefineFunction3: 7333891 false ) 
	#(195 8 #reduceActionForModulePropertyGet5: 7723013 false ) 
	#(197 8 #reduceActionForModulePropertyLet3: 8157187 false ) 
	#(196 8 #reduceActionForModulePropertySet3: 7947267 false ) 
	#(194 8 #reduceActionForDefineSub4: 7543812 false ) 
	#(190 9 #reduceActionForDeclareFunction2: 6820866 false ) 
	#(170 7 #reduceActionForTypedAndInstantiatedThing2: 4875266 false ) 
	#(168 2 #reduceActionFor______Variable__variable___1: 4832257 false ) 
	#(186 6 #reduceActionForParameter16: 6254608 false ) 
	#(195 9 #reduceActionForModulePropertyGet4: 7723012 false ) 
	#(255 6 #reduceActionForWhileTrue1: 13575169 false ) 
	#(257 6 #reduceActionForDoWhileTrue1: 13879297 false ) 
	#(254 6 #reduceActionForInfinityLoop4: 13451268 false ) 
	#(270 1 #reduceActionFor_HEX_INTEGER___1: 15692801 false ) 
	#(269 1 #liftFirstValue: 15692801 false ) 
	#(271 1 #liftFirstValue: 15794177 false ) 
	#(271 1 #liftFirstValue: 15794178 false ) 
	#(259 6 #reduceActionForWhileWend2: 14210050 false ) 
	#(259 6 #reduceActionForWhileWend3: 14210051 false ) 
	#(295 6 #reduceActionForWith1: 17211393 false ) 
	#(189 9 #reduceActionForDeclareSub4: 6630404 false ) 
	#(193 9 #reduceActionForDefineFunction6: 7333894 false ) 
	#(195 9 #reduceActionForModulePropertyGet10: 7723018 false ) 
	#(195 9 #reduceActionForModulePropertyGet11: 7723019 false ) 
	#(197 9 #reduceActionForModulePropertyLet6: 8157190 false ) 
	#(196 9 #reduceActionForModulePropertySet6: 7947270 false ) 
	#(193 9 #reduceActionForDefineFunction7: 7333895 false ) 
	#(195 9 #reduceActionForModulePropertyGet13: 7723021 false ) 
	#(197 9 #reduceActionForModulePropertyLet7: 8157191 false ) 
	#(196 9 #reduceActionForModulePropertySet7: 7947271 false ) 
	#(194 9 #reduceActionForDefineSub8: 7543816 false ) 
	#(193 9 #reduceActionForDefineFunction4: 7333892 false ) 
	#(195 9 #reduceActionForModulePropertyGet6: 7723014 false ) 
	#(195 9 #reduceActionForModulePropertyGet7: 7723015 false ) 
	#(197 9 #reduceActionForModulePropertyLet4: 8157188 false ) 
	#(196 9 #reduceActionForModulePropertySet4: 7947268 false ) 
	#(256 7 #reduceActionForUntilTrue1: 13729793 false ) 
	#(255 7 #reduceActionForWhileTrue2: 13575170 false ) 
	#(255 7 #reduceActionForWhileTrue3: 13575171 false ) 
	#(257 7 #reduceActionForDoWhileTrue2: 13879298 false ) 
	#(258 7 #reduceActionForDoUntilTrue1: 14035969 false ) 
	#(257 7 #reduceActionForDoWhileTrue3: 13879299 false ) 
	#(266 7 #reduceActionForIfThen1: 15217665 false ) 
	#(270 2 #reduceActionFor_eol__2: 15692802 false ) 
	#(259 7 #reduceActionForWhileWend4: 14210052 false ) 
	#(295 7 #reduceActionForWith2: 17211394 false ) 
	#(295 7 #reduceActionForWith3: 17211395 false ) 
	#(190 10 #reduceActionForDeclareFunction4: 6820868 false ) 
	#(195 10 #reduceActionForModulePropertyGet12: 7723020 false ) 
	#(193 10 #reduceActionForDefineFunction8: 7333896 false ) 
	#(195 10 #reduceActionForModulePropertyGet14: 7723022 false ) 
	#(195 10 #reduceActionForModulePropertyGet15: 7723023 false ) 
	#(197 10 #reduceActionForModulePropertyLet8: 8157192 false ) 
	#(196 10 #reduceActionForModulePropertySet8: 7947272 false ) 
	#(195 10 #reduceActionForModulePropertyGet8: 7723016 false ) 
	#(256 8 #reduceActionForUntilTrue2: 13729794 false ) 
	#(255 8 #reduceActionForWhileTrue4: 13575172 false ) 
	#(258 8 #reduceActionForDoUntilTrue2: 14035970 false ) 
	#(257 8 #reduceActionForDoWhileTrue4: 13879300 false ) 
	#(261 8 #reduceActionForForEach1: 14418945 false ) 
	#(275 0 #reduceActionFor__eol___ModuleStatement__element____1: 15994881 false ) 
	#(266 8 #reduceActionForIfThen2: 15217666 false ) 
	#(266 8 #reduceActionForIfThen3: 15217667 false ) 
	#(295 8 #reduceActionForWith4: 17211396 false ) 
	#(195 11 #reduceActionForModulePropertyGet16: 7723024 false ) 
	#(261 9 #reduceActionForForEach2: 14418946 false ) 
	#(261 9 #reduceActionForForEach3: 14418947 false ) 
	#(261 9 #reduceActionForForEach5: 14418949 false ) 
	#(262 9 #reduceActionForForNext1: 14616577 false ) 
	#(273 4 #reduceActionForElseIfColon1: 15940609 false ) 
	#(266 9 #reduceActionForIfThen4: 15217668 false ) 
	#(261 10 #reduceActionForForEach4: 14418948 false ) 
	#(261 10 #reduceActionForForEach6: 14418950 false ) 
	#(261 10 #reduceActionForForEach7: 14418951 false ) 
	#(262 10 #reduceActionForForNext2: 14616578 false ) 
	#(262 10 #reduceActionForForNext3: 14616579 false ) 
	#(267 10 #reduceActionForIfThenElse1: 15364097 false ) 
	#(272 5 #reduceActionForElseIfBlock1: 15832065 false ) 
	#(274 1 #reduceActionFor___Expression__ifMatch__________1: 15994881 false ) 
	#(275 2 #reduceActionFor______Variable__variable____2: 15994882 false ) 
	#(142 11 #reduceActionForGuidLiteral1: 2534401 false ) 
	#(261 11 #reduceActionForForEach8: 14418952 false ) 
	#(263 11 #reduceActionForForStepNext1: 14816257 false ) 
	#(262 11 #reduceActionForForNext4: 14616580 false ) 
	#(267 11 #reduceActionForIfThenElse2: 15364098 false ) 
	#(267 11 #reduceActionForIfThenElse3: 15364099 false ) 
	#(272 6 #reduceActionForElseIfBlock2: 15832066 false ) 
	#(274 2 #reduceActionFor___Expression__ifMatch__________2: 15994882 false ) 
	#(267 11 #reduceActionForIfThenElse5: 15364101 false ) 
	#(268 11 #reduceActionForIfThenElseIfElse1: 15599617 false ) 
	#(267 11 #reduceActionForIfThenElse9: 15364105 false ) 
	#(263 12 #reduceActionForForStepNext2: 14816258 false ) 
	#(263 12 #reduceActionForForStepNext3: 14816259 false ) 
	#(267 12 #reduceActionForIfThenElse4: 15364100 false ) 
	#(267 12 #reduceActionForIfThenElse6: 15364102 false ) 
	#(267 12 #reduceActionForIfThenElse7: 15364103 false ) 
	#(268 12 #reduceActionForIfThenElseIfElse2: 15599618 false ) 
	#(267 12 #reduceActionForIfThenElse10: 15364106 false ) 
	#(267 12 #reduceActionForIfThenElse11: 15364107 false ) 
	#(267 12 #reduceActionForIfThenElse13: 15364109 false ) 
	#(268 12 #reduceActionForIfThenElseIfElse3: 15599619 false ) 
	#(263 13 #reduceActionForForStepNext4: 14816260 false ) 
	#(267 13 #reduceActionForIfThenElse8: 15364104 false ) 
	#(267 13 #reduceActionForIfThenElse12: 15364108 false ) 
	#(267 13 #reduceActionForIfThenElse14: 15364110 false ) 
	#(267 13 #reduceActionForIfThenElse15: 15364111 false ) 
	#(268 13 #reduceActionForIfThenElseIfElse4: 15599620 false ) 
	#(267 14 #reduceActionForIfThenElse16: 15364112 false )
	).
]

{ #category : #'generated-accessing' }
VBParser class >> scannerClass [
	^VBScanner
]

{ #category : #generated }
VBParser class >> startingStateFormodule [
	^ 1
]

{ #category : #generated }
VBParser class >> symbolNames [
	^ #('"!"' '"!="' '"&"' '"&&"' '"("' '")"' '"*"' '"+"' '","' '"-"' '"."' '"/"' '":"' '":="' '";"' '"<"' '"<="' '"<>"' '"="' '">"' '">="' '"AddressOf"' '"Call"' '"Mod"' '"NEW"' '"RaiseEvent"' '"WithEvents"' '"["' '"\"' '"^"' '"alias"' '"and"' '"as"' '"attribute"' '"begin"' '"binary"' '"boolean"' '"byref"' '"byte"' '"byval"' '"class"' '"collection"' '"compare"' '"const"' '"database"' '"date"' '"declare"' '"delete"' '"dim"' '"do"' '"double"' '"each"' '"else"' '"elseif"' '"end"' '"enum"' '"eqv"' '"error"' '"event"' '"exit"' '"explicit"' '"for"' '"friend"' '"function"' '"get"' '"global"' '"gosub"' '"goto"' '"if"' '"in"' '"integer"' '"is"' '"let"' '"lib"' '"like"' '"long"' '"loop"' '"module"' '"next"' '"not"' '"object"' '"on"' '"option"' '"optional"' '"or"' '"paramarray"' '"preserve"' '"private"' '"property"' '"public"' '"redim"' '"resume"' '"return"' '"set"' '"single"' '"static"' '"step"' '"string"' '"sub"' '"text"' '"then"' '"to"' '"type"' '"until"' '"variant"' '"version"' '"wend"' '"while"' '"with"' '"xor"' '"{"' '"||"' '"}"' '"~"' '<lineContinuation>' '<HEX_INTEGER>' '<DATE_LITERAL>' '<COLOR_LITERAL>' '<INTEGER_LITERAL>' '<FLOATING_POINT_LITERAL>' '<BOOLEAN_LITERAL>' '<STRING_LITERAL>' '<NULL_LITERAL>' '<IDENTIFIER>' '<HASH_IDENTIFIER>' '<whitespace>' '<eol>' '<comment>' 'B e g i n' 'module' '(<eol>* ModuleStatement ''element'' )' '(<eol>* ModuleStatement ''element'' )*' '<eol>*' 'literal' 'IntegerLiteral' 'ColorLiteral' 'DateLiteral' 'FloatLiteral' 'BooleanLiteral' 'StringLiteral' 'Null' 'GuidLiteral' '<HEX_INTEGER> +' '<HEX_INTEGER>+' 'Identifier' 'HashIdentifier' 'SimpleIdentifier' 'HeadlessIdentifier' 'QualifiedIdentifier' 'header' 'Option' 'SetUpAssignation' 'Attribute' 'Configuration' '( <eol>+ SetUpAssignation ''setting'')' '( <eol>+ SetUpAssignation ''setting'')*' '<eol>+' 'ModuleStatement' 'Statement' 'Block' '(<eol>* Statement ''statement''  )' '(<eol>* Statement ''statement''  )*' 'BaseType' 'Visibility' 'ComplexType' 'Type' 'TypedThing' '( "," literal ''size'')' '( "," literal ''size'')*' 'TypedAndInstantiatedThing' 'AsType' 'Types' 'DefineType' '( <eol>* TypeEntry ''field'' )' '( <eol>* TypeEntry ''field'' )*' 'TypeEntry' 'Event' 'DefineEnum' '( <eol>* EnumEntry ''field'')' '( <eol>* EnumEntry ''field'')*' 'EnumEntry' 'ParameterPassingStrategy' 'ParameterList' '( "," Parameter ''parameter'')' '( "," Parameter ''parameter'')*' 'Parameter' '("=" Expression ''default'')' '("=" Expression ''default'')?' 'DeclareSub' 'DeclareFunction' 'DeclareExternal' 'Modifier' 'DefineFunction' 'DefineSub' 'ModulePropertyGet' 'ModulePropertySet' 'ModulePropertyLet' 'BehaviourDefinition' 'ModuleProperty' 'ModuleConstant' 'DefineVariable' 'ReDefineVariable' 'StaticVariable' 'Variable' 'ModuleProperties' 'DefineVariables' 'ReDefineVariables' 'StaticVariables' 'VariableList' '(","  Variable ''variable'' )' '(","  Variable ''variable'' )*' 'VariableDefinition' 'ValueStatement' 'Expression' 'ParentheseesExpression' 'ValueStatementList' '("," ValueStatement ''value'' )' '("," ValueStatement ''value'' ) *' 'Operation' 'DictionaryAccess' 'MemberAccess' 'ImplicitParenthesesLessCall' 'ProcedureCallOrArrayAccess' 'Argument' 'ArgumentList' '(Argument ''argument'' ? ("," | ";" ))' '(Argument ''argument'' ? ("," | ";" ))*' '( ("," | ";" )Argument ''argument'' ?)' '( ("," | ";" )Argument ''argument'' ?)*' 'ImplicitCall' 'StateAccess' 'ExplicitCall' 'RaiseEvent' 'UnaryOperation' 'NegatedOperation' 'PositiveOperation' 'NotOperation' 'BinaryOperation' 'ComparisonOperator' 'ComparisonOperation' 'ArithmeticOperator' 'ArithmeticOperation' 'BooleanOperator' 'BooleanBinaryOperation' 'ConcatenationOperation' 'AssignementOrEquals' 'ExplicitAssignement' 'ValueClause' 'AddressOfClause' 'NewClause' 'ControlFlowStatement' 'Loops' 'DoLoop' 'InfinityLoop' 'WhileTrue' 'UntilTrue' 'DoWhileTrue' 'DoUntilTrue' 'WhileWend' 'ForLoop' 'ForEach' 'ForNext' 'ForStepNext' 'If' 'IfThenColon' 'IfThen' 'IfThenElse' 'IfThenElseIfElse' '(ElseIf ''case'')' '(ElseIf ''case'') +' 'ElseIf' 'ElseIfBlock' 'ElseIfColon' '(  Expression ''ifMatch'' ?  ":" )' '(  Expression ''ifMatch'' ?  ":" )*' 'To' 'Label' 'LabelSub' 'Resume' 'ResumeLabel' 'ResumeNext' 'ResumeEmpty' 'Go' 'GoTo' 'GoToLabel' 'GoToLine' 'GoSub' 'GoSubLabel' 'GoSubLine' 'On' 'OnErrorGoTo' 'OnErrorResumeNext' 'OnExpressionGo' 'Error' 'With' 'Exits' 'ExitFunction' 'ExitSub' 'ExitDo' 'ExitFor' 'ExitProperty' 'E O F' 'error')
]

{ #category : #generated }
VBParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBModuleNode #VBModuleNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBIntegerLiteralNode #VBColorLiteralNode #VBDateLiteralNode #VBFloatLiteralNode #VBBooleanLiteralNode #VBStringLiteralNode #VBNullNode #VBGuidLiteralNode #OrderedCollection #OrderedCollection #VBProgramNode #VBHashIdentifierNode #VBSimpleIdentifierNode #VBHeadlessIdentifierNode #VBQualifiedIdentifierNode #VBHeaderNode #VBProgramNode #VBSetUpAssignationNode #VBModuleAttributeNode #VBConfigurationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #Object #VBBlockNode #OrderedCollection #OrderedCollection #Object #SmaCCToken #VBComplexTypeNode #Object #VBAsTypeNode #OrderedCollection #OrderedCollection #VBAsTypeAndNewNode #VBProgramNode #VBProgramNode #VBDefineTypeNode #OrderedCollection #OrderedCollection #VBTypeEntryNode #VBEventNode #VBDefineEnumNode #OrderedCollection #OrderedCollection #VBEnumEntryNode #Object #VBParameterListNode #OrderedCollection #OrderedCollection #VBParameterNode #OrderedCollection #OrderedCollection #VBExternalSubNode #VBExternalFunctionNode #VBProgramNode #SmaCCToken #VBFunctionDefinitionNode #VBSubDefinitionNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBProgramNode #VBModulePropertyNode #VBModuleConstantNode #VBDimVariableNode #VBReDimVariableNode #VBStaticVariableNode #VBVariableNode #VBModuleMultiplePropertiesNode #VBDimMultipleVariablesNode #VBReDimMultipleVariablesNode #VBStaticMultipleVariablesNode #VBVariableListNode #OrderedCollection #OrderedCollection #VBProgramNode #Object #Object #VBParentheseesExpressionNode #VBValueStatementListNode #OrderedCollection #OrderedCollection #Object #VBDictionaryAccessNode #VBMemberAccessNode #VBImplicitParenthesesLessCallNode #VBProcedureCallOrArrayAccessNode #VBArgumentNode #VBArgumentListNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBProgramNode #VBExplicitCallNode #VBRaiseEventNode #VBProgramNode #VBNegatedOperationNode #VBPositiveOperationNode #VBNotOperationNode #Object #OrderedCollection #VBComparisonOperationNode #OrderedCollection #VBArithmeticOperationNode #OrderedCollection #VBArithmeticOperationNode #VBConcatenationOperationNode #VBAssignementOrEqualsNode #Object #VBProgramNode #VBAddressOfClauseNode #VBNewClauseNode #Object #VBProgramNode #VBProgramNode #VBInfinityLoopNode #VBWhileTrueNode #VBUntilTrueNode #VBDoWhileTrueNode #VBDoUntilTrueNode #VBWhileWendNode #VBProgramNode #VBForEachNode #VBForNextNode #VBForStepNextNode #VBProgramNode #VBIfThenColonNode #VBIfThenNode #VBIfThenElseNode #VBIfThenElseIfElseNode #VBProgramNode #OrderedCollection #VBProgramNode #VBElseIfBlockNode #VBElseIfColonNode #OrderedCollection #OrderedCollection #VBProgramNode #VBGoToLabelNode #VBGoSubLabelNode #Object #VBResumeLabelNode #VBResumeNextNode #SmaCCToken #VBProgramNode #VBProgramNode #VBGoToLabelNode #VBGoToLineNode #VBProgramNode #VBGoSubLabelNode #VBGoSubLineNode #VBProgramNode #VBOnErrorGoToNode #VBOnErrorResumeNextNode #VBOnExpressionGoNode #VBErrorNode #VBWithNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBParser class >> transitionTable [
^#(
#[1 0 9 0 34 0 13 0 35 0 17 0 47 0 21 0 49 0 25 0 56 0 29 0 59 0 105 0 63 0 37 0 64 0 105 0 66 0 45 0 83 0 105 0 88 0 53 0 89 0 105 0 90 0 61 0 91 0 65 0 96 0 69 0 99 0 73 0 103 0 77 0 106 0 81 0 130 0 85 0 150 0 101 0 151 0 101 0 153 0 101 0 154 0 101 0 158 0 105 0 164 0 101 0 172 0 101 0 173 0 101 0 177 0 101 0 178 0 101 0 189 0 101 0 190 0 101 0 191 0 137 0 192 0 101 0 193 0 101 0 194 0 101 0 195 0 101 0 196 0 101 0 197 0 101 0 198 0 101 0 199 0 101 0 200 0 101 0 201 0 101 0 202 0 101 0 203 0 101 0 205 0 101 0 206 0 101 0 207 0 101 0 208 0 101 0 212] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 0 217 0 145 0 217 0 146 0 217 0 147 0 217 0 148 0 217 0 149 0 237 0 152] 
#[1 0 6 0 11 0 6 0 124 0 6 0 125 0 6 0 127 0 241 0 133] 
#[1 0 245 0 64 0 249 0 99] 
#[1 0 205 0 11 0 253 0 27 0 209 0 124 0 213 0 125 1 1 0 145 1 1 0 146 1 1 0 147 1 1 0 148 1 1 0 149 1 5 0 204 1 9 0 209] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 13 0 145 1 13 0 146 1 13 0 147 1 13 0 148 1 13 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 149] 
#[0 0 10 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 103 0 124 0 125] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 21 0 145 1 21 0 146 1 21 0 147 1 21 0 148 1 21 0 149] 
#[0 0 14 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 103 0 124 0 125] 
#[1 1 25 0 43 1 29 0 61 1 33 0 88 1 37 0 119 1 41 0 135] 
#[0 0 18 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 103 0 124 0 125] 
#[1 1 45 0 65 1 49 0 73 1 53 0 94] 
#[0 0 22 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 103 0 124 0 125] 
#[1 0 205 0 11 0 253 0 27 1 57 0 87 0 209 0 124 0 213 0 125 1 1 0 145 1 1 0 146 1 1 0 147 1 1 0 148 1 1 0 149 1 61 0 204 1 65 0 209] 
#[1 0 205 0 11 0 253 0 27 0 26 0 64 0 26 0 89 0 26 0 99 0 209 0 124 0 213 0 125 1 1 0 145 1 1 0 146 1 1 0 147 1 1 0 148 1 1 0 149 1 69 0 204 1 73 0 209] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 77 0 145 1 77 0 146 1 77 0 147 1 77 0 148 1 77 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 81 0 145 1 81 0 146 1 81 0 147 1 81 0 148 1 81 0 149] 
#[1 1 85 0 120 1 89 0 138] 
#[0 0 0 1 46] 
#[1 0 6 0 34 0 6 0 35 0 6 0 47 0 6 0 49 0 6 0 56 0 6 0 59 0 6 0 63 0 6 0 64 0 6 0 66 0 6 0 83 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 96 0 6 0 99 0 6 0 103 0 6 0 127 1 93 0 133] 
#[0 0 30 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 34 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 38 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 0 42 0 34 0 42 0 35 0 42 0 47 0 42 0 49 0 42 0 56 0 42 0 59 0 42 0 63 0 42 0 64 0 42 0 66 0 42 0 83 0 42 0 88 0 42 0 89 0 42 0 90 0 42 0 91 0 42 0 96 0 42 0 99 0 42 0 103 0 42 0 127 1 97 0 132 0 42 1 46] 
#[1 0 205 0 11 0 253 0 27 1 101 0 44 1 105 0 47 1 109 0 56 1 113 0 59 1 117 0 64 1 121 0 89 1 137 0 96 1 129 0 99 1 133 0 103 0 209 0 124 0 213 0 125 1 1 0 145 1 1 0 146 1 1 0 147 1 1 0 148 1 1 0 149 1 137 0 192 1 141 0 204 1 145 0 209] 
#[0 0 46 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 50 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 54 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 58 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 62 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 66 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 70 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 1 149 0 64 1 153 0 89 1 157 0 99] 
#[0 0 74 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 78 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 82 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 86 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 90 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 94 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 98 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 106 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 118 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 122 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 126 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 130 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 134 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 161 0 145 1 161 0 146 1 161 0 147 1 161 0 148 1 161 0 149] 
#[0 0 138 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 142 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 165 0 11 1 169 0 19] 
#[0 0 146 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 150 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 154 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 158 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 162 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 173 0 127 0 217 0 145 0 217 0 146 0 217 0 147 0 217 0 148 0 217 0 149 1 177 0 152] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 181 0 145 1 181 0 146 1 181 0 147 1 181 0 148 1 181 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 185 0 145 1 185 0 146 1 185 0 147 1 185 0 148 1 185 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 189 0 145 1 189 0 146 1 189 0 147 1 189 0 148 1 189 0 149] 
#[1 0 166 0 5 0 166 0 8 0 166 0 9 0 166 0 10 1 165 0 11 0 166 0 22 0 166 0 23 0 166 0 25 0 166 0 26 1 193 0 33 0 166 0 34 0 166 0 35 0 166 0 47 0 166 0 49 0 166 0 50 0 166 0 53 0 166 0 54 0 166 0 55 0 166 0 56 0 166 0 59 0 166 0 60 0 166 0 62 0 166 0 63 0 166 0 64 0 166 0 66 0 166 0 67 0 166 0 68 0 166 0 69 0 166 0 73 0 166 0 77 0 166 0 79 0 166 0 80 0 166 0 82 0 166 0 83 0 166 0 88 0 166 0 89 0 166 0 90 0 166 0 91 0 166 0 92 0 166 0 93 0 166 0 94 0 166 0 96 0 166 0 99 0 166 0 103 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 111 0 166 0 117 0 166 0 118 0 166 0 119 0 166 0 120 0 166 0 121 0 166 0 122 0 166 0 123 0 166 0 124 0 166 0 125 0 166 0 127 1 205 0 167 1 205 0 170 1 205 0 171 0 166 1 46] 
#[1 0 7 0 5 0 7 0 8 0 174 0 9 0 7 0 10 0 7 0 11 0 7 0 22 0 7 0 23 0 7 0 25 0 7 0 26 0 7 0 34 0 7 0 35 0 7 0 47 0 7 0 49 0 7 0 50 0 7 0 53 0 7 0 54 0 7 0 55 0 7 0 56 0 7 0 59 0 7 0 60 0 7 0 62 0 7 0 63 0 7 0 64 0 7 0 66 0 7 0 67 0 7 0 68 0 7 0 69 0 7 0 73 0 7 0 77 0 7 0 79 0 7 0 80 0 7 0 82 0 7 0 83 0 7 0 88 0 7 0 89 0 7 0 90 0 7 0 91 0 7 0 92 0 7 0 93 0 7 0 94 0 7 0 96 0 7 0 99 0 7 0 103 0 7 0 107 0 7 0 108 0 7 0 109 0 7 0 111 0 7 0 117 0 7 0 118 0 7 0 119 0 7 0 120 0 7 0 121 0 7 0 122 0 7 0 123 0 7 0 124 0 7 0 125 0 7 0 127 1 209 0 211 0 7 1 46] 
#[0 0 178 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 165 0 11 0 182 0 55 0 182 0 124 0 182 0 125 0 182 0 127 1 213 0 180] 
#[1 1 217 0 5 1 165 0 11 1 221 0 183] 
#[1 1 217 0 5 1 165 0 11 1 225 0 183] 
#[1 1 229 0 36 1 233 0 45 1 237 0 100] 
#[0 0 186 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 1 241 0 78] 
#[0 0 190 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 194 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 245 0 145 1 245 0 146 1 245 0 147 1 245 0 148 1 245 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 249 0 145 1 249 0 146 1 249 0 147 1 249 0 148 1 249 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 1 253 0 145 1 253 0 146 1 253 0 147 1 253 0 148 1 253 0 149] 
#[1 0 205 0 11 0 253 0 27 0 209 0 124 0 213 0 125 1 1 0 145 1 1 0 146 1 1 0 147 1 1 0 148 1 1 0 149 2 1 0 204 2 5 0 209] 
#[1 0 11 0 5 0 11 0 8 0 174 0 9 0 11 0 10 0 11 0 11 0 11 0 22 0 11 0 23 0 11 0 25 0 11 0 26 0 11 0 34 0 11 0 35 0 11 0 47 0 11 0 49 0 11 0 50 0 11 0 53 0 11 0 54 0 11 0 55 0 11 0 56 0 11 0 59 0 11 0 60 0 11 0 62 0 11 0 63 0 11 0 64 0 11 0 66 0 11 0 67 0 11 0 68 0 11 0 69 0 11 0 73 0 11 0 77 0 11 0 79 0 11 0 80 0 11 0 82 0 11 0 83 0 11 0 88 0 11 0 89 0 11 0 90 0 11 0 91 0 11 0 92 0 11 0 93 0 11 0 94 0 11 0 96 0 11 0 99 0 11 0 103 0 11 0 107 0 11 0 108 0 11 0 109 0 11 0 111 0 11 0 117 0 11 0 118 0 11 0 119 0 11 0 120 0 11 0 121 0 11 0 122 0 11 0 123 0 11 0 124 0 11 0 125 0 11 0 127 1 209 0 211 0 11 1 46] 
#[0 0 202 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 15 0 5 0 15 0 8 0 174 0 9 0 15 0 10 0 15 0 11 0 15 0 22 0 15 0 23 0 15 0 25 0 15 0 26 0 15 0 34 0 15 0 35 0 15 0 47 0 15 0 49 0 15 0 50 0 15 0 53 0 15 0 54 0 15 0 55 0 15 0 56 0 15 0 59 0 15 0 60 0 15 0 62 0 15 0 63 0 15 0 64 0 15 0 66 0 15 0 67 0 15 0 68 0 15 0 69 0 15 0 73 0 15 0 77 0 15 0 79 0 15 0 80 0 15 0 82 0 15 0 83 0 15 0 88 0 15 0 89 0 15 0 90 0 15 0 91 0 15 0 92 0 15 0 93 0 15 0 94 0 15 0 96 0 15 0 99 0 15 0 103 0 15 0 107 0 15 0 108 0 15 0 109 0 15 0 111 0 15 0 117 0 15 0 118 0 15 0 119 0 15 0 120 0 15 0 121 0 15 0 122 0 15 0 123 0 15 0 124 0 15 0 125 0 15 0 127 1 209 0 211 0 15 1 46] 
#[0 0 210 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 2 9 0 133 2 13 0 183] 
#[1 1 165 0 11 0 214 0 55 0 214 0 124 0 214 0 125 0 214 0 127 2 17 0 175] 
#[0 0 218 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 41 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 222 0 34 0 222 0 35 2 21 0 41 0 222 0 47 0 222 0 49 0 222 0 56 0 222 0 59 0 222 0 63 0 222 0 64 0 222 0 66 0 222 0 83 0 222 0 88 0 222 0 89 0 222 0 90 0 222 0 91 0 222 0 96 0 222 0 99 0 222 0 103 0 222 0 127] 
#[1 0 9 0 34 0 13 0 35 0 17 0 47 0 21 0 49 0 25 0 56 0 29 0 59 0 105 0 63 0 37 0 64 0 105 0 66 0 45 0 83 0 105 0 88 0 53 0 89 0 105 0 90 0 61 0 91 0 65 0 96 0 69 0 99 0 73 0 103 1 173 0 127 2 25 0 151 2 25 0 153 2 25 0 154 2 25 0 158 0 105 0 164 2 25 0 172 2 25 0 173 2 25 0 177 2 25 0 178 2 25 0 189 2 25 0 190 2 25 0 191 0 137 0 192 2 25 0 193 2 25 0 194 2 25 0 195 2 25 0 196 2 25 0 197 2 25 0 198 2 25 0 199 2 25 0 200 2 25 0 201 2 25 0 202 2 25 0 203 2 25 0 205 2 25 0 206 2 25 0 207 2 25 0 208 2 25 0 212] 
#[1 0 6 0 34 0 6 0 35 0 6 0 47 0 6 0 49 0 6 0 56 0 6 0 59 0 6 0 63 0 6 0 64 0 6 0 66 0 6 0 83 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 96 0 6 0 99 0 6 0 103 0 6 0 127 2 29 0 131 2 33 0 133 0 6 1 46] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 2 37 0 145 2 37 0 146 2 37 0 147 2 37 0 148 2 37 0 149] 
#[1 2 41 0 64 2 45 0 99] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 2 49 0 145 2 49 0 146 2 49 0 147 2 49 0 148 2 49 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 2 53 0 145 2 53 0 146 2 53 0 147 2 53 0 148 2 53 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 2 57 0 145 2 57 0 146 2 57 0 147 2 57 0 148 2 57 0 149] 
#[1 2 61 0 65 2 65 0 73 2 69 0 94] 
#[0 0 26 0 64 0 89 0 99] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 2 73 0 145 2 73 0 146 2 73 0 147 2 73 0 148 2 73 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 2 77 0 145 2 77 0 146 2 77 0 147 2 77 0 148 2 77 0 149] 
#[1 2 81 0 64 2 85 0 89 2 89 0 99] 
#[1 0 19 0 5 0 19 0 8 0 174 0 9 0 19 0 10 0 19 0 11 0 19 0 22 0 19 0 23 0 19 0 25 0 19 0 26 0 19 0 34 0 19 0 35 0 19 0 47 0 19 0 49 0 19 0 50 0 19 0 53 0 19 0 54 0 19 0 55 0 19 0 56 0 19 0 59 0 19 0 60 0 19 0 62 0 19 0 63 0 19 0 64 0 19 0 66 0 19 0 67 0 19 0 68 0 19 0 69 0 19 0 73 0 19 0 77 0 19 0 79 0 19 0 80 0 19 0 82 0 19 0 83 0 19 0 88 0 19 0 89 0 19 0 90 0 19 0 91 0 19 0 92 0 19 0 93 0 19 0 94 0 19 0 96 0 19 0 99 0 19 0 103 0 19 0 107 0 19 0 108 0 19 0 109 0 19 0 111 0 19 0 117 0 19 0 118 0 19 0 119 0 19 0 120 0 19 0 121 0 19 0 122 0 19 0 123 0 19 0 124 0 19 0 125 0 19 0 127 1 209 0 211 0 19 1 46] 
#[0 0 230 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 2 93 0 145 2 93 0 146 2 93 0 147 2 93 0 148 2 93 0 149] 
#[1 2 97 0 65 2 101 0 73 2 105 0 94] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 2 109 0 145 2 109 0 146 2 109 0 147 2 109 0 148 2 109 0 149] 
#[0 0 234 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 113 0 124] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 2 229 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 2 229 0 134 2 229 0 135 2 229 0 136 2 229 0 137 2 229 0 138 2 229 0 139 2 229 0 140 2 229 0 141 2 229 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 2 229 0 213 2 229 0 214 2 229 0 215 2 229 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 238 2 229 0 240 2 229 0 242 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250 2 229 1 40 2 229 1 41 2 229 1 42 2 229 1 43 2 229 1 44 2 229 1 45] 
#[0 0 238 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 242 0 55 0 242 0 127 3 97 0 156] 
#[1 1 165 0 11 3 101 0 74] 
#[1 1 165 0 11 3 105 0 74] 
#[1 0 246 0 5 0 246 0 8 0 246 0 9 0 246 0 10 1 165 0 11 0 246 0 22 0 246 0 23 0 246 0 25 0 246 0 26 1 193 0 33 0 246 0 34 0 246 0 35 0 246 0 47 0 246 0 49 0 246 0 50 0 246 0 53 0 246 0 54 0 246 0 55 0 246 0 56 0 246 0 59 0 246 0 60 0 246 0 62 0 246 0 63 0 246 0 64 0 246 0 66 0 246 0 67 0 246 0 68 0 246 0 69 0 246 0 73 0 246 0 77 0 246 0 79 0 246 0 80 0 246 0 82 0 246 0 83 0 246 0 88 0 246 0 89 0 246 0 90 0 246 0 91 0 246 0 92 0 246 0 93 0 246 0 94 0 246 0 96 0 246 0 99 0 246 0 103 0 246 0 107 0 246 0 108 0 246 0 109 0 246 0 111 0 246 0 117 0 246 0 118 0 246 0 119 0 246 0 120 0 246 0 121 0 246 0 122 0 246 0 123 0 246 0 124 0 246 0 125 0 246 0 127 3 109 0 167 3 109 0 170 3 109 0 171 0 246 1 46] 
#[1 0 205 0 11 3 113 0 25 3 173 0 37 3 173 0 39 3 173 0 42 3 173 0 46 3 173 0 51 3 173 0 71 3 173 0 76 3 173 0 81 3 173 0 95 3 173 0 98 3 157 0 105 0 209 0 124 0 213 0 125 3 161 0 145 3 161 0 146 3 161 0 147 3 161 0 148 3 161 0 149 3 173 0 163 3 173 0 165 3 173 0 166] 
#[0 0 250 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 254 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 2 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 6 0 5 1 6 0 8 3 177 0 9 1 6 0 10 1 6 0 11 1 6 0 22 1 6 0 23 1 6 0 25 1 6 0 26 1 6 0 34 1 6 0 35 1 6 0 47 1 6 0 49 1 6 0 50 1 6 0 53 1 6 0 54 1 6 0 55 1 6 0 56 1 6 0 59 1 6 0 60 1 6 0 62 1 6 0 63 1 6 0 64 1 6 0 66 1 6 0 67 1 6 0 68 1 6 0 69 1 6 0 73 1 6 0 77 1 6 0 79 1 6 0 80 1 6 0 82 1 6 0 83 1 6 0 88 1 6 0 89 1 6 0 90 1 6 0 91 1 6 0 92 1 6 0 93 1 6 0 94 1 6 0 96 1 6 0 99 1 6 0 103 1 6 0 107 1 6 0 108 1 6 0 109 1 6 0 111 1 6 0 117 1 6 0 118 1 6 0 119 1 6 0 120 1 6 0 121 1 6 0 122 1 6 0 123 1 6 0 124 1 6 0 125 1 6 0 127 3 181 0 210 1 6 1 46] 
#[1 0 6 0 11 0 6 0 55 0 6 0 124 0 6 0 125 0 6 0 127 3 185 0 133 3 189 0 179] 
#[1 3 193 0 6 0 205 0 11 3 197 0 38 3 217 0 40 3 205 0 84 3 209 0 86 0 209 0 124 0 213 0 125 3 213 0 145 3 213 0 146 3 213 0 147 3 213 0 148 3 213 0 149 3 217 0 182 3 221 0 186] 
#[0 1 10 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 3 225 0 133 3 229 0 167 3 229 0 170 3 229 0 171] 
#[0 1 14 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 1 18 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 1 22 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 1 26 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 3 233 0 133 3 237 0 167 3 237 0 170 3 237 0 171 3 241 0 183] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 3 245 0 133 3 249 0 183] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 3 253 0 133 4 1 0 183] 
#[1 0 23 0 5 0 23 0 8 0 174 0 9 0 23 0 10 0 23 0 11 0 23 0 22 0 23 0 23 0 23 0 25 0 23 0 26 0 23 0 34 0 23 0 35 0 23 0 47 0 23 0 49 0 23 0 50 0 23 0 53 0 23 0 54 0 23 0 55 0 23 0 56 0 23 0 59 0 23 0 60 0 23 0 62 0 23 0 63 0 23 0 64 0 23 0 66 0 23 0 67 0 23 0 68 0 23 0 69 0 23 0 73 0 23 0 77 0 23 0 79 0 23 0 80 0 23 0 82 0 23 0 83 0 23 0 88 0 23 0 89 0 23 0 90 0 23 0 91 0 23 0 92 0 23 0 93 0 23 0 94 0 23 0 96 0 23 0 99 0 23 0 103 0 23 0 107 0 23 0 108 0 23 0 109 0 23 0 111 0 23 0 117 0 23 0 118 0 23 0 119 0 23 0 120 0 23 0 121 0 23 0 122 0 23 0 123 0 23 0 124 0 23 0 125 0 23 0 127 1 209 0 211 0 23 1 46] 
#[0 1 34 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 4 57 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 4 229 0 133] 
#[1 0 6 0 11 0 6 0 55 0 6 0 124 0 6 0 125 0 6 0 127 4 233 0 133 4 237 0 174] 
#[0 1 38 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127] 
#[1 0 42 0 34 0 42 0 35 0 42 0 47 0 42 0 49 0 42 0 56 0 42 0 59 0 42 0 63 0 42 0 64 0 42 0 66 0 42 0 83 0 42 0 88 0 42 0 89 0 42 0 90 0 42 0 91 0 42 0 96 0 42 0 99 0 42 0 103 0 42 0 127 4 241 0 132 0 42 1 46] 
#[0 1 42 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 0 9 0 34 0 13 0 35 0 17 0 47 0 21 0 49 0 25 0 56 0 29 0 59 0 105 0 63 0 37 0 64 0 105 0 66 0 45 0 83 0 105 0 88 0 53 0 89 0 105 0 90 0 61 0 91 0 65 0 96 0 69 0 99 0 73 0 103 1 173 0 127 4 245 0 151 4 245 0 153 4 245 0 154 4 245 0 158 0 105 0 164 4 245 0 172 4 245 0 173 4 245 0 177 4 245 0 178 4 245 0 189 4 245 0 190 4 245 0 191 0 137 0 192 4 245 0 193 4 245 0 194 4 245 0 195 4 245 0 196 4 245 0 197 4 245 0 198 4 245 0 199 4 245 0 200 4 245 0 201 4 245 0 202 4 245 0 203 4 245 0 205 4 245 0 206 4 245 0 207 4 245 0 208 4 245 0 212 1 46 1 46] 
#[1 1 165 0 11 4 249 0 19 1 193 0 33 4 253 0 167 4 253 0 170 4 253 0 171] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 1 0 145 5 1 0 146 5 1 0 147 5 1 0 148 5 1 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 5 0 145 5 5 0 146 5 5 0 147 5 5 0 148 5 5 0 149] 
#[1 1 165 0 11 0 182 0 55 0 182 0 124 0 182 0 125 0 182 0 127 5 9 0 180] 
#[1 1 217 0 5 1 165 0 11 5 13 0 183] 
#[1 1 217 0 5 1 165 0 11 5 17 0 183] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 21 0 145 5 21 0 146 5 21 0 147 5 21 0 148 5 21 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 25 0 145 5 25 0 146 5 25 0 147 5 25 0 148 5 25 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 29 0 145 5 29 0 146 5 29 0 147 5 29 0 148 5 29 0 149] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 5 33 0 133 5 37 0 183] 
#[1 1 165 0 11 0 214 0 55 0 214 0 124 0 214 0 125 0 214 0 127 5 41 0 175] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 45 0 145 5 45 0 146 5 45 0 147 5 45 0 148 5 45 0 149] 
#[1 5 49 0 65 5 53 0 73 5 57 0 94] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 61 0 145 5 61 0 146 5 61 0 147 5 61 0 148 5 61 0 149] 
#[1 1 217 0 5 1 165 0 11 5 65 0 183] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 69 0 145 5 69 0 146 5 69 0 147 5 69 0 148 5 69 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 73 0 145 5 73 0 146 5 73 0 147 5 73 0 148 5 73 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 77 0 145 5 77 0 146 5 77 0 147 5 77 0 148 5 77 0 149] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 5 81 0 133 5 85 0 183] 
#[0 1 50 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 5 89 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 89 0 134 5 89 0 135 5 89 0 136 5 89 0 137 5 89 0 138 5 89 0 139 5 89 0 140 5 89 0 141 5 89 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 5 89 0 213 5 89 0 214 5 89 0 215 5 89 0 219 5 89 0 220 5 89 0 221 5 89 0 222 5 89 0 223 5 89 0 230 5 89 0 231 5 89 0 232 5 89 0 233 5 89 0 234 5 89 0 235 5 89 0 236 5 89 0 237 5 89 0 238 5 89 0 240 5 89 0 242 5 89 0 244 5 89 0 245 5 89 0 246 5 89 0 247 5 89 0 248 5 89 0 249 5 89 0 250 5 89 1 40 5 89 1 41 5 89 1 42 5 89 1 43 5 89 1 44 5 89 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 5 93 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 93 0 134 5 93 0 135 5 93 0 136 5 93 0 137 5 93 0 138 5 93 0 139 5 93 0 140 5 93 0 141 5 93 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 5 93 0 213 5 93 0 214 5 93 0 215 5 93 0 219 5 93 0 220 5 93 0 221 5 93 0 222 5 93 0 223 5 93 0 230 5 93 0 231 5 93 0 232 5 93 0 233 5 93 0 234 5 93 0 235 5 93 0 236 5 93 0 237 5 93 0 238 5 93 0 240 5 93 0 242 5 93 0 244 5 93 0 245 5 93 0 246 5 93 0 247 5 93 0 248 5 93 0 249 5 93 0 250 5 93 1 40 5 93 1 41 5 93 1 42 5 93 1 43 5 93 1 44 5 93 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 5 97 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 97 0 134 5 97 0 135 5 97 0 136 5 97 0 137 5 97 0 138 5 97 0 139 5 97 0 140 5 97 0 141 5 97 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 5 97 0 213 5 97 0 214 5 97 0 215 5 97 0 219 5 97 0 220 5 97 0 221 5 97 0 222 5 97 0 223 5 97 0 230 5 97 0 231 5 97 0 232 5 97 0 233 5 97 0 234 5 97 0 235 5 97 0 236 5 97 0 237 5 97 0 238 5 97 0 240 5 97 0 242 5 97 0 244 5 97 0 245 5 97 0 246 5 97 0 247 5 97 0 248 5 97 0 249 5 97 0 250 5 97 1 40 5 97 1 41 5 97 1 42 5 97 1 43 5 97 1 44 5 97 1 45] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 101 0 145 5 101 0 146 5 101 0 147 5 101 0 148 5 101 0 149] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 5 105 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 105 0 134 5 105 0 135 5 105 0 136 5 105 0 137 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 5 105 0 213 5 105 0 214 5 105 0 215 5 105 0 219 5 105 0 220 5 105 0 221 5 109 0 222 5 109 0 223 5 109 0 230 5 105 0 231 5 105 0 232 5 105 0 233 5 105 0 234 5 105 0 235 5 105 0 236 5 105 0 237 5 105 0 238 5 105 0 240 5 105 0 242 5 105 0 244 5 105 0 245 5 105 0 246 5 105 0 247 5 105 0 248 5 105 0 249 5 105 0 250 5 105 1 40 5 105 1 41 5 105 1 42 5 105 1 43 5 105 1 44 5 105 1 45] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 5 113 0 145 5 113 0 146 5 113 0 147 5 113 0 148 5 113 0 149] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 5 105 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 105 0 134 5 105 0 135 5 105 0 136 5 105 0 137 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 5 105 0 213 5 105 0 214 5 105 0 215 5 105 0 219 5 105 0 220 5 105 0 221 5 117 0 222 5 117 0 223 5 117 0 230 5 105 0 231 5 105 0 232 5 105 0 233 5 105 0 234 5 105 0 235 5 105 0 236 5 105 0 237 5 105 0 238 5 105 0 240 5 105 0 242 5 105 0 244 5 105 0 245 5 105 0 246 5 105 0 247 5 105 0 248 5 105 0 249 5 105 0 250 5 105 1 40 5 105 1 41 5 105 1 42 5 105 1 43 5 105 1 44 5 105 1 45] 
#[1 5 121 0 50 5 125 0 62 5 129 0 64 5 133 0 89 5 137 0 99] 
#[0 1 54 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 5 141 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 5 141 0 213 5 141 0 214 5 141 0 215 5 141 0 219 5 141 0 220 5 141 0 221 5 141 0 222 5 141 0 223 5 141 0 230 5 141 0 231 5 141 0 232 5 141 0 233 5 141 0 234 5 141 0 235 5 141 0 236 5 141 0 237 5 141 0 238 5 141 0 240 5 141 0 242 5 141 0 244 5 141 0 245 5 141 0 246 5 141 0 247 5 141 0 248 5 141 0 249 5 141 0 250 5 141 1 40 5 141 1 41 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 5 145 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 145 0 134 5 145 0 135 5 145 0 136 5 145 0 137 5 145 0 138 5 145 0 139 5 145 0 140 5 145 0 141 5 145 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 5 145 0 213 5 145 0 214 5 145 0 215 5 145 0 219 5 145 0 220 5 145 0 221 5 145 0 222 5 145 0 223 5 145 0 230 5 145 0 231 5 145 0 232 5 145 0 233 5 145 0 234 5 145 0 235 5 145 0 236 5 145 0 237 5 145 0 238 5 145 0 240 5 145 0 242 5 145 0 244 5 145 0 245 5 145 0 246 5 145 0 247 5 145 0 248 5 145 0 249 5 145 0 250 5 145 1 40 5 145 1 41 5 145 1 42 5 145 1 43 5 145 1 44 5 145 1 45] 
#[1 5 149 0 116 5 153 0 143] 
#[0 1 58 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 62 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 66 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 70 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 74 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 78 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 82 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 86 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 90 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 94 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 98 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 102 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 106 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 110 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 27 0 1 0 27 0 3 0 27 0 5 0 27 0 6 0 27 0 7 0 27 0 8 0 27 0 9 0 27 0 10 0 31 0 11 0 27 0 12 0 27 0 13 0 27 0 14 0 27 0 15 0 27 0 16 0 27 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 27 0 21 0 27 0 22 0 27 0 23 0 27 0 24 0 27 0 25 0 27 0 26 0 27 0 29 0 27 0 30 0 27 0 32 0 27 0 34 0 27 0 35 1 114 0 38 1 114 0 40 0 27 0 47 0 27 0 49 0 27 0 50 0 27 0 53 0 27 0 54 0 27 0 55 0 27 0 56 0 27 0 57 0 27 0 59 0 27 0 60 0 27 0 62 0 27 0 63 0 27 0 64 0 27 0 66 0 27 0 67 0 27 0 68 0 27 0 69 0 27 0 72 0 27 0 73 0 27 0 75 0 27 0 77 0 27 0 79 0 27 0 80 0 27 0 82 0 27 0 83 0 27 0 85 1 114 0 86 0 27 0 88 0 27 0 89 0 27 0 90 0 27 0 91 0 27 0 92 0 27 0 93 0 27 0 94 0 27 0 96 0 27 0 97 0 27 0 99 0 27 0 101 0 27 0 102 0 27 0 103 0 27 0 107 0 27 0 108 0 27 0 109 0 27 0 110 0 27 0 111 0 27 0 117 0 27 0 118 0 27 0 119 0 27 0 120 0 27 0 121 0 27 0 122 0 27 0 123 0 27 0 124 0 27 0 125 0 27 0 127 5 157 0 225 5 161 0 227 0 27 1 46] 
#[0 1 126 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 1 130 0 22 1 130 0 23 5 225 0 24 1 130 0 25 1 130 0 26 5 229 0 29 5 233 0 30 5 237 0 32 1 130 0 34 1 130 0 35 1 130 0 47 1 130 0 49 1 130 0 50 1 130 0 53 1 130 0 54 1 130 0 55 1 130 0 56 5 241 0 57 1 130 0 59 1 130 0 60 1 130 0 62 1 130 0 63 1 130 0 64 1 130 0 66 1 130 0 67 1 130 0 68 1 130 0 69 5 245 0 72 1 130 0 73 5 249 0 75 1 130 0 77 1 130 0 79 1 130 0 80 1 130 0 82 1 130 0 83 5 253 0 85 1 130 0 88 1 130 0 89 1 130 0 90 1 130 0 91 1 130 0 92 1 130 0 93 1 130 0 94 1 130 0 96 1 130 0 99 1 130 0 103 1 130 0 107 1 130 0 108 1 130 0 109 6 1 0 110 1 130 0 111 1 130 0 117 1 130 0 118 1 130 0 119 1 130 0 120 1 130 0 121 1 130 0 122 1 130 0 123 1 130 0 124 1 130 0 125 1 130 0 127 6 5 0 239 6 9 0 241 6 13 0 243 1 130 1 46] 
#[0 1 134 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 138 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 142 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 146 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 150 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 154 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 158 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 162 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 166 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 170 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 174 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 178 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 182 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 186 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 190 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 194 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 198 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 202 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 206 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 210 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 214 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 218 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 222 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 226 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 230 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 234 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 238 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 242 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 246 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 250 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 6 17 0 55 6 21 0 127 6 25 0 155 6 29 0 157] 
#[1 2 177 0 122 6 33 0 140] 
#[1 2 177 0 122 6 37 0 140] 
#[0 1 254 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 205 0 11 6 41 0 37 6 41 0 39 6 41 0 42 6 41 0 46 6 41 0 51 6 41 0 71 6 41 0 76 6 41 0 81 6 41 0 95 6 41 0 98 3 157 0 105 0 209 0 124 0 213 0 125 3 161 0 145 3 161 0 146 3 161 0 147 3 161 0 148 3 161 0 149 6 41 0 163 6 41 0 165 6 41 0 166] 
#[0 2 2 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 6 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 10 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 14 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 18 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 22 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 26 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 30 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 34 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 38 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 42 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 46 0 5 2 46 0 6 2 46 0 7 2 46 0 8 2 46 0 9 2 46 0 10 1 165 0 11 2 46 0 19 2 46 0 22 2 46 0 23 2 46 0 25 2 46 0 26 2 46 0 34 2 46 0 35 2 46 0 47 2 46 0 49 2 46 0 50 2 46 0 53 2 46 0 54 2 46 0 55 2 46 0 56 2 46 0 59 2 46 0 60 2 46 0 62 2 46 0 63 2 46 0 64 2 46 0 66 2 46 0 67 2 46 0 68 2 46 0 69 2 46 0 73 2 46 0 77 2 46 0 79 2 46 0 80 2 46 0 82 2 46 0 83 2 46 0 88 2 46 0 89 2 46 0 90 2 46 0 91 2 46 0 92 2 46 0 93 2 46 0 94 2 46 0 96 2 46 0 99 2 46 0 103 2 46 0 107 2 46 0 108 2 46 0 109 2 46 0 111 2 46 0 117 2 46 0 118 2 46 0 119 2 46 0 120 2 46 0 121 2 46 0 122 2 46 0 123 2 46 0 124 2 46 0 125 2 46 0 127 2 46 1 46] 
#[0 2 50 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 54 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 6 45 0 5 2 58 0 6 2 58 0 7 2 58 0 8 2 58 0 9 2 58 0 10 2 58 0 11 2 58 0 19 2 58 0 22 2 58 0 23 2 58 0 25 2 58 0 26 2 58 0 34 2 58 0 35 2 58 0 47 2 58 0 49 2 58 0 50 2 58 0 53 2 58 0 54 2 58 0 55 2 58 0 56 2 58 0 59 2 58 0 60 2 58 0 62 2 58 0 63 2 58 0 64 2 58 0 66 2 58 0 67 2 58 0 68 2 58 0 69 2 58 0 73 2 58 0 77 2 58 0 79 2 58 0 80 2 58 0 82 2 58 0 83 2 58 0 88 2 58 0 89 2 58 0 90 2 58 0 91 2 58 0 92 2 58 0 93 2 58 0 94 2 58 0 96 2 58 0 99 2 58 0 103 2 58 0 107 2 58 0 108 2 58 0 109 2 58 0 111 2 58 0 117 2 58 0 118 2 58 0 119 2 58 0 120 2 58 0 121 2 58 0 122 2 58 0 123 2 58 0 124 2 58 0 125 2 58 0 127 2 58 1 46] 
#[1 0 205 0 11 0 253 0 27 0 209 0 124 0 213 0 125 1 1 0 145 1 1 0 146 1 1 0 147 1 1 0 148 1 1 0 149 6 49 0 204] 
#[0 2 62 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 205 0 11 6 53 0 55 0 209 0 124 0 213 0 125 1 173 0 127 6 57 0 145 6 57 0 146 6 57 0 147 6 57 0 148 6 57 0 149 6 61 0 181] 
#[0 2 66 0 11 0 55 0 124 0 125 0 127] 
#[0 2 70 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 33 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 74 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 86 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 2 78 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 86 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 0 205 0 11 3 197 0 38 6 73 0 40 6 65 0 86 0 209 0 124 0 213 0 125 6 69 0 145 6 69 0 146 6 69 0 147 6 69 0 148 6 69 0 149 6 73 0 182] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 6 77 0 145 6 77 0 146 6 77 0 147 6 77 0 148 6 77 0 149] 
#[1 2 82 0 6 2 82 0 9 1 165 0 11 6 81 0 19 1 193 0 33 6 85 0 167 6 85 0 170 6 85 0 171 6 89 0 187 6 93 0 188] 
#[1 0 205 0 11 6 97 0 86 0 209 0 124 0 213 0 125 6 101 0 145 6 101 0 146 6 101 0 147 6 101 0 148 6 101 0 149] 
#[1 2 86 0 6 2 86 0 9 6 105 0 185] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 6 109 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 113 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 6 117 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 121 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 125 0 133 6 129 0 167 6 129 0 170 6 129 0 171] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 6 133 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 137 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 6 141 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 145 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 77 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 6 149 0 104 0 35 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 157 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 6 161 0 52 2 145 0 60 6 165 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 6 165 0 134 6 165 0 135 6 165 0 136 6 165 0 137 6 165 0 138 6 165 0 139 6 165 0 140 6 165 0 141 6 165 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 6 165 0 213 6 165 0 214 6 165 0 215 6 165 0 219 6 165 0 220 6 165 0 221 6 165 0 222 6 165 0 223 6 165 0 230 6 165 0 231 6 165 0 232 6 165 0 233 6 165 0 234 6 165 0 235 6 165 0 236 6 165 0 237 6 165 0 238 6 165 0 240 6 165 0 242 6 165 0 244 6 165 0 245 6 165 0 246 6 165 0 247 6 165 0 248 6 165 0 249 6 165 0 250 6 165 1 40 6 165 1 41 6 165 1 42 6 165 1 43 6 165 1 44 6 165 1 45] 
#[1 0 205 0 11 1 37 0 119 0 209 0 124 0 213 0 125 6 169 0 135 6 173 0 145 6 173 0 146 6 173 0 147 6 173 0 148 6 173 0 149] 
#[1 0 205 0 11 1 37 0 119 0 209 0 124 0 213 0 125 6 177 0 135 6 181 0 145 6 181 0 146 6 181 0 147 6 181 0 148 6 181 0 149] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 6 185 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 6 185 0 134 6 185 0 135 6 185 0 136 6 185 0 137 6 185 0 138 6 185 0 139 6 185 0 140 6 185 0 141 6 185 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 6 185 0 213 6 185 0 214 6 185 0 215 6 185 0 219 6 185 0 220 6 185 0 221 6 185 0 222 6 185 0 223 6 185 0 230 6 185 0 231 6 185 0 232 6 185 0 233 6 185 0 234 6 185 0 235 6 185 0 236 6 185 0 237 6 185 0 238 6 185 0 240 6 185 0 242 6 185 0 244 6 185 0 245 6 185 0 246 6 185 0 247 6 185 0 248 6 185 0 249 6 185 0 250 6 185 1 40 6 185 1 41 6 185 1 42 6 185 1 43 6 185 1 44 6 185 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 6 189 0 58 2 145 0 60 6 193 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 6 193 0 134 6 193 0 135 6 193 0 136 6 193 0 137 6 193 0 138 6 193 0 139 6 193 0 140 6 193 0 141 6 193 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 6 193 0 213 6 193 0 214 6 193 0 215 6 193 0 219 6 193 0 220 6 193 0 221 6 193 0 222 6 193 0 223 6 193 0 230 6 193 0 231 6 193 0 232 6 193 0 233 6 193 0 234 6 193 0 235 6 193 0 236 6 193 0 237 6 193 0 238 6 193 0 240 6 193 0 242 6 193 0 244 6 193 0 245 6 193 0 246 6 193 0 247 6 193 0 248 6 193 0 249 6 193 0 250 6 193 1 40 6 193 1 41 6 193 1 42 6 193 1 43 6 193 1 44 6 193 1 45] 
#[1 2 90 0 5 2 90 0 8 2 90 0 10 0 205 0 11 2 90 0 22 2 90 0 23 2 90 0 25 2 90 0 26 2 90 0 34 2 90 0 49 2 90 0 50 2 90 0 53 2 90 0 54 2 90 0 55 2 90 0 56 2 90 0 59 2 90 0 60 2 90 0 62 2 90 0 63 2 90 0 66 2 90 0 67 2 90 0 68 2 90 0 69 2 90 0 73 2 90 0 77 0 39 0 79 2 90 0 80 2 90 0 82 2 90 0 88 2 90 0 90 2 90 0 91 2 90 0 92 2 90 0 93 2 90 0 94 2 90 0 96 2 90 0 103 2 90 0 107 2 90 0 108 2 90 0 109 2 90 0 111 2 90 0 117 2 90 0 118 2 90 0 119 2 90 0 120 2 90 0 121 2 90 0 122 2 90 0 123 0 43 0 124 0 47 0 125 2 90 0 127 6 201 0 145 6 201 0 146 6 201 0 147 6 201 0 148 6 201 0 149] 
#[1 0 205 0 11 0 253 0 27 0 209 0 124 0 213 0 125 1 1 0 145 1 1 0 146 1 1 0 147 1 1 0 148 1 1 0 149 1 69 0 204 1 73 0 209] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 6 205 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 105 0 134 5 105 0 135 5 105 0 136 5 105 0 137 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 6 205 0 213 5 105 0 214 5 105 0 215 6 205 0 219 6 205 0 220 6 205 0 221 6 205 0 222 6 205 0 223 6 205 0 230 6 205 0 231 6 205 0 232 6 205 0 233 6 205 0 234 6 205 0 235 6 205 0 236 6 205 0 237 6 205 0 238 6 205 0 240 6 205 0 242 6 205 0 244 6 205 0 245 6 205 0 246 6 205 0 247 6 205 0 248 6 205 0 249 6 205 0 250 5 105 1 40 5 105 1 41 5 105 1 42 5 105 1 43 5 105 1 44 5 105 1 45] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 6 209 0 145 6 209 0 146 6 209 0 147 6 209 0 148 6 209 0 149] 
#[1 0 27 0 1 0 27 0 3 0 27 0 5 0 27 0 7 0 27 0 8 1 114 0 9 0 27 0 10 0 31 0 11 0 27 0 12 6 213 0 13 0 27 0 14 1 114 0 15 0 27 0 16 0 27 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 27 0 21 0 27 0 22 0 27 0 23 0 27 0 24 0 27 0 25 0 27 0 26 0 27 0 29 0 27 0 30 0 27 0 32 0 27 0 34 1 114 0 38 1 114 0 40 0 27 0 49 0 27 0 50 0 27 0 53 0 27 0 54 0 27 0 55 0 27 0 56 0 27 0 57 0 27 0 59 0 27 0 60 0 27 0 62 0 27 0 63 0 27 0 66 0 27 0 67 0 27 0 68 0 27 0 69 0 27 0 72 0 27 0 73 0 27 0 75 0 27 0 77 0 27 0 79 0 27 0 80 0 27 0 82 0 27 0 85 1 114 0 86 0 27 0 88 0 27 0 90 0 27 0 91 0 27 0 92 0 27 0 93 0 27 0 94 0 27 0 96 0 27 0 103 0 27 0 107 0 27 0 108 0 27 0 109 0 27 0 110 0 27 0 111 0 27 0 117 0 27 0 118 0 27 0 119 0 27 0 120 0 27 0 121 0 27 0 122 0 27 0 123 0 27 0 124 0 27 0 125 0 27 0 127 5 157 0 225 5 161 0 227] 
#[0 2 94 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 98 0 5 2 98 0 8 2 98 0 10 2 98 0 11 2 98 0 22 2 98 0 23 2 98 0 25 2 98 0 26 2 98 0 34 2 98 0 49 2 98 0 50 2 98 0 53 2 98 0 54 2 98 0 55 2 98 0 56 2 98 0 59 2 98 0 60 2 98 0 62 2 98 0 63 2 98 0 66 2 98 0 67 2 98 0 68 2 98 0 69 2 98 0 73 2 98 0 77 2 98 0 79 2 98 0 80 2 98 0 82 2 98 0 88 2 98 0 90 2 98 0 91 2 98 0 92 2 98 0 93 2 98 0 94 2 98 0 96 2 98 0 103 2 98 0 107 2 98 0 108 2 98 0 109 2 98 0 111 2 98 0 117 2 98 0 118 2 98 0 119 2 98 0 120 2 98 0 121 2 98 0 122 2 98 0 123 2 98 0 124 2 98 0 125 2 98 0 127 6 217 0 162] 
#[0 6 221 0 55] 
#[1 0 205 0 11 0 253 0 27 1 101 0 44 1 109 0 56 1 113 0 59 1 133 0 103 0 209 0 124 0 213 0 125 1 1 0 145 1 1 0 146 1 1 0 147 1 1 0 148 1 1 0 149 1 141 0 204 1 145 0 209] 
#[0 2 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 106 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 2 110 0 22 2 110 0 23 5 225 0 24 2 110 0 25 2 110 0 26 5 229 0 29 5 233 0 30 5 237 0 32 2 110 0 34 2 110 0 49 2 110 0 50 2 110 0 53 2 110 0 54 2 110 0 55 2 110 0 56 5 241 0 57 2 110 0 59 2 110 0 60 2 110 0 62 2 110 0 63 2 110 0 66 2 110 0 67 2 110 0 68 2 110 0 69 5 245 0 72 2 110 0 73 5 249 0 75 2 110 0 77 2 110 0 79 2 110 0 80 2 110 0 82 5 253 0 85 2 110 0 88 2 110 0 90 2 110 0 91 2 110 0 92 2 110 0 93 2 110 0 94 2 110 0 96 2 110 0 103 2 110 0 107 2 110 0 108 2 110 0 109 6 1 0 110 2 110 0 111 2 110 0 117 2 110 0 118 2 110 0 119 2 110 0 120 2 110 0 121 2 110 0 122 2 110 0 123 2 110 0 124 2 110 0 125 2 110 0 127 6 5 0 239 6 9 0 241 6 13 0 243] 
#[0 2 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 118 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 122 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 126 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 130 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 134 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 138 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 142 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 146 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 150 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 154 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 158 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 162 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 166 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 170 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 174 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 178 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 182 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 186 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 0 51 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 198 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 202 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 206 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 210 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 214 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 218 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 222 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 226 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 230 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 234 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 238 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 242 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 246 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 250 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 254 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 3 2 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 3 6 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 1 230 0 1 1 230 0 3 0 55 0 5 1 230 0 7 0 55 0 8 0 55 0 10 0 55 0 11 1 230 0 12 1 230 0 14 1 230 0 16 1 230 0 17 1 230 0 18 1 230 0 19 1 230 0 20 1 230 0 21 0 55 0 22 0 55 0 23 1 230 0 24 0 55 0 25 0 55 0 26 1 230 0 29 1 230 0 30 1 230 0 32 0 55 0 34 0 55 0 49 0 55 0 50 0 55 0 53 0 55 0 54 0 55 0 55 0 55 0 56 1 230 0 57 0 55 0 59 0 55 0 60 0 55 0 62 0 55 0 63 0 55 0 66 0 55 0 67 0 55 0 68 0 55 0 69 1 230 0 72 0 55 0 73 1 230 0 75 0 55 0 77 0 55 0 79 0 55 0 80 0 55 0 82 1 230 0 85 0 55 0 88 0 55 0 90 0 55 0 91 0 55 0 92 0 55 0 93 0 55 0 94 0 55 0 96 0 55 0 103 0 55 0 107 0 55 0 108 0 55 0 109 1 230 0 110 0 55 0 111 0 55 0 117 0 55 0 118 0 55 0 119 0 55 0 120 0 55 0 121 0 55 0 122 0 55 0 123 0 55 0 124 0 55 0 125 0 55 0 127] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 6 225 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 205 0 11 6 229 0 55 0 209 0 124 0 213 0 125 1 173 0 127 6 233 0 145 6 233 0 146 6 233 0 147 6 233 0 148 6 233 0 149 6 237 0 176] 
#[0 3 14 0 11 0 55 0 124 0 125 0 127] 
#[1 0 6 0 34 0 6 0 35 0 6 0 47 0 6 0 49 0 6 0 56 0 6 0 59 0 6 0 63 0 6 0 64 0 6 0 66 0 6 0 83 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 96 0 6 0 99 0 6 0 103 0 6 0 127 2 29 0 131 6 241 0 133 0 6 1 46] 
#[0 3 18 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 6 245 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 6 245 0 134 6 245 0 135 6 245 0 136 6 245 0 137 6 245 0 138 6 245 0 139 6 245 0 140 6 245 0 141 6 245 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 6 245 0 213 6 245 0 214 6 245 0 215 6 245 0 219 6 245 0 220 6 245 0 221 6 245 0 222 6 245 0 223 6 245 0 230 6 245 0 231 6 245 0 232 6 245 0 233 6 245 0 234 6 245 0 235 6 245 0 236 6 245 0 237 6 245 0 238 6 245 0 240 6 245 0 242 6 245 0 244 6 245 0 245 6 245 0 246 6 245 0 247 6 245 0 248 6 245 0 249 6 245 0 250 6 245 1 40 6 245 1 41 6 245 1 42 6 245 1 43 6 245 1 44 6 245 1 45] 
#[0 6 249 0 19] 
#[1 1 165 0 11 6 253 0 74] 
#[1 1 165 0 11 7 1 0 74] 
#[1 0 6 0 11 0 6 0 55 0 6 0 124 0 6 0 125 0 6 0 127 7 5 0 133 3 189 0 179] 
#[0 3 22 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 9 0 133 7 13 0 167 7 13 0 170 7 13 0 171] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 17 0 133 7 21 0 167 7 21 0 170 7 21 0 171 7 25 0 183] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 29 0 133 7 33 0 183] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 37 0 133 7 41 0 183] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 7 45 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 49 0 133] 
#[1 0 6 0 11 0 6 0 55 0 6 0 124 0 6 0 125 0 6 0 127 7 53 0 133 4 237 0 174] 
#[1 1 217 0 5 1 165 0 11 7 57 0 183] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 7 61 0 145 7 61 0 146 7 61 0 147 7 61 0 148 7 61 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 7 65 0 145 7 65 0 146 7 65 0 147 7 65 0 148 7 65 0 149] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 7 69 0 145 7 69 0 146 7 69 0 147 7 69 0 148 7 69 0 149] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 73 0 133 7 77 0 183] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 81 0 133 7 85 0 167 7 85 0 170 7 85 0 171] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 89 0 133 7 93 0 167 7 93 0 170 7 93 0 171 7 97 0 183] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 101 0 133 7 105 0 183] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 109 0 133 7 113 0 183] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 7 117 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 121 0 133] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 7 125 0 6 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 5 225 0 24 5 229 0 29 5 233 0 30 5 237 0 32 5 241 0 57 5 245 0 72 5 249 0 75 5 253 0 85 6 1 0 110 6 5 0 239 6 9 0 241 6 13 0 243] 
#[1 5 165 0 1 0 59 0 3 5 173 0 5 3 26 0 6 5 177 0 7 3 26 0 8 3 26 0 9 3 26 0 10 5 189 0 11 5 193 0 12 3 26 0 13 0 63 0 14 3 26 0 15 3 26 0 16 3 26 0 17 3 26 0 18 3 26 0 19 3 26 0 20 3 26 0 21 3 26 0 22 3 26 0 23 5 225 0 24 3 26 0 25 3 26 0 26 0 67 0 29 5 233 0 30 3 26 0 32 3 26 0 34 3 26 0 35 3 26 0 47 3 26 0 49 3 26 0 50 3 26 0 53 3 26 0 54 3 26 0 55 3 26 0 56 3 26 0 57 3 26 0 59 3 26 0 60 3 26 0 62 3 26 0 63 3 26 0 64 3 26 0 66 3 26 0 67 3 26 0 68 3 26 0 69 3 26 0 72 3 26 0 73 3 26 0 75 3 26 0 77 3 26 0 79 3 26 0 80 3 26 0 82 3 26 0 83 3 26 0 85 3 26 0 88 3 26 0 89 3 26 0 90 3 26 0 91 3 26 0 92 3 26 0 93 3 26 0 94 3 26 0 96 3 26 0 97 3 26 0 99 3 26 0 101 3 26 0 102 3 26 0 103 3 26 0 107 3 26 0 108 3 26 0 109 3 26 0 110 3 26 0 111 3 26 0 117 3 26 0 118 3 26 0 119 3 26 0 120 3 26 0 121 3 26 0 122 3 26 0 123 3 26 0 124 3 26 0 125 3 26 0 127 6 5 0 239 6 9 0 241 6 13 0 243 3 26 1 46] 
#[1 5 165 0 1 0 71 0 3 5 173 0 5 3 30 0 6 5 177 0 7 3 30 0 8 3 30 0 9 3 30 0 10 5 189 0 11 5 193 0 12 3 30 0 13 0 75 0 14 3 30 0 15 3 30 0 16 3 30 0 17 3 30 0 18 3 30 0 19 3 30 0 20 3 30 0 21 3 30 0 22 3 30 0 23 5 225 0 24 3 30 0 25 3 30 0 26 0 79 0 29 5 233 0 30 3 30 0 32 3 30 0 34 3 30 0 35 3 30 0 47 3 30 0 49 3 30 0 50 3 30 0 53 3 30 0 54 3 30 0 55 3 30 0 56 3 30 0 57 3 30 0 59 3 30 0 60 3 30 0 62 3 30 0 63 3 30 0 64 3 30 0 66 3 30 0 67 3 30 0 68 3 30 0 69 3 30 0 72 3 30 0 73 3 30 0 75 3 30 0 77 3 30 0 79 3 30 0 80 3 30 0 82 3 30 0 83 3 30 0 85 3 30 0 88 3 30 0 89 3 30 0 90 3 30 0 91 3 30 0 92 3 30 0 93 3 30 0 94 3 30 0 96 3 30 0 97 3 30 0 99 3 30 0 101 3 30 0 102 3 30 0 103 3 30 0 107 3 30 0 108 3 30 0 109 3 30 0 110 3 30 0 111 3 30 0 117 3 30 0 118 3 30 0 119 3 30 0 120 3 30 0 121 3 30 0 122 3 30 0 123 3 30 0 124 3 30 0 125 3 30 0 127 6 5 0 239 6 9 0 241 6 13 0 243 3 30 1 46] 
#[1 3 34 0 1 3 34 0 3 3 34 0 5 3 34 0 6 3 34 0 7 3 34 0 8 3 34 0 9 3 34 0 10 1 165 0 11 3 34 0 12 3 34 0 13 3 34 0 14 3 34 0 15 3 34 0 16 3 34 0 17 3 34 0 18 3 34 0 19 3 34 0 20 3 34 0 21 3 34 0 22 3 34 0 23 3 34 0 24 3 34 0 25 3 34 0 26 3 34 0 29 3 34 0 30 3 34 0 32 3 34 0 34 3 34 0 35 3 34 0 47 3 34 0 49 3 34 0 50 3 34 0 53 3 34 0 54 3 34 0 55 3 34 0 56 3 34 0 57 3 34 0 59 3 34 0 60 3 34 0 62 3 34 0 63 3 34 0 64 3 34 0 66 3 34 0 67 3 34 0 68 3 34 0 69 3 34 0 72 3 34 0 73 3 34 0 75 3 34 0 77 3 34 0 79 3 34 0 80 3 34 0 82 3 34 0 83 3 34 0 85 3 34 0 88 3 34 0 89 3 34 0 90 3 34 0 91 3 34 0 92 3 34 0 93 3 34 0 94 3 34 0 96 3 34 0 97 3 34 0 99 3 34 0 101 3 34 0 102 3 34 0 103 3 34 0 107 3 34 0 108 3 34 0 109 3 34 0 110 3 34 0 111 3 34 0 117 3 34 0 118 3 34 0 119 3 34 0 120 3 34 0 121 3 34 0 122 3 34 0 123 3 34 0 124 3 34 0 125 3 34 0 127 3 34 1 46] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 5 225 0 24 5 229 0 29 5 233 0 30 5 237 0 32 5 241 0 57 5 245 0 72 5 249 0 75 5 253 0 85 6 1 0 110 6 5 0 239 6 9 0 241 6 13 0 243] 
#[1 0 83 0 1 0 83 0 3 0 83 0 5 3 38 0 6 0 83 0 7 0 83 0 8 3 38 0 9 0 83 0 10 0 83 0 11 0 83 0 12 3 38 0 13 0 83 0 14 3 38 0 15 0 83 0 16 0 83 0 17 0 83 0 18 0 83 0 19 0 83 0 20 0 83 0 21 3 38 0 22 3 38 0 23 0 83 0 24 3 38 0 25 3 38 0 26 0 83 0 29 0 83 0 30 0 83 0 32 3 38 0 34 3 38 0 35 3 38 0 47 3 38 0 49 3 38 0 50 3 38 0 53 3 38 0 54 3 38 0 55 3 38 0 56 0 83 0 57 3 38 0 59 3 38 0 60 3 38 0 62 3 38 0 63 3 38 0 64 3 38 0 66 3 38 0 67 3 38 0 68 3 38 0 69 0 83 0 72 3 38 0 73 0 83 0 75 3 38 0 77 3 38 0 79 3 38 0 80 3 38 0 82 3 38 0 83 0 83 0 85 3 38 0 88 3 38 0 89 3 38 0 90 3 38 0 91 3 38 0 92 3 38 0 93 3 38 0 94 3 38 0 96 3 38 0 97 3 38 0 99 3 38 0 101 3 38 0 102 3 38 0 103 3 38 0 107 3 38 0 108 3 38 0 109 0 83 0 110 3 38 0 111 3 38 0 117 3 38 0 118 3 38 0 119 3 38 0 120 3 38 0 121 3 38 0 122 3 38 0 123 3 38 0 124 3 38 0 125 3 38 0 127 3 38 1 46] 
#[1 3 42 0 1 3 42 0 3 3 42 0 5 3 42 0 6 3 42 0 7 3 42 0 8 3 42 0 9 3 42 0 10 1 165 0 11 3 42 0 12 3 42 0 13 3 42 0 14 3 42 0 15 3 42 0 16 3 42 0 17 3 42 0 18 3 42 0 19 3 42 0 20 3 42 0 21 3 42 0 22 3 42 0 23 3 42 0 24 3 42 0 25 3 42 0 26 3 42 0 29 3 42 0 30 3 42 0 32 3 42 0 34 3 42 0 35 3 42 0 47 3 42 0 49 3 42 0 50 3 42 0 53 3 42 0 54 3 42 0 55 3 42 0 56 3 42 0 57 3 42 0 59 3 42 0 60 3 42 0 62 3 42 0 63 3 42 0 64 3 42 0 66 3 42 0 67 3 42 0 68 3 42 0 69 3 42 0 72 3 42 0 73 3 42 0 75 3 42 0 77 3 42 0 79 3 42 0 80 3 42 0 82 3 42 0 83 3 42 0 85 3 42 0 88 3 42 0 89 3 42 0 90 3 42 0 91 3 42 0 92 3 42 0 93 3 42 0 94 3 42 0 96 3 42 0 97 3 42 0 99 3 42 0 101 3 42 0 102 3 42 0 103 3 42 0 107 3 42 0 108 3 42 0 109 3 42 0 110 3 42 0 111 3 42 0 117 3 42 0 118 3 42 0 119 3 42 0 120 3 42 0 121 3 42 0 122 3 42 0 123 3 42 0 124 3 42 0 125 3 42 0 127 3 42 1 46] 
#[1 0 87 0 1 0 87 0 3 0 87 0 5 3 46 0 6 0 87 0 7 0 87 0 8 3 46 0 9 0 87 0 10 0 87 0 11 0 87 0 12 3 46 0 13 0 87 0 14 3 46 0 15 0 87 0 16 0 87 0 17 0 87 0 18 0 87 0 19 0 87 0 20 0 87 0 21 3 46 0 22 3 46 0 23 0 87 0 24 3 46 0 25 3 46 0 26 0 87 0 29 0 87 0 30 0 87 0 32 3 46 0 34 3 46 0 35 3 46 0 47 3 46 0 49 3 46 0 50 3 46 0 53 3 46 0 54 3 46 0 55 3 46 0 56 0 87 0 57 3 46 0 59 3 46 0 60 3 46 0 62 3 46 0 63 3 46 0 64 3 46 0 66 3 46 0 67 3 46 0 68 3 46 0 69 0 87 0 72 3 46 0 73 0 87 0 75 3 46 0 77 3 46 0 79 3 46 0 80 3 46 0 82 3 46 0 83 0 87 0 85 3 46 0 88 3 46 0 89 3 46 0 90 3 46 0 91 3 46 0 92 3 46 0 93 3 46 0 94 3 46 0 96 3 46 0 97 3 46 0 99 3 46 0 101 3 46 0 102 3 46 0 103 3 46 0 107 3 46 0 108 3 46 0 109 0 87 0 110 3 46 0 111 3 46 0 117 3 46 0 118 3 46 0 119 3 46 0 120 3 46 0 121 3 46 0 122 3 46 0 123 3 46 0 124 3 46 0 125 3 46 0 127 3 46 1 46] 
#[0 3 50 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 3 54 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 3 58 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 3 62 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 3 66 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 5 165 0 1 0 91 0 3 5 173 0 5 3 70 0 6 5 177 0 7 5 181 0 8 3 70 0 9 5 185 0 10 5 189 0 11 5 193 0 12 3 70 0 13 0 95 0 14 3 70 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 3 70 0 22 3 70 0 23 5 225 0 24 3 70 0 25 3 70 0 26 0 99 0 29 5 233 0 30 5 237 0 32 3 70 0 34 3 70 0 35 3 70 0 47 3 70 0 49 3 70 0 50 3 70 0 53 3 70 0 54 3 70 0 55 3 70 0 56 5 241 0 57 3 70 0 59 3 70 0 60 3 70 0 62 3 70 0 63 3 70 0 64 3 70 0 66 3 70 0 67 3 70 0 68 3 70 0 69 5 245 0 72 3 70 0 73 5 249 0 75 3 70 0 77 3 70 0 79 3 70 0 80 3 70 0 82 3 70 0 83 5 253 0 85 3 70 0 88 3 70 0 89 3 70 0 90 3 70 0 91 3 70 0 92 3 70 0 93 3 70 0 94 3 70 0 96 3 70 0 97 3 70 0 99 3 70 0 101 3 70 0 102 3 70 0 103 3 70 0 107 3 70 0 108 3 70 0 109 6 1 0 110 3 70 0 111 3 70 0 117 3 70 0 118 3 70 0 119 3 70 0 120 3 70 0 121 3 70 0 122 3 70 0 123 3 70 0 124 3 70 0 125 3 70 0 127 6 5 0 239 6 9 0 241 6 13 0 243 3 70 1 46] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 7 129 0 19 5 217 0 20 5 221 0 21 5 225 0 24 5 229 0 29 5 233 0 30 5 237 0 32 5 241 0 57 5 245 0 72 5 249 0 75 5 253 0 85 6 1 0 110 6 5 0 239 6 9 0 241 6 13 0 243] 
#[0 3 74 0 10 0 116] 
#[1 7 133 0 10 7 137 0 116] 
#[0 3 78 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 3 82 0 1 3 82 0 3 2 117 0 5 3 82 0 6 3 82 0 7 2 121 0 8 7 141 0 9 2 125 0 10 0 205 0 11 3 82 0 12 3 82 0 13 3 82 0 14 0 103 0 15 3 82 0 16 3 82 0 17 3 82 0 18 3 82 0 19 3 82 0 20 3 82 0 21 0 107 0 22 0 111 0 23 3 82 0 24 0 115 0 25 0 119 0 26 3 82 0 29 3 82 0 30 3 82 0 32 3 82 0 34 3 82 0 35 3 197 0 38 7 153 0 40 3 82 0 47 3 82 0 49 3 82 0 50 3 82 0 53 3 82 0 54 3 82 0 55 3 82 0 56 3 82 0 57 3 82 0 59 0 123 0 60 3 82 0 62 3 82 0 63 3 82 0 64 3 82 0 66 3 82 0 67 3 82 0 68 3 82 0 69 3 82 0 72 0 127 0 73 3 82 0 75 3 82 0 77 3 82 0 79 0 131 0 80 3 82 0 82 3 82 0 83 3 82 0 85 7 149 0 86 3 82 0 88 3 82 0 89 3 82 0 90 3 82 0 91 3 82 0 92 3 82 0 93 0 135 0 94 3 82 0 96 3 82 0 97 3 82 0 99 3 82 0 101 3 82 0 102 3 82 0 103 3 82 0 107 3 82 0 108 3 82 0 109 3 82 0 110 0 139 0 111 0 143 0 117 0 147 0 118 0 151 0 119 0 155 0 120 0 159 0 121 0 163 0 122 0 167 0 123 0 171 0 124 0 175 0 125 3 82 0 127 7 157 0 134 7 157 0 135 7 157 0 136 7 157 0 137 7 157 0 138 7 157 0 139 7 157 0 140 7 157 0 141 7 157 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 7 153 0 182 7 157 0 213 7 157 0 214 7 157 0 215 7 157 0 219 7 157 0 220 7 157 0 221 7 157 0 222 7 157 0 223 7 161 0 224 7 165 0 226 7 169 0 229 7 157 0 230 7 157 0 231 7 157 0 232 7 157 0 233 7 157 0 234 7 157 0 235 7 157 0 236 7 157 0 237 7 157 0 238 7 157 0 240 7 157 0 242 7 157 0 244 7 157 0 245 7 157 0 246 7 157 0 247 7 157 0 248 7 157 0 249 7 157 0 250 7 157 1 40 7 157 1 41 7 157 1 42 7 157 1 43 7 157 1 44 7 157 1 45 3 82 1 46] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 7 173 0 145 7 173 0 146 7 173 0 147 7 173 0 148 7 173 0 149] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 7 177 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 7 177 0 134 7 177 0 135 7 177 0 136 7 177 0 137 7 177 0 138 7 177 0 139 7 177 0 140 7 177 0 141 7 177 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 7 177 0 213 7 177 0 214 7 177 0 215 7 177 0 219 7 177 0 220 7 177 0 221 7 177 0 222 7 177 0 223 7 177 0 230 7 177 0 231 7 177 0 232 7 177 0 233 7 177 0 234 7 177 0 235 7 177 0 236 7 177 0 237 7 177 0 238 7 177 0 240 7 177 0 242 7 177 0 244 7 177 0 245 7 177 0 246 7 177 0 247 7 177 0 248 7 177 0 249 7 177 0 250 7 177 1 40 7 177 1 41 7 177 1 42 7 177 1 43 7 177 1 44 7 177 1 45] 
#[1 1 114 0 5 1 114 0 6 1 114 0 8 1 114 0 9 1 114 0 10 1 114 0 11 1 114 0 15 1 114 0 22 1 114 0 23 1 114 0 25 1 114 0 26 1 114 0 38 1 114 0 40 1 114 0 60 1 114 0 73 1 114 0 80 1 114 0 86 1 114 0 94 1 114 0 111 1 114 0 117 1 114 0 118 1 114 0 119 1 114 0 120 1 114 0 121 1 114 0 122 1 114 0 123 1 114 0 124 1 114 0 125 7 181 0 225 5 161 0 227] 
#[0 3 86 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 90 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 94 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 7 185 0 145 7 185 0 146 7 185 0 147 7 185 0 148 7 185 0 149] 
#[0 3 98 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 7 189 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 7 189 0 134 7 189 0 135 7 189 0 136 7 189 0 137 7 189 0 138 7 189 0 139 7 189 0 140 7 189 0 141 7 189 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 7 189 0 213 7 189 0 214 7 189 0 215 7 189 0 219 7 189 0 220 7 189 0 221 7 189 0 222 7 189 0 223 7 189 0 230 7 189 0 231 7 189 0 232 7 189 0 233 7 189 0 234 7 189 0 235 7 189 0 236 7 189 0 237 7 189 0 238 7 189 0 240 7 189 0 242 7 189 0 244 7 189 0 245 7 189 0 246 7 189 0 247 7 189 0 248 7 189 0 249 7 189 0 250 7 189 1 40 7 189 1 41 7 189 1 42 7 189 1 43 7 189 1 44 7 189 1 45] 
#[0 3 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 106 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 7 193 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 7 193 0 134 7 193 0 135 7 193 0 136 7 193 0 137 7 193 0 138 7 193 0 139 7 193 0 140 7 193 0 141 7 193 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 7 193 0 213 7 193 0 214 7 193 0 215 7 193 0 219 7 193 0 220 7 193 0 221 7 193 0 222 7 193 0 223 7 193 0 230 7 193 0 231 7 193 0 232 7 193 0 233 7 193 0 234 7 193 0 235 7 193 0 236 7 193 0 237 7 193 0 238 7 193 0 240 7 193 0 242 7 193 0 244 7 193 0 245 7 193 0 246 7 193 0 247 7 193 0 248 7 193 0 249 7 193 0 250 7 193 1 40 7 193 1 41 7 193 1 42 7 193 1 43 7 193 1 44 7 193 1 45] 
#[0 3 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 118 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 122 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 126 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 130 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 134 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 138 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 142 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 146 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 150 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 154 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 7 197 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 7 197 0 134 7 197 0 135 7 197 0 136 7 197 0 137 7 197 0 138 7 197 0 139 7 197 0 140 7 197 0 141 7 197 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 7 197 0 213 7 197 0 214 7 197 0 215 7 197 0 219 7 197 0 220 7 197 0 221 7 197 0 222 7 197 0 223 7 197 0 230 7 197 0 231 7 197 0 232 7 197 0 233 7 197 0 234 7 197 0 235 7 197 0 236 7 197 0 237 7 197 0 238 7 197 0 240 7 197 0 242 7 197 0 244 7 197 0 245 7 197 0 246 7 197 0 247 7 197 0 248 7 197 0 249 7 197 0 250 7 197 1 40 7 197 1 41 7 197 1 42 7 197 1 43 7 197 1 44 7 197 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 7 201 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 7 201 0 134 7 201 0 135 7 201 0 136 7 201 0 137 7 201 0 138 7 201 0 139 7 201 0 140 7 201 0 141 7 201 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 7 201 0 213 7 201 0 214 7 201 0 215 7 201 0 219 7 201 0 220 7 201 0 221 7 201 0 222 7 201 0 223 7 201 0 230 7 201 0 231 7 201 0 232 7 201 0 233 7 201 0 234 7 201 0 235 7 201 0 236 7 201 0 237 7 201 0 238 7 201 0 240 7 201 0 242 7 201 0 244 7 201 0 245 7 201 0 246 7 201 0 247 7 201 0 248 7 201 0 249 7 201 0 250 7 201 1 40 7 201 1 41 7 201 1 42 7 201 1 43 7 201 1 44 7 201 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 7 205 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 7 205 0 134 7 205 0 135 7 205 0 136 7 205 0 137 7 205 0 138 7 205 0 139 7 205 0 140 7 205 0 141 7 205 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 7 205 0 213 7 205 0 214 7 205 0 215 7 205 0 219 7 205 0 220 7 205 0 221 7 205 0 222 7 205 0 223 7 205 0 230 7 205 0 231 7 205 0 232 7 205 0 233 7 205 0 234 7 205 0 235 7 205 0 236 7 205 0 237 7 205 0 238 7 205 0 240 7 205 0 242 7 205 0 244 7 205 0 245 7 205 0 246 7 205 0 247 7 205 0 248 7 205 0 249 7 205 0 250 7 205 1 40 7 205 1 41 7 205 1 42 7 205 1 43 7 205 1 44 7 205 1 45] 
#[0 3 158 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 3 162 0 11 0 124 0 125 0 127] 
#[0 3 166 0 55 0 127] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 7 209 0 127 0 217 0 145 0 217 0 146 0 217 0 147 0 217 0 148 0 217 0 149 7 213 0 152] 
#[1 1 217 0 5 7 217 0 31 7 221 0 183] 
#[1 1 217 0 5 7 225 0 31 7 229 0 183] 
#[1 7 233 0 5 3 170 0 6 3 170 0 7 3 170 0 8 3 170 0 9 3 170 0 10 3 170 0 11 3 170 0 19 3 170 0 22 3 170 0 23 3 170 0 25 3 170 0 26 3 170 0 34 3 170 0 35 3 170 0 47 3 170 0 49 3 170 0 50 3 170 0 53 3 170 0 54 3 170 0 55 3 170 0 56 3 170 0 59 3 170 0 60 3 170 0 62 3 170 0 63 3 170 0 64 3 170 0 66 3 170 0 67 3 170 0 68 3 170 0 69 3 170 0 73 3 170 0 77 3 170 0 79 3 170 0 80 3 170 0 82 3 170 0 83 3 170 0 88 3 170 0 89 3 170 0 90 3 170 0 91 3 170 0 92 3 170 0 93 3 170 0 94 3 170 0 96 3 170 0 99 3 170 0 103 3 170 0 107 3 170 0 108 3 170 0 109 3 170 0 111 3 170 0 117 3 170 0 118 3 170 0 119 3 170 0 120 3 170 0 121 3 170 0 122 3 170 0 123 3 170 0 124 3 170 0 125 3 170 0 127 3 170 1 46] 
#[1 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 7 237 0 134 7 237 0 135 7 237 0 136 7 237 0 137 7 237 0 138 7 237 0 139 7 237 0 140 7 237 0 141 7 237 0 142] 
#[0 3 174 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 7 241 0 56] 
#[1 1 165 0 11 7 245 0 19 3 178 0 55 3 178 0 124 3 178 0 125 3 178 0 127] 
#[0 3 182 0 11 0 55 0 124 0 125 0 127] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 7 249 0 145 7 249 0 146 7 249 0 147 7 249 0 148 7 249 0 149] 
#[1 2 82 0 6 2 82 0 9 1 165 0 11 6 81 0 19 1 193 0 33 7 253 0 167 7 253 0 170 7 253 0 171 6 89 0 187 8 1 0 188] 
#[1 0 205 0 11 8 5 0 86 0 209 0 124 0 213 0 125 8 9 0 145 8 9 0 146 8 9 0 147 8 9 0 148 8 9 0 149] 
#[1 2 82 0 6 2 82 0 9 1 165 0 11 6 81 0 19 1 193 0 33 8 13 0 167 8 13 0 170 8 13 0 171 6 89 0 187 8 17 0 188] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 8 21 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 8 21 0 134 8 21 0 135 8 21 0 136 8 21 0 137 8 21 0 138 8 21 0 139 8 21 0 140 8 21 0 141 8 21 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 8 21 0 213 8 21 0 214 8 21 0 215 8 21 0 219 8 21 0 220 8 21 0 221 8 21 0 222 8 21 0 223 8 21 0 230 8 21 0 231 8 21 0 232 8 21 0 233 8 21 0 234 8 21 0 235 8 21 0 236 8 21 0 237 8 21 0 238 8 21 0 240 8 21 0 242 8 21 0 244 8 21 0 245 8 21 0 246 8 21 0 247 8 21 0 248 8 21 0 249 8 21 0 250 8 21 1 40 8 21 1 41 8 21 1 42 8 21 1 43 8 21 1 44 8 21 1 45] 
#[1 2 82 0 6 2 82 0 9 6 81 0 19 6 89 0 187 8 25 0 188] 
#[0 3 186 0 6 0 9] 
#[0 3 190 0 6 0 9] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 8 29 0 145 8 29 0 146 8 29 0 147 8 29 0 148 8 29 0 149] 
#[1 2 82 0 6 2 82 0 9 1 165 0 11 6 81 0 19 1 193 0 33 8 33 0 167 8 33 0 170 8 33 0 171 6 89 0 187 8 37 0 188] 
#[1 8 41 0 6 8 45 0 9 8 49 0 184] 
#[0 8 53 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 57 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 8 61 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 65 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 69 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 73 0 133] 
#[0 8 77 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 81 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 8 85 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 89 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 8 93 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 105 0 134 5 105 0 135 5 105 0 136 5 105 0 137 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 8 93 0 213 5 105 0 214 5 105 0 215 8 93 0 219 8 93 0 220 8 93 0 221 8 93 0 222 8 93 0 223 8 93 0 230 8 93 0 231 8 93 0 232 8 93 0 233 8 93 0 234 8 93 0 235 8 93 0 236 8 93 0 237 8 93 0 238 8 93 0 240 8 93 0 242 8 93 0 244 8 93 0 245 8 93 0 246 8 93 0 247 8 93 0 248 8 93 0 249 8 93 0 250 5 105 1 40 5 105 1 41 5 105 1 42 5 105 1 43 5 105 1 44 5 105 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 8 97 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 105 0 134 5 105 0 135 5 105 0 136 5 105 0 137 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 8 97 0 213 5 105 0 214 5 105 0 215 8 97 0 219 8 97 0 220 8 97 0 221 8 97 0 222 8 97 0 223 8 97 0 230 8 97 0 231 8 97 0 232 8 97 0 233 8 97 0 234 8 97 0 235 8 97 0 236 8 97 0 237 8 97 0 238 8 97 0 240 8 97 0 242 8 97 0 244 8 97 0 245 8 97 0 246 8 97 0 247 8 97 0 248 8 97 0 249 8 97 0 250 5 105 1 40 5 105 1 41 5 105 1 42 5 105 1 43 5 105 1 44 5 105 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 0 6 0 77 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 8 101 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 105 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 8 109 0 145 8 109 0 146 8 109 0 147 8 109 0 148 8 109 0 149] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 8 113 0 19 5 217 0 20 5 221 0 21 5 225 0 24 5 229 0 29 5 233 0 30 5 237 0 32 5 241 0 57 5 245 0 72 5 249 0 75 5 253 0 85 6 1 0 110 6 5 0 239 6 9 0 241 6 13 0 243] 
#[0 3 194 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 3 198 0 5 3 198 0 8 3 198 0 10 1 165 0 11 3 198 0 22 3 198 0 23 3 198 0 25 3 198 0 26 3 198 0 34 3 198 0 49 3 198 0 50 3 198 0 53 3 198 0 54 3 198 0 55 3 198 0 56 3 198 0 59 3 198 0 60 3 198 0 62 3 198 0 63 3 198 0 66 3 198 0 67 3 198 0 68 3 198 0 69 3 198 0 73 3 198 0 77 3 198 0 79 3 198 0 80 3 198 0 82 3 198 0 88 3 198 0 90 3 198 0 91 3 198 0 92 3 198 0 93 3 198 0 94 3 198 0 96 3 198 0 103 3 198 0 107 3 198 0 108 3 198 0 109 3 198 0 111 3 198 0 117 3 198 0 118 3 198 0 119 3 198 0 120 3 198 0 121 3 198 0 122 3 198 0 123 3 198 0 124 3 198 0 125 3 198 0 127] 
#[0 3 202 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 3 206 0 5 3 206 0 8 3 206 0 10 1 165 0 11 3 206 0 22 3 206 0 23 3 206 0 25 3 206 0 26 3 206 0 34 3 206 0 49 3 206 0 50 3 206 0 53 3 206 0 54 3 206 0 55 3 206 0 56 3 206 0 59 3 206 0 60 3 206 0 62 3 206 0 63 3 206 0 66 3 206 0 67 3 206 0 68 3 206 0 69 3 206 0 73 3 206 0 77 3 206 0 79 3 206 0 80 3 206 0 82 3 206 0 88 3 206 0 90 3 206 0 91 3 206 0 92 3 206 0 93 3 206 0 94 3 206 0 96 3 206 0 103 3 206 0 107 3 206 0 108 3 206 0 109 3 206 0 111 3 206 0 117 3 206 0 118 3 206 0 119 3 206 0 120 3 206 0 121 3 206 0 122 3 206 0 123 3 206 0 124 3 206 0 125 3 206 0 127] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 5 225 0 24 5 229 0 29 5 233 0 30 5 237 0 32 5 241 0 57 5 245 0 72 5 249 0 75 5 253 0 85 8 117 0 101 6 1 0 110 6 5 0 239 6 9 0 241 6 13 0 243] 
#[1 4 17 0 68 8 121 0 92 8 125 1 28 8 125 1 29 8 125 1 30] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 5 225 0 24 5 229 0 29 5 233 0 30 5 237 0 32 5 241 0 57 4 13 0 67 4 17 0 68 5 245 0 72 5 249 0 75 5 253 0 85 6 1 0 110 6 5 0 239 6 9 0 241 6 13 0 243 8 129 1 27 8 129 1 28 8 129 1 29 8 129 1 30 8 129 1 31 8 129 1 32 8 129 1 33] 
#[0 3 210 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 3 214 0 5 3 214 0 8 3 214 0 10 1 165 0 11 3 214 0 22 3 214 0 23 3 214 0 25 3 214 0 26 3 214 0 34 3 214 0 49 3 214 0 50 3 214 0 53 3 214 0 54 3 214 0 55 3 214 0 56 3 214 0 59 3 214 0 60 3 214 0 62 3 214 0 63 3 214 0 66 3 214 0 67 3 214 0 68 3 214 0 69 3 214 0 73 3 214 0 77 3 214 0 79 3 214 0 80 3 214 0 82 3 214 0 88 3 214 0 90 3 214 0 91 3 214 0 92 3 214 0 93 3 214 0 94 3 214 0 96 3 214 0 103 3 214 0 107 3 214 0 108 3 214 0 109 3 214 0 111 3 214 0 117 3 214 0 118 3 214 0 119 3 214 0 120 3 214 0 121 3 214 0 122 3 214 0 123 3 214 0 124 3 214 0 125 3 214 0 127] 
#[1 1 126 0 1 1 126 0 3 0 187 0 5 1 126 0 7 0 187 0 8 0 187 0 10 0 187 0 11 1 126 0 12 1 126 0 14 1 126 0 16 1 126 0 17 1 126 0 18 1 126 0 19 1 126 0 20 1 126 0 21 0 6 0 22 0 6 0 23 1 126 0 24 0 6 0 25 0 6 0 26 1 126 0 29 1 126 0 30 1 126 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 1 126 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 126 0 72 0 6 0 73 1 126 0 75 0 6 0 80 0 6 0 82 1 126 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 107 0 6 0 108 0 6 0 109 1 126 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 133 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 137 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 0 191 0 22 0 195 0 23 0 199 0 25 0 203 0 26 0 207 0 34 0 211 0 49 0 215 0 50 3 218 0 53 3 218 0 54 3 218 0 55 0 219 0 56 0 223 0 59 0 227 0 60 0 231 0 62 0 235 0 63 0 239 0 66 0 243 0 67 0 247 0 68 0 251 0 69 0 255 0 73 3 218 0 77 3 218 0 79 1 3 0 80 1 7 0 82 1 11 0 88 1 15 0 90 1 19 0 91 1 23 0 92 1 27 0 93 1 31 0 94 1 35 0 96 1 39 0 103 3 218 0 107 1 43 0 108 1 47 0 109 1 51 0 111 1 55 0 117 1 59 0 118 1 63 0 119 1 67 0 120 1 71 0 121 1 75 0 122 1 79 0 123 1 83 0 124 1 87 0 125 3 218 0 127 4 73 0 134 8 145 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 149 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 3 222 0 53 3 222 0 54 3 222 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 3 222 0 77 3 222 0 79 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 3 222 0 93 0 6 0 94 0 6 0 96 0 6 0 103 3 222 0 107 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 1 91 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 1 91 0 127 8 153 0 133 8 157 0 161] 
#[0 8 161 0 99] 
#[0 8 165 0 55] 
#[0 8 169 0 103] 
#[1 1 165 0 11 1 193 0 33 8 173 0 167 8 173 0 170 8 173 0 171] 
#[0 3 226 0 11 0 55 0 124 0 125 0 127] 
#[1 0 9 0 34 0 13 0 35 0 17 0 47 0 21 0 49 0 25 0 56 0 29 0 59 0 105 0 63 0 37 0 64 0 105 0 66 0 45 0 83 0 105 0 88 0 53 0 89 0 105 0 90 0 61 0 91 0 65 0 96 0 69 0 99 0 73 0 103 1 173 0 127 4 245 0 151 4 245 0 153 4 245 0 154 4 245 0 158 0 105 0 164 4 245 0 172 4 245 0 173 4 245 0 177 4 245 0 178 4 245 0 189 4 245 0 190 4 245 0 191 0 137 0 192 4 245 0 193 4 245 0 194 4 245 0 195 4 245 0 196 4 245 0 197 4 245 0 198 4 245 0 199 4 245 0 200 4 245 0 201 4 245 0 202 4 245 0 203 4 245 0 205 4 245 0 206 4 245 0 207 4 245 0 208 4 245 0 212 3 230 1 46] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 3 234 0 22 3 234 0 23 5 225 0 24 3 234 0 25 3 234 0 26 5 229 0 29 5 233 0 30 5 237 0 32 3 234 0 34 3 234 0 35 3 234 0 47 3 234 0 49 3 234 0 50 3 234 0 53 3 234 0 54 3 234 0 55 3 234 0 56 5 241 0 57 3 234 0 59 3 234 0 60 3 234 0 62 3 234 0 63 3 234 0 64 3 234 0 66 3 234 0 67 3 234 0 68 3 234 0 69 5 245 0 72 3 234 0 73 5 249 0 75 3 234 0 77 3 234 0 79 3 234 0 80 3 234 0 82 3 234 0 83 5 253 0 85 3 234 0 88 3 234 0 89 3 234 0 90 3 234 0 91 3 234 0 92 3 234 0 93 3 234 0 94 3 234 0 96 3 234 0 99 3 234 0 103 3 234 0 107 3 234 0 108 3 234 0 109 6 1 0 110 3 234 0 111 3 234 0 117 3 234 0 118 3 234 0 119 3 234 0 120 3 234 0 121 3 234 0 122 3 234 0 123 3 234 0 124 3 234 0 125 3 234 0 127 6 5 0 239 6 9 0 241 6 13 0 243 3 234 1 46] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 8 177 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 8 177 0 134 8 177 0 135 8 177 0 136 8 177 0 137 8 177 0 138 8 177 0 139 8 177 0 140 8 177 0 141 8 177 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 8 177 0 213 8 177 0 214 8 177 0 215 8 177 0 219 8 177 0 220 8 177 0 221 8 177 0 222 8 177 0 223 8 177 0 230 8 177 0 231 8 177 0 232 8 177 0 233 8 177 0 234 8 177 0 235 8 177 0 236 8 177 0 237 8 177 0 238 8 177 0 240 8 177 0 242 8 177 0 244 8 177 0 245 8 177 0 246 8 177 0 247 8 177 0 248 8 177 0 249 8 177 0 250 8 177 1 40 8 177 1 41 8 177 1 42 8 177 1 43 8 177 1 44 8 177 1 45] 
#[1 2 177 0 122 8 181 0 140] 
#[1 2 177 0 122 8 185 0 140] 
#[1 0 205 0 11 8 189 0 55 0 209 0 124 0 213 0 125 1 173 0 127 6 57 0 145 6 57 0 146 6 57 0 147 6 57 0 148 6 57 0 149 6 61 0 181] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 193 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 197 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 201 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 205 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 209 0 133 8 213 0 167 8 213 0 170 8 213 0 171] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 217 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 221 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 225 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 229 0 133] 
#[0 8 233 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 8 237 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 205 0 11 8 241 0 55 0 209 0 124 0 213 0 125 1 173 0 127 6 233 0 145 6 233 0 146 6 233 0 147 6 233 0 148 6 233 0 149 6 237 0 176] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 245 0 133 8 249 0 167 8 249 0 170 8 249 0 171] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 253 0 133 9 1 0 167 9 1 0 170 9 1 0 171 9 5 0 183] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 9 0 133 9 13 0 183] 
#[1 1 217 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 17 0 133 9 21 0 183] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 9 25 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 29 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 9 33 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 37 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 9 41 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 45 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 49 0 133 9 53 0 167 9 53 0 170 9 53 0 171] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 9 57 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 61 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 9 65 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 69 0 133] 
#[0 9 73 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 9 77 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 3 238 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 9 81 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 9 81 0 134 9 81 0 135 9 81 0 136 9 81 0 137 9 81 0 138 9 81 0 139 9 81 0 140 9 81 0 141 9 81 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 9 81 0 213 9 81 0 214 9 81 0 215 9 81 0 219 9 81 0 220 9 81 0 221 9 81 0 222 9 81 0 223 9 81 0 230 9 81 0 231 9 81 0 232 9 81 0 233 9 81 0 234 9 81 0 235 9 81 0 236 9 81 0 237 9 81 0 238 9 81 0 240 9 81 0 242 9 81 0 244 9 81 0 245 9 81 0 246 9 81 0 247 9 81 0 248 9 81 0 249 9 81 0 250 9 81 1 40 9 81 1 41 9 81 1 42 9 81 1 43 9 81 1 44 9 81 1 45] 
#[1 9 85 0 116 9 89 0 144] 
#[0 3 242 0 10 0 116] 
#[0 3 246 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 3 250 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 9 93 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 9 93 0 134 9 93 0 135 9 93 0 136 9 93 0 137 9 93 0 138 9 93 0 139 9 93 0 140 9 93 0 141 9 93 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 9 93 0 213 9 93 0 214 9 93 0 215 9 93 0 219 9 93 0 220 9 93 0 221 9 93 0 222 9 93 0 223 9 93 0 230 9 93 0 231 9 93 0 232 9 93 0 233 9 93 0 234 9 93 0 235 9 93 0 236 9 93 0 237 9 93 0 238 9 93 0 240 9 93 0 242 9 93 0 244 9 93 0 245 9 93 0 246 9 93 0 247 9 93 0 248 9 93 0 249 9 93 0 250 9 93 1 40 9 93 1 41 9 93 1 42 9 93 1 43 9 93 1 44 9 93 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 9 101 0 73 2 153 0 80 9 97 0 86 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 9 101 0 134 9 101 0 135 9 101 0 136 9 101 0 137 9 101 0 138 9 101 0 139 9 101 0 140 9 101 0 141 9 101 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 9 101 0 213 9 101 0 214 9 101 0 215 9 101 0 219 9 101 0 220 9 101 0 221 9 101 0 222 9 101 0 223 9 101 0 230 9 101 0 231 9 101 0 232 9 101 0 233 9 101 0 234 9 101 0 235 9 101 0 236 9 101 0 237 9 101 0 238 9 101 0 240 9 101 0 242 9 101 0 244 9 101 0 245 9 101 0 246 9 101 0 247 9 101 0 248 9 101 0 249 9 101 0 250 9 101 1 40 9 101 1 41 9 101 1 42 9 101 1 43 9 101 1 44 9 101 1 45] 
#[1 5 165 0 1 1 95 0 3 5 173 0 5 3 254 0 6 5 177 0 7 5 181 0 8 3 254 0 9 5 185 0 10 5 189 0 11 5 193 0 12 3 254 0 13 1 99 0 14 3 254 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 3 254 0 22 3 254 0 23 5 225 0 24 3 254 0 25 3 254 0 26 1 103 0 29 5 233 0 30 5 237 0 32 3 254 0 34 3 254 0 35 3 254 0 47 3 254 0 49 3 254 0 50 3 254 0 53 3 254 0 54 3 254 0 55 3 254 0 56 5 241 0 57 3 254 0 59 3 254 0 60 3 254 0 62 3 254 0 63 3 254 0 64 3 254 0 66 3 254 0 67 3 254 0 68 3 254 0 69 5 245 0 72 3 254 0 73 5 249 0 75 3 254 0 77 3 254 0 79 3 254 0 80 3 254 0 82 3 254 0 83 5 253 0 85 3 254 0 88 3 254 0 89 3 254 0 90 3 254 0 91 3 254 0 92 3 254 0 93 3 254 0 94 3 254 0 96 3 254 0 97 3 254 0 99 3 254 0 101 3 254 0 102 3 254 0 103 3 254 0 107 3 254 0 108 3 254 0 109 6 1 0 110 3 254 0 111 3 254 0 117 3 254 0 118 3 254 0 119 3 254 0 120 3 254 0 121 3 254 0 122 3 254 0 123 3 254 0 124 3 254 0 125 3 254 0 127 6 5 0 239 6 9 0 241 6 13 0 243 3 254 1 46] 
#[1 3 82 0 1 3 82 0 3 3 82 0 5 3 82 0 6 3 82 0 7 3 82 0 8 9 105 0 9 3 82 0 10 3 82 0 11 3 82 0 12 3 82 0 13 3 82 0 14 1 107 0 15 3 82 0 16 3 82 0 17 3 82 0 18 3 82 0 19 3 82 0 20 3 82 0 21 3 82 0 22 3 82 0 23 3 82 0 24 3 82 0 25 3 82 0 26 3 82 0 29 3 82 0 30 3 82 0 32 3 82 0 34 3 82 0 35 3 82 0 47 3 82 0 49 3 82 0 50 3 82 0 53 3 82 0 54 3 82 0 55 3 82 0 56 3 82 0 57 3 82 0 59 3 82 0 60 3 82 0 62 3 82 0 63 3 82 0 64 3 82 0 66 3 82 0 67 3 82 0 68 3 82 0 69 3 82 0 72 3 82 0 73 3 82 0 75 3 82 0 77 3 82 0 79 3 82 0 80 3 82 0 82 3 82 0 83 3 82 0 85 3 82 0 88 3 82 0 89 3 82 0 90 3 82 0 91 3 82 0 92 3 82 0 93 3 82 0 94 3 82 0 96 3 82 0 97 3 82 0 99 3 82 0 101 3 82 0 102 3 82 0 103 3 82 0 107 3 82 0 108 3 82 0 109 3 82 0 110 3 82 0 111 3 82 0 117 3 82 0 118 3 82 0 119 3 82 0 120 3 82 0 121 3 82 0 122 3 82 0 123 3 82 0 124 3 82 0 125 3 82 0 127 9 113 0 229 3 82 1 46] 
#[0 4 2 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 4 6 0 1 4 6 0 3 4 6 0 5 4 6 0 6 4 6 0 7 4 6 0 8 9 117 0 9 4 6 0 10 4 6 0 11 4 6 0 12 4 6 0 13 4 6 0 14 1 111 0 15 4 6 0 16 4 6 0 17 4 6 0 18 4 6 0 19 4 6 0 20 4 6 0 21 4 6 0 22 4 6 0 23 4 6 0 24 4 6 0 25 4 6 0 26 4 6 0 29 4 6 0 30 4 6 0 32 4 6 0 34 4 6 0 35 4 6 0 47 4 6 0 49 4 6 0 50 4 6 0 53 4 6 0 54 4 6 0 55 4 6 0 56 4 6 0 57 4 6 0 59 4 6 0 60 4 6 0 62 4 6 0 63 4 6 0 64 4 6 0 66 4 6 0 67 4 6 0 68 4 6 0 69 4 6 0 72 4 6 0 73 4 6 0 75 4 6 0 77 4 6 0 79 4 6 0 80 4 6 0 82 4 6 0 83 4 6 0 85 4 6 0 88 4 6 0 89 4 6 0 90 4 6 0 91 4 6 0 92 4 6 0 93 4 6 0 94 4 6 0 96 4 6 0 97 4 6 0 99 4 6 0 101 4 6 0 102 4 6 0 103 4 6 0 107 4 6 0 108 4 6 0 109 4 6 0 110 4 6 0 111 4 6 0 117 4 6 0 118 4 6 0 119 4 6 0 120 4 6 0 121 4 6 0 122 4 6 0 123 4 6 0 124 4 6 0 125 4 6 0 127 9 125 0 228 4 6 1 46] 
#[0 4 10 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 5 165 0 1 1 115 0 3 5 173 0 5 4 14 0 6 5 177 0 7 5 181 0 8 4 14 0 9 5 185 0 10 5 189 0 11 5 193 0 12 4 14 0 13 1 119 0 14 4 14 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 4 14 0 22 4 14 0 23 5 225 0 24 4 14 0 25 4 14 0 26 1 123 0 29 5 233 0 30 5 237 0 32 4 14 0 34 4 14 0 35 4 14 0 47 4 14 0 49 4 14 0 50 4 14 0 53 4 14 0 54 4 14 0 55 4 14 0 56 5 241 0 57 4 14 0 59 4 14 0 60 4 14 0 62 4 14 0 63 4 14 0 64 4 14 0 66 4 14 0 67 4 14 0 68 4 14 0 69 5 245 0 72 4 14 0 73 5 249 0 75 4 14 0 77 4 14 0 79 4 14 0 80 4 14 0 82 4 14 0 83 5 253 0 85 4 14 0 88 4 14 0 89 4 14 0 90 4 14 0 91 4 14 0 92 4 14 0 93 4 14 0 94 4 14 0 96 4 14 0 97 4 14 0 99 4 14 0 101 4 14 0 102 4 14 0 103 4 14 0 107 4 14 0 108 4 14 0 109 6 1 0 110 4 14 0 111 4 14 0 117 4 14 0 118 4 14 0 119 4 14 0 120 4 14 0 121 4 14 0 122 4 14 0 123 4 14 0 124 4 14 0 125 4 14 0 127 6 5 0 239 6 9 0 241 6 13 0 243 4 14 1 46] 
#[0 9 129 0 6] 
#[0 4 18 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 5 165 0 1 1 127 0 3 5 173 0 5 4 22 0 6 5 177 0 7 5 181 0 8 4 22 0 9 5 185 0 10 5 189 0 11 5 193 0 12 4 22 0 13 1 131 0 14 4 22 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 4 22 0 22 4 22 0 23 5 225 0 24 4 22 0 25 4 22 0 26 1 135 0 29 5 233 0 30 5 237 0 32 4 22 0 34 4 22 0 35 4 22 0 47 4 22 0 49 4 22 0 50 4 22 0 53 4 22 0 54 4 22 0 55 4 22 0 56 5 241 0 57 4 22 0 59 4 22 0 60 4 22 0 62 4 22 0 63 4 22 0 64 4 22 0 66 4 22 0 67 4 22 0 68 4 22 0 69 5 245 0 72 4 22 0 73 5 249 0 75 4 22 0 77 4 22 0 79 4 22 0 80 4 22 0 82 4 22 0 83 5 253 0 85 4 22 0 88 4 22 0 89 4 22 0 90 4 22 0 91 4 22 0 92 4 22 0 93 4 22 0 94 4 22 0 96 4 22 0 97 4 22 0 99 4 22 0 101 4 22 0 102 4 22 0 103 4 22 0 107 4 22 0 108 4 22 0 109 6 1 0 110 4 22 0 111 4 22 0 117 4 22 0 118 4 22 0 119 4 22 0 120 4 22 0 121 4 22 0 122 4 22 0 123 4 22 0 124 4 22 0 125 4 22 0 127 6 5 0 239 6 9 0 241 6 13 0 243 4 22 1 46] 
#[1 5 165 0 1 1 139 0 3 5 173 0 5 4 26 0 6 5 177 0 7 5 181 0 8 4 26 0 9 5 185 0 10 5 189 0 11 5 193 0 12 4 26 0 13 1 143 0 14 4 26 0 15 5 201 0 16 5 205 0 17 5 209 0 18 4 26 0 19 5 217 0 20 5 221 0 21 4 26 0 22 4 26 0 23 5 225 0 24 4 26 0 25 4 26 0 26 1 147 0 29 5 233 0 30 5 237 0 32 4 26 0 34 4 26 0 35 4 26 0 47 4 26 0 49 4 26 0 50 4 26 0 53 4 26 0 54 4 26 0 55 4 26 0 56 5 241 0 57 4 26 0 59 4 26 0 60 4 26 0 62 4 26 0 63 4 26 0 64 4 26 0 66 4 26 0 67 4 26 0 68 4 26 0 69 5 245 0 72 4 26 0 73 5 249 0 75 4 26 0 77 4 26 0 79 4 26 0 80 4 26 0 82 4 26 0 83 5 253 0 85 4 26 0 88 4 26 0 89 4 26 0 90 4 26 0 91 4 26 0 92 4 26 0 93 4 26 0 94 4 26 0 96 4 26 0 97 4 26 0 99 4 26 0 101 4 26 0 102 4 26 0 103 4 26 0 107 4 26 0 108 4 26 0 109 6 1 0 110 4 26 0 111 4 26 0 117 4 26 0 118 4 26 0 119 4 26 0 120 4 26 0 121 4 26 0 122 4 26 0 123 4 26 0 124 4 26 0 125 4 26 0 127 6 5 0 239 6 9 0 241 6 13 0 243 4 26 1 46] 
#[1 5 165 0 1 1 151 0 3 5 173 0 5 4 30 0 6 5 177 0 7 5 181 0 8 4 30 0 9 5 185 0 10 5 189 0 11 5 193 0 12 4 30 0 13 1 155 0 14 4 30 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 4 30 0 22 4 30 0 23 5 225 0 24 4 30 0 25 4 30 0 26 1 159 0 29 5 233 0 30 5 237 0 32 4 30 0 34 4 30 0 35 4 30 0 47 4 30 0 49 4 30 0 50 4 30 0 53 4 30 0 54 4 30 0 55 4 30 0 56 5 241 0 57 4 30 0 59 4 30 0 60 4 30 0 62 4 30 0 63 4 30 0 64 4 30 0 66 4 30 0 67 4 30 0 68 4 30 0 69 5 245 0 72 4 30 0 73 5 249 0 75 4 30 0 77 4 30 0 79 4 30 0 80 4 30 0 82 4 30 0 83 5 253 0 85 4 30 0 88 4 30 0 89 4 30 0 90 4 30 0 91 4 30 0 92 4 30 0 93 4 30 0 94 4 30 0 96 4 30 0 97 4 30 0 99 4 30 0 101 4 30 0 102 4 30 0 103 4 30 0 107 4 30 0 108 4 30 0 109 6 1 0 110 4 30 0 111 4 30 0 117 4 30 0 118 4 30 0 119 4 30 0 120 4 30 0 121 4 30 0 122 4 30 0 123 4 30 0 124 4 30 0 125 4 30 0 127 6 5 0 239 6 9 0 241 6 13 0 243 4 30 1 46] 
#[1 5 165 0 1 1 163 0 3 5 173 0 5 4 34 0 6 5 177 0 7 5 181 0 8 4 34 0 9 5 185 0 10 5 189 0 11 5 193 0 12 4 34 0 13 1 167 0 14 4 34 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 4 34 0 22 4 34 0 23 5 225 0 24 4 34 0 25 4 34 0 26 1 171 0 29 5 233 0 30 5 237 0 32 4 34 0 34 4 34 0 35 4 34 0 47 4 34 0 49 4 34 0 50 4 34 0 53 4 34 0 54 4 34 0 55 4 34 0 56 5 241 0 57 4 34 0 59 4 34 0 60 4 34 0 62 4 34 0 63 4 34 0 64 4 34 0 66 4 34 0 67 4 34 0 68 4 34 0 69 5 245 0 72 4 34 0 73 5 249 0 75 4 34 0 77 4 34 0 79 4 34 0 80 4 34 0 82 4 34 0 83 5 253 0 85 4 34 0 88 4 34 0 89 4 34 0 90 4 34 0 91 4 34 0 92 4 34 0 93 4 34 0 94 4 34 0 96 4 34 0 97 4 34 0 99 4 34 0 101 4 34 0 102 4 34 0 103 4 34 0 107 4 34 0 108 4 34 0 109 6 1 0 110 4 34 0 111 4 34 0 117 4 34 0 118 4 34 0 119 4 34 0 120 4 34 0 121 4 34 0 122 4 34 0 123 4 34 0 124 4 34 0 125 4 34 0 127 6 5 0 239 6 9 0 241 6 13 0 243 4 34 1 46] 
#[1 5 165 0 1 1 175 0 3 5 173 0 5 4 38 0 6 5 177 0 7 5 181 0 8 4 38 0 9 5 185 0 10 5 189 0 11 5 193 0 12 4 38 0 13 1 179 0 14 4 38 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 4 38 0 22 4 38 0 23 5 225 0 24 4 38 0 25 4 38 0 26 1 183 0 29 5 233 0 30 5 237 0 32 4 38 0 34 4 38 0 35 4 38 0 47 4 38 0 49 4 38 0 50 4 38 0 53 4 38 0 54 4 38 0 55 4 38 0 56 5 241 0 57 4 38 0 59 4 38 0 60 4 38 0 62 4 38 0 63 4 38 0 64 4 38 0 66 4 38 0 67 4 38 0 68 4 38 0 69 5 245 0 72 4 38 0 73 5 249 0 75 4 38 0 77 4 38 0 79 4 38 0 80 4 38 0 82 4 38 0 83 5 253 0 85 4 38 0 88 4 38 0 89 4 38 0 90 4 38 0 91 4 38 0 92 4 38 0 93 4 38 0 94 4 38 0 96 4 38 0 97 4 38 0 99 4 38 0 101 4 38 0 102 4 38 0 103 4 38 0 107 4 38 0 108 4 38 0 109 6 1 0 110 4 38 0 111 4 38 0 117 4 38 0 118 4 38 0 119 4 38 0 120 4 38 0 121 4 38 0 122 4 38 0 123 4 38 0 124 4 38 0 125 4 38 0 127 6 5 0 239 6 9 0 241 6 13 0 243 4 38 1 46] 
#[0 4 42 0 11 0 124 0 125 0 127] 
#[0 4 46 0 55 0 127] 
#[1 2 177 0 122 9 133 0 140] 
#[1 1 193 0 33 9 137 0 167 9 137 0 170 9 137 0 171] 
#[1 2 177 0 122 9 141 0 140] 
#[0 4 50 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 9 145 0 134 9 145 0 135 9 145 0 136 9 145 0 137 9 145 0 138 9 145 0 139 9 145 0 140 9 145 0 141 9 145 0 142] 
#[1 4 54 0 6 4 54 0 9 9 149 0 169] 
#[0 4 58 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 9 153 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 9 153 0 134 9 153 0 135 9 153 0 136 9 153 0 137 9 153 0 138 9 153 0 139 9 153 0 140 9 153 0 141 9 153 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 9 153 0 213 9 153 0 214 9 153 0 215 9 153 0 219 9 153 0 220 9 153 0 221 9 153 0 222 9 153 0 223 9 153 0 230 9 153 0 231 9 153 0 232 9 153 0 233 9 153 0 234 9 153 0 235 9 153 0 236 9 153 0 237 9 153 0 238 9 153 0 240 9 153 0 242 9 153 0 244 9 153 0 245 9 153 0 246 9 153 0 247 9 153 0 248 9 153 0 249 9 153 0 250 9 153 1 40 9 153 1 41 9 153 1 42 9 153 1 43 9 153 1 44 9 153 1 45] 
#[1 2 82 0 6 2 82 0 9 1 165 0 11 6 81 0 19 1 193 0 33 9 157 0 167 9 157 0 170 9 157 0 171 6 89 0 187 9 161 0 188] 
#[1 2 82 0 6 2 82 0 9 6 81 0 19 6 89 0 187 9 165 0 188] 
#[0 4 62 0 6 0 9] 
#[1 0 205 0 11 0 209 0 124 0 213 0 125 9 169 0 145 9 169 0 146 9 169 0 147 9 169 0 148 9 169 0 149] 
#[1 2 82 0 6 2 82 0 9 1 165 0 11 6 81 0 19 1 193 0 33 9 173 0 167 9 173 0 170 9 173 0 171 6 89 0 187 9 177 0 188] 
#[1 2 82 0 6 2 82 0 9 6 81 0 19 6 89 0 187 9 181 0 188] 
#[0 4 66 0 6 0 9] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 4 70 0 6 5 177 0 7 5 181 0 8 4 70 0 9 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 5 225 0 24 5 229 0 29 5 233 0 30 5 237 0 32 5 241 0 57 5 245 0 72 5 249 0 75 5 253 0 85 6 1 0 110 6 5 0 239 6 9 0 241 6 13 0 243] 
#[0 4 74 0 6 0 9] 
#[1 2 82 0 6 2 82 0 9 1 165 0 11 6 81 0 19 1 193 0 33 9 185 0 167 9 185 0 170 9 185 0 171 6 89 0 187 9 189 0 188] 
#[1 2 82 0 6 2 82 0 9 6 81 0 19 6 89 0 187 9 193 0 188] 
#[0 4 78 0 6 0 9] 
#[0 4 82 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 33 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 205 0 11 3 197 0 38 3 217 0 40 3 205 0 84 3 209 0 86 0 209 0 124 0 213 0 125 3 213 0 145 3 213 0 146 3 213 0 147 3 213 0 148 3 213 0 149 3 217 0 182 9 197 0 186] 
#[0 4 86 0 6 0 9] 
#[0 9 201 0 64] 
#[0 9 205 0 55] 
#[0 9 209 0 89] 
#[0 9 213 0 55] 
#[0 9 217 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 9 221 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 9 225 0 89] 
#[0 9 229 0 55] 
#[0 9 233 0 89] 
#[0 9 237 0 55] 
#[1 1 126 0 1 1 126 0 3 0 187 0 5 1 126 0 7 0 187 0 8 0 187 0 10 0 187 0 11 1 126 0 12 1 126 0 14 1 126 0 16 1 126 0 17 1 126 0 18 1 126 0 19 1 126 0 20 1 126 0 21 0 6 0 22 0 6 0 23 1 126 0 24 0 6 0 25 0 6 0 26 1 126 0 29 1 126 0 30 1 126 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 1 126 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 126 0 72 0 6 0 73 1 126 0 75 0 6 0 80 0 6 0 82 1 126 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 1 126 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 241 0 133] 
#[1 1 126 0 1 1 126 0 3 0 187 0 5 1 126 0 7 0 187 0 8 0 187 0 10 0 187 0 11 1 126 0 12 1 126 0 14 1 126 0 16 1 126 0 17 1 126 0 18 1 126 0 19 1 126 0 20 1 126 0 21 0 6 0 22 0 6 0 23 1 126 0 24 0 6 0 25 0 6 0 26 1 126 0 29 1 126 0 30 1 126 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 1 126 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 126 0 72 0 6 0 73 1 126 0 75 0 6 0 77 0 6 0 80 0 6 0 82 1 126 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 1 126 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 245 0 133] 
#[1 9 249 0 77 1 37 0 119 1 173 0 127 9 253 0 135] 
#[1 0 6 0 77 0 6 0 119 0 6 0 127 10 1 0 133] 
#[1 1 165 0 11 10 5 0 70] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 10 9 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 10 9 0 134 10 9 0 135 10 9 0 136 10 9 0 137 10 9 0 138 10 9 0 139 10 9 0 140 10 9 0 141 10 9 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 10 9 0 213 10 9 0 214 10 9 0 215 10 9 0 219 10 9 0 220 10 9 0 221 10 9 0 222 10 9 0 223 10 9 0 230 10 9 0 231 10 9 0 232 10 9 0 233 10 9 0 234 10 9 0 235 10 9 0 236 10 9 0 237 10 9 0 238 10 9 0 240 10 9 0 242 10 9 0 244 10 9 0 245 10 9 0 246 10 9 0 247 10 9 0 248 10 9 0 249 10 9 0 250 10 9 1 40 10 9 1 41 10 9 1 42 10 9 1 43 10 9 1 44 10 9 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 1 187 0 22 1 191 0 23 1 195 0 25 1 199 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 53 0 6 0 54 0 6 0 55 0 6 0 56 0 6 0 59 1 203 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 207 0 73 1 211 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 1 215 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 1 219 0 111 1 223 0 117 1 227 0 118 0 179 0 119 1 231 0 120 1 235 0 121 1 239 0 122 1 243 0 123 1 247 0 124 1 251 0 125 0 6 0 127 10 13 0 133 10 17 0 134 10 17 0 135 10 17 0 136 10 17 0 137 10 17 0 138 10 17 0 139 10 17 0 140 10 17 0 141 10 17 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 10 17 0 213 10 17 0 214 10 17 0 215 10 17 0 219 10 17 0 220 10 17 0 221 10 17 0 222 10 17 0 223 10 17 0 230 10 17 0 231 10 17 0 232 10 17 0 233 10 17 0 234 10 17 0 235 10 17 0 236 10 17 0 237 10 17 0 238 10 17 0 240 10 17 0 242 10 17 0 244 10 17 0 245 10 17 0 246 10 17 0 247 10 17 0 248 10 17 0 249 10 17 0 250 10 17 1 40 10 17 1 41 10 17 1 42 10 17 1 43 10 17 1 44 10 17 1 45] 
#[0 10 21 0 79] 
#[0 4 90 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 4 94 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 0 6 0 107 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 10 25 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 29 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 10 33 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 37 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 4 98 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 1 82 0 1 1 82 0 3 1 82 0 5 1 82 0 7 1 82 0 8 1 82 0 10 1 82 0 11 1 82 0 12 1 82 0 14 1 82 0 16 1 82 0 17 1 82 0 18 1 82 0 19 1 82 0 20 1 82 0 21 1 82 0 22 1 82 0 23 1 82 0 24 1 82 0 25 1 82 0 26 1 82 0 29 1 82 0 30 1 82 0 32 1 82 0 34 1 82 0 49 1 82 0 50 1 82 0 56 1 82 0 57 1 82 0 59 1 82 0 60 1 82 0 62 1 82 0 63 1 82 0 66 1 82 0 67 1 82 0 68 1 82 0 69 1 82 0 72 1 82 0 73 1 82 0 75 1 82 0 80 1 82 0 82 1 82 0 85 1 82 0 88 1 82 0 90 1 82 0 91 1 82 0 92 1 255 0 93 1 82 0 94 1 82 0 96 1 82 0 103 1 82 0 108 1 82 0 109 1 82 0 110 1 82 0 111 1 82 0 117 1 82 0 118 1 82 0 119 1 82 0 120 1 82 0 121 1 82 0 122 1 82 0 123 1 82 0 124 1 82 0 125 1 82 0 127] 
#[1 10 45 0 93 1 37 0 119 10 49 0 135] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 10 53 0 153 10 53 0 159 4 61 0 164 10 53 0 172 10 53 0 173 10 53 0 177 10 53 0 178 10 53 0 199 10 53 0 200 10 53 0 201 10 53 0 202 10 53 0 203 10 53 0 205 10 53 0 206 10 53 0 207 10 53 0 208 10 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 10 53 0 251 10 53 0 252 10 53 0 253 10 53 0 254 10 53 0 255 10 53 1 0 10 53 1 1 10 53 1 2 10 53 1 3 10 53 1 4 10 53 1 5 10 53 1 6 10 53 1 7 10 53 1 8 10 53 1 9 10 53 1 10 10 53 1 11 10 53 1 12 10 53 1 20 4 153 1 21 10 53 1 22 10 53 1 23 10 53 1 24 10 53 1 25 10 53 1 26 10 53 1 27 10 53 1 28 10 53 1 29 10 53 1 30 10 53 1 31 10 53 1 32 10 53 1 33 10 53 1 34 10 53 1 35 10 53 1 36 10 53 1 37 10 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 4 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 4 106 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 10 57 0 99] 
#[0 4 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 10 61 0 7 4 114 0 11 4 114 0 55 4 114 0 124 4 114 0 125 4 114 0 127] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 4 118 0 22 4 118 0 23 5 225 0 24 4 118 0 25 4 118 0 26 5 229 0 29 5 233 0 30 5 237 0 32 4 118 0 34 4 118 0 35 4 118 0 47 4 118 0 49 4 118 0 50 4 118 0 53 4 118 0 54 4 118 0 55 4 118 0 56 5 241 0 57 4 118 0 59 4 118 0 60 4 118 0 62 4 118 0 63 4 118 0 64 4 118 0 66 4 118 0 67 4 118 0 68 4 118 0 69 5 245 0 72 4 118 0 73 5 249 0 75 4 118 0 77 4 118 0 79 4 118 0 80 4 118 0 82 4 118 0 83 5 253 0 85 4 118 0 88 4 118 0 89 4 118 0 90 4 118 0 91 4 118 0 92 4 118 0 93 4 118 0 94 4 118 0 96 4 118 0 99 4 118 0 103 4 118 0 107 4 118 0 108 4 118 0 109 6 1 0 110 4 118 0 111 4 118 0 117 4 118 0 118 4 118 0 119 4 118 0 120 4 118 0 121 4 118 0 122 4 118 0 123 4 118 0 124 4 118 0 125 4 118 0 127 6 5 0 239 6 9 0 241 6 13 0 243 4 118 1 46] 
#[1 1 217 0 5 10 65 0 31 10 69 0 183] 
#[1 1 217 0 5 10 73 0 31 10 77 0 183] 
#[0 10 81 0 56] 
#[0 10 85 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 89 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 10 93 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 97 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 101 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 105 0 133] 
#[0 10 109 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 113 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 10 117 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 121 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 10 125 0 99] 
#[0 10 129 0 55] 
#[0 10 133 0 103] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 137 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 141 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 145 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 149 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 193 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 153 0 133 10 157 0 167 10 157 0 170 10 157 0 171] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 161 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 165 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 169 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 173 0 133] 
#[0 10 177 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 181 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 10 185 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 189 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 10 193 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 197 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 201 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 205 0 133] 
#[0 10 209 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 213 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 10 217 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 10 221 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 10 225 0 99] 
#[0 10 229 0 55] 
#[1 2 3 0 1 2 7 0 3 2 11 0 5 4 122 0 6 2 15 0 7 2 19 0 8 4 122 0 9 2 23 0 10 2 27 0 11 2 31 0 12 4 122 0 13 2 35 0 14 4 122 0 15 2 39 0 16 2 43 0 17 2 47 0 18 2 51 0 19 2 55 0 20 2 59 0 21 4 122 0 22 4 122 0 23 2 63 0 24 4 122 0 25 4 122 0 26 2 67 0 29 2 71 0 30 2 75 0 32 4 122 0 34 4 122 0 35 4 122 0 47 4 122 0 49 4 122 0 50 4 122 0 53 4 122 0 54 4 122 0 55 4 122 0 56 2 79 0 57 4 122 0 59 4 122 0 60 4 122 0 62 4 122 0 63 4 122 0 64 4 122 0 66 4 122 0 67 4 122 0 68 4 122 0 69 2 83 0 72 4 122 0 73 2 87 0 75 4 122 0 77 4 122 0 79 4 122 0 80 4 122 0 82 4 122 0 83 2 91 0 85 4 122 0 88 4 122 0 89 4 122 0 90 4 122 0 91 4 122 0 92 4 122 0 93 4 122 0 94 4 122 0 96 4 122 0 97 4 122 0 99 4 122 0 101 4 122 0 102 4 122 0 103 4 122 0 107 4 122 0 108 4 122 0 109 2 95 0 110 4 122 0 111 4 122 0 117 4 122 0 118 4 122 0 119 4 122 0 120 4 122 0 121 4 122 0 122 4 122 0 123 4 122 0 124 4 122 0 125 4 122 0 127 6 5 0 239 6 9 0 241 6 13 0 243 4 122 1 46] 
#[0 4 126 0 10 0 113 0 116] 
#[1 10 233 0 10 10 237 0 116] 
#[1 5 165 0 1 2 99 0 3 5 173 0 5 4 130 0 6 5 177 0 7 5 181 0 8 4 130 0 9 5 185 0 10 5 189 0 11 5 193 0 12 4 130 0 13 2 103 0 14 4 130 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 4 130 0 22 4 130 0 23 5 225 0 24 4 130 0 25 4 130 0 26 2 107 0 29 5 233 0 30 5 237 0 32 4 130 0 34 4 130 0 35 4 130 0 47 4 130 0 49 4 130 0 50 4 130 0 53 4 130 0 54 4 130 0 55 4 130 0 56 5 241 0 57 4 130 0 59 4 130 0 60 4 130 0 62 4 130 0 63 4 130 0 64 4 130 0 66 4 130 0 67 4 130 0 68 4 130 0 69 5 245 0 72 4 130 0 73 5 249 0 75 4 130 0 77 4 130 0 79 4 130 0 80 4 130 0 82 4 130 0 83 5 253 0 85 4 130 0 88 4 130 0 89 4 130 0 90 4 130 0 91 4 130 0 92 4 130 0 93 4 130 0 94 4 130 0 96 4 130 0 97 4 130 0 99 4 130 0 101 4 130 0 102 4 130 0 103 4 130 0 107 4 130 0 108 4 130 0 109 6 1 0 110 4 130 0 111 4 130 0 117 4 130 0 118 4 130 0 119 4 130 0 120 4 130 0 121 4 130 0 122 4 130 0 123 4 130 0 124 4 130 0 125 4 130 0 127 6 5 0 239 6 9 0 241 6 13 0 243 4 130 1 46] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 10 241 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 10 241 0 134 10 241 0 135 10 241 0 136 10 241 0 137 10 241 0 138 10 241 0 139 10 241 0 140 10 241 0 141 10 241 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 10 241 0 213 10 241 0 214 10 241 0 215 10 241 0 219 10 241 0 220 10 241 0 221 10 241 0 222 10 241 0 223 10 241 0 230 10 241 0 231 10 241 0 232 10 241 0 233 10 241 0 234 10 241 0 235 10 241 0 236 10 241 0 237 10 241 0 238 10 241 0 240 10 241 0 242 10 241 0 244 10 241 0 245 10 241 0 246 10 241 0 247 10 241 0 248 10 241 0 249 10 241 0 250 10 241 1 40 10 241 1 41 10 241 1 42 10 241 1 43 10 241 1 44 10 241 1 45] 
#[1 5 165 0 1 2 111 0 3 5 173 0 5 4 134 0 6 5 177 0 7 5 181 0 8 4 134 0 9 5 185 0 10 5 189 0 11 5 193 0 12 4 134 0 13 2 115 0 14 4 134 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 4 134 0 22 4 134 0 23 5 225 0 24 4 134 0 25 4 134 0 26 2 119 0 29 5 233 0 30 5 237 0 32 4 134 0 34 4 134 0 35 4 134 0 47 4 134 0 49 4 134 0 50 4 134 0 53 4 134 0 54 4 134 0 55 4 134 0 56 5 241 0 57 4 134 0 59 4 134 0 60 4 134 0 62 4 134 0 63 4 134 0 64 4 134 0 66 4 134 0 67 4 134 0 68 4 134 0 69 5 245 0 72 4 134 0 73 5 249 0 75 4 134 0 77 4 134 0 79 4 134 0 80 4 134 0 82 4 134 0 83 5 253 0 85 4 134 0 88 4 134 0 89 4 134 0 90 4 134 0 91 4 134 0 92 4 134 0 93 4 134 0 94 4 134 0 96 4 134 0 97 4 134 0 99 4 134 0 101 4 134 0 102 4 134 0 103 4 134 0 107 4 134 0 108 4 134 0 109 6 1 0 110 4 134 0 111 4 134 0 117 4 134 0 118 4 134 0 119 4 134 0 120 4 134 0 121 4 134 0 122 4 134 0 123 4 134 0 124 4 134 0 125 4 134 0 127 6 5 0 239 6 9 0 241 6 13 0 243 4 134 1 46] 
#[0 4 138 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 4 142 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 4 146 0 1 4 146 0 3 4 146 0 5 4 146 0 6 4 146 0 7 4 146 0 8 9 117 0 9 4 146 0 10 4 146 0 11 4 146 0 12 4 146 0 13 4 146 0 14 2 123 0 15 4 146 0 16 4 146 0 17 4 146 0 18 4 146 0 19 4 146 0 20 4 146 0 21 4 146 0 22 4 146 0 23 4 146 0 24 4 146 0 25 4 146 0 26 4 146 0 29 4 146 0 30 4 146 0 32 4 146 0 34 4 146 0 35 4 146 0 47 4 146 0 49 4 146 0 50 4 146 0 53 4 146 0 54 4 146 0 55 4 146 0 56 4 146 0 57 4 146 0 59 4 146 0 60 4 146 0 62 4 146 0 63 4 146 0 64 4 146 0 66 4 146 0 67 4 146 0 68 4 146 0 69 4 146 0 72 4 146 0 73 4 146 0 75 4 146 0 77 4 146 0 79 4 146 0 80 4 146 0 82 4 146 0 83 4 146 0 85 4 146 0 88 4 146 0 89 4 146 0 90 4 146 0 91 4 146 0 92 4 146 0 93 4 146 0 94 4 146 0 96 4 146 0 97 4 146 0 99 4 146 0 101 4 146 0 102 4 146 0 103 4 146 0 107 4 146 0 108 4 146 0 109 4 146 0 110 4 146 0 111 4 146 0 117 4 146 0 118 4 146 0 119 4 146 0 120 4 146 0 121 4 146 0 122 4 146 0 123 4 146 0 124 4 146 0 125 4 146 0 127 9 125 0 228 4 146 1 46] 
#[1 4 150 0 1 4 150 0 3 2 117 0 5 4 150 0 6 4 150 0 7 2 121 0 8 4 150 0 9 2 125 0 10 0 205 0 11 4 150 0 12 4 150 0 13 4 150 0 14 4 150 0 15 4 150 0 16 4 150 0 17 4 150 0 18 4 150 0 19 4 150 0 20 4 150 0 21 2 127 0 22 2 131 0 23 4 150 0 24 2 135 0 25 2 139 0 26 4 150 0 29 4 150 0 30 4 150 0 32 4 150 0 34 4 150 0 35 3 197 0 38 7 153 0 40 4 150 0 47 4 150 0 49 4 150 0 50 4 150 0 53 4 150 0 54 4 150 0 55 4 150 0 56 4 150 0 57 4 150 0 59 2 143 0 60 4 150 0 62 4 150 0 63 4 150 0 64 4 150 0 66 4 150 0 67 4 150 0 68 4 150 0 69 4 150 0 72 2 147 0 73 4 150 0 75 4 150 0 77 4 150 0 79 2 151 0 80 4 150 0 82 4 150 0 83 4 150 0 85 7 149 0 86 4 150 0 88 4 150 0 89 4 150 0 90 4 150 0 91 4 150 0 92 4 150 0 93 2 155 0 94 4 150 0 96 4 150 0 97 4 150 0 99 4 150 0 101 4 150 0 102 4 150 0 103 4 150 0 107 4 150 0 108 4 150 0 109 4 150 0 110 2 159 0 111 2 163 0 117 2 167 0 118 2 171 0 119 2 175 0 120 2 179 0 121 2 183 0 122 2 187 0 123 2 191 0 124 2 195 0 125 4 150 0 127 7 157 0 134 7 157 0 135 7 157 0 136 7 157 0 137 7 157 0 138 7 157 0 139 7 157 0 140 7 157 0 141 7 157 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 7 153 0 182 7 157 0 213 7 157 0 214 7 157 0 215 7 157 0 219 7 157 0 220 7 157 0 221 7 157 0 222 7 157 0 223 10 245 0 224 7 157 0 230 7 157 0 231 7 157 0 232 7 157 0 233 7 157 0 234 7 157 0 235 7 157 0 236 7 157 0 237 7 157 0 238 7 157 0 240 7 157 0 242 7 157 0 244 7 157 0 245 7 157 0 246 7 157 0 247 7 157 0 248 7 157 0 249 7 157 0 250 7 157 1 40 7 157 1 41 7 157 1 42 7 157 1 43 7 157 1 44 7 157 1 45 4 150 1 46] 
#[1 4 154 0 1 4 154 0 3 2 117 0 5 4 154 0 6 4 154 0 7 2 121 0 8 4 154 0 9 2 125 0 10 0 205 0 11 4 154 0 12 4 154 0 13 4 154 0 14 4 154 0 15 4 154 0 16 4 154 0 17 4 154 0 18 4 154 0 19 4 154 0 20 4 154 0 21 2 199 0 22 2 203 0 23 4 154 0 24 2 207 0 25 2 211 0 26 4 154 0 29 4 154 0 30 4 154 0 32 4 154 0 34 4 154 0 35 3 197 0 38 7 153 0 40 4 154 0 47 4 154 0 49 4 154 0 50 4 154 0 53 4 154 0 54 4 154 0 55 4 154 0 56 4 154 0 57 4 154 0 59 2 215 0 60 4 154 0 62 4 154 0 63 4 154 0 64 4 154 0 66 4 154 0 67 4 154 0 68 4 154 0 69 4 154 0 72 2 219 0 73 4 154 0 75 4 154 0 77 4 154 0 79 2 223 0 80 4 154 0 82 4 154 0 83 4 154 0 85 7 149 0 86 4 154 0 88 4 154 0 89 4 154 0 90 4 154 0 91 4 154 0 92 4 154 0 93 2 227 0 94 4 154 0 96 4 154 0 97 4 154 0 99 4 154 0 101 4 154 0 102 4 154 0 103 4 154 0 107 4 154 0 108 4 154 0 109 4 154 0 110 2 231 0 111 2 235 0 117 2 239 0 118 2 243 0 119 2 247 0 120 2 251 0 121 2 255 0 122 3 3 0 123 3 7 0 124 3 11 0 125 4 154 0 127 7 157 0 134 7 157 0 135 7 157 0 136 7 157 0 137 7 157 0 138 7 157 0 139 7 157 0 140 7 157 0 141 7 157 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 7 153 0 182 7 157 0 213 7 157 0 214 7 157 0 215 7 157 0 219 7 157 0 220 7 157 0 221 7 157 0 222 7 157 0 223 10 249 0 224 7 157 0 230 7 157 0 231 7 157 0 232 7 157 0 233 7 157 0 234 7 157 0 235 7 157 0 236 7 157 0 237 7 157 0 238 7 157 0 240 7 157 0 242 7 157 0 244 7 157 0 245 7 157 0 246 7 157 0 247 7 157 0 248 7 157 0 249 7 157 0 250 7 157 1 40 7 157 1 41 7 157 1 42 7 157 1 43 7 157 1 44 7 157 1 45 4 154 1 46] 
#[0 4 158 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 4 162 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 217 0 5 10 253 0 183] 
#[0 4 166 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 1 217 0 5 11 1 0 183] 
#[1 4 54 0 6 4 54 0 9 11 5 0 169] 
#[1 11 9 0 6 11 13 0 9 11 17 0 168] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 5 225 0 24 5 229 0 29 5 233 0 30 5 237 0 32 4 170 0 55 5 241 0 57 5 245 0 72 5 249 0 75 5 253 0 85 6 1 0 110 4 170 0 124 4 170 0 125 4 170 0 127 6 5 0 239 6 9 0 241 6 13 0 243] 
#[1 2 82 0 6 2 82 0 9 6 81 0 19 6 89 0 187 11 21 0 188] 
#[0 4 174 0 6 0 9] 
#[0 4 178 0 6 0 9] 
#[1 2 82 0 6 2 82 0 9 1 165 0 11 6 81 0 19 1 193 0 33 11 25 0 167 11 25 0 170 11 25 0 171 6 89 0 187 11 29 0 188] 
#[1 2 82 0 6 2 82 0 9 6 81 0 19 6 89 0 187 11 33 0 188] 
#[0 4 182 0 6 0 9] 
#[0 4 186 0 6 0 9] 
#[1 2 82 0 6 2 82 0 9 6 81 0 19 6 89 0 187 11 37 0 188] 
#[0 4 190 0 6 0 9] 
#[0 4 194 0 6 0 9] 
#[0 4 198 0 6 0 9] 
#[0 4 202 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 11 41 0 64] 
#[0 4 206 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 11 45 0 89] 
#[0 11 49 0 89] 
#[0 11 53 0 55] 
#[0 4 210 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 11 57 0 89] 
#[0 4 214 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 11 61 0 89] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 11 65 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 0 6 0 77 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 11 69 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 11 73 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 4 218 0 5 4 218 0 8 4 218 0 10 4 218 0 11 4 218 0 22 4 218 0 23 4 218 0 25 4 218 0 26 4 218 0 34 4 218 0 49 4 218 0 50 4 218 0 53 4 218 0 54 4 218 0 55 4 218 0 56 4 218 0 59 4 218 0 60 4 218 0 62 4 218 0 63 4 218 0 66 4 218 0 67 4 218 0 68 4 218 0 69 4 218 0 73 4 218 0 77 4 218 0 79 4 218 0 80 4 218 0 82 4 218 0 88 4 218 0 90 4 218 0 91 4 218 0 92 4 218 0 93 4 218 0 94 4 218 0 96 4 218 0 103 4 218 0 107 3 15 0 108 4 218 0 109 4 218 0 111 4 218 0 117 4 218 0 118 4 218 0 119 4 218 0 120 4 218 0 121 4 218 0 122 4 218 0 123 4 218 0 124 4 218 0 125 4 218 0 127] 
#[0 11 81 0 77] 
#[1 11 85 0 77 1 37 0 119 1 173 0 127 11 89 0 135] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 11 93 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 11 93 0 134 11 93 0 135 11 93 0 136 11 93 0 137 11 93 0 138 11 93 0 139 11 93 0 140 11 93 0 141 11 93 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 11 93 0 213 11 93 0 214 11 93 0 215 11 93 0 219 11 93 0 220 11 93 0 221 11 93 0 222 11 93 0 223 11 93 0 230 11 93 0 231 11 93 0 232 11 93 0 233 11 93 0 234 11 93 0 235 11 93 0 236 11 93 0 237 11 93 0 238 11 93 0 240 11 93 0 242 11 93 0 244 11 93 0 245 11 93 0 246 11 93 0 247 11 93 0 248 11 93 0 249 11 93 0 250 11 93 1 40 11 93 1 41 11 93 1 42 11 93 1 43 11 93 1 44 11 93 1 45] 
#[1 5 165 0 1 1 139 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 1 143 0 14 5 201 0 16 5 205 0 17 5 209 0 18 4 26 0 19 5 217 0 20 5 221 0 21 5 225 0 24 1 147 0 29 5 233 0 30 5 237 0 32 5 241 0 57 5 245 0 72 5 249 0 75 5 253 0 85 11 97 0 102 6 1 0 110 6 5 0 239 6 9 0 241 6 13 0 243] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 6 0 53 0 6 0 54 0 6 0 55 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 11 101 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 11 105 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 4 222 0 22 4 222 0 23 5 225 0 24 4 222 0 25 4 222 0 26 5 229 0 29 5 233 0 30 5 237 0 32 4 222 0 34 4 222 0 49 4 222 0 50 4 222 0 53 4 222 0 54 4 222 0 55 4 222 0 56 5 241 0 57 4 222 0 59 4 222 0 60 4 222 0 62 4 222 0 63 4 222 0 66 4 222 0 67 4 222 0 68 4 222 0 69 5 245 0 72 4 222 0 73 5 249 0 75 4 222 0 77 4 222 0 79 4 222 0 80 4 222 0 82 5 253 0 85 4 222 0 88 4 222 0 90 4 222 0 91 4 222 0 92 4 222 0 93 4 222 0 94 4 222 0 96 4 222 0 103 4 222 0 107 4 222 0 108 4 222 0 109 6 1 0 110 4 222 0 111 4 222 0 117 4 222 0 118 4 222 0 119 4 222 0 120 4 222 0 121 4 222 0 122 4 222 0 123 4 222 0 124 4 222 0 125 4 222 0 127 6 5 0 239 6 9 0 241 6 13 0 243] 
#[0 4 226 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 11 109 0 107 1 37 0 119 1 173 0 127 11 113 0 135] 
#[1 0 6 0 107 0 6 0 119 0 6 0 127 11 117 0 133] 
#[1 11 121 0 55 1 37 0 119 1 173 0 127 11 125 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 11 129 0 133] 
#[0 4 230 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 4 234 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 11 133 0 93] 
#[0 4 238 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 4 242 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 1 37 0 119 11 137 0 135] 
#[1 2 177 0 122 11 141 0 140] 
#[1 1 193 0 33 11 145 0 167 11 145 0 170 11 145 0 171] 
#[1 2 177 0 122 11 149 0 140] 
#[0 4 246 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 4 250 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 11 153 0 64] 
#[0 11 157 0 55] 
#[0 11 161 0 89] 
#[0 11 165 0 55] 
#[0 11 169 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 11 173 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 11 177 0 89] 
#[0 11 181 0 55] 
#[0 11 185 0 89] 
#[0 11 189 0 55] 
#[0 4 254 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 11 193 0 99] 
#[0 5 2 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 11 197 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 11 201 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 11 205 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 11 209 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 11 213 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 11 217 0 133] 
#[0 11 221 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 11 225 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 11 229 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 11 233 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 11 237 0 99] 
#[0 11 241 0 55] 
#[0 11 245 0 64] 
#[0 11 249 0 55] 
#[0 11 253 0 89] 
#[0 12 1 0 55] 
#[0 12 5 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 12 9 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 12 13 0 89] 
#[0 12 17 0 55] 
#[0 12 21 0 89] 
#[0 12 25 0 55] 
#[0 5 6 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 29 0 99] 
#[1 9 85 0 116 12 33 0 144] 
#[0 5 10 0 10 0 113 0 116] 
#[1 5 165 0 1 3 19 0 3 5 173 0 5 5 14 0 6 5 177 0 7 5 181 0 8 5 14 0 9 5 185 0 10 5 189 0 11 5 193 0 12 5 14 0 13 3 23 0 14 5 14 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 5 14 0 22 5 14 0 23 5 225 0 24 5 14 0 25 5 14 0 26 3 27 0 29 5 233 0 30 5 237 0 32 5 14 0 34 5 14 0 35 5 14 0 47 5 14 0 49 5 14 0 50 5 14 0 53 5 14 0 54 5 14 0 55 5 14 0 56 5 241 0 57 5 14 0 59 5 14 0 60 5 14 0 62 5 14 0 63 5 14 0 64 5 14 0 66 5 14 0 67 5 14 0 68 5 14 0 69 5 245 0 72 5 14 0 73 5 249 0 75 5 14 0 77 5 14 0 79 5 14 0 80 5 14 0 82 5 14 0 83 5 253 0 85 5 14 0 88 5 14 0 89 5 14 0 90 5 14 0 91 5 14 0 92 5 14 0 93 5 14 0 94 5 14 0 96 5 14 0 97 5 14 0 99 5 14 0 101 5 14 0 102 5 14 0 103 5 14 0 107 5 14 0 108 5 14 0 109 6 1 0 110 5 14 0 111 5 14 0 117 5 14 0 118 5 14 0 119 5 14 0 120 5 14 0 121 5 14 0 122 5 14 0 123 5 14 0 124 5 14 0 125 5 14 0 127 6 5 0 239 6 9 0 241 6 13 0 243 5 14 1 46] 
#[0 5 18 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 5 22 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 193 0 33 12 37 0 167 12 37 0 170 12 37 0 171] 
#[0 5 26 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 12 41 0 6 11 13 0 9 11 17 0 168] 
#[0 5 30 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 12 45 0 134 12 45 0 135 12 45 0 136 12 45 0 137 12 45 0 138 12 45 0 139 12 45 0 140 12 45 0 141 12 45 0 142] 
#[0 5 34 0 6 0 9] 
#[0 5 38 0 6 0 9] 
#[1 2 82 0 6 2 82 0 9 6 81 0 19 6 89 0 187 12 49 0 188] 
#[0 5 42 0 6 0 9] 
#[0 5 46 0 6 0 9] 
#[0 5 50 0 6 0 9] 
#[0 5 54 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 58 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 62 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 53 0 89] 
#[0 5 66 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 70 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 0 6 0 77 0 6 0 119 0 6 0 127 12 57 0 133] 
#[1 12 61 0 77 1 37 0 119 1 173 0 127 12 65 0 135] 
#[1 0 6 0 77 0 6 0 119 0 6 0 127 12 69 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 12 73 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 105 0 134 5 105 0 135 5 105 0 136 5 105 0 137 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 12 73 0 213 5 105 0 214 5 105 0 215 12 73 0 219 12 73 0 220 12 73 0 221 12 73 0 222 12 73 0 223 12 73 0 230 12 73 0 231 12 73 0 232 12 73 0 233 12 73 0 234 12 73 0 235 12 73 0 236 12 73 0 237 12 73 0 238 12 73 0 240 12 73 0 242 12 73 0 244 12 73 0 245 12 73 0 246 12 73 0 247 12 73 0 248 12 73 0 249 12 73 0 250 5 105 1 40 5 105 1 41 5 105 1 42 5 105 1 43 5 105 1 44 5 105 1 45] 
#[1 5 74 0 5 5 74 0 8 5 74 0 10 5 74 0 11 5 74 0 22 5 74 0 23 5 74 0 25 5 74 0 26 5 74 0 34 5 74 0 49 5 74 0 50 5 74 0 53 5 74 0 54 5 74 0 55 5 74 0 56 5 74 0 59 5 74 0 60 5 74 0 62 5 74 0 63 5 74 0 66 5 74 0 67 5 74 0 68 5 74 0 69 5 74 0 73 5 74 0 77 5 74 0 79 5 74 0 80 5 74 0 82 5 74 0 88 5 74 0 90 5 74 0 91 5 74 0 92 5 74 0 93 5 74 0 94 5 74 0 96 5 74 0 103 5 74 0 107 3 31 0 108 5 74 0 109 5 74 0 111 5 74 0 117 5 74 0 118 5 74 0 119 5 74 0 120 5 74 0 121 5 74 0 122 5 74 0 123 5 74 0 124 5 74 0 125 5 74 0 127] 
#[1 5 78 0 5 5 78 0 8 5 78 0 10 5 78 0 11 5 78 0 22 5 78 0 23 5 78 0 25 5 78 0 26 5 78 0 34 5 78 0 49 5 78 0 50 5 78 0 53 5 78 0 54 5 78 0 55 5 78 0 56 5 78 0 59 5 78 0 60 5 78 0 62 5 78 0 63 5 78 0 66 5 78 0 67 5 78 0 68 5 78 0 69 5 78 0 73 5 78 0 77 5 78 0 79 5 78 0 80 5 78 0 82 5 78 0 88 5 78 0 90 5 78 0 91 5 78 0 92 5 78 0 93 5 78 0 94 5 78 0 96 5 78 0 103 12 81 0 104 5 78 0 107 3 35 0 108 5 78 0 109 5 78 0 111 5 78 0 117 5 78 0 118 5 78 0 119 5 78 0 120 5 78 0 121 5 78 0 122 5 78 0 123 5 78 0 124 5 78 0 125 5 78 0 127] 
#[0 12 89 0 77] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 0 6 0 22 0 6 0 23 5 225 0 24 0 6 0 25 0 6 0 26 5 229 0 29 5 233 0 30 5 237 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 5 241 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 5 245 0 72 0 6 0 73 5 249 0 75 0 6 0 79 0 6 0 80 0 6 0 82 5 253 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 6 1 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 12 93 0 133 6 5 0 239 6 9 0 241 6 13 0 243] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 12 97 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 12 97 0 134 12 97 0 135 12 97 0 136 12 97 0 137 12 97 0 138 12 97 0 139 12 97 0 140 12 97 0 141 12 97 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 12 97 0 213 12 97 0 214 12 97 0 215 12 97 0 219 12 97 0 220 12 97 0 221 12 97 0 222 12 97 0 223 12 97 0 230 12 97 0 231 12 97 0 232 12 97 0 233 12 97 0 234 12 97 0 235 12 97 0 236 12 97 0 237 12 97 0 238 12 97 0 240 12 97 0 242 12 97 0 244 12 97 0 245 12 97 0 246 12 97 0 247 12 97 0 248 12 97 0 249 12 97 0 250 12 97 1 40 12 97 1 41 12 97 1 42 12 97 1 43 12 97 1 44 12 97 1 45] 
#[1 12 101 0 53 12 105 0 54 12 109 0 55 1 37 0 119 1 173 0 127 12 113 0 135 12 117 1 13 12 121 1 14 12 117 1 15 12 117 1 16 12 117 1 17] 
#[1 0 6 0 53 0 6 0 54 0 6 0 55 0 6 0 119 0 6 0 127 12 137 0 133] 
#[0 5 82 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 12 141 0 107] 
#[1 12 145 0 107 1 37 0 119 1 173 0 127 12 149 0 135] 
#[0 12 153 0 109] 
#[0 12 157 0 55] 
#[1 12 161 0 55 1 37 0 119 1 173 0 127 12 165 0 135] 
#[0 5 86 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 5 90 0 11 0 55 0 124 0 125 0 127] 
#[1 1 217 0 5 12 169 0 183] 
#[0 5 94 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 1 217 0 5 12 173 0 183] 
#[0 5 98 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 177 0 64] 
#[0 5 102 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 181 0 89] 
#[0 12 185 0 89] 
#[0 12 189 0 55] 
#[0 5 106 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 193 0 89] 
#[0 5 110 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 197 0 89] 
#[0 5 114 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 201 0 64] 
#[0 12 205 0 55] 
#[0 12 209 0 89] 
#[0 12 213 0 55] 
#[0 12 217 0 55] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 1 173 0 127 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 12 221 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 12 225 0 89] 
#[0 12 229 0 55] 
#[0 12 233 0 89] 
#[0 12 237 0 55] 
#[0 5 118 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 241 0 99] 
#[0 5 122 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 245 0 64] 
#[0 5 126 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 249 0 89] 
#[0 12 253 0 89] 
#[0 13 1 0 55] 
#[0 5 130 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 5 0 89] 
#[0 5 134 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 9 0 89] 
#[0 5 138 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 13 13 0 10 10 237 0 116] 
#[0 5 142 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 146 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 5 150 0 6 0 9] 
#[0 5 154 0 6 0 9] 
#[0 5 158 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 13 17 0 77 1 37 0 119 1 173 0 127 13 21 0 135] 
#[0 5 162 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 25 0 77] 
#[1 13 29 0 77 1 37 0 119 1 173 0 127 13 33 0 135] 
#[1 1 126 0 1 1 126 0 3 3 39 0 5 1 126 0 7 3 39 0 8 3 39 0 10 3 39 0 11 1 126 0 12 1 126 0 14 1 126 0 16 1 126 0 17 1 126 0 18 1 126 0 19 1 126 0 20 1 126 0 21 5 166 0 22 5 166 0 23 1 126 0 24 5 166 0 25 5 166 0 26 1 126 0 29 1 126 0 30 1 126 0 32 5 166 0 34 5 166 0 49 5 166 0 50 5 166 0 53 5 166 0 54 5 166 0 55 5 166 0 56 1 126 0 57 5 166 0 59 5 166 0 60 5 166 0 62 5 166 0 63 5 166 0 66 5 166 0 67 5 166 0 68 5 166 0 69 1 126 0 72 5 166 0 73 1 126 0 75 5 166 0 77 5 166 0 79 5 166 0 80 5 166 0 82 1 126 0 85 5 166 0 88 5 166 0 90 5 166 0 91 5 166 0 92 5 166 0 93 5 166 0 94 5 166 0 96 5 166 0 103 5 166 0 107 5 166 0 108 5 166 0 109 1 126 0 110 5 166 0 111 5 166 0 117 5 166 0 118 5 166 0 119 5 166 0 120 5 166 0 121 5 166 0 122 5 166 0 123 5 166 0 124 5 166 0 125 5 166 0 127] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 13 37 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 105 0 134 5 105 0 135 5 105 0 136 5 105 0 137 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 13 37 0 213 5 105 0 214 5 105 0 215 13 37 0 219 13 37 0 220 13 37 0 221 13 37 0 222 13 37 0 223 13 37 0 230 13 37 0 231 13 37 0 232 13 37 0 233 13 37 0 234 13 37 0 235 13 37 0 236 13 37 0 237 13 37 0 238 13 37 0 240 13 37 0 242 13 37 0 244 13 37 0 245 13 37 0 246 13 37 0 247 13 37 0 248 13 37 0 249 13 37 0 250 5 105 1 40 5 105 1 41 5 105 1 42 5 105 1 43 5 105 1 44 5 105 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 13 41 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 105 0 134 5 105 0 135 5 105 0 136 5 105 0 137 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 13 41 0 213 5 105 0 214 5 105 0 215 13 41 0 219 13 41 0 220 13 41 0 221 13 41 0 222 13 41 0 223 13 41 0 230 13 41 0 231 13 41 0 232 13 41 0 233 13 41 0 234 13 41 0 235 13 41 0 236 13 41 0 237 13 41 0 238 13 41 0 240 13 41 0 242 13 41 0 244 13 41 0 245 13 41 0 246 13 41 0 247 13 41 0 248 13 41 0 249 13 41 0 250 5 105 1 40 5 105 1 41 5 105 1 42 5 105 1 43 5 105 1 44 5 105 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 13 45 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 105 0 134 5 105 0 135 5 105 0 136 5 105 0 137 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 13 45 0 213 5 105 0 214 5 105 0 215 13 45 0 219 13 45 0 220 13 45 0 221 13 45 0 222 13 45 0 223 13 45 0 230 13 45 0 231 13 45 0 232 13 45 0 233 13 45 0 234 13 45 0 235 13 45 0 236 13 45 0 237 13 45 0 238 13 45 0 240 13 45 0 242 13 45 0 244 13 45 0 245 13 45 0 246 13 45 0 247 13 45 0 248 13 45 0 249 13 45 0 250 5 105 1 40 5 105 1 41 5 105 1 42 5 105 1 43 5 105 1 44 5 105 1 45] 
#[1 5 170 0 5 5 170 0 8 5 170 0 10 5 170 0 11 5 170 0 22 5 170 0 23 5 170 0 25 5 170 0 26 5 170 0 34 5 170 0 49 5 170 0 50 5 170 0 53 5 170 0 54 5 170 0 55 5 170 0 56 5 170 0 59 5 170 0 60 5 170 0 62 5 170 0 63 5 170 0 66 5 170 0 67 5 170 0 68 5 170 0 69 5 170 0 73 5 170 0 77 5 170 0 79 5 170 0 80 5 170 0 82 5 170 0 88 5 170 0 90 5 170 0 91 5 170 0 92 5 170 0 93 5 170 0 94 5 170 0 96 5 170 0 103 13 49 0 104 5 170 0 107 3 43 0 108 5 170 0 109 5 170 0 111 5 170 0 117 5 170 0 118 5 170 0 119 5 170 0 120 5 170 0 121 5 170 0 122 5 170 0 123 5 170 0 124 5 170 0 125 5 170 0 127] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 0 6 0 79 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 13 57 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 13 61 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 0 6 0 22 0 6 0 23 5 225 0 24 0 6 0 25 0 6 0 26 5 229 0 29 5 233 0 30 5 237 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 5 241 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 5 245 0 72 0 6 0 73 5 249 0 75 0 6 0 79 0 6 0 80 0 6 0 82 5 253 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 13 65 0 97 0 6 0 103 0 6 0 108 0 6 0 109 6 1 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 69 0 133 6 5 0 239 6 9 0 241 6 13 0 243] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 73 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 13 77 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 13 77 0 134 13 77 0 135 13 77 0 136 13 77 0 137 13 77 0 138 13 77 0 139 13 77 0 140 13 77 0 141 13 77 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 13 77 0 213 13 77 0 214 13 77 0 215 13 77 0 219 13 77 0 220 13 77 0 221 13 77 0 222 13 77 0 223 13 77 0 230 13 77 0 231 13 77 0 232 13 77 0 233 13 77 0 234 13 77 0 235 13 77 0 236 13 77 0 237 13 77 0 238 13 77 0 240 13 77 0 242 13 77 0 244 13 77 0 245 13 77 0 246 13 77 0 247 13 77 0 248 13 77 0 249 13 77 0 250 13 77 1 40 13 77 1 41 13 77 1 42 13 77 1 43 13 77 1 44 13 77 1 45] 
#[0 13 81 0 69] 
#[1 13 85 0 53 13 89 0 55] 
#[0 5 174 0 53 0 54] 
#[1 13 93 0 53 12 105 0 54 13 97 1 13 13 97 1 15 13 97 1 16 13 97 1 17] 
#[0 5 178 0 53 0 54] 
#[0 5 182 0 53 0 54] 
#[0 5 186 0 53 0 54] 
#[1 13 101 0 53 12 105 0 54 13 105 0 55 1 37 0 119 1 173 0 127 13 109 0 135 12 117 1 13 13 113 1 14 12 117 1 15 12 117 1 16 12 117 1 17] 
#[0 5 190 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 5 194 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 117 0 107] 
#[0 5 198 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 121 0 109] 
#[0 13 125 0 109] 
#[0 13 129 0 55] 
#[1 1 193 0 33 13 133 0 167 13 133 0 170 13 133 0 171] 
#[0 5 202 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 206 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 210 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 214 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 137 0 89] 
#[0 5 218 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 222 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 226 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 141 0 64] 
#[0 5 230 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 145 0 89] 
#[0 13 149 0 89] 
#[0 13 153 0 55] 
#[0 5 234 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 157 0 89] 
#[0 5 238 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 161 0 89] 
#[0 5 242 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 246 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 250 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 254 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 165 0 89] 
#[0 6 2 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 6 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 9 85 0 116 13 169 0 144] 
#[0 6 10 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 173 0 77] 
#[0 6 14 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 18 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 177 0 77] 
#[1 1 126 0 1 1 126 0 3 3 47 0 5 1 126 0 7 3 47 0 8 3 47 0 10 3 47 0 11 1 126 0 12 1 126 0 14 1 126 0 16 1 126 0 17 1 126 0 18 1 126 0 19 1 126 0 20 1 126 0 21 6 22 0 22 6 22 0 23 1 126 0 24 6 22 0 25 6 22 0 26 1 126 0 29 1 126 0 30 1 126 0 32 6 22 0 34 6 22 0 49 6 22 0 50 6 22 0 53 6 22 0 54 6 22 0 55 6 22 0 56 1 126 0 57 6 22 0 59 6 22 0 60 6 22 0 62 6 22 0 63 6 22 0 66 6 22 0 67 6 22 0 68 6 22 0 69 1 126 0 72 6 22 0 73 1 126 0 75 6 22 0 77 6 22 0 79 6 22 0 80 6 22 0 82 1 126 0 85 6 22 0 88 6 22 0 90 6 22 0 91 6 22 0 92 6 22 0 93 6 22 0 94 6 22 0 96 6 22 0 103 6 22 0 107 6 22 0 108 6 22 0 109 1 126 0 110 6 22 0 111 6 22 0 117 6 22 0 118 6 22 0 119 6 22 0 120 6 22 0 121 6 22 0 122 6 22 0 123 6 22 0 124 6 22 0 125 6 22 0 127] 
#[1 1 126 0 1 1 126 0 3 3 51 0 5 1 126 0 7 3 51 0 8 3 51 0 10 3 51 0 11 1 126 0 12 1 126 0 14 1 126 0 16 1 126 0 17 1 126 0 18 1 126 0 19 1 126 0 20 1 126 0 21 6 26 0 22 6 26 0 23 1 126 0 24 6 26 0 25 6 26 0 26 1 126 0 29 1 126 0 30 1 126 0 32 6 26 0 34 6 26 0 49 6 26 0 50 6 26 0 53 6 26 0 54 6 26 0 55 6 26 0 56 1 126 0 57 6 26 0 59 6 26 0 60 6 26 0 62 6 26 0 63 6 26 0 66 6 26 0 67 6 26 0 68 6 26 0 69 1 126 0 72 6 26 0 73 1 126 0 75 6 26 0 77 6 26 0 79 6 26 0 80 6 26 0 82 1 126 0 85 6 26 0 88 6 26 0 90 6 26 0 91 6 26 0 92 6 26 0 93 6 26 0 94 6 26 0 96 6 26 0 103 6 26 0 107 6 26 0 108 6 26 0 109 1 126 0 110 6 26 0 111 6 26 0 117 6 26 0 118 6 26 0 119 6 26 0 120 6 26 0 121 6 26 0 122 6 26 0 123 6 26 0 124 6 26 0 125 6 26 0 127] 
#[1 1 126 0 1 1 126 0 3 3 55 0 5 1 126 0 7 3 55 0 8 3 55 0 10 3 55 0 11 1 126 0 12 1 126 0 14 1 126 0 16 1 126 0 17 1 126 0 18 1 126 0 19 1 126 0 20 1 126 0 21 6 30 0 22 6 30 0 23 1 126 0 24 6 30 0 25 6 30 0 26 1 126 0 29 1 126 0 30 1 126 0 32 6 30 0 34 6 30 0 49 6 30 0 50 6 30 0 53 6 30 0 54 6 30 0 55 6 30 0 56 1 126 0 57 6 30 0 59 6 30 0 60 6 30 0 62 6 30 0 63 6 30 0 66 6 30 0 67 6 30 0 68 6 30 0 69 1 126 0 72 6 30 0 73 1 126 0 75 6 30 0 77 6 30 0 79 6 30 0 80 6 30 0 82 1 126 0 85 6 30 0 88 6 30 0 90 6 30 0 91 6 30 0 92 6 30 0 93 6 30 0 94 6 30 0 96 6 30 0 103 6 30 0 107 6 30 0 108 6 30 0 109 1 126 0 110 6 30 0 111 6 30 0 117 6 30 0 118 6 30 0 119 6 30 0 120 6 30 0 121 6 30 0 122 6 30 0 123 6 30 0 124 6 30 0 125 6 30 0 127] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 13 181 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 105 0 134 5 105 0 135 5 105 0 136 5 105 0 137 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 13 181 0 213 5 105 0 214 5 105 0 215 13 181 0 219 13 181 0 220 13 181 0 221 13 181 0 222 13 181 0 223 13 181 0 230 13 181 0 231 13 181 0 232 13 181 0 233 13 181 0 234 13 181 0 235 13 181 0 236 13 181 0 237 13 181 0 238 13 181 0 240 13 181 0 242 13 181 0 244 13 181 0 245 13 181 0 246 13 181 0 247 13 181 0 248 13 181 0 249 13 181 0 250 5 105 1 40 5 105 1 41 5 105 1 42 5 105 1 43 5 105 1 44 5 105 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 13 185 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 5 105 0 134 5 105 0 135 5 105 0 136 5 105 0 137 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 13 185 0 213 5 105 0 214 5 105 0 215 13 185 0 219 13 185 0 220 13 185 0 221 13 185 0 222 13 185 0 223 13 185 0 230 13 185 0 231 13 185 0 232 13 185 0 233 13 185 0 234 13 185 0 235 13 185 0 236 13 185 0 237 13 185 0 238 13 185 0 240 13 185 0 242 13 185 0 244 13 185 0 245 13 185 0 246 13 185 0 247 13 185 0 248 13 185 0 249 13 185 0 250 5 105 1 40 5 105 1 41 5 105 1 42 5 105 1 43 5 105 1 44 5 105 1 45] 
#[1 13 189 0 79 1 37 0 119 1 173 0 127 13 193 0 135] 
#[1 0 6 0 79 0 6 0 119 0 6 0 127 13 197 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 2 145 0 60 13 201 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 13 201 0 134 13 201 0 135 13 201 0 136 13 201 0 137 13 201 0 138 13 201 0 139 13 201 0 140 13 201 0 141 13 201 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 13 201 0 213 13 201 0 214 13 201 0 215 13 201 0 219 13 201 0 220 13 201 0 221 13 201 0 222 13 201 0 223 13 201 0 230 13 201 0 231 13 201 0 232 13 201 0 233 13 201 0 234 13 201 0 235 13 201 0 236 13 201 0 237 13 201 0 238 13 201 0 240 13 201 0 242 13 201 0 244 13 201 0 245 13 201 0 246 13 201 0 247 13 201 0 248 13 201 0 249 13 201 0 250 13 201 1 40 13 201 1 41 13 201 1 42 13 201 1 43 13 201 1 44 13 201 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 0 6 0 79 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 13 205 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 13 209 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 13 213 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 13 217 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 5 225 0 24 5 229 0 29 5 233 0 30 5 237 0 32 5 241 0 57 5 245 0 72 5 249 0 75 5 253 0 85 13 221 0 101 6 1 0 110 6 5 0 239 6 9 0 241 6 13 0 243] 
#[0 6 34 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 225 0 133] 
#[0 13 229 0 69] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 233 0 133] 
#[0 6 38 0 53 0 54] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 237 0 133] 
#[0 13 241 0 69] 
#[1 13 245 0 53 13 249 0 55] 
#[1 13 253 0 53 12 105 0 54 13 97 1 13 13 97 1 15 13 97 1 16 13 97 1 17] 
#[0 6 42 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 46 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 50 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 14 1 0 109] 
#[0 6 54 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 58 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 62 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 66 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 70 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 14 5 0 89] 
#[0 6 74 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 78 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 82 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 14 9 0 10 10 237 0 116] 
#[0 6 86 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 90 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 1 126 0 1 1 126 0 3 3 59 0 5 1 126 0 7 3 59 0 8 3 59 0 10 3 59 0 11 1 126 0 12 1 126 0 14 1 126 0 16 1 126 0 17 1 126 0 18 1 126 0 19 1 126 0 20 1 126 0 21 6 94 0 22 6 94 0 23 1 126 0 24 6 94 0 25 6 94 0 26 1 126 0 29 1 126 0 30 1 126 0 32 6 94 0 34 6 94 0 49 6 94 0 50 6 94 0 53 6 94 0 54 6 94 0 55 6 94 0 56 1 126 0 57 6 94 0 59 6 94 0 60 6 94 0 62 6 94 0 63 6 94 0 66 6 94 0 67 6 94 0 68 6 94 0 69 1 126 0 72 6 94 0 73 1 126 0 75 6 94 0 77 6 94 0 79 6 94 0 80 6 94 0 82 1 126 0 85 6 94 0 88 6 94 0 90 6 94 0 91 6 94 0 92 6 94 0 93 6 94 0 94 6 94 0 96 6 94 0 103 6 94 0 107 6 94 0 108 6 94 0 109 1 126 0 110 6 94 0 111 6 94 0 117 6 94 0 118 6 94 0 119 6 94 0 120 6 94 0 121 6 94 0 122 6 94 0 123 6 94 0 124 6 94 0 125 6 94 0 127] 
#[1 1 126 0 1 1 126 0 3 3 63 0 5 1 126 0 7 3 63 0 8 3 63 0 10 3 63 0 11 1 126 0 12 1 126 0 14 1 126 0 16 1 126 0 17 1 126 0 18 1 126 0 19 1 126 0 20 1 126 0 21 6 98 0 22 6 98 0 23 1 126 0 24 6 98 0 25 6 98 0 26 1 126 0 29 1 126 0 30 1 126 0 32 6 98 0 34 6 98 0 49 6 98 0 50 6 98 0 53 6 98 0 54 6 98 0 55 6 98 0 56 1 126 0 57 6 98 0 59 6 98 0 60 6 98 0 62 6 98 0 63 6 98 0 66 6 98 0 67 6 98 0 68 6 98 0 69 1 126 0 72 6 98 0 73 1 126 0 75 6 98 0 77 6 98 0 79 6 98 0 80 6 98 0 82 1 126 0 85 6 98 0 88 6 98 0 90 6 98 0 91 6 98 0 92 6 98 0 93 6 98 0 94 6 98 0 96 6 98 0 103 6 98 0 107 6 98 0 108 6 98 0 109 1 126 0 110 6 98 0 111 6 98 0 117 6 98 0 118 6 98 0 119 6 98 0 120 6 98 0 121 6 98 0 122 6 98 0 123 6 98 0 124 6 98 0 125 6 98 0 127] 
#[1 6 102 0 5 6 102 0 8 6 102 0 10 0 205 0 11 6 102 0 22 6 102 0 23 6 102 0 25 6 102 0 26 6 102 0 34 6 102 0 49 6 102 0 50 6 102 0 53 6 102 0 54 6 102 0 55 6 102 0 56 6 102 0 59 6 102 0 60 6 102 0 62 6 102 0 63 6 102 0 66 6 102 0 67 6 102 0 68 6 102 0 69 6 102 0 73 6 102 0 77 6 102 0 79 6 102 0 80 6 102 0 82 6 102 0 88 6 102 0 90 6 102 0 91 6 102 0 92 6 102 0 93 6 102 0 94 6 102 0 96 6 102 0 103 6 102 0 107 6 102 0 108 6 102 0 109 6 102 0 111 6 102 0 117 6 102 0 118 6 102 0 119 6 102 0 120 6 102 0 121 6 102 0 122 6 102 0 123 3 67 0 124 3 71 0 125 6 102 0 127 14 13 0 145 14 13 0 146 14 13 0 147 14 13 0 148 14 13 0 149] 
#[0 14 17 0 79] 
#[1 14 21 0 79 1 37 0 119 1 173 0 127 14 25 0 135] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 0 6 0 22 0 6 0 23 5 225 0 24 0 6 0 25 0 6 0 26 5 229 0 29 5 233 0 30 5 237 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 5 241 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 5 245 0 72 0 6 0 73 5 249 0 75 0 6 0 79 0 6 0 80 0 6 0 82 5 253 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 6 1 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 29 0 133 6 5 0 239 6 9 0 241 6 13 0 243] 
#[1 14 33 0 79 1 37 0 119 1 173 0 127 14 37 0 135] 
#[1 0 6 0 79 0 6 0 119 0 6 0 127 14 41 0 133] 
#[1 14 45 0 55 1 37 0 119 1 173 0 127 14 49 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 14 53 0 133] 
#[1 3 75 0 5 3 75 0 8 3 75 0 10 3 75 0 11 6 106 0 13 3 75 0 22 3 75 0 23 3 75 0 25 3 75 0 26 0 6 0 34 0 6 0 49 0 6 0 50 3 75 0 53 3 75 0 54 0 6 0 56 0 6 0 59 3 75 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 3 75 0 73 3 75 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 3 75 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 3 75 0 111 3 75 0 117 3 75 0 118 3 75 0 119 3 75 0 120 3 75 0 121 3 75 0 122 3 75 0 123 3 75 0 124 3 75 0 125 0 6 0 127 14 57 0 133 14 61 1 19] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 14 65 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 14 69 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 6 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 14 73 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 14 77 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 14 81 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 14 85 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 6 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 89 0 133] 
#[0 14 93 0 69] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 97 0 133] 
#[0 6 118 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 122 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 9 85 0 116 14 101 0 144] 
#[1 6 126 0 5 6 126 0 8 6 126 0 10 1 165 0 11 6 126 0 22 6 126 0 23 6 126 0 25 6 126 0 26 6 126 0 34 6 126 0 49 6 126 0 50 6 126 0 53 6 126 0 54 6 126 0 55 6 126 0 56 6 126 0 59 6 126 0 60 6 126 0 62 6 126 0 63 6 126 0 66 6 126 0 67 6 126 0 68 6 126 0 69 6 126 0 73 6 126 0 77 6 126 0 79 6 126 0 80 6 126 0 82 6 126 0 88 6 126 0 90 6 126 0 91 6 126 0 92 6 126 0 93 6 126 0 94 6 126 0 96 6 126 0 103 6 126 0 107 6 126 0 108 6 126 0 109 6 126 0 111 6 126 0 117 6 126 0 118 6 126 0 119 6 126 0 120 6 126 0 121 6 126 0 122 6 126 0 123 6 126 0 124 6 126 0 125 6 126 0 127] 
#[1 6 130 0 5 6 130 0 8 6 130 0 10 0 205 0 11 6 130 0 22 6 130 0 23 6 130 0 25 6 130 0 26 6 130 0 34 6 130 0 49 6 130 0 50 6 130 0 53 6 130 0 54 6 130 0 55 6 130 0 56 6 130 0 59 6 130 0 60 6 130 0 62 6 130 0 63 6 130 0 66 6 130 0 67 6 130 0 68 6 130 0 69 6 130 0 73 6 130 0 77 6 130 0 79 6 130 0 80 6 130 0 82 6 130 0 88 6 130 0 90 6 130 0 91 6 130 0 92 6 130 0 93 6 130 0 94 6 130 0 96 6 130 0 103 6 130 0 107 6 130 0 108 6 130 0 109 6 130 0 111 6 130 0 117 6 130 0 118 6 130 0 119 6 130 0 120 6 130 0 121 6 130 0 122 6 130 0 123 3 79 0 124 3 83 0 125 6 130 0 127 14 105 0 145 14 105 0 146 14 105 0 147 14 105 0 148 14 105 0 149] 
#[1 6 134 0 5 6 134 0 8 6 134 0 10 0 205 0 11 6 134 0 22 6 134 0 23 6 134 0 25 6 134 0 26 6 134 0 34 6 134 0 49 6 134 0 50 6 134 0 53 6 134 0 54 6 134 0 55 6 134 0 56 6 134 0 59 6 134 0 60 6 134 0 62 6 134 0 63 6 134 0 66 6 134 0 67 6 134 0 68 6 134 0 69 6 134 0 73 6 134 0 77 6 134 0 79 6 134 0 80 6 134 0 82 6 134 0 88 6 134 0 90 6 134 0 91 6 134 0 92 6 134 0 93 6 134 0 94 6 134 0 96 6 134 0 103 6 134 0 107 6 134 0 108 6 134 0 109 6 134 0 111 6 134 0 117 6 134 0 118 6 134 0 119 6 134 0 120 6 134 0 121 6 134 0 122 6 134 0 123 3 87 0 124 3 91 0 125 6 134 0 127 14 109 0 145 14 109 0 146 14 109 0 147 14 109 0 148 14 109 0 149] 
#[0 14 113 0 79] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 0 6 0 79 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 14 117 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 14 121 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 6 138 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 14 125 0 79] 
#[1 14 129 0 79 1 37 0 119 1 173 0 127 14 133 0 135] 
#[0 14 137 0 69] 
#[0 14 141 0 55] 
#[1 14 145 0 55 1 37 0 119 1 173 0 127 14 149 0 135] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 6 0 53 0 6 0 54 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 14 153 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 14 157 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 14 161 0 13 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 6 142 0 53 6 142 0 54 2 145 0 60 14 165 0 73 2 153 0 80 2 157 0 94 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 14 165 0 134 14 165 0 135 14 165 0 136 14 165 0 137 14 165 0 138 14 165 0 139 14 165 0 140 14 165 0 141 14 165 0 142 2 221 0 145 2 221 0 146 2 221 0 147 2 221 0 148 2 221 0 149 14 165 0 213 14 165 0 214 14 165 0 215 14 165 0 219 14 165 0 220 14 165 0 221 14 165 0 222 14 165 0 223 14 165 0 230 14 165 0 231 14 165 0 232 14 165 0 233 14 165 0 234 14 165 0 235 14 165 0 236 14 165 0 237 14 165 0 238 14 165 0 240 14 165 0 242 14 165 0 244 14 165 0 245 14 165 0 246 14 165 0 247 14 165 0 248 14 165 0 249 14 165 0 250 14 169 1 18 14 165 1 40 14 165 1 41 14 165 1 42 14 165 1 43 14 165 1 44 14 165 1 45] 
#[1 14 173 0 55 1 37 0 119 1 173 0 127 14 177 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 14 181 0 133] 
#[1 14 185 0 55 1 173 0 127] 
#[1 0 6 0 55 0 6 0 127 14 189 0 133] 
#[1 14 193 0 55 1 37 0 119 1 173 0 127 14 197 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 14 201 0 133] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 0 179 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 14 205 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 14 209 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[0 6 146 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 117 0 5 2 121 0 8 2 125 0 10 0 205 0 11 2 129 0 22 2 133 0 23 2 137 0 25 2 141 0 26 0 9 0 34 0 21 0 49 4 5 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 145 0 60 4 9 0 62 4 61 0 63 4 61 0 66 4 13 0 67 4 17 0 68 4 21 0 69 4 73 0 73 2 153 0 80 4 25 0 82 4 61 0 88 4 61 0 90 0 61 0 91 4 29 0 92 2 157 0 94 4 33 0 96 0 73 0 103 4 37 0 108 4 41 0 109 2 161 0 111 2 165 0 117 2 169 0 118 1 37 0 119 1 85 0 120 2 173 0 121 2 177 0 122 2 181 0 123 0 209 0 124 0 213 0 125 0 183 0 127 14 213 0 133 4 73 0 134 4 73 0 135 4 73 0 136 4 73 0 137 4 73 0 138 4 73 0 139 4 73 0 140 4 73 0 141 4 73 0 142 4 45 0 145 4 45 0 146 4 45 0 147 4 45 0 148 4 45 0 149 4 53 0 153 4 53 0 159 14 217 0 160 4 61 0 164 4 53 0 172 4 53 0 173 4 53 0 177 4 53 0 178 4 53 0 199 4 53 0 200 4 53 0 201 4 53 0 202 4 53 0 203 4 53 0 205 4 53 0 206 4 53 0 207 4 53 0 208 4 53 0 212 4 73 0 213 4 73 0 214 4 73 0 215 4 73 0 219 4 73 0 220 4 73 0 221 4 73 0 222 4 73 0 223 4 73 0 230 4 73 0 231 4 73 0 232 4 73 0 233 4 73 0 234 4 73 0 235 4 73 0 236 4 73 0 237 4 73 0 238 4 73 0 240 4 73 0 242 4 73 0 244 4 73 0 245 4 73 0 246 4 73 0 247 4 73 0 248 4 73 0 249 4 73 0 250 4 53 0 251 4 53 0 252 4 53 0 253 4 53 0 254 4 53 0 255 4 53 1 0 4 53 1 1 4 53 1 2 4 53 1 3 4 53 1 4 4 53 1 5 4 53 1 6 4 53 1 7 4 53 1 8 4 53 1 9 4 53 1 10 4 53 1 11 4 53 1 12 4 53 1 20 4 153 1 21 4 53 1 22 4 53 1 23 4 53 1 24 4 53 1 25 4 53 1 26 4 53 1 27 4 53 1 28 4 53 1 29 4 53 1 30 4 53 1 31 4 53 1 32 4 53 1 33 4 53 1 34 4 53 1 35 4 53 1 36 4 53 1 37 4 53 1 39 4 225 1 40 4 225 1 41 4 225 1 42 4 225 1 43 4 225 1 44 4 225 1 45] 
#[1 14 221 0 113 10 237 0 116] 
#[1 6 150 0 5 6 150 0 8 6 150 0 10 1 165 0 11 6 150 0 22 6 150 0 23 6 150 0 25 6 150 0 26 6 150 0 34 6 150 0 49 6 150 0 50 6 150 0 53 6 150 0 54 6 150 0 55 6 150 0 56 6 150 0 59 6 150 0 60 6 150 0 62 6 150 0 63 6 150 0 66 6 150 0 67 6 150 0 68 6 150 0 69 6 150 0 73 6 150 0 77 6 150 0 79 6 150 0 80 6 150 0 82 6 150 0 88 6 150 0 90 6 150 0 91 6 150 0 92 6 150 0 93 6 150 0 94 6 150 0 96 6 150 0 103 6 150 0 107 6 150 0 108 6 150 0 109 6 150 0 111 6 150 0 117 6 150 0 118 6 150 0 119 6 150 0 120 6 150 0 121 6 150 0 122 6 150 0 123 6 150 0 124 6 150 0 125 6 150 0 127] 
#[1 6 154 0 5 6 154 0 8 6 154 0 10 1 165 0 11 6 154 0 22 6 154 0 23 6 154 0 25 6 154 0 26 6 154 0 34 6 154 0 49 6 154 0 50 6 154 0 53 6 154 0 54 6 154 0 55 6 154 0 56 6 154 0 59 6 154 0 60 6 154 0 62 6 154 0 63 6 154 0 66 6 154 0 67 6 154 0 68 6 154 0 69 6 154 0 73 6 154 0 77 6 154 0 79 6 154 0 80 6 154 0 82 6 154 0 88 6 154 0 90 6 154 0 91 6 154 0 92 6 154 0 93 6 154 0 94 6 154 0 96 6 154 0 103 6 154 0 107 6 154 0 108 6 154 0 109 6 154 0 111 6 154 0 117 6 154 0 118 6 154 0 119 6 154 0 120 6 154 0 121 6 154 0 122 6 154 0 123 6 154 0 124 6 154 0 125 6 154 0 127] 
#[1 6 158 0 5 6 158 0 8 6 158 0 10 0 205 0 11 6 158 0 22 6 158 0 23 6 158 0 25 6 158 0 26 6 158 0 34 6 158 0 49 6 158 0 50 6 158 0 53 6 158 0 54 6 158 0 55 6 158 0 56 6 158 0 59 6 158 0 60 6 158 0 62 6 158 0 63 6 158 0 66 6 158 0 67 6 158 0 68 6 158 0 69 6 158 0 73 6 158 0 77 6 158 0 79 6 158 0 80 6 158 0 82 6 158 0 88 6 158 0 90 6 158 0 91 6 158 0 92 6 158 0 93 6 158 0 94 6 158 0 96 6 158 0 103 6 158 0 107 6 158 0 108 6 158 0 109 6 158 0 111 6 158 0 117 6 158 0 118 6 158 0 119 6 158 0 120 6 158 0 121 6 158 0 122 6 158 0 123 3 95 0 124 3 99 0 125 6 158 0 127 14 225 0 145 14 225 0 146 14 225 0 147 14 225 0 148 14 225 0 149] 
#[1 14 229 0 79 1 37 0 119 1 173 0 127 14 233 0 135] 
#[1 0 6 0 79 0 6 0 119 0 6 0 127 14 237 0 133] 
#[0 6 162 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 166 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 14 241 0 79] 
#[0 6 170 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 14 245 0 69] 
#[0 14 249 0 69] 
#[0 14 253 0 55] 
#[1 6 174 0 53 6 174 0 54 1 173 0 127] 
#[1 0 6 0 53 0 6 0 54 0 6 0 127 15 1 0 133] 
#[0 6 178 0 5 0 8 0 10 0 11 0 13 0 22 0 23 0 25 0 26 0 53 0 54 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 5 165 0 1 5 169 0 3 5 173 0 5 5 177 0 7 5 181 0 8 5 185 0 10 5 189 0 11 5 193 0 12 15 5 0 13 5 197 0 14 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 19 5 217 0 20 5 221 0 21 5 225 0 24 5 229 0 29 5 233 0 30 5 237 0 32 5 241 0 57 5 245 0 72 5 249 0 75 5 253 0 85 6 1 0 110 6 5 0 239 6 9 0 241 6 13 0 243] 
#[0 6 182 0 5 0 8 0 10 0 11 0 13 0 22 0 23 0 25 0 26 0 53 0 54 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 15 9 0 69] 
#[0 15 13 0 55] 
#[1 15 17 0 55 1 37 0 119 1 173 0 127 15 21 0 135] 
#[0 15 25 0 69] 
#[1 15 29 0 55 1 173 0 127] 
#[0 15 33 0 69] 
#[0 15 37 0 55] 
#[1 15 41 0 55 1 37 0 119 1 173 0 127 15 45 0 135] 
#[1 15 49 0 55 1 37 0 119 1 173 0 127 15 53 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 15 57 0 133] 
#[1 15 61 0 55 1 173 0 127] 
#[1 0 6 0 55 0 6 0 127 15 65 0 133] 
#[0 6 186 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 6 190 0 5 6 190 0 8 6 190 0 10 1 165 0 11 6 190 0 22 6 190 0 23 6 190 0 25 6 190 0 26 6 190 0 34 6 190 0 49 6 190 0 50 6 190 0 53 6 190 0 54 6 190 0 55 6 190 0 56 6 190 0 59 6 190 0 60 6 190 0 62 6 190 0 63 6 190 0 66 6 190 0 67 6 190 0 68 6 190 0 69 6 190 0 73 6 190 0 77 6 190 0 79 6 190 0 80 6 190 0 82 6 190 0 88 6 190 0 90 6 190 0 91 6 190 0 92 6 190 0 93 6 190 0 94 6 190 0 96 6 190 0 103 6 190 0 107 6 190 0 108 6 190 0 109 6 190 0 111 6 190 0 117 6 190 0 118 6 190 0 119 6 190 0 120 6 190 0 121 6 190 0 122 6 190 0 123 6 190 0 124 6 190 0 125 6 190 0 127] 
#[0 6 194 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 69 0 79] 
#[1 15 73 0 79 1 37 0 119 1 173 0 127 15 77 0 135] 
#[0 6 198 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 202 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 206 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 81 0 69] 
#[1 6 210 0 53 6 210 0 54 1 173 0 127] 
#[0 6 214 0 5 0 8 0 10 0 11 0 13 0 22 0 23 0 25 0 26 0 53 0 54 0 60 0 73 0 80 0 94 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 6 218 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 85 0 69] 
#[0 15 89 0 69] 
#[0 15 93 0 55] 
#[0 6 222 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 97 0 69] 
#[0 6 226 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 101 0 69] 
#[0 15 105 0 69] 
#[0 15 109 0 55] 
#[0 15 113 0 69] 
#[0 15 117 0 55] 
#[1 15 121 0 55 1 37 0 119 1 173 0 127 15 125 0 135] 
#[0 15 129 0 69] 
#[1 15 133 0 55 1 173 0 127] 
#[0 6 230 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 234 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 137 0 79] 
#[0 6 238 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 242 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 246 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 141 0 69] 
#[0 6 250 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 254 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 2 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 145 0 69] 
#[0 7 6 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 149 0 69] 
#[0 15 153 0 69] 
#[0 15 157 0 55] 
#[0 7 10 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 161 0 69] 
#[0 7 14 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 18 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 22 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 26 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 30 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 165 0 69] 
#[0 7 34 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 38 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127]
	).
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAddressOfClause1: nodes [
	| result |
	result := VBAddressOfClauseNode new.
	result addressOfToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument1: nodes [
	| result |
	result := VBArgumentNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument2: nodes [
	| result |
	result := VBArgumentNode new.
	result paramarrayToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument3: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument4: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result arguments.
	result addTokens: ((nodes at: 2) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addNode: (nodes at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result timesToken: ((nodes at: 2) at: 1).
	result plusToken: ((nodes at: 2) at: 2).
	result minusToken: ((nodes at: 2) at: 3).
	result divideToken: ((nodes at: 2) at: 4).
	result upArrowToken: ((nodes at: 2) at: 5).
	result _Token: ((nodes at: 2) at: 6).
	result modToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator4: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator6: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator7: nodes [
	| result |
	result := Array new: 7.
	result at: 7 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignementOrEquals1: nodes [
	| result |
	result := VBAssignementOrEqualsNode new.
	result left: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBModuleAttributeNode new.
	result attributeToken: (nodes at: 1).
	result setting: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBaseType11: nodes [
	| result |
	result := VBBaseTypeNode new.
	result variantToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addObject: (nodes at: 1) to: result statements.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addObjects: ((nodes at: 2) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanBinaryOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result andToken: ((nodes at: 2) at: 1).
	result orToken: ((nodes at: 2) at: 2).
	result xorToken: ((nodes at: 2) at: 3).
	result eqvToken: ((nodes at: 2) at: 4).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanLiteral1: nodes [
	| result |
	result := VBBooleanLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForColorLiteral1: nodes [
	| result |
	result := VBColorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperation1: nodes [
	| result |
	result := VBComparisonOperationNode new.
	result left: (nodes at: 1).
	result greaterThanToken: ((nodes at: 2) at: 1).
	result lessThanToken: ((nodes at: 2) at: 2).
	result lessThanGreaterThanToken: ((nodes at: 2) at: 3).
	result lessThanEqualToken: ((nodes at: 2) at: 4).
	result greaterThanEqualToken: ((nodes at: 2) at: 5).
	result isToken: ((nodes at: 2) at: 6).
	result likeToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator5: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType1: nodes [
	| result |
	result := VBComplexTypeNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConcatenationOperation1: nodes [
	| result |
	result := VBConcatenationOperationNode new.
	result left: (nodes at: 1).
	result andToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConfiguration1: nodes [
	| result |
	result := VBConfigurationNode new.
	result beginToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result settings.
	result addNodes: ((nodes at: 4) at: 1) to: result settings.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDateLiteral1: nodes [
	| result |
	result := VBDateLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction1: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction2: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction3: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction4: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	result type: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub1: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub2: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub3: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub4: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum1: nodes [
	| result |
	result := VBDefineEnumNode new.
	result addToken: (nodes at: 1) to: result enumTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum2: nodes [
	| result |
	result := VBDefineEnumNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction1: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction2: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction3: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction4: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction5: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction6: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction7: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction8: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub1: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result selector: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub2: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub3: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub4: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub5: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub6: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub7: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result subTokens.
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub8: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result subTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType1: nodes [
	| result |
	result := VBDefineTypeNode new.
	result addToken: (nodes at: 1) to: result typeTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType2: nodes [
	| result |
	result := VBDefineTypeNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result typeTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariable1: nodes [
	| result |
	result := VBDimVariableNode new.
	result dimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariables1: nodes [
	| result |
	result := VBDimMultipleVariablesNode new.
	result dimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess1: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result receiver: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue1: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	result untilToken: (nodes at: 6).
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue2: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	result untilToken: (nodes at: 7).
	result condition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue1: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result loopToken: (nodes at: 4).
	result whileToken: (nodes at: 5).
	result condition: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue2: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result endLineNumber: (nodes at: 4).
	result loopToken: (nodes at: 5).
	result whileToken: (nodes at: 6).
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue3: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	result whileToken: (nodes at: 6).
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue4: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	result whileToken: (nodes at: 7).
	result condition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfBlock1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfBlock2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result ifMatch: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfColon1: nodes [
	| result |
	result := VBElseIfColonNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 4) at: 2) to: result ifMatches.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry1: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry2: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent1: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent2: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result eventToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitDo1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result doToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFor1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result forToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFunction1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitProperty1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result propertyToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitSub1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result setToken: (nodes at: 1).
	result left: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result right: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement3: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result left: (nodes at: 1).
	result colonEqualToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitCall1: nodes [
	| result |
	result := VBExplicitCallNode new.
	result callToken: (nodes at: 1).
	result call: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFloatLiteral1: nodes [
	| result |
	result := VBFloatLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach1: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach2: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	result addNode: (nodes at: 9) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach3: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach4: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	result addNode: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach5: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach6: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	result addNode: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach7: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach8: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	result addNode: (nodes at: 11) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext1: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext2: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext3: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext4: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext1: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext2: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext3: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext4: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endLineNumber: (nodes at: 12).
	result nextToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLabel1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result gosubToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLine1: nodes [
	| result |
	result := VBGoSubLineNode new.
	result gosubToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result gotoToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLine1: nodes [
	| result |
	result := VBGoToLineNode new.
	result gotoToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGuidLiteral1: nodes [
	| result |
	result := VBGuidLiteralNode new.
	result leftBraceToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 3) to: result minusTokens.
	result addTokens: (nodes at: 4) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 5) to: result minusTokens.
	result addTokens: (nodes at: 6) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 7) to: result minusTokens.
	result addTokens: (nodes at: 8) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 9) to: result minusTokens.
	result addTokens: (nodes at: 10) to: result hEX_INTEGERTokens.
	result rightBraceToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHashIdentifier1: nodes [
	| result |
	result := VBHashIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHeadlessIdentifier1: nodes [
	| result |
	result := VBHeadlessIdentifierNode new.
	result periodToken: (nodes at: 1).
	result token: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen1: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen2: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen3: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen4: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenColon1: nodes [
	| result |
	result := VBIfThenColonNode new.
	result ifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result
		ifTrue: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse10: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse11: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse12: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse13: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse14: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse15: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result
		ifFalse: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse16: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result
		ifFalse: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endLineNumber: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result
		ifFalse: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result
		ifFalse: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse5: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse6: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse7: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse8: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse9: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse1: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse2: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result otherwise: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse3: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse4: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result otherwise: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall1: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result identifier: (nodes at: 1).
	result arguments: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop1: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result loopToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop2: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result endLineNumber: (nodes at: 4).
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop3: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop4: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral1: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result returnToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub2: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result returnToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub3: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result block: (nodes at: 3).
	result returnToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub4: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result block: (nodes at: 3).
	result endLineNumber: (nodes at: 4).
	result returnToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess1: nodes [
	| result |
	result := VBMemberAccessNode new.
	result receiver: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant1: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: (nodes at: 2).
	result constant: (nodes at: 3).
	result equalToken: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant2: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: (nodes at: 2).
	result constant: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: (nodes at: 5).
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperties1: nodes [
	| result |
	result := VBModuleMultiplePropertiesNode new.
	result visibility: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperty1: nodes [
	| result |
	result := VBModulePropertyNode new.
	result visibility: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet10: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet11: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet12: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet13: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet14: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet15: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet16: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet9: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result letToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result letToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result letToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result letToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result setToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result setToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result setToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result setToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNegatedOperation1: nodes [
	| result |
	result := VBNegatedOperationNode new.
	result minusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNewClause1: nodes [
	| result |
	result := VBNewClauseNode new.
	result nEWToken: (nodes at: 1).
	result typeName: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation1: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNull1: nodes [
	| result |
	result := VBNullNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorGoTo1: nodes [
	| result |
	result := VBOnErrorGoToNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorResumeNext1: nodes [
	| result |
	result := VBOnErrorResumeNextNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result resumeToken: (nodes at: 3).
	result nextToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnExpressionGo1: nodes [
	| result |
	result := VBOnExpressionGoNode new.
	result onToken: (nodes at: 1).
	result integerExpression: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption1: nodes [
	| result |
	result := VBOptionValueNode new.
	result optionToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption2: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result databaseToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption3: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result binaryToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption4: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result compare: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption5: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result optionToken: (nodes at: 1).
	result explicitToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption6: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result optionToken: (nodes at: 1).
	result privateToken: (nodes at: 2).
	result moduleToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter10: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter11: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter12: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter13: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter14: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter15: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter16: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result type: (nodes at: 5).
	result equalToken: ((nodes at: 6) at: 1).
	result default: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result equalToken: ((nodes at: 2) at: 1).
	result default: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter9: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList1: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result rightParenToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList2: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result parameters.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterPassingStrategy2: nodes [
	| result |
	result := VBParameterPassingStrategyNode new.
	result byrefToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression1: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPositiveOperation1: nodes [
	| result |
	result := VBPositiveOperationNode new.
	result plusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess1: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result receiver: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForQualifiedIdentifier1: nodes [
	| result |
	result := VBQualifiedIdentifierNode new.
	result token: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseEvent1: nodes [
	| result |
	result := VBRaiseEventNode new.
	result raiseEventToken: (nodes at: 1).
	result call: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable1: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable2: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables1: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables2: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeLabel1: nodes [
	| result |
	result := VBResumeLabelNode new.
	result resumeToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeNext1: nodes [
	| result |
	result := VBResumeNextNode new.
	result resumeToken: (nodes at: 1).
	result nextToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSetUpAssignation1: nodes [
	| result |
	result := VBSetUpAssignationNode new.
	result identifier: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleIdentifier1: nodes [
	| result |
	result := VBSimpleIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariable1: nodes [
	| result |
	result := VBStaticVariableNode new.
	result staticToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariables1: nodes [
	| result |
	result := VBStaticMultipleVariablesNode new.
	result staticToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStringLiteral1: nodes [
	| result |
	result := VBStringLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry1: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry2: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing1: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing2: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParenToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result sizes.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing1: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing2: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	result leftParenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result sizes.
	result addTokens: ((nodes at: 5) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue1: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue2: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable1: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable2: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable3: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable4: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariableList1: nodes [
	| result |
	result := VBVariableListNode new.
	result addNode: (nodes at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result variables.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue1: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue2: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue3: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue4: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend1: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result wendToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend2: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend3: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend4: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result wendToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith1: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith2: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith3: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith4: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________2: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_HEX_INTEGER___1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___Expression__ifMatch__________1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___Expression__ifMatch__________2: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Expression__default___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Expression__default___2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___eol___EnumEntry__field___2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader1: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader2: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	result classToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule1: nodes [
	| result |
	result := VBModuleNode new.
	result addNode: (nodes at: 1) to: result elements.
	result addNodes: ((nodes at: 2) at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule2: nodes [
	| result |
	result := VBModuleNode new.
	result header: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result elements.
	result addNodes: ((nodes at: 4) at: 1) to: result elements.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]
