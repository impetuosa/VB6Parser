Class {
	#name : #VBParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_VB6Parser'
}

{ #category : #generated }
VBParser class >> ambiguousTransitions [
^#(
#[ 0 166 0 170] 
#[ 0 170 0 194] 
#[ 0 170 0 202] 
#[ 0 170 0 222] 
#[ 0 170 1 22] 
#[ 1 106 1 110 1 114] 
#[ 1 106 1 110 1 114 1 165] 
#[ 2 94 4 173] 
#[ 2 94 4 229] 
#[ 2 98 4 173] 
#[ 2 98 4 229] 
#[ 1 150 2 106] 
#[ 1 150 2 114] 
#[ 2 138 4 173] 
#[ 2 138 4 229] 
#[ 2 150 6 221] 
#[ 2 125 2 150] 
#[ 2 129 2 150] 
#[ 2 133 2 150] 
#[ 2 137 2 150] 
#[ 2 141 2 150] 
#[ 2 145 2 150] 
#[ 2 149 2 150] 
#[ 2 150 2 153] 
#[ 2 150 2 157] 
#[ 2 150 2 161] 
#[ 2 150 2 165] 
#[ 1 37 2 150] 
#[ 1 85 2 150] 
#[ 2 150 2 169] 
#[ 2 150 2 173] 
#[ 2 150 2 177] 
#[ 0 209 2 150] 
#[ 0 213 2 150] 
#[ 0 6 7 129] 
#[ 3 6 7 173] 
#[ 0 209 3 6] 
#[ 0 213 3 6] 
#[ 3 98 3 102] 
#[ 1 222 3 174] 
#[ 3 206 4 173] 
#[ 3 206 4 229] 
#[ 2 150 8 105] 
#[ 3 214 8 117] 
#[ 3 222 4 173] 
#[ 3 222 4 229] 
#[ 3 230 4 173] 
#[ 3 230 4 229] 
#[ 3 234 4 173] 
#[ 3 234 4 229] 
#[ 3 238 4 173] 
#[ 3 238 4 229] 
#[ 3 242 4 173] 
#[ 3 242 4 229] 
#[ 0 6 1 37] 
#[ 0 6 1 173] 
#[ 0 6 1 118] 
#[ 2 125 4 62] 
#[ 2 129 4 62] 
#[ 2 133 4 62] 
#[ 2 137 4 62] 
#[ 0 9 4 62] 
#[ 0 21 4 62] 
#[ 4 62 5 109] 
#[ 0 25 4 62] 
#[ 0 29 4 62] 
#[ 2 141 4 62] 
#[ 4 62 5 113] 
#[ 0 33 4 62] 
#[ 0 41 4 62] 
#[ 4 62 5 117] 
#[ 4 62 5 121] 
#[ 4 62 5 125] 
#[ 2 145 4 62] 
#[ 2 149 4 62] 
#[ 4 62 5 129] 
#[ 0 49 4 62] 
#[ 0 57 4 62] 
#[ 0 61 4 62] 
#[ 4 62 5 133] 
#[ 4 62 8 245] 
#[ 2 153 4 62] 
#[ 4 62 5 137] 
#[ 0 73 4 62] 
#[ 4 62 5 141] 
#[ 4 62 5 145] 
#[ 2 157 4 62] 
#[ 2 161 4 62] 
#[ 2 165 4 62] 
#[ 1 37 4 62] 
#[ 1 85 4 62] 
#[ 2 169 4 62] 
#[ 2 173 4 62] 
#[ 2 177 4 62] 
#[ 0 209 4 62] 
#[ 0 213 4 62] 
#[ 0 6 4 66] 
#[ 3 230 4 82 4 169] 
#[ 3 230 4 82 4 173] 
#[ 3 230 4 82 4 177] 
#[ 3 230 4 82 4 181] 
#[ 3 230 4 82 4 185] 
#[ 3 230 4 82 4 189] 
#[ 3 230 4 82 4 193] 
#[ 3 230 4 82 4 197] 
#[ 3 230 4 82 4 201] 
#[ 3 230 4 82 4 205] 
#[ 3 230 4 82 4 209] 
#[ 3 230 4 82 4 213] 
#[ 3 230 4 82 4 217] 
#[ 3 230 4 82 4 221] 
#[ 3 230 4 82 4 225] 
#[ 3 230 4 82 4 229] 
#[ 3 230 4 82 4 233] 
#[ 3 230 4 82 4 237] 
#[ 3 230 4 82 4 241] 
#[ 3 230 4 82 4 245] 
#[ 3 230 4 82 4 249] 
#[ 3 230 4 82 4 253] 
#[ 3 230 4 82 5 1] 
#[ 4 90 4 173] 
#[ 4 90 4 229] 
#[ 4 94 4 173] 
#[ 4 94 4 229] 
#[ 4 106 8 117] 
#[ 2 125 4 110] 
#[ 2 129 4 110] 
#[ 2 133 4 110] 
#[ 2 137 4 110] 
#[ 2 141 4 110] 
#[ 2 145 4 110] 
#[ 2 149 4 110] 
#[ 2 153 4 110] 
#[ 2 157 4 110] 
#[ 2 161 4 110] 
#[ 2 165 4 110] 
#[ 1 37 4 110] 
#[ 1 85 4 110] 
#[ 2 169 4 110] 
#[ 2 173 4 110] 
#[ 2 177 4 110] 
#[ 0 209 4 110] 
#[ 0 213 4 110] 
#[ 2 125 4 114] 
#[ 2 129 4 114] 
#[ 2 133 4 114] 
#[ 2 137 4 114] 
#[ 2 141 4 114] 
#[ 2 145 4 114] 
#[ 2 149 4 114] 
#[ 2 153 4 114] 
#[ 2 157 4 114] 
#[ 2 161 4 114] 
#[ 2 165 4 114] 
#[ 1 37 4 114] 
#[ 1 85 4 114] 
#[ 2 169 4 114] 
#[ 2 173 4 114] 
#[ 2 177 4 114] 
#[ 0 209 4 114] 
#[ 0 213 4 114] 
#[ 1 74 10 13] 
#[ 4 173 4 202] 
#[ 4 202 4 229] 
#[ 0 209 5 238] 
#[ 0 213 5 238] 
#[ 0 6 5 242] 
#[ 0 209 6 6] 
#[ 0 213 6 6] 
#[ 0 209 6 10] 
#[ 0 213 6 10] 
#[ 0 209 6 38] 
#[ 0 213 6 38]
	).
]

{ #category : #'generated-accessing' }
VBParser class >> cacheId [
	^'2020-08-26T17:13:46.5563+02:00'
]

{ #category : #generated }
VBParser class >> definitionComment [
"%glr;
%ignorecase;
%annotate_tokens;

#expression operators -- lowest precedence are first.
%left "")""  ;
%left  ""="";
%left "","";
%right "":"";
%left ""eqv"" ;
%left ""||"" ""or"" ""xor"";
%left ""&&"" ""and"";
%left ""is"" ""like"" ""!="" ""<>"";
%left ""<"" ""<="" "">"" "">="";
%left ""+"" ""-"";
%left ""*"" ""/"" ""Mod"";
%right ""^"";
%right ""delete"" ""~"";
%right ""["" ""("";
%left ""."" ""!"" ;
%prefix VB;
%root Program;
%suffix Node;
%start module;



<DECIMAL_INTEGER>
	: 0 | [1-9] [0-9]*	
	;
<HEX_INTEGER>
	: 0[xX][0-9a-fA-F]+	
	;
<OCTAL_INTEGER>
	: 0[0-7]+	
	;
<EXPONENT>
	: [eE] [\-\+]? [0-9]+ 	
	;
<FLOAT_TYPE>
	: [fFdD]	
	;

<DATE_LITERAL>
   : ""#"" ([^\#\r\n])*  ""#""
   ;
<COLOR_LITERAL>
   : \&H <HEX_INTEGER>+ ""&""?
   ;

<INTEGER_LITERAL>
	: (<DECIMAL_INTEGER> | <HEX_INTEGER> | <OCTAL_INTEGER>) [lL]?	
	;
<FLOATING_POINT_LITERAL>
	: [0-9]+ \. [0-9]* <EXPONENT>? <FLOAT_TYPE>? 
	| \. [0-9]+ <EXPONENT>? <FLOAT_TYPE>? 
	| [0-9]+ <EXPONENT> <FLOAT_TYPE>? 
	| [0-9]+ <FLOAT_TYPE>	
	| <HEX_INTEGER> \. [0-9a-fA-F]+ [pP] [\-\+]? [0-9]+ <FLOAT_TYPE>?
	;
<BOOLEAN_LITERAL>
	: true
	| false
	;
<STRING_LITERAL>
   : \"" ([^\""\r\n] | \""\"")* \""
   ;
<NULL_LITERAL>
	: Nothing	
	;

<IDENTIFIER>
	: (<isLetter> | [a-zA-Z_$]) (<isLetter>|\w|$)*	
	;
<HASH_IDENTIFIER>
	: ( \#) (<isLetter>|\w|$)*
	;
	
<whitespace>
	: \s+
	;

<line_continuation>
   : \  _ \r? \n 
   ;
<eol>
   :  (\r? \n | "":"" \ ) 
   ;

<comment>
   :  (\' | :?  REM  \ ) (<line_continuation> | [^\n\r])* 
   ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Basic module
########## ########## ########## ########## ########## ########## ########## ########## 

module: (header 'header' <eol>*)? ModuleStatement 'element'  (<eol>* ModuleStatement 'element' )*   <eol>* {{Module}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Literals
########## ########## ########## ########## ########## ########## ########## ########## 
literal 
	: IntegerLiteral
	| ColorLiteral
	| DateLiteral
	| FloatLiteral
	| BooleanLiteral
	| StringLiteral
	| Null
	| GuidLiteral
;
IntegerLiteral :  <INTEGER_LITERAL> 'token' {{IntegerLiteral}};
ColorLiteral: <COLOR_LITERAL> 'token' {{ColorLiteral}} ; 
DateLiteral:  <DATE_LITERAL> 'token' {{DateLiteral}};
FloatLiteral: <FLOATING_POINT_LITERAL> 'token' {{FloatLiteral}};
BooleanLiteral: <BOOLEAN_LITERAL> 'token' {{BooleanLiteral}};
StringLiteral:  <STRING_LITERAL> 'token' {{StringLiteral}};
Null: <NULL_LITERAL> 'token' {{Null}};
GuidLiteral: ""{""<HEX_INTEGER> + ""-""<HEX_INTEGER>+""-"" <HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""}"" {{GuidLiteral}};

Identifier : 
	   SimpleIdentifier 
	| HashIdentifier
	| QualifiedIdentifier | HeadlessIdentifier;

HashIdentifier :  <HASH_IDENTIFIER> 'token'   {{HashIdentifier}};
SimpleIdentifier : <IDENTIFIER> 'token'  {{SimpleIdentifier}};
HeadlessIdentifier  : "".""  Identifier 'token'  {{HeadlessIdentifier}};
QualifiedIdentifier : Identifier 'token'  "".""  <IDENTIFIER> 'member' {{QualifiedIdentifier}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Module header and configuration
########## ########## ########## ########## ########## ########## ########## ########## 

header: ""version""   FloatLiteral  'version'  (""class"")?  {{}};
Option
   :   ""option"" IntegerLiteral 'value' {{OptionValue}}
   |   ""option"" ""compare"" ""database"" {{OptionCompareDatabase}}
   |   ""option"" ""compare""  (""binary""| ""text"" 'compare') {{OptionCompare}}
   |   ""option"" ""explicit"" {{OptionExplicit}}
   |  ""option"" ""private"" ""module""{{OptionPrivateModule}}
   ;

SetUpAssignation :  
	Identifier  'identifier' ""="" Expression 'value' {{SetUpAssignation}} 
;
Attribute
 : ""attribute"" SetUpAssignation 'setting' {{ModuleAttribute}}
 ;
Configuration 
:	""begin""  <eol>* SetUpAssignation 'setting' ( <eol>+ SetUpAssignation 'setting')* ""end"" {{Configuration}};

ModuleStatement :  
	Option  | Configuration | Attribute | DeclareExternal | VariableDefinition | BehaviourDefinition | Types
 ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Body statements
########## ########## ########## ########## ########## ########## ########## ########## 



Statement :   VariableDefinition | Attribute | Expression | ControlFlowStatement | Types ;
Block: Statement 'statement' (<eol>* Statement 'statement'  )* {{Block}};

BaseType: ""boolean"" | ""byte"" | ""collection"" | ""date"" | ""double"" | ""integer"" | ""long"" | ""object"" | ""single"" | ""string"" | ""variant"" {{BaseType}};
Visibility: ""private"" | ""public"" | ""friend"" | ""global"" ; 

ComplexType: Identifier 'name' {{ComplexType}};
Type: BaseType | ComplexType ;

TypedThing: ""as""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsType}}; 
TypedAndInstantiatedThing: ""as"" ""new""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsTypeAndNew}}; 

AsType: TypedThing | TypedAndInstantiatedThing;



########## ########## ########## ########## ########## ########## ########## ########## 
########## Types
########## ########## ########## ########## ########## ########## ########## ########## 
Types : DefineEnum | DefineType | Event ;

DefineType : 	 (Visibility 'visibility')? ""type"" Identifier 'name' ( <eol>* TypeEntry 'field' )* <eol>* ""end"" ""type"" {{DefineType}}    ;
TypeEntry    : Identifier 'name' AsType 'type' (""*"" IntegerLiteral 'size' )? {{TypeEntry}}     ;
Event  : (Visibility 'visibility')?  ""event"" Identifier 'selector' ParameterList 'parameters' {{Event}} ;
DefineEnum    :  (Visibility 'visibility')?  ""enum"" Identifier 'name'  ( <eol>* EnumEntry 'field')* <eol>*  ""end"" ""enum"" {{DefineEnum}}    ;
EnumEntry    : Identifier 'name'  ( ""=""  Expression 'value')? {{EnumEntry}}    ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Parameters
########## ########## ########## ########## ########## ########## ########## ########## 
ParameterPassingStrategy :  ""byval"" | ""byref"" {{ParameterPassingStrategy}};
ParameterList:  ""("" (Parameter 'parameter' ( "","" Parameter 'parameter')* )? "")"" {{ParameterList}};
Parameter: ""optional"" ? (ParameterPassingStrategy 'strategy')? ""paramarray""? Identifier 'name'  (AsType 'type')? (""="" Expression 'default')? {{Parameter}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## External declaration
########## ########## ########## ########## ########## ########## ########## ########## 
DeclareSub: (Visibility 'visibility')? ""declare""  ""sub"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  {{ExternalSub}};
DeclareFunction: (Visibility 'visibility')? ""declare""  ""function"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  AsType 'type' {{ExternalFunction}};
DeclareExternal : DeclareSub|DeclareFunction; 

########## ########## ########## ########## ########## ########## ########## ########## 
########## Function / Sub Definition 
########## ########## ########## ########## ########## ########## ########## ########## 

Modifier: ""static"" ;
DefineFunction: (Visibility 'visibility')? (Modifier 'modifier')? ""function"" Identifier 'selector' ParameterList 'parameters' (AsType 'type')? <eol>* Block 'block' ""end"" ""function"" {{FunctionDefinition}};
DefineSub:  (Visibility 'visibility')? (Modifier 'modifier')? ""sub"" Identifier 'selector' ParameterList 'parameters' <eol>* Block 'block' ""end"" ""sub"" {{SubDefinition}};


ModulePropertyGet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""get"" Identifier 'selector' ParameterList 'parameters' (AsType 'type')? <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 
ModulePropertySet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""set"" Identifier 'selector' ParameterList 'parameters'  <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 
ModulePropertyLet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""let"" Identifier 'selector' ParameterList 'parameters'   <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 


BehaviourDefinition:  DefineFunction | DefineSub | ModulePropertyGet | ModulePropertySet | ModulePropertyLet ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Variable / And Multiple Variables
########## ########## ########## ########## ########## ########## ########## ########## 

ModuleProperty : Visibility 'visibility' Variable 'variable' {{ModuleProperty}};
ModuleConstant : (Visibility 'visibility') ""const"" Identifier 'constant' (AsType 'type')?  ""="" Expression 'value'  {{ModuleConstant}};
DefineVariable : ""dim"" Variable 'variable' {{DimVariable}};
ReDefineVariable : ""redim"" ""preserve""? Variable 'variable' {{ReDimVariable}};
StaticVariable : ""static"" Variable 'variable' {{StaticVariable}};
Variable : ""WithEvents"" ? Identifier 'name' (AsType 'type') {{Variable}};

ModuleProperties : Visibility 'visibility' VariableList 'variables' {{ModuleMultipleProperties}};
DefineVariables : ""dim"" VariableList 'variables' {{DimMultipleVariables}};
ReDefineVariables : ""redim""  ""preserve""?  VariableList 'variables' {{ReDimMultipleVariables}};
StaticVariables : ""static"" VariableList 'variables' {{StaticMultipleVariables}};
VariableList : Variable 'variable' ("",""  Variable 'variable' )* {{VariableList}};

VariableDefinition : ModuleProperties | ModuleProperty | ModuleConstant | DefineVariable | ReDefineVariable |  DefineVariables |  ReDefineVariables | StaticVariable | StaticVariables ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Value Statements
########## ########## ########## ########## ########## ########## ########## ########## 

ValueStatement :  Operation | ValueClause | ImplicitCall | StateAccess | ExplicitCall | RaiseEvent  ;
Expression :  ValueStatement |  Identifier | literal  | ParentheseesExpression | Exits ; 
ParentheseesExpression : ""("" Expression 'expression' "")"" {{ParentheseesExpression}};
ValueStatementList : ValueStatement 'value' ("","" ValueStatement 'value' ) * {{ValueStatementList}} ; 

### Ops

Operation : UnaryOperation | BinaryOperation ;

DictionaryAccess :   Expression 'receiver' ""!"" Identifier 'member' {{DictionaryAccess}} ;
MemberAccess : Expression 'receiver' ""."" Identifier 'member' {{MemberAccess}} ;
ImplicitParenthesesLessCall : Identifier 'identifier' ArgumentList 'arguments' {{ImplicitParenthesesLessCall}} ;
ProcedureCallOrArrayAccess :  Expression 'receiver' ""("" ArgumentList 'arguments' "")"" {{ProcedureCallOrArrayAccess}} ;

Argument : (ParameterPassingStrategy 'strategy')?  ""paramarray""?  Expression 'value' {{Argument}};
ArgumentList : (Argument 'argument' ? ("","" | "";"" ))* Argument 'argument'? ( ("","" | "";"" )Argument 'argument' ?)* {{ArgumentList}};

ImplicitCall : Identifier | ProcedureCallOrArrayAccess | ImplicitParenthesesLessCall ;
StateAccess : DictionaryAccess | MemberAccess ;

ExplicitCall : ""Call""  ImplicitCall 'call'  {{ExplicitCall}}; 
RaiseEvent : ""RaiseEvent""  ImplicitCall 'call'  {{RaiseEvent}}; 

### Unary Ops 
UnaryOperation:  NegatedOperation | PositiveOperation |  NotOperation ; 

NegatedOperation : ""-""  Expression 'value' {{NegatedOperation}} ;
PositiveOperation : ""+"" Expression 'value' {{PositiveOperation}} ;
NotOperation : ""not""  Expression 'value'  {{NotOperation}};

### Binary Ops 
BinaryOperation: ComparisonOperation  
				| ArithmeticOperation | BooleanBinaryOperation 
				| ExplicitAssignement | AssignementOrEquals  | ConcatenationOperation ;

ComparisonOperator : "">"" | ""<""  |  ""<>"" | ""<="" | "">="" | ""is"" | ""like""  ;
ComparisonOperation : Expression 'left' ComparisonOperator Expression 'right' {{ComparisonOperation}};
ArithmeticOperator : ""*"" | ""+"" | ""-"" | ""/"" | ""^"" | ""\"" | ""Mod"";
ArithmeticOperation : Expression 'left' ArithmeticOperator Expression 'right' {{ArithmeticOperation}};
BooleanOperator : ""and"" | ""or"" | ""xor"" | ""eqv"";
BooleanBinaryOperation : Expression 'left' BooleanOperator Expression 'right' {{ArithmeticOperation}};
ConcatenationOperation : Expression 'left' ""&"" Expression 'right' {{ConcatenationOperation}}; 
AssignementOrEquals : Expression 'left' ""="" Expression  'right' {{AssignementOrEquals}}; 
ExplicitAssignement : ""let"" | ""set""  Expression 'left' ""=""  Expression 'right' {{ExplicitAssignement}}; 

### Value Clause 
ValueClause: AddressOfClause | NewClause ;
AddressOfClause : ""AddressOf"" Identifier 'name'  {{AddressOfClause}}; 
NewClause : ""New"" Identifier 'typeName' {{NewClause}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Control flow statements
########## ########## ########## ########## ########## ########## ########## ########## 


ControlFlowStatement : Exits| Loops | If  | On | Resume| Go | To | Label | With ; 

#### Loops
Loops : DoLoop | WhileWend | ForLoop ;

########## Do
DoLoop : InfinityLoop | WhileTrue | UntilTrue ; 
InfinityLoop : 
	""do""  
		<eol>* (Block 'body')? <eol>* 
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{InfinityLoop}} ;

WhileTrue :  
	""do"" ""while"" ValueStatement 'condition' 
		<eol>* ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{WhileTrue}}; 
UntilTrue : 
	""do"" ""until"" ValueStatement 'condition'
		 <eol>*  Block 'body' <eol>* 
	(IntegerLiteral 'endLineNumber')?""loop"" 
 {{UntilTrue}}; 

########## WhileWend
WhileWend: 
	""while"" ValueStatement 'condition'
		 <eol>* ( Block 'body')? <eol>*  (IntegerLiteral 'endLineNumber')? 
	""wend""  {{WhileWend}}; 

########## For 
ForLoop : ForEach | ForNext | ForStepNext;

ForEach :  
	""for"" ""each"" Identifier 'element' ""in"" Expression 'group' 
		 <eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next"" (Identifier 'element' )? 
{{ForEach}} ;
 
ForNext :   
	""for"" Expression 'counter' ""="" Expression  'initialValue'  ""to"" Expression  'limit'   
		<eol>*  ( Block 'body')? <eol>* 
	 (IntegerLiteral 'endLineNumber')? 	""next"" 
{{ForNext}} ;
ForStepNext:   
	""for"" Expression 'counter' ""="" Expression  'initialValue'  ""to"" Expression  'limit' ""step"" Expression 'step'   
		<eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next""
 {{ForStepNext}} ;

########## If

If : IfThenColon| IfThen | IfThenElse | IfThenElseIfElse ; 

IfThenColon : ""if"" Expression 'condition' ""then"" "":"" Expression  'ifTrue' {{IfThenColon}} ;
IfThen : 
	""if"" Expression 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>*  
	(IntegerLiteral 'endLineNumber')?  ""end"" ""if"" 
{{IfThen}};
IfThenElse : 
	""if"" Expression 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>* 
	(IntegerLiteral 'elseLineNumber')? ""else"" 
		 <eol>* (Block 'ifFalse')? <eol>* 
	(IntegerLiteral 'endLineNumber')? ""end"" ""if"" 
{{IfThenElse}};
IfThenElseIfElse  : 
""if"" Expression 'condition' ""then"" 
	<eol>* (Block 'ifTrue')? <eol>* 
(ElseIf 'case') + 
""else""  
	<eol>* (Block 'otherwise')? <eol>*
 ""end"" ""if""
{{IfThenElseIfElse}};

ElseIf: ElseIfBlock | ElseIfColon ;

ElseIfBlock : ""elseif"" Expression 'condition' ""then"" 
	<eol>* (Block 'ifMatch')? <eol>*  {{ElseIfBlock}};
ElseIfColon : ""elseif"" Expression 'condition' ""then"" (  Expression 'ifMatch' ?  "":"" )* {{ElseIfColon}} ;

###### Label / LabelSub
To : Label | LabelSub ;
Label : Identifier 'label' "":""  {{GoToLabel}}; 
LabelSub : Identifier 'label' "":"" (Block 'block' )? (IntegerLiteral 'endLineNumber')? ""return"" {{GoSubLabel}}; 

###### Resume
	Resume : ResumeLabel | ResumeNext | ResumeEmpty ;
	
	ResumeLabel : ""resume"" Identifier 'label' {{ResumeLabel}} ; 
	ResumeNext : ""resume"" ""next"" {{ResumeNext}} ; 
	ResumeEmpty : ""resume"" ; 
	
###### GoTo / GoSub 
Go: GoTo | GoSub ;

GoTo :  GoToLabel | GoToLine ;
GoToLabel : ""goto"" Identifier 'label' {{GoToLabel}}  ;
GoToLine :  ""goto"" IntegerLiteral 'lineNumber' {{GoToLine}}  ;

GoSub: GoSubLabel | GoSubLine ;
GoSubLabel :  ""gosub"" Identifier 'label'  {{GoSubLabel}} ;
GoSubLine :  ""gosub""  IntegerLiteral 'lineNumber'{{GoSubLine}} ;

########## On 

On: OnErrorGoTo | OnErrorResumeNext |  OnExpressionGo  ; 

OnErrorGoTo : ""on"" ""error"" GoTo 'to' {{OnErrorGoTo}}  ;
OnErrorResumeNext : ""on"" ""error"" ""resume""  ""next"" {{OnErrorResumeNext }} ;
OnExpressionGo : ""on"" Expression 'integerExpression' Go 'to' {{OnExpressionGo}} ;

########## Error
Error: ""error"" Expression 'errorCode' {{Error}} ;

########## With
With : ""with"" Identifier 'with' <eol>* (Block 'block' )? <eol>*  (IntegerLiteral 'endLineNumber')?""end"" ""with"" {{With}} ;

########## Exits

Exits : ExitFunction | ExitSub | ExitProperty | ExitDo |ExitFor ; 
ExitFunction : ""exit"" ""function"" {{Exits}} ; 
ExitSub : ""exit"" ""sub"" {{Exits}} ; 
ExitDo : ""exit"" ""do"" {{Exits}} ; 
ExitFor : ""exit"" ""for"" {{Exits}} ; 
ExitProperty : ""exit"" ""property"" {{Exits}} ;"
]

{ #category : #generated }
VBParser class >> reduceTable [
^#(
	#(131 0 #reduceActionFor_eol__1: 1736705 false ) 
	#(162 1 #liftFirstValue: 4652035 false ) 
	#(162 1 #liftFirstValue: 4652036 false ) 
	#(162 1 #liftFirstValue: 4652033 false ) 
	#(162 1 #liftFirstValue: 4652034 false ) 
	#(190 1 #liftFirstValue: 7325697 false ) 
	#(156 1 #liftFirstValue: 3988481 false ) 
	#(156 1 #liftFirstValue: 3988483 false ) 
	#(156 1 #liftFirstValue: 3988482 false ) 
	#(130 0 #reduceActionFor__eol___ModuleStatement__element____1: 1735681 false ) 
	#(156 1 #liftFirstValue: 3988487 false ) 
	#(170 1 #liftFirstValue: 5263362 false ) 
	#(170 1 #liftFirstValue: 5263363 false ) 
	#(170 1 #liftFirstValue: 5263361 false ) 
	#(189 1 #liftFirstValue: 7054337 false ) 
	#(189 1 #liftFirstValue: 7054338 false ) 
	#(156 1 #liftFirstValue: 3988484 false ) 
	#(196 1 #liftFirstValue: 8363009 false ) 
	#(196 1 #liftFirstValue: 8363010 false ) 
	#(196 1 #liftFirstValue: 8363011 false ) 
	#(196 1 #liftFirstValue: 8363012 false ) 
	#(196 1 #liftFirstValue: 8363013 false ) 
	#(156 1 #liftFirstValue: 3988486 false ) 
	#(210 1 #liftFirstValue: 9656322 false ) 
	#(210 1 #liftFirstValue: 9656323 false ) 
	#(210 1 #liftFirstValue: 9656324 false ) 
	#(210 1 #liftFirstValue: 9656325 false ) 
	#(210 1 #liftFirstValue: 9656328 false ) 
	#(210 1 #liftFirstValue: 9656321 false ) 
	#(210 1 #liftFirstValue: 9656326 false ) 
	#(210 1 #liftFirstValue: 9656327 false ) 
	#(210 1 #liftFirstValue: 9656329 false ) 
	#(156 1 #liftFirstValue: 3988485 false ) 
	#(145 1 #reduceActionForSimpleIdentifier1: 2846721 false ) 
	#(144 1 #reduceActionForHashIdentifier1: 2779137 false ) 
	#(143 1 #liftFirstValue: 2676738 false ) 
	#(143 1 #liftFirstValue: 2676737 false ) 
	#(143 1 #liftFirstValue: 2676740 false ) 
	#(143 1 #liftFirstValue: 2676739 false ) 
	#(151 2 #reduceActionForAttribute1: 3784705 false ) 
	#(199 2 #reduceActionForDefineVariable1: 8928257 false ) 
	#(209 0 #reduceActionFor__eol___ModuleStatement__element____1: 9607169 false ) 
	#(204 2 #reduceActionForDefineVariables1: 9314305 false ) 
	#(178 0 #reduceActionFor__eol___ModuleStatement__element____1: 5728257 false ) 
	#(149 2 #reduceActionForOption5: 3373061 false ) 
	#(133 1 #reduceActionForIntegerLiteral1: 2136065 false ) 
	#(149 2 #reduceActionForOption1: 3373057 false ) 
	#(200 2 #reduceActionForReDefineVariable1: 8989697 false ) 
	#(205 2 #reduceActionForReDefineVariables1: 9391105 false ) 
	#(201 2 #reduceActionForStaticVariable1: 9069569 false ) 
	#(206 2 #reduceActionForStaticVariables1: 9488385 false ) 
	#(173 0 #reduceActionFor__eol___ModuleStatement__element____1: 5376001 false ) 
	#(136 1 #reduceActionForFloatLiteral1: 2316289 false ) 
	#(148 2 #reduceActionForheader1: 3308545 false ) 
	#(197 2 #reduceActionForModuleProperty1: 8707073 false ) 
	#(203 2 #reduceActionForModuleProperties1: 9213953 false ) 
	#(146 2 #reduceActionForHeadlessIdentifier1: 2911233 false ) 
	#(131 2 #reduceActionFor_eol__2: 1736706 false ) 
	#(154 0 #reduceActionFor__eol___ModuleStatement__element____1: 3922945 false ) 
	#(169 1 #liftFirstValue: 5011457 false ) 
	#(169 1 #liftFirstValue: 5011458 false ) 
	#(202 2 #reduceActionForVariable1: 9137153 false ) 
	#(207 2 #reduceActionForVariableList1: 9571329 false ) 
	#(175 3 #reduceActionForEvent1: 5547009 false ) 
	#(149 3 #reduceActionForOption3: 3373059 false ) 
	#(149 3 #reduceActionForOption2: 3373058 false ) 
	#(149 3 #reduceActionForOption4: 3373060 false ) 
	#(149 3 #reduceActionForOption6: 3373062 false ) 
	#(200 3 #reduceActionForReDefineVariable2: 8989698 false ) 
	#(205 3 #reduceActionForReDefineVariables2: 9391106 false ) 
	#(148 3 #reduceActionForheader2: 3308546 false ) 
	#(130 2 #reduceActionFor__eol___ModuleStatement__element____2: 1735682 false ) 
	#(128 3 #reduceActionFormodule1: 1673217 false ) 
	#(147 3 #reduceActionForQualifiedIdentifier1: 2983937 false ) 
	#(245 1 #liftFirstValue: 12598273 false ) 
	#(135 1 #reduceActionForDateLiteral1: 2260993 false ) 
	#(134 1 #reduceActionForColorLiteral1: 2201601 false ) 
	#(137 1 #reduceActionForBooleanLiteral1: 2382849 false ) 
	#(138 1 #reduceActionForStringLiteral1: 2446337 false ) 
	#(139 1 #reduceActionForNull1: 2507777 false ) 
	#(212 1 #liftFirstValue: 10163203 false ) 
	#(132 1 #liftFirstValue: 1998849 false ) 
	#(132 1 #liftFirstValue: 1998850 false ) 
	#(132 1 #liftFirstValue: 1998851 false ) 
	#(132 1 #liftFirstValue: 1998852 false ) 
	#(132 1 #liftFirstValue: 1998853 false ) 
	#(132 1 #liftFirstValue: 1998854 false ) 
	#(132 1 #liftFirstValue: 1998855 false ) 
	#(132 1 #liftFirstValue: 1998856 false ) 
	#(225 0 #reduceActionFor_Argument__argument__________________1: 11034625 false ) 
	#(212 1 #liftFirstValue: 10163202 false ) 
	#(228 1 #liftFirstValue: 11153409 false ) 
	#(212 1 #liftFirstValue: 10163201 false ) 
	#(150 3 #reduceActionForSetUpAssignation1: 3688449 false ) 
	#(212 1 #liftFirstValue: 10163204 false ) 
	#(211 1 #liftFirstValue: 10058753 false ) 
	#(229 1 #liftFirstValue: 11242497 false ) 
	#(229 1 #liftFirstValue: 11242498 false ) 
	#(228 1 #liftFirstValue: 11153411 false ) 
	#(228 1 #liftFirstValue: 11153410 false ) 
	#(211 1 #liftFirstValue: 10058755 false ) 
	#(211 1 #liftFirstValue: 10058756 false ) 
	#(211 1 #liftFirstValue: 10058757 false ) 
	#(211 1 #liftFirstValue: 10058758 false ) 
	#(217 1 #liftFirstValue: 10457089 false ) 
	#(232 1 #liftFirstValue: 11440129 false ) 
	#(232 1 #liftFirstValue: 11440130 false ) 
	#(232 1 #liftFirstValue: 11440131 false ) 
	#(217 1 #liftFirstValue: 10457090 false ) 
	#(236 1 #liftFirstValue: 11730945 false ) 
	#(236 1 #liftFirstValue: 11730946 false ) 
	#(236 1 #liftFirstValue: 11730947 false ) 
	#(236 1 #liftFirstValue: 11730950 false ) 
	#(236 1 #liftFirstValue: 11730949 false ) 
	#(236 1 #liftFirstValue: 11730948 false ) 
	#(211 1 #liftFirstValue: 10058754 false ) 
	#(246 1 #liftFirstValue: 12725249 false ) 
	#(246 1 #liftFirstValue: 12725250 false ) 
	#(212 1 #liftFirstValue: 10163205 false ) 
	#(292 1 #liftFirstValue: 16921601 false ) 
	#(292 1 #liftFirstValue: 16921602 false ) 
	#(292 1 #liftFirstValue: 16921604 false ) 
	#(292 1 #liftFirstValue: 16921605 false ) 
	#(292 1 #liftFirstValue: 16921603 false ) 
	#(202 3 #reduceActionForVariable2: 9137154 false ) 
	#(161 1 #liftFirstValue: 4504577 false ) 
	#(161 1 #liftFirstValue: 4504578 false ) 
	#(161 1 #liftFirstValue: 4504579 false ) 
	#(161 1 #liftFirstValue: 4504580 false ) 
	#(161 1 #liftFirstValue: 4504581 false ) 
	#(161 1 #liftFirstValue: 4504582 false ) 
	#(161 1 #liftFirstValue: 4504583 false ) 
	#(161 1 #liftFirstValue: 4504584 false ) 
	#(161 1 #liftFirstValue: 4504585 false ) 
	#(161 1 #liftFirstValue: 4504586 false ) 
	#(161 1 #reduceActionForBaseType11: 4504587 false ) 
	#(163 1 #reduceActionForComplexType1: 4712449 false ) 
	#(164 1 #liftFirstValue: 4761601 false ) 
	#(164 1 #liftFirstValue: 4761602 false ) 
	#(165 2 #reduceActionForTypedThing1: 4794369 false ) 
	#(209 2 #reduceActionFor______Variable__variable____2: 9607170 false ) 
	#(178 2 #reduceActionFor___eol___EnumEntry__field___2: 5728258 false ) 
	#(181 2 #reduceActionForParameterList1: 6166529 false ) 
	#(180 1 #reduceActionForParameterPassingStrategy2: 6088706 false ) 
	#(180 1 #liftFirstValue: 6088705 false ) 
	#(186 0 #reduceActionFor_____Expression__default___1: 6383617 false ) 
	#(183 0 #reduceActionFor__eol___ModuleStatement__element____1: 6210561 false ) 
	#(173 2 #reduceActionFor___eol___EnumEntry__field___2: 5376002 false ) 
	#(129 2 #reduceActionFor__eol___ModuleStatement__element___1: 1735681 false ) 
	#(175 4 #reduceActionForEvent2: 5547010 false ) 
	#(234 2 #reduceActionForPositiveOperation1: 11583489 false ) 
	#(233 2 #reduceActionForNegatedOperation1: 11515905 false ) 
	#(247 2 #reduceActionForAddressOfClause1: 12769281 false ) 
	#(230 2 #reduceActionForExplicitCall1: 11292673 false ) 
	#(248 2 #reduceActionForNewClause1: 12841985 false ) 
	#(231 2 #reduceActionForRaiseEvent1: 11357185 false ) 
	#(295 2 #reduceActionForExitDo1: 17074177 false ) 
	#(296 2 #reduceActionForExitFor1: 17108993 false ) 
	#(293 2 #reduceActionForExitFunction1: 16990209 false ) 
	#(297 2 #reduceActionForExitProperty1: 17145857 false ) 
	#(294 2 #reduceActionForExitSub1: 17037313 false ) 
	#(235 2 #reduceActionForNotOperation1: 11652097 false ) 
	#(141 1 #reduceActionFor_HEX_INTEGER___1: 2564097 false ) 
	#(220 2 #reduceActionForImplicitParenthesesLessCall1: 10680321 false ) 
	#(227 0 #reduceActionFor_Argument__argument__________________1: 11095041 false ) 
	#(239 1 #reduceActionForArithmeticOperator1: 12083201 false ) 
	#(239 1 #reduceActionForArithmeticOperator2: 12083202 false ) 
	#(239 1 #reduceActionForArithmeticOperator3: 12083203 false ) 
	#(239 1 #reduceActionForArithmeticOperator4: 12083204 false ) 
	#(237 1 #reduceActionForArithmeticOperator2: 11902978 false ) 
	#(237 1 #reduceActionForArithmeticOperator4: 11902980 false ) 
	#(237 1 #reduceActionForArithmeticOperator3: 11902979 false ) 
	#(237 1 #reduceActionForArithmeticOperator1: 11902977 false ) 
	#(237 1 #reduceActionForComparisonOperator5: 11902981 false ) 
	#(239 1 #reduceActionForArithmeticOperator7: 12083207 false ) 
	#(239 1 #reduceActionForArithmeticOperator6: 12083206 false ) 
	#(239 1 #reduceActionForComparisonOperator5: 12083205 false ) 
	#(241 1 #reduceActionForBooleanOperator1: 12254209 false ) 
	#(241 1 #reduceActionForBooleanOperator4: 12254212 false ) 
	#(237 1 #reduceActionForArithmeticOperator6: 11902982 false ) 
	#(237 1 #reduceActionForArithmeticOperator7: 11902983 false ) 
	#(241 1 #reduceActionForBooleanOperator2: 12254210 false ) 
	#(241 1 #reduceActionForBooleanOperator3: 12254211 false ) 
	#(152 5 #reduceActionForConfiguration1: 3861505 false ) 
	#(155 1 #reduceActionFor_HEX_INTEGER___1: 3924993 false ) 
	#(154 2 #reduceActionFor__eol___ModuleStatement__element____2: 3922946 false ) 
	#(168 3 #reduceActionForTypedAndInstantiatedThing1: 4888577 false ) 
	#(208 2 #reduceActionFor______Variable__variable___1: 9607169 false ) 
	#(179 1 #reduceActionForEnumEntry1: 5799937 false ) 
	#(177 2 #reduceActionFor__eol___ModuleStatement__element___1: 5728257 false ) 
	#(186 1 #reduceActionFor_____Expression__default___2: 6383618 false ) 
	#(184 2 #reduceActionForParameter1: 6267905 false ) 
	#(278 1 #liftFirstValue: 16010241 false ) 
	#(157 1 #liftFirstValue: 4334594 false ) 
	#(160 0 #reduceActionFor__eol___ModuleStatement__element____1: 4457473 false ) 
	#(157 1 #liftFirstValue: 4334597 false ) 
	#(157 1 #liftFirstValue: 4334593 false ) 
	#(157 1 #liftFirstValue: 4334595 false ) 
	#(157 1 #liftFirstValue: 4334596 false ) 
	#(249 1 #liftFirstValue: 13119490 false ) 
	#(250 1 #liftFirstValue: 13216769 false ) 
	#(251 1 #liftFirstValue: 13272065 false ) 
	#(251 1 #liftFirstValue: 13272066 false ) 
	#(251 1 #liftFirstValue: 13272067 false ) 
	#(250 1 #liftFirstValue: 13216770 false ) 
	#(250 1 #liftFirstValue: 13216771 false ) 
	#(256 1 #liftFirstValue: 13935617 false ) 
	#(256 1 #liftFirstValue: 13935618 false ) 
	#(256 1 #liftFirstValue: 13935619 false ) 
	#(249 1 #liftFirstValue: 13119491 false ) 
	#(260 1 #liftFirstValue: 14625793 false ) 
	#(260 1 #liftFirstValue: 14625794 false ) 
	#(260 1 #liftFirstValue: 14625795 false ) 
	#(260 1 #liftFirstValue: 14625796 false ) 
	#(249 1 #liftFirstValue: 13119495 false ) 
	#(249 1 #liftFirstValue: 13119496 false ) 
	#(272 1 #liftFirstValue: 15638529 false ) 
	#(272 1 #liftFirstValue: 15638530 false ) 
	#(249 1 #liftFirstValue: 13119493 false ) 
	#(275 1 #liftFirstValue: 15843329 false ) 
	#(275 1 #liftFirstValue: 15843330 false ) 
	#(275 1 #liftFirstValue: 15843331 false ) 
	#(249 1 #liftFirstValue: 13119494 false ) 
	#(279 1 #liftFirstValue: 16060417 false ) 
	#(280 1 #liftFirstValue: 16080897 false ) 
	#(280 1 #liftFirstValue: 16080898 false ) 
	#(279 1 #liftFirstValue: 16060418 false ) 
	#(283 1 #liftFirstValue: 16234497 false ) 
	#(283 1 #liftFirstValue: 16234498 false ) 
	#(249 1 #liftFirstValue: 13119492 false ) 
	#(286 1 #liftFirstValue: 16411649 false ) 
	#(286 1 #liftFirstValue: 16411650 false ) 
	#(286 1 #liftFirstValue: 16411651 false ) 
	#(249 1 #liftFirstValue: 13119497 false ) 
	#(249 1 #liftFirstValue: 13119489 false ) 
	#(172 2 #reduceActionFor__eol___ModuleStatement__element___1: 5376001 false ) 
	#(128 5 #reduceActionFormodule2: 1673218 false ) 
	#(198 5 #reduceActionForModuleConstant1: 8790017 false ) 
	#(213 3 #reduceActionForParentheseesExpression1: 10255361 false ) 
	#(141 2 #reduceActionFor_eol__2: 2564098 false ) 
	#(224 1 #reduceActionFor_Argument__argument_________________1: 11034625 false ) 
	#(224 1 #reduceActionFor_Argument__argument_________________2: 11034626 false ) 
	#(222 1 #reduceActionForArgument1: 10917889 false ) 
	#(225 2 #reduceActionFor_Argument__argument__________________2: 11034626 false ) 
	#(223 2 #reduceActionForArgumentList1: 11019265 false ) 
	#(218 3 #reduceActionForDictionaryAccess1: 10506241 false ) 
	#(243 3 #reduceActionForConcatenationOperation1: 12408833 false ) 
	#(219 3 #reduceActionForMemberAccess1: 10598401 false ) 
	#(244 3 #reduceActionForAssignementOrEquals1: 12506113 false ) 
	#(238 3 #reduceActionForComparisonOperation1: 11977729 false ) 
	#(240 3 #reduceActionForArithmeticOperation1: 12148737 false ) 
	#(242 3 #reduceActionForBooleanBinaryOperation1: 12303361 false ) 
	#(155 2 #reduceActionFor_eol__2: 3924994 false ) 
	#(153 2 #reduceActionFor__eol___ModuleStatement__element___1: 3922945 false ) 
	#(187 6 #reduceActionForDeclareSub1: 6643713 false ) 
	#(167 0 #reduceActionFor__eol___ModuleStatement__element____1: 4845569 false ) 
	#(176 6 #reduceActionForDefineEnum1: 5655553 false ) 
	#(184 3 #reduceActionForParameter9: 6267913 false ) 
	#(184 3 #reduceActionForParameter3: 6267907 false ) 
	#(185 2 #reduceActionFor______Variable__variable___1: 6383617 false ) 
	#(184 3 #reduceActionForParameter2: 6267906 false ) 
	#(184 3 #reduceActionForParameter5: 6267909 false ) 
	#(181 4 #reduceActionForParameterList2: 6166530 false ) 
	#(183 2 #reduceActionFor______Variable__variable____2: 6210562 false ) 
	#(285 2 #reduceActionForGoSubLine1: 16327681 false ) 
	#(284 2 #reduceActionForGoSubLabel1: 16267265 false ) 
	#(282 2 #reduceActionForGoToLine1: 16168961 false ) 
	#(281 2 #reduceActionForGoToLabel1: 16112641 false ) 
	#(277 2 #reduceActionForResumeNext1: 15961089 false ) 
	#(276 2 #reduceActionForResumeLabel1: 15897601 false ) 
	#(273 2 #reduceActionForLabel1: 15663105 false ) 
	#(158 2 #reduceActionForBlock1: 4427777 false ) 
	#(171 6 #reduceActionForDefineType1: 5307393 false ) 
	#(174 2 #reduceActionForTypeEntry1: 5447681 false ) 
	#(198 6 #reduceActionForModuleConstant2: 8790018 false ) 
	#(245 4 #reduceActionForExplicitAssignement2: 12598274 false ) 
	#(142 1 #reduceActionFor_HEX_INTEGER___1: 2583553 false ) 
	#(222 2 #reduceActionForArgument2: 10917890 false ) 
	#(222 2 #reduceActionForArgument3: 10917891 false ) 
	#(224 2 #reduceActionFor_Argument__argument_________________3: 11034627 false ) 
	#(224 2 #reduceActionFor_Argument__argument_________________4: 11034628 false ) 
	#(223 3 #reduceActionForArgumentList2: 11019266 false ) 
	#(226 1 #reduceActionFor_Argument__argument_________________1: 11095041 false ) 
	#(226 1 #reduceActionFor______________Argument__argument____3: 11095043 false ) 
	#(227 2 #reduceActionFor_Argument__argument__________________2: 11095042 false ) 
	#(221 4 #reduceActionForProcedureCallOrArrayAccess1: 10796033 false ) 
	#(188 7 #reduceActionForDeclareFunction1: 6834177 false ) 
	#(179 3 #reduceActionForEnumEntry2: 5799938 false ) 
	#(184 4 #reduceActionForParameter11: 6267915 false ) 
	#(184 4 #reduceActionForParameter10: 6267914 false ) 
	#(184 4 #reduceActionForParameter13: 6267917 false ) 
	#(184 4 #reduceActionForParameter4: 6267908 false ) 
	#(184 4 #reduceActionForParameter7: 6267911 false ) 
	#(184 4 #reduceActionForParameter6: 6267910 false ) 
	#(182 2 #reduceActionFor______Variable__variable___1: 6210561 false ) 
	#(287 3 #reduceActionForOnErrorGoTo1: 16472065 false ) 
	#(289 3 #reduceActionForOnExpressionGo1: 16606209 false ) 
	#(274 3 #reduceActionForLabelSub1: 15712257 false ) 
	#(160 2 #reduceActionFor___eol___EnumEntry__field___2: 4457474 false ) 
	#(191 7 #reduceActionForDefineFunction1: 7347201 false ) 
	#(192 7 #reduceActionForDefineSub1: 7557121 false ) 
	#(187 7 #reduceActionForDeclareSub3: 6643715 false ) 
	#(176 7 #reduceActionForDefineEnum2: 5655554 false ) 
	#(171 7 #reduceActionForDefineType2: 5307394 false ) 
	#(142 2 #reduceActionFor_eol__2: 2583554 false ) 
	#(222 3 #reduceActionForArgument4: 10917892 false ) 
	#(226 2 #reduceActionFor______________Argument__argument____2: 11095042 false ) 
	#(226 2 #reduceActionFor_Argument__argument_________________4: 11095044 false ) 
	#(187 8 #reduceActionForDeclareSub2: 6643714 false ) 
	#(165 6 #reduceActionForTypedThing2: 4794370 false ) 
	#(167 2 #reduceActionFor______Variable__variable____2: 4845570 false ) 
	#(184 5 #reduceActionForParameter12: 6267916 false ) 
	#(184 5 #reduceActionForParameter15: 6267919 false ) 
	#(184 5 #reduceActionForParameter14: 6267918 false ) 
	#(184 5 #reduceActionForParameter8: 6267912 false ) 
	#(252 4 #reduceActionForInfinityLoop1: 13322241 false ) 
	#(288 4 #reduceActionForOnErrorResumeNext1: 16529409 false ) 
	#(274 4 #reduceActionForLabelSub2: 15712258 false ) 
	#(274 4 #reduceActionForLabelSub3: 15712259 false ) 
	#(159 2 #reduceActionFor__eol___ModuleStatement__element___1: 4457473 false ) 
	#(191 8 #reduceActionForDefineFunction2: 7347202 false ) 
	#(193 8 #reduceActionForModulePropertyGet1: 7732225 false ) 
	#(195 8 #reduceActionForModulePropertyLet1: 8156161 false ) 
	#(194 8 #reduceActionForModulePropertySet1: 7952385 false ) 
	#(174 4 #reduceActionForTypeEntry2: 5447682 false ) 
	#(188 8 #reduceActionForDeclareFunction3: 6834179 false ) 
	#(191 8 #reduceActionForDefineFunction5: 7347205 false ) 
	#(192 8 #reduceActionForDefineSub3: 7557123 false ) 
	#(191 8 #reduceActionForDefineFunction3: 7347203 false ) 
	#(192 8 #reduceActionForDefineSub2: 7557122 false ) 
	#(188 9 #reduceActionForDeclareFunction2: 6834178 false ) 
	#(168 7 #reduceActionForTypedAndInstantiatedThing2: 4888578 false ) 
	#(166 2 #reduceActionFor______Variable__variable___1: 4845569 false ) 
	#(184 6 #reduceActionForParameter16: 6267920 false ) 
	#(252 5 #reduceActionForInfinityLoop2: 13322242 false ) 
	#(252 5 #reduceActionForInfinityLoop3: 13322243 false ) 
	#(261 5 #reduceActionForIfThenColon1: 14688257 false ) 
	#(255 5 #reduceActionForWhileWend1: 13771777 false ) 
	#(274 5 #reduceActionForLabelSub4: 15712260 false ) 
	#(193 9 #reduceActionForModulePropertyGet2: 7732226 false ) 
	#(187 9 #reduceActionForDeclareSub4: 6643716 false ) 
	#(191 9 #reduceActionForDefineFunction6: 7347206 false ) 
	#(193 9 #reduceActionForModulePropertyGet5: 7732229 false ) 
	#(195 9 #reduceActionForModulePropertyLet3: 8156163 false ) 
	#(194 9 #reduceActionForModulePropertySet3: 7952387 false ) 
	#(191 9 #reduceActionForDefineFunction7: 7347207 false ) 
	#(192 9 #reduceActionForDefineSub4: 7557124 false ) 
	#(191 9 #reduceActionForDefineFunction4: 7347204 false ) 
	#(193 9 #reduceActionForModulePropertyGet3: 7732227 false ) 
	#(195 9 #reduceActionForModulePropertyLet2: 8156162 false ) 
	#(194 9 #reduceActionForModulePropertySet2: 7952386 false ) 
	#(253 6 #reduceActionForWhileTrue1: 13446145 false ) 
	#(252 6 #reduceActionForInfinityLoop4: 13322244 false ) 
	#(266 1 #reduceActionFor_HEX_INTEGER___1: 15257601 false ) 
	#(265 1 #liftFirstValue: 15257601 false ) 
	#(267 1 #liftFirstValue: 15358977 false ) 
	#(267 1 #liftFirstValue: 15358978 false ) 
	#(255 6 #reduceActionForWhileWend2: 13771778 false ) 
	#(255 6 #reduceActionForWhileWend3: 13771779 false ) 
	#(291 6 #reduceActionForWith1: 16777217 false ) 
	#(188 10 #reduceActionForDeclareFunction4: 6834180 false ) 
	#(193 10 #reduceActionForModulePropertyGet6: 7732230 false ) 
	#(191 10 #reduceActionForDefineFunction8: 7347208 false ) 
	#(193 10 #reduceActionForModulePropertyGet7: 7732231 false ) 
	#(195 10 #reduceActionForModulePropertyLet4: 8156164 false ) 
	#(194 10 #reduceActionForModulePropertySet4: 7952388 false ) 
	#(193 10 #reduceActionForModulePropertyGet4: 7732228 false ) 
	#(254 7 #reduceActionForUntilTrue1: 13600769 false ) 
	#(253 7 #reduceActionForWhileTrue2: 13446146 false ) 
	#(253 7 #reduceActionForWhileTrue3: 13446147 false ) 
	#(262 7 #reduceActionForIfThen1: 14782465 false ) 
	#(266 2 #reduceActionFor_eol__2: 15257602 false ) 
	#(255 7 #reduceActionForWhileWend4: 13771780 false ) 
	#(291 7 #reduceActionForWith2: 16777218 false ) 
	#(291 7 #reduceActionForWith3: 16777219 false ) 
	#(193 11 #reduceActionForModulePropertyGet8: 7732232 false ) 
	#(254 8 #reduceActionForUntilTrue2: 13600770 false ) 
	#(253 8 #reduceActionForWhileTrue4: 13446148 false ) 
	#(257 8 #reduceActionForForEach1: 13980673 false ) 
	#(271 0 #reduceActionFor__eol___ModuleStatement__element____1: 15559681 false ) 
	#(262 8 #reduceActionForIfThen2: 14782466 false ) 
	#(262 8 #reduceActionForIfThen3: 14782467 false ) 
	#(291 8 #reduceActionForWith4: 16777220 false ) 
	#(257 9 #reduceActionForForEach2: 13980674 false ) 
	#(257 9 #reduceActionForForEach3: 13980675 false ) 
	#(257 9 #reduceActionForForEach5: 13980677 false ) 
	#(258 9 #reduceActionForForNext1: 14178305 false ) 
	#(269 4 #reduceActionForElseIfColon1: 15505409 false ) 
	#(262 9 #reduceActionForIfThen4: 14782468 false ) 
	#(140 11 #reduceActionForGuidLiteral1: 2547713 false ) 
	#(257 10 #reduceActionForForEach4: 13980676 false ) 
	#(257 10 #reduceActionForForEach6: 13980678 false ) 
	#(257 10 #reduceActionForForEach7: 13980679 false ) 
	#(258 10 #reduceActionForForNext2: 14178306 false ) 
	#(258 10 #reduceActionForForNext3: 14178307 false ) 
	#(263 10 #reduceActionForIfThenElse1: 14928897 false ) 
	#(268 5 #reduceActionForElseIfBlock1: 15396865 false ) 
	#(270 1 #reduceActionFor___Expression__ifMatch__________1: 15559681 false ) 
	#(271 2 #reduceActionFor______Variable__variable____2: 15559682 false ) 
	#(257 11 #reduceActionForForEach8: 13980680 false ) 
	#(259 11 #reduceActionForForStepNext1: 14377985 false ) 
	#(258 11 #reduceActionForForNext4: 14178308 false ) 
	#(263 11 #reduceActionForIfThenElse2: 14928898 false ) 
	#(263 11 #reduceActionForIfThenElse3: 14928899 false ) 
	#(268 6 #reduceActionForElseIfBlock2: 15396866 false ) 
	#(270 2 #reduceActionFor___Expression__ifMatch__________2: 15559682 false ) 
	#(263 11 #reduceActionForIfThenElse5: 14928901 false ) 
	#(264 11 #reduceActionForIfThenElseIfElse1: 15164417 false ) 
	#(263 11 #reduceActionForIfThenElse9: 14928905 false ) 
	#(259 12 #reduceActionForForStepNext2: 14377986 false ) 
	#(259 12 #reduceActionForForStepNext3: 14377987 false ) 
	#(263 12 #reduceActionForIfThenElse4: 14928900 false ) 
	#(263 12 #reduceActionForIfThenElse6: 14928902 false ) 
	#(263 12 #reduceActionForIfThenElse7: 14928903 false ) 
	#(264 12 #reduceActionForIfThenElseIfElse2: 15164418 false ) 
	#(263 12 #reduceActionForIfThenElse10: 14928906 false ) 
	#(263 12 #reduceActionForIfThenElse11: 14928907 false ) 
	#(263 12 #reduceActionForIfThenElse13: 14928909 false ) 
	#(264 12 #reduceActionForIfThenElseIfElse3: 15164419 false ) 
	#(259 13 #reduceActionForForStepNext4: 14377988 false ) 
	#(263 13 #reduceActionForIfThenElse8: 14928904 false ) 
	#(263 13 #reduceActionForIfThenElse12: 14928908 false ) 
	#(263 13 #reduceActionForIfThenElse14: 14928910 false ) 
	#(263 13 #reduceActionForIfThenElse15: 14928911 false ) 
	#(264 13 #reduceActionForIfThenElseIfElse4: 15164420 false ) 
	#(263 14 #reduceActionForIfThenElse16: 14928912 false )
	).
]

{ #category : #'generated-accessing' }
VBParser class >> scannerClass [
	^VBScanner
]

{ #category : #generated }
VBParser class >> startingStateFormodule [
	^ 1
]

{ #category : #generated }
VBParser class >> symbolNames [
	^ #('"!"' '"!="' '"&"' '"&&"' '"("' '")"' '"*"' '"+"' '","' '"-"' '"."' '"/"' '":"' '";"' '"<"' '"<="' '"<>"' '"="' '">"' '">="' '"AddressOf"' '"Call"' '"Mod"' '"NEW"' '"RaiseEvent"' '"WithEvents"' '"["' '"\"' '"^"' '"alias"' '"and"' '"as"' '"attribute"' '"begin"' '"binary"' '"boolean"' '"byref"' '"byte"' '"byval"' '"class"' '"collection"' '"compare"' '"const"' '"database"' '"date"' '"declare"' '"delete"' '"dim"' '"do"' '"double"' '"each"' '"else"' '"elseif"' '"end"' '"enum"' '"eqv"' '"error"' '"event"' '"exit"' '"explicit"' '"for"' '"friend"' '"function"' '"get"' '"global"' '"gosub"' '"goto"' '"if"' '"in"' '"integer"' '"is"' '"let"' '"lib"' '"like"' '"long"' '"loop"' '"module"' '"next"' '"not"' '"object"' '"on"' '"option"' '"optional"' '"or"' '"paramarray"' '"preserve"' '"private"' '"property"' '"public"' '"redim"' '"resume"' '"return"' '"set"' '"single"' '"static"' '"step"' '"string"' '"sub"' '"text"' '"then"' '"to"' '"type"' '"until"' '"variant"' '"version"' '"wend"' '"while"' '"with"' '"xor"' '"{"' '"||"' '"}"' '"~"' '<HEX_INTEGER>' '<DATE_LITERAL>' '<COLOR_LITERAL>' '<INTEGER_LITERAL>' '<FLOATING_POINT_LITERAL>' '<BOOLEAN_LITERAL>' '<STRING_LITERAL>' '<NULL_LITERAL>' '<IDENTIFIER>' '<HASH_IDENTIFIER>' '<whitespace>' '<eol>' '<comment>' 'B e g i n' 'module' '(<eol>* ModuleStatement ''element'' )' '(<eol>* ModuleStatement ''element'' )*' '<eol>*' 'literal' 'IntegerLiteral' 'ColorLiteral' 'DateLiteral' 'FloatLiteral' 'BooleanLiteral' 'StringLiteral' 'Null' 'GuidLiteral' '<HEX_INTEGER> +' '<HEX_INTEGER>+' 'Identifier' 'HashIdentifier' 'SimpleIdentifier' 'HeadlessIdentifier' 'QualifiedIdentifier' 'header' 'Option' 'SetUpAssignation' 'Attribute' 'Configuration' '( <eol>+ SetUpAssignation ''setting'')' '( <eol>+ SetUpAssignation ''setting'')*' '<eol>+' 'ModuleStatement' 'Statement' 'Block' '(<eol>* Statement ''statement''  )' '(<eol>* Statement ''statement''  )*' 'BaseType' 'Visibility' 'ComplexType' 'Type' 'TypedThing' '( "," literal ''size'')' '( "," literal ''size'')*' 'TypedAndInstantiatedThing' 'AsType' 'Types' 'DefineType' '( <eol>* TypeEntry ''field'' )' '( <eol>* TypeEntry ''field'' )*' 'TypeEntry' 'Event' 'DefineEnum' '( <eol>* EnumEntry ''field'')' '( <eol>* EnumEntry ''field'')*' 'EnumEntry' 'ParameterPassingStrategy' 'ParameterList' '( "," Parameter ''parameter'')' '( "," Parameter ''parameter'')*' 'Parameter' '("=" Expression ''default'')' '("=" Expression ''default'')?' 'DeclareSub' 'DeclareFunction' 'DeclareExternal' 'Modifier' 'DefineFunction' 'DefineSub' 'ModulePropertyGet' 'ModulePropertySet' 'ModulePropertyLet' 'BehaviourDefinition' 'ModuleProperty' 'ModuleConstant' 'DefineVariable' 'ReDefineVariable' 'StaticVariable' 'Variable' 'ModuleProperties' 'DefineVariables' 'ReDefineVariables' 'StaticVariables' 'VariableList' '(","  Variable ''variable'' )' '(","  Variable ''variable'' )*' 'VariableDefinition' 'ValueStatement' 'Expression' 'ParentheseesExpression' 'ValueStatementList' '("," ValueStatement ''value'' )' '("," ValueStatement ''value'' ) *' 'Operation' 'DictionaryAccess' 'MemberAccess' 'ImplicitParenthesesLessCall' 'ProcedureCallOrArrayAccess' 'Argument' 'ArgumentList' '(Argument ''argument'' ? ("," | ";" ))' '(Argument ''argument'' ? ("," | ";" ))*' '( ("," | ";" )Argument ''argument'' ?)' '( ("," | ";" )Argument ''argument'' ?)*' 'ImplicitCall' 'StateAccess' 'ExplicitCall' 'RaiseEvent' 'UnaryOperation' 'NegatedOperation' 'PositiveOperation' 'NotOperation' 'BinaryOperation' 'ComparisonOperator' 'ComparisonOperation' 'ArithmeticOperator' 'ArithmeticOperation' 'BooleanOperator' 'BooleanBinaryOperation' 'ConcatenationOperation' 'AssignementOrEquals' 'ExplicitAssignement' 'ValueClause' 'AddressOfClause' 'NewClause' 'ControlFlowStatement' 'Loops' 'DoLoop' 'InfinityLoop' 'WhileTrue' 'UntilTrue' 'WhileWend' 'ForLoop' 'ForEach' 'ForNext' 'ForStepNext' 'If' 'IfThenColon' 'IfThen' 'IfThenElse' 'IfThenElseIfElse' '(ElseIf ''case'')' '(ElseIf ''case'') +' 'ElseIf' 'ElseIfBlock' 'ElseIfColon' '(  Expression ''ifMatch'' ?  ":" )' '(  Expression ''ifMatch'' ?  ":" )*' 'To' 'Label' 'LabelSub' 'Resume' 'ResumeLabel' 'ResumeNext' 'ResumeEmpty' 'Go' 'GoTo' 'GoToLabel' 'GoToLine' 'GoSub' 'GoSubLabel' 'GoSubLine' 'On' 'OnErrorGoTo' 'OnErrorResumeNext' 'OnExpressionGo' 'Error' 'With' 'Exits' 'ExitFunction' 'ExitSub' 'ExitDo' 'ExitFor' 'ExitProperty' 'E O F' 'error')
]

{ #category : #generated }
VBParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBModuleNode #VBModuleNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBIntegerLiteralNode #VBColorLiteralNode #VBDateLiteralNode #VBFloatLiteralNode #VBBooleanLiteralNode #VBStringLiteralNode #VBNullNode #VBGuidLiteralNode #OrderedCollection #OrderedCollection #VBProgramNode #VBHashIdentifierNode #VBSimpleIdentifierNode #VBHeadlessIdentifierNode #VBQualifiedIdentifierNode #VBHeaderNode #VBProgramNode #VBSetUpAssignationNode #VBModuleAttributeNode #VBConfigurationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #Object #VBBlockNode #OrderedCollection #OrderedCollection #Object #SmaCCToken #VBComplexTypeNode #Object #VBAsTypeNode #OrderedCollection #OrderedCollection #VBAsTypeAndNewNode #VBProgramNode #VBProgramNode #VBDefineTypeNode #OrderedCollection #OrderedCollection #VBTypeEntryNode #VBEventNode #VBDefineEnumNode #OrderedCollection #OrderedCollection #VBEnumEntryNode #Object #VBParameterListNode #OrderedCollection #OrderedCollection #VBParameterNode #OrderedCollection #OrderedCollection #VBExternalSubNode #VBExternalFunctionNode #VBProgramNode #SmaCCToken #VBFunctionDefinitionNode #VBSubDefinitionNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBProgramNode #VBModulePropertyNode #VBModuleConstantNode #VBDimVariableNode #VBReDimVariableNode #VBStaticVariableNode #VBVariableNode #VBModuleMultiplePropertiesNode #VBDimMultipleVariablesNode #VBReDimMultipleVariablesNode #VBStaticMultipleVariablesNode #VBVariableListNode #OrderedCollection #OrderedCollection #VBProgramNode #Object #Object #VBParentheseesExpressionNode #VBValueStatementListNode #OrderedCollection #OrderedCollection #Object #VBDictionaryAccessNode #VBMemberAccessNode #VBImplicitParenthesesLessCallNode #VBProcedureCallOrArrayAccessNode #VBArgumentNode #VBArgumentListNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBProgramNode #VBExplicitCallNode #VBRaiseEventNode #VBProgramNode #VBNegatedOperationNode #VBPositiveOperationNode #VBNotOperationNode #Object #OrderedCollection #VBComparisonOperationNode #OrderedCollection #VBArithmeticOperationNode #OrderedCollection #VBArithmeticOperationNode #VBConcatenationOperationNode #VBAssignementOrEqualsNode #Object #VBProgramNode #VBAddressOfClauseNode #VBNewClauseNode #Object #VBProgramNode #VBProgramNode #VBInfinityLoopNode #VBWhileTrueNode #VBUntilTrueNode #VBWhileWendNode #VBProgramNode #VBForEachNode #VBForNextNode #VBForStepNextNode #VBProgramNode #VBIfThenColonNode #VBIfThenNode #VBIfThenElseNode #VBIfThenElseIfElseNode #VBProgramNode #OrderedCollection #VBProgramNode #VBElseIfBlockNode #VBElseIfColonNode #OrderedCollection #OrderedCollection #VBProgramNode #VBGoToLabelNode #VBGoSubLabelNode #Object #VBResumeLabelNode #VBResumeNextNode #SmaCCToken #VBProgramNode #VBProgramNode #VBGoToLabelNode #VBGoToLineNode #VBProgramNode #VBGoSubLabelNode #VBGoSubLineNode #VBProgramNode #VBOnErrorGoToNode #VBOnErrorResumeNextNode #VBOnExpressionGoNode #VBErrorNode #VBWithNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBParser class >> transitionTable [
^#(
#[1 0 9 0 33 0 13 0 34 0 17 0 46 0 21 0 48 0 25 0 55 0 29 0 58 0 105 0 62 0 37 0 63 0 105 0 65 0 45 0 82 0 105 0 87 0 53 0 88 0 105 0 89 0 61 0 90 0 65 0 95 0 69 0 98 0 73 0 102 0 77 0 105 0 81 0 128 0 85 0 148 0 101 0 149 0 101 0 151 0 101 0 152 0 101 0 156 0 105 0 162 0 101 0 170 0 101 0 171 0 101 0 175 0 101 0 176 0 101 0 187 0 101 0 188 0 101 0 189 0 137 0 190 0 101 0 191 0 101 0 192 0 101 0 193 0 101 0 194 0 101 0 195 0 101 0 196 0 101 0 197 0 101 0 198 0 101 0 199 0 101 0 200 0 101 0 201 0 101 0 203 0 101 0 204 0 101 0 205 0 101 0 206 0 101 0 210] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 0 217 0 143 0 217 0 144 0 217 0 145 0 217 0 146 0 217 0 147 0 237 0 150] 
#[1 0 6 0 11 0 6 0 122 0 6 0 123 0 6 0 125 0 241 0 131] 
#[1 0 245 0 63 0 249 0 98] 
#[1 0 205 0 11 0 253 0 26 0 209 0 122 0 213 0 123 1 1 0 143 1 1 0 144 1 1 0 145 1 1 0 146 1 1 0 147 1 5 0 202 1 9 0 207] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 13 0 143 1 13 0 144 1 13 0 145 1 13 0 146 1 13 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147] 
#[0 0 10 0 11 0 26 0 43 0 46 0 55 0 58 0 63 0 88 0 95 0 98 0 102 0 122 0 123] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 21 0 143 1 21 0 144 1 21 0 145 1 21 0 146 1 21 0 147] 
#[0 0 14 0 11 0 26 0 43 0 46 0 55 0 58 0 63 0 88 0 95 0 98 0 102 0 122 0 123] 
#[1 1 25 0 42 1 29 0 60 1 33 0 87 1 37 0 117 1 41 0 133] 
#[0 0 18 0 11 0 26 0 43 0 46 0 55 0 58 0 63 0 88 0 95 0 98 0 102 0 122 0 123] 
#[1 1 45 0 64 1 49 0 72 1 53 0 93] 
#[0 0 22 0 11 0 26 0 43 0 46 0 55 0 58 0 63 0 88 0 95 0 98 0 102 0 122 0 123] 
#[1 0 205 0 11 0 253 0 26 1 57 0 86 0 209 0 122 0 213 0 123 1 1 0 143 1 1 0 144 1 1 0 145 1 1 0 146 1 1 0 147 1 61 0 202 1 65 0 207] 
#[1 0 205 0 11 0 253 0 26 0 26 0 63 0 26 0 88 0 26 0 98 0 209 0 122 0 213 0 123 1 1 0 143 1 1 0 144 1 1 0 145 1 1 0 146 1 1 0 147 1 69 0 202 1 73 0 207] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 77 0 143 1 77 0 144 1 77 0 145 1 77 0 146 1 77 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 81 0 143 1 81 0 144 1 81 0 145 1 81 0 146 1 81 0 147] 
#[1 1 85 0 118 1 89 0 136] 
#[0 0 0 1 42] 
#[1 0 6 0 33 0 6 0 34 0 6 0 46 0 6 0 48 0 6 0 55 0 6 0 58 0 6 0 62 0 6 0 63 0 6 0 65 0 6 0 82 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 95 0 6 0 98 0 6 0 102 0 6 0 125 1 93 0 131] 
#[0 0 30 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 0 34 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 0 38 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 0 42 0 33 0 42 0 34 0 42 0 46 0 42 0 48 0 42 0 55 0 42 0 58 0 42 0 62 0 42 0 63 0 42 0 65 0 42 0 82 0 42 0 87 0 42 0 88 0 42 0 89 0 42 0 90 0 42 0 95 0 42 0 98 0 42 0 102 0 42 0 125 1 97 0 130 0 42 1 42] 
#[1 0 205 0 11 0 253 0 26 1 101 0 43 1 105 0 46 1 109 0 55 1 113 0 58 1 117 0 63 1 121 0 88 1 137 0 95 1 129 0 98 1 133 0 102 0 209 0 122 0 213 0 123 1 1 0 143 1 1 0 144 1 1 0 145 1 1 0 146 1 1 0 147 1 137 0 190 1 141 0 202 1 145 0 207] 
#[0 0 46 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 0 50 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 54 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 58 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 62 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 0 66 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 0 70 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 1 149 0 63 1 153 0 88 1 157 0 98] 
#[0 0 74 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 0 78 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 0 82 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 0 86 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 0 90 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 0 94 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 0 98 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 102 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 106 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 110 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 114 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 118 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 122 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 126 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 130 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 134 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 161 0 143 1 161 0 144 1 161 0 145 1 161 0 146 1 161 0 147] 
#[0 0 138 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 32 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 142 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 32 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 1 165 0 11 1 169 0 18] 
#[0 0 146 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 32 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 150 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 32 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 154 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 32 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 158 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 32 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 162 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 173 0 125 0 217 0 143 0 217 0 144 0 217 0 145 0 217 0 146 0 217 0 147 1 177 0 150] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 181 0 143 1 181 0 144 1 181 0 145 1 181 0 146 1 181 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 185 0 143 1 185 0 144 1 185 0 145 1 185 0 146 1 185 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 189 0 143 1 189 0 144 1 189 0 145 1 189 0 146 1 189 0 147] 
#[1 1 165 0 11 1 193 0 32 1 205 0 165 1 205 0 168 1 205 0 169] 
#[1 0 7 0 5 0 7 0 8 0 170 0 9 0 7 0 10 0 7 0 11 0 7 0 21 0 7 0 22 0 7 0 24 0 7 0 25 0 7 0 33 0 7 0 34 0 7 0 46 0 7 0 48 0 7 0 49 0 7 0 52 0 7 0 53 0 7 0 54 0 7 0 55 0 7 0 58 0 7 0 59 0 7 0 61 0 7 0 62 0 7 0 63 0 7 0 65 0 7 0 66 0 7 0 67 0 7 0 68 0 7 0 72 0 7 0 76 0 7 0 78 0 7 0 79 0 7 0 81 0 7 0 82 0 7 0 87 0 7 0 88 0 7 0 89 0 7 0 90 0 7 0 91 0 7 0 92 0 7 0 93 0 7 0 95 0 7 0 98 0 7 0 102 0 7 0 106 0 7 0 107 0 7 0 108 0 7 0 110 0 7 0 115 0 7 0 116 0 7 0 117 0 7 0 118 0 7 0 119 0 7 0 120 0 7 0 121 0 7 0 122 0 7 0 123 0 7 0 125 1 209 0 209 0 7 1 42] 
#[0 0 174 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 1 165 0 11 0 178 0 54 0 178 0 122 0 178 0 123 0 178 0 125 1 213 0 178] 
#[1 1 217 0 5 1 165 0 11 1 221 0 181] 
#[1 1 217 0 5 1 165 0 11 1 225 0 181] 
#[1 1 229 0 35 1 233 0 44 1 237 0 99] 
#[0 0 182 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 1 241 0 77] 
#[0 0 186 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 190 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 245 0 143 1 245 0 144 1 245 0 145 1 245 0 146 1 245 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 249 0 143 1 249 0 144 1 249 0 145 1 249 0 146 1 249 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 1 253 0 143 1 253 0 144 1 253 0 145 1 253 0 146 1 253 0 147] 
#[1 0 205 0 11 0 253 0 26 0 209 0 122 0 213 0 123 1 1 0 143 1 1 0 144 1 1 0 145 1 1 0 146 1 1 0 147 2 1 0 202 2 5 0 207] 
#[1 0 11 0 5 0 11 0 8 0 170 0 9 0 11 0 10 0 11 0 11 0 11 0 21 0 11 0 22 0 11 0 24 0 11 0 25 0 11 0 33 0 11 0 34 0 11 0 46 0 11 0 48 0 11 0 49 0 11 0 52 0 11 0 53 0 11 0 54 0 11 0 55 0 11 0 58 0 11 0 59 0 11 0 61 0 11 0 62 0 11 0 63 0 11 0 65 0 11 0 66 0 11 0 67 0 11 0 68 0 11 0 72 0 11 0 76 0 11 0 78 0 11 0 79 0 11 0 81 0 11 0 82 0 11 0 87 0 11 0 88 0 11 0 89 0 11 0 90 0 11 0 91 0 11 0 92 0 11 0 93 0 11 0 95 0 11 0 98 0 11 0 102 0 11 0 106 0 11 0 107 0 11 0 108 0 11 0 110 0 11 0 115 0 11 0 116 0 11 0 117 0 11 0 118 0 11 0 119 0 11 0 120 0 11 0 121 0 11 0 122 0 11 0 123 0 11 0 125 1 209 0 209 0 11 1 42] 
#[0 0 198 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 15 0 5 0 15 0 8 0 170 0 9 0 15 0 10 0 15 0 11 0 15 0 21 0 15 0 22 0 15 0 24 0 15 0 25 0 15 0 33 0 15 0 34 0 15 0 46 0 15 0 48 0 15 0 49 0 15 0 52 0 15 0 53 0 15 0 54 0 15 0 55 0 15 0 58 0 15 0 59 0 15 0 61 0 15 0 62 0 15 0 63 0 15 0 65 0 15 0 66 0 15 0 67 0 15 0 68 0 15 0 72 0 15 0 76 0 15 0 78 0 15 0 79 0 15 0 81 0 15 0 82 0 15 0 87 0 15 0 88 0 15 0 89 0 15 0 90 0 15 0 91 0 15 0 92 0 15 0 93 0 15 0 95 0 15 0 98 0 15 0 102 0 15 0 106 0 15 0 107 0 15 0 108 0 15 0 110 0 15 0 115 0 15 0 116 0 15 0 117 0 15 0 118 0 15 0 119 0 15 0 120 0 15 0 121 0 15 0 122 0 15 0 123 0 15 0 125 1 209 0 209 0 15 1 42] 
#[0 0 206 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 1 217 0 5 1 165 0 11 2 9 0 181] 
#[1 1 165 0 11 0 210 0 54 0 210 0 122 0 210 0 123 0 210 0 125 2 13 0 173] 
#[0 0 214 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 40 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 218 0 33 0 218 0 34 2 17 0 40 0 218 0 46 0 218 0 48 0 218 0 55 0 218 0 58 0 218 0 62 0 218 0 63 0 218 0 65 0 218 0 82 0 218 0 87 0 218 0 88 0 218 0 89 0 218 0 90 0 218 0 95 0 218 0 98 0 218 0 102 0 218 0 125] 
#[1 0 9 0 33 0 13 0 34 0 17 0 46 0 21 0 48 0 25 0 55 0 29 0 58 0 105 0 62 0 37 0 63 0 105 0 65 0 45 0 82 0 105 0 87 0 53 0 88 0 105 0 89 0 61 0 90 0 65 0 95 0 69 0 98 0 73 0 102 1 173 0 125 2 21 0 149 2 21 0 151 2 21 0 152 2 21 0 156 0 105 0 162 2 21 0 170 2 21 0 171 2 21 0 175 2 21 0 176 2 21 0 187 2 21 0 188 2 21 0 189 0 137 0 190 2 21 0 191 2 21 0 192 2 21 0 193 2 21 0 194 2 21 0 195 2 21 0 196 2 21 0 197 2 21 0 198 2 21 0 199 2 21 0 200 2 21 0 201 2 21 0 203 2 21 0 204 2 21 0 205 2 21 0 206 2 21 0 210] 
#[1 0 6 0 33 0 6 0 34 0 6 0 46 0 6 0 48 0 6 0 55 0 6 0 58 0 6 0 62 0 6 0 63 0 6 0 65 0 6 0 82 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 95 0 6 0 98 0 6 0 102 0 6 0 125 2 25 0 129 2 29 0 131 0 6 1 42] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 2 33 0 143 2 33 0 144 2 33 0 145 2 33 0 146 2 33 0 147] 
#[1 2 37 0 63 2 41 0 98] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 2 45 0 143 2 45 0 144 2 45 0 145 2 45 0 146 2 45 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 2 49 0 143 2 49 0 144 2 49 0 145 2 49 0 146 2 49 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 2 53 0 143 2 53 0 144 2 53 0 145 2 53 0 146 2 53 0 147] 
#[1 2 57 0 64 2 61 0 72 2 65 0 93] 
#[0 0 26 0 63 0 88 0 98] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 2 69 0 143 2 69 0 144 2 69 0 145 2 69 0 146 2 69 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 2 73 0 143 2 73 0 144 2 73 0 145 2 73 0 146 2 73 0 147] 
#[1 2 77 0 63 2 81 0 88 2 85 0 98] 
#[1 0 19 0 5 0 19 0 8 0 170 0 9 0 19 0 10 0 19 0 11 0 19 0 21 0 19 0 22 0 19 0 24 0 19 0 25 0 19 0 33 0 19 0 34 0 19 0 46 0 19 0 48 0 19 0 49 0 19 0 52 0 19 0 53 0 19 0 54 0 19 0 55 0 19 0 58 0 19 0 59 0 19 0 61 0 19 0 62 0 19 0 63 0 19 0 65 0 19 0 66 0 19 0 67 0 19 0 68 0 19 0 72 0 19 0 76 0 19 0 78 0 19 0 79 0 19 0 81 0 19 0 82 0 19 0 87 0 19 0 88 0 19 0 89 0 19 0 90 0 19 0 91 0 19 0 92 0 19 0 93 0 19 0 95 0 19 0 98 0 19 0 102 0 19 0 106 0 19 0 107 0 19 0 108 0 19 0 110 0 19 0 115 0 19 0 116 0 19 0 117 0 19 0 118 0 19 0 119 0 19 0 120 0 19 0 121 0 19 0 122 0 19 0 123 0 19 0 125 1 209 0 209 0 19 1 42] 
#[0 0 226 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 2 89 0 143 2 89 0 144 2 89 0 145 2 89 0 146 2 89 0 147] 
#[1 2 93 0 64 2 97 0 72 2 101 0 93] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 2 105 0 143 2 105 0 144 2 105 0 145 2 105 0 146 2 105 0 147] 
#[0 0 230 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 32 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 109 0 122] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 2 225 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 2 225 0 132 2 225 0 133 2 225 0 134 2 225 0 135 2 225 0 136 2 225 0 137 2 225 0 138 2 225 0 139 2 225 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 2 225 0 211 2 225 0 212 2 225 0 213 2 225 0 217 2 225 0 218 2 225 0 219 2 225 0 220 2 225 0 221 2 225 0 228 2 225 0 229 2 225 0 230 2 225 0 231 2 225 0 232 2 225 0 233 2 225 0 234 2 225 0 235 2 225 0 236 2 225 0 238 2 225 0 240 2 225 0 242 2 225 0 243 2 225 0 244 2 225 0 245 2 225 0 246 2 225 0 247 2 225 0 248 2 225 1 36 2 225 1 37 2 225 1 38 2 225 1 39 2 225 1 40 2 225 1 41] 
#[0 0 234 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 238 0 54 0 238 0 125 3 93 0 154] 
#[1 1 165 0 11 3 97 0 73] 
#[1 1 165 0 11 3 101 0 73] 
#[1 1 165 0 11 1 193 0 32 3 105 0 165 3 105 0 168 3 105 0 169] 
#[1 0 205 0 11 3 109 0 24 3 169 0 36 3 169 0 38 3 169 0 41 3 169 0 45 3 169 0 50 3 169 0 70 3 169 0 75 3 169 0 80 3 169 0 94 3 169 0 97 3 153 0 104 0 209 0 122 0 213 0 123 3 157 0 143 3 157 0 144 3 157 0 145 3 157 0 146 3 157 0 147 3 169 0 161 3 169 0 163 3 169 0 164] 
#[0 0 242 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 246 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 0 250 0 5 0 8 0 9 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 254 0 5 0 254 0 8 3 173 0 9 0 254 0 10 0 254 0 11 0 254 0 21 0 254 0 22 0 254 0 24 0 254 0 25 0 254 0 33 0 254 0 34 0 254 0 46 0 254 0 48 0 254 0 49 0 254 0 52 0 254 0 53 0 254 0 54 0 254 0 55 0 254 0 58 0 254 0 59 0 254 0 61 0 254 0 62 0 254 0 63 0 254 0 65 0 254 0 66 0 254 0 67 0 254 0 68 0 254 0 72 0 254 0 76 0 254 0 78 0 254 0 79 0 254 0 81 0 254 0 82 0 254 0 87 0 254 0 88 0 254 0 89 0 254 0 90 0 254 0 91 0 254 0 92 0 254 0 93 0 254 0 95 0 254 0 98 0 254 0 102 0 254 0 106 0 254 0 107 0 254 0 108 0 254 0 110 0 254 0 115 0 254 0 116 0 254 0 117 0 254 0 118 0 254 0 119 0 254 0 120 0 254 0 121 0 254 0 122 0 254 0 123 0 254 0 125 3 177 0 208 0 254 1 42] 
#[1 0 6 0 11 0 6 0 54 0 6 0 122 0 6 0 123 0 6 0 125 3 181 0 131 3 185 0 177] 
#[1 3 189 0 6 0 205 0 11 3 193 0 37 3 213 0 39 3 201 0 83 3 205 0 85 0 209 0 122 0 213 0 123 3 209 0 143 3 209 0 144 3 209 0 145 3 209 0 146 3 209 0 147 3 213 0 180 3 217 0 184] 
#[0 1 2 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 1 193 0 32 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 3 221 0 131 3 225 0 165 3 225 0 168 3 225 0 169] 
#[0 1 6 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 1 10 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 1 14 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 1 18 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 1 217 0 5 1 165 0 11 3 229 0 181] 
#[1 1 217 0 5 1 165 0 11 3 233 0 181] 
#[1 1 217 0 5 1 165 0 11 3 237 0 181] 
#[1 0 23 0 5 0 23 0 8 0 170 0 9 0 23 0 10 0 23 0 11 0 23 0 21 0 23 0 22 0 23 0 24 0 23 0 25 0 23 0 33 0 23 0 34 0 23 0 46 0 23 0 48 0 23 0 49 0 23 0 52 0 23 0 53 0 23 0 54 0 23 0 55 0 23 0 58 0 23 0 59 0 23 0 61 0 23 0 62 0 23 0 63 0 23 0 65 0 23 0 66 0 23 0 67 0 23 0 68 0 23 0 72 0 23 0 76 0 23 0 78 0 23 0 79 0 23 0 81 0 23 0 82 0 23 0 87 0 23 0 88 0 23 0 89 0 23 0 90 0 23 0 91 0 23 0 92 0 23 0 93 0 23 0 95 0 23 0 98 0 23 0 102 0 23 0 106 0 23 0 107 0 23 0 108 0 23 0 110 0 23 0 115 0 23 0 116 0 23 0 117 0 23 0 118 0 23 0 119 0 23 0 120 0 23 0 121 0 23 0 122 0 23 0 123 0 23 0 125 1 209 0 209 0 23 1 42] 
#[0 1 26 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 3 241 0 131] 
#[1 0 6 0 11 0 6 0 54 0 6 0 122 0 6 0 123 0 6 0 125 3 245 0 131 3 249 0 172] 
#[0 1 30 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125] 
#[1 0 42 0 33 0 42 0 34 0 42 0 46 0 42 0 48 0 42 0 55 0 42 0 58 0 42 0 62 0 42 0 63 0 42 0 65 0 42 0 82 0 42 0 87 0 42 0 88 0 42 0 89 0 42 0 90 0 42 0 95 0 42 0 98 0 42 0 102 0 42 0 125 3 253 0 130 0 42 1 42] 
#[0 1 34 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 0 9 0 33 0 13 0 34 0 17 0 46 0 21 0 48 0 25 0 55 0 29 0 58 0 105 0 62 0 37 0 63 0 105 0 65 0 45 0 82 0 105 0 87 0 53 0 88 0 105 0 89 0 61 0 90 0 65 0 95 0 69 0 98 0 73 0 102 1 173 0 125 4 1 0 149 4 1 0 151 4 1 0 152 4 1 0 156 0 105 0 162 4 1 0 170 4 1 0 171 4 1 0 175 4 1 0 176 4 1 0 187 4 1 0 188 4 1 0 189 0 137 0 190 4 1 0 191 4 1 0 192 4 1 0 193 4 1 0 194 4 1 0 195 4 1 0 196 4 1 0 197 4 1 0 198 4 1 0 199 4 1 0 200 4 1 0 201 4 1 0 203 4 1 0 204 4 1 0 205 4 1 0 206 4 1 0 210 1 38 1 42] 
#[1 1 165 0 11 4 5 0 18 1 193 0 32 4 9 0 165 4 9 0 168 4 9 0 169] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 13 0 143 4 13 0 144 4 13 0 145 4 13 0 146 4 13 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 17 0 143 4 17 0 144 4 17 0 145 4 17 0 146 4 17 0 147] 
#[1 1 165 0 11 0 178 0 54 0 178 0 122 0 178 0 123 0 178 0 125 4 21 0 178] 
#[1 1 217 0 5 1 165 0 11 4 25 0 181] 
#[1 1 217 0 5 1 165 0 11 4 29 0 181] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 33 0 143 4 33 0 144 4 33 0 145 4 33 0 146 4 33 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 37 0 143 4 37 0 144 4 37 0 145 4 37 0 146 4 37 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 41 0 143 4 41 0 144 4 41 0 145 4 41 0 146 4 41 0 147] 
#[1 1 217 0 5 1 165 0 11 4 45 0 181] 
#[1 1 165 0 11 0 210 0 54 0 210 0 122 0 210 0 123 0 210 0 125 4 49 0 173] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 53 0 143 4 53 0 144 4 53 0 145 4 53 0 146 4 53 0 147] 
#[1 4 57 0 64 4 61 0 72 4 65 0 93] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 69 0 143 4 69 0 144 4 69 0 145 4 69 0 146 4 69 0 147] 
#[1 1 217 0 5 1 165 0 11 4 73 0 181] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 77 0 143 4 77 0 144 4 77 0 145 4 77 0 146 4 77 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 81 0 143 4 81 0 144 4 81 0 145 4 81 0 146 4 81 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 85 0 143 4 85 0 144 4 85 0 145 4 85 0 146 4 85 0 147] 
#[1 1 217 0 5 1 165 0 11 4 89 0 181] 
#[0 1 42 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 32 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 4 93 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 4 93 0 132 4 93 0 133 4 93 0 134 4 93 0 135 4 93 0 136 4 93 0 137 4 93 0 138 4 93 0 139 4 93 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 4 93 0 211 4 93 0 212 4 93 0 213 4 93 0 217 4 93 0 218 4 93 0 219 4 93 0 220 4 93 0 221 4 93 0 228 4 93 0 229 4 93 0 230 4 93 0 231 4 93 0 232 4 93 0 233 4 93 0 234 4 93 0 235 4 93 0 236 4 93 0 238 4 93 0 240 4 93 0 242 4 93 0 243 4 93 0 244 4 93 0 245 4 93 0 246 4 93 0 247 4 93 0 248 4 93 1 36 4 93 1 37 4 93 1 38 4 93 1 39 4 93 1 40 4 93 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 4 97 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 4 97 0 132 4 97 0 133 4 97 0 134 4 97 0 135 4 97 0 136 4 97 0 137 4 97 0 138 4 97 0 139 4 97 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 4 97 0 211 4 97 0 212 4 97 0 213 4 97 0 217 4 97 0 218 4 97 0 219 4 97 0 220 4 97 0 221 4 97 0 228 4 97 0 229 4 97 0 230 4 97 0 231 4 97 0 232 4 97 0 233 4 97 0 234 4 97 0 235 4 97 0 236 4 97 0 238 4 97 0 240 4 97 0 242 4 97 0 243 4 97 0 244 4 97 0 245 4 97 0 246 4 97 0 247 4 97 0 248 4 97 1 36 4 97 1 37 4 97 1 38 4 97 1 39 4 97 1 40 4 97 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 4 101 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 4 101 0 132 4 101 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 4 101 0 211 4 101 0 212 4 101 0 213 4 101 0 217 4 101 0 218 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 228 4 101 0 229 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 243 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 1 36 4 101 1 37 4 101 1 38 4 101 1 39 4 101 1 40 4 101 1 41] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 105 0 143 4 105 0 144 4 105 0 145 4 105 0 146 4 105 0 147] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 4 109 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 4 109 0 132 4 109 0 133 4 109 0 134 4 109 0 135 4 109 0 136 4 109 0 137 4 109 0 138 4 109 0 139 4 109 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 4 109 0 211 4 109 0 212 4 109 0 213 4 109 0 217 4 109 0 218 4 109 0 219 4 113 0 220 4 113 0 221 4 113 0 228 4 109 0 229 4 109 0 230 4 109 0 231 4 109 0 232 4 109 0 233 4 109 0 234 4 109 0 235 4 109 0 236 4 109 0 238 4 109 0 240 4 109 0 242 4 109 0 243 4 109 0 244 4 109 0 245 4 109 0 246 4 109 0 247 4 109 0 248 4 109 1 36 4 109 1 37 4 109 1 38 4 109 1 39 4 109 1 40 4 109 1 41] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 4 117 0 143 4 117 0 144 4 117 0 145 4 117 0 146 4 117 0 147] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 4 109 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 4 109 0 132 4 109 0 133 4 109 0 134 4 109 0 135 4 109 0 136 4 109 0 137 4 109 0 138 4 109 0 139 4 109 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 4 109 0 211 4 109 0 212 4 109 0 213 4 109 0 217 4 109 0 218 4 109 0 219 4 121 0 220 4 121 0 221 4 121 0 228 4 109 0 229 4 109 0 230 4 109 0 231 4 109 0 232 4 109 0 233 4 109 0 234 4 109 0 235 4 109 0 236 4 109 0 238 4 109 0 240 4 109 0 242 4 109 0 243 4 109 0 244 4 109 0 245 4 109 0 246 4 109 0 247 4 109 0 248 4 109 1 36 4 109 1 37 4 109 1 38 4 109 1 39 4 109 1 40 4 109 1 41] 
#[1 4 125 0 49 4 129 0 61 4 133 0 63 4 137 0 88 4 141 0 98] 
#[0 1 46 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 4 145 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 4 145 0 132 4 145 0 133 4 145 0 134 4 145 0 135 4 145 0 136 4 145 0 137 4 145 0 138 4 145 0 139 4 145 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 4 145 0 211 4 145 0 212 4 145 0 213 4 145 0 217 4 145 0 218 4 145 0 219 4 145 0 220 4 145 0 221 4 145 0 228 4 145 0 229 4 145 0 230 4 145 0 231 4 145 0 232 4 145 0 233 4 145 0 234 4 145 0 235 4 145 0 236 4 145 0 238 4 145 0 240 4 145 0 242 4 145 0 243 4 145 0 244 4 145 0 245 4 145 0 246 4 145 0 247 4 145 0 248 4 145 1 36 4 145 1 37 4 145 1 38 4 145 1 39 4 145 1 40 4 145 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 4 149 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 4 149 0 132 4 149 0 133 4 149 0 134 4 149 0 135 4 149 0 136 4 149 0 137 4 149 0 138 4 149 0 139 4 149 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 4 149 0 211 4 149 0 212 4 149 0 213 4 149 0 217 4 149 0 218 4 149 0 219 4 149 0 220 4 149 0 221 4 149 0 228 4 149 0 229 4 149 0 230 4 149 0 231 4 149 0 232 4 149 0 233 4 149 0 234 4 149 0 235 4 149 0 236 4 149 0 238 4 149 0 240 4 149 0 242 4 149 0 243 4 149 0 244 4 149 0 245 4 149 0 246 4 149 0 247 4 149 0 248 4 149 1 36 4 149 1 37 4 149 1 38 4 149 1 39 4 149 1 40 4 149 1 41] 
#[1 4 153 0 114 4 157 0 141] 
#[0 1 50 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 54 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 58 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 62 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 30 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 66 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 70 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 74 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 78 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 82 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 86 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 90 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 94 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 98 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 102 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 27 0 1 0 27 0 3 0 27 0 5 0 27 0 6 0 27 0 7 0 27 0 8 0 27 0 9 0 27 0 10 0 31 0 11 0 27 0 12 0 27 0 13 0 27 0 14 0 27 0 15 0 27 0 16 0 27 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 27 0 21 0 27 0 22 0 27 0 23 0 27 0 24 0 27 0 25 0 27 0 28 0 27 0 29 0 27 0 31 0 27 0 33 0 27 0 34 1 106 0 37 1 106 0 39 0 27 0 46 0 27 0 48 0 27 0 49 0 27 0 52 0 27 0 53 0 27 0 54 0 27 0 55 0 27 0 56 0 27 0 58 0 27 0 59 0 27 0 61 0 27 0 62 0 27 0 63 0 27 0 65 0 27 0 66 0 27 0 67 0 27 0 68 0 27 0 71 0 27 0 72 0 27 0 74 0 27 0 76 0 27 0 78 0 27 0 79 0 27 0 81 0 27 0 82 0 27 0 84 1 106 0 85 0 27 0 87 0 27 0 88 0 27 0 89 0 27 0 90 0 27 0 91 0 27 0 92 0 27 0 93 0 27 0 95 0 27 0 96 0 27 0 98 0 27 0 100 0 27 0 101 0 27 0 102 0 27 0 106 0 27 0 107 0 27 0 108 0 27 0 109 0 27 0 110 0 27 0 115 0 27 0 116 0 27 0 117 0 27 0 118 0 27 0 119 0 27 0 120 0 27 0 121 0 27 0 122 0 27 0 123 0 27 0 125 4 161 0 223 4 165 0 225 0 27 1 42] 
#[0 1 118 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 1 122 0 21 1 122 0 22 4 225 0 23 1 122 0 24 1 122 0 25 4 229 0 28 4 233 0 29 4 237 0 31 1 122 0 33 1 122 0 34 1 122 0 46 1 122 0 48 1 122 0 49 1 122 0 52 1 122 0 53 1 122 0 54 1 122 0 55 4 241 0 56 1 122 0 58 1 122 0 59 1 122 0 61 1 122 0 62 1 122 0 63 1 122 0 65 1 122 0 66 1 122 0 67 1 122 0 68 4 245 0 71 1 122 0 72 4 249 0 74 1 122 0 76 1 122 0 78 1 122 0 79 1 122 0 81 1 122 0 82 4 253 0 84 1 122 0 87 1 122 0 88 1 122 0 89 1 122 0 90 1 122 0 91 1 122 0 92 1 122 0 93 1 122 0 95 1 122 0 98 1 122 0 102 1 122 0 106 1 122 0 107 1 122 0 108 5 1 0 109 1 122 0 110 1 122 0 115 1 122 0 116 1 122 0 117 1 122 0 118 1 122 0 119 1 122 0 120 1 122 0 121 1 122 0 122 1 122 0 123 1 122 0 125 5 5 0 237 5 9 0 239 5 13 0 241 1 122 1 42] 
#[0 1 126 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 130 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 134 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 138 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 142 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 146 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 150 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 154 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 158 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 162 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 166 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 170 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 174 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 178 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 182 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 186 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 190 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 194 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 198 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 202 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 206 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 210 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 214 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 218 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 222 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 226 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 230 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 234 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 238 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 242 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 5 17 0 54 5 21 0 125 5 25 0 153 5 29 0 155] 
#[1 2 173 0 120 5 33 0 138] 
#[1 2 173 0 120 5 37 0 138] 
#[0 1 246 0 5 0 8 0 9 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 205 0 11 5 41 0 36 5 41 0 38 5 41 0 41 5 41 0 45 5 41 0 50 5 41 0 70 5 41 0 75 5 41 0 80 5 41 0 94 5 41 0 97 3 153 0 104 0 209 0 122 0 213 0 123 3 157 0 143 3 157 0 144 3 157 0 145 3 157 0 146 3 157 0 147 5 41 0 161 5 41 0 163 5 41 0 164] 
#[0 1 250 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 1 254 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 2 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 6 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 10 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 14 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 18 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 22 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 26 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 30 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 34 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 2 38 0 5 2 38 0 6 2 38 0 7 2 38 0 8 2 38 0 9 2 38 0 10 1 165 0 11 2 38 0 18 2 38 0 21 2 38 0 22 2 38 0 24 2 38 0 25 2 38 0 33 2 38 0 34 2 38 0 46 2 38 0 48 2 38 0 49 2 38 0 52 2 38 0 53 2 38 0 54 2 38 0 55 2 38 0 58 2 38 0 59 2 38 0 61 2 38 0 62 2 38 0 63 2 38 0 65 2 38 0 66 2 38 0 67 2 38 0 68 2 38 0 72 2 38 0 76 2 38 0 78 2 38 0 79 2 38 0 81 2 38 0 82 2 38 0 87 2 38 0 88 2 38 0 89 2 38 0 90 2 38 0 91 2 38 0 92 2 38 0 93 2 38 0 95 2 38 0 98 2 38 0 102 2 38 0 106 2 38 0 107 2 38 0 108 2 38 0 110 2 38 0 115 2 38 0 116 2 38 0 117 2 38 0 118 2 38 0 119 2 38 0 120 2 38 0 121 2 38 0 122 2 38 0 123 2 38 0 125 2 38 1 42] 
#[0 2 42 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 46 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 5 45 0 5 2 50 0 6 2 50 0 7 2 50 0 8 2 50 0 9 2 50 0 10 2 50 0 11 2 50 0 18 2 50 0 21 2 50 0 22 2 50 0 24 2 50 0 25 2 50 0 33 2 50 0 34 2 50 0 46 2 50 0 48 2 50 0 49 2 50 0 52 2 50 0 53 2 50 0 54 2 50 0 55 2 50 0 58 2 50 0 59 2 50 0 61 2 50 0 62 2 50 0 63 2 50 0 65 2 50 0 66 2 50 0 67 2 50 0 68 2 50 0 72 2 50 0 76 2 50 0 78 2 50 0 79 2 50 0 81 2 50 0 82 2 50 0 87 2 50 0 88 2 50 0 89 2 50 0 90 2 50 0 91 2 50 0 92 2 50 0 93 2 50 0 95 2 50 0 98 2 50 0 102 2 50 0 106 2 50 0 107 2 50 0 108 2 50 0 110 2 50 0 115 2 50 0 116 2 50 0 117 2 50 0 118 2 50 0 119 2 50 0 120 2 50 0 121 2 50 0 122 2 50 0 123 2 50 0 125 2 50 1 42] 
#[1 0 205 0 11 0 253 0 26 0 209 0 122 0 213 0 123 1 1 0 143 1 1 0 144 1 1 0 145 1 1 0 146 1 1 0 147 5 49 0 202] 
#[0 2 54 0 5 0 8 0 9 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 205 0 11 5 53 0 54 0 209 0 122 0 213 0 123 1 173 0 125 5 57 0 143 5 57 0 144 5 57 0 145 5 57 0 146 5 57 0 147 5 61 0 179] 
#[0 2 58 0 11 0 54 0 122 0 123 0 125] 
#[0 2 62 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 32 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 66 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 85 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 70 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 85 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[1 0 205 0 11 3 193 0 37 5 73 0 39 5 65 0 85 0 209 0 122 0 213 0 123 5 69 0 143 5 69 0 144 5 69 0 145 5 69 0 146 5 69 0 147 5 73 0 180] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 5 77 0 143 5 77 0 144 5 77 0 145 5 77 0 146 5 77 0 147] 
#[1 2 74 0 6 2 74 0 9 1 165 0 11 5 81 0 18 1 193 0 32 5 85 0 165 5 85 0 168 5 85 0 169 5 89 0 185 5 93 0 186] 
#[1 0 205 0 11 5 97 0 85 0 209 0 122 0 213 0 123 5 101 0 143 5 101 0 144 5 101 0 145 5 101 0 146 5 101 0 147] 
#[1 2 78 0 6 2 78 0 9 5 105 0 183] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 5 161 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 6 69 0 131] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 1 193 0 32 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 6 73 0 131 6 77 0 165 6 77 0 168 6 77 0 169] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 6 81 0 131] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 6 85 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 6 89 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 205 0 11 6 93 0 54 0 209 0 122 0 213 0 123 1 173 0 125 6 97 0 143 6 97 0 144 6 97 0 145 6 97 0 146 6 97 0 147 6 101 0 174] 
#[0 2 82 0 11 0 54 0 122 0 123 0 125] 
#[1 0 6 0 33 0 6 0 34 0 6 0 46 0 6 0 48 0 6 0 55 0 6 0 58 0 6 0 62 0 6 0 63 0 6 0 65 0 6 0 82 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 95 0 6 0 98 0 6 0 102 0 6 0 125 2 25 0 129 6 105 0 131 0 6 1 42] 
#[0 2 86 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 6 109 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 6 109 0 132 6 109 0 133 6 109 0 134 6 109 0 135 6 109 0 136 6 109 0 137 6 109 0 138 6 109 0 139 6 109 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 6 109 0 211 6 109 0 212 6 109 0 213 6 109 0 217 6 109 0 218 6 109 0 219 6 109 0 220 6 109 0 221 6 109 0 228 6 109 0 229 6 109 0 230 6 109 0 231 6 109 0 232 6 109 0 233 6 109 0 234 6 109 0 235 6 109 0 236 6 109 0 238 6 109 0 240 6 109 0 242 6 109 0 243 6 109 0 244 6 109 0 245 6 109 0 246 6 109 0 247 6 109 0 248 6 109 1 36 6 109 1 37 6 109 1 38 6 109 1 39 6 109 1 40 6 109 1 41] 
#[0 6 113 0 18] 
#[1 1 165 0 11 6 117 0 73] 
#[1 1 165 0 11 6 121 0 73] 
#[1 0 6 0 11 0 6 0 54 0 6 0 122 0 6 0 123 0 6 0 125 6 125 0 131 3 185 0 177] 
#[0 2 90 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 1 193 0 32 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 6 129 0 131 6 133 0 165 6 133 0 168 6 133 0 169] 
#[1 1 217 0 5 1 165 0 11 6 137 0 181] 
#[1 1 217 0 5 1 165 0 11 6 141 0 181] 
#[1 1 217 0 5 1 165 0 11 6 145 0 181] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 6 149 0 131] 
#[1 0 6 0 11 0 6 0 54 0 6 0 122 0 6 0 123 0 6 0 125 6 153 0 131 3 249 0 172] 
#[1 1 217 0 5 1 165 0 11 6 157 0 181] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 6 161 0 143 6 161 0 144 6 161 0 145 6 161 0 146 6 161 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 6 165 0 143 6 165 0 144 6 165 0 145 6 165 0 146 6 165 0 147] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 6 169 0 143 6 169 0 144 6 169 0 145 6 169 0 146 6 169 0 147] 
#[1 1 217 0 5 1 165 0 11 6 173 0 181] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 1 193 0 32 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 6 177 0 131 6 181 0 165 6 181 0 168 6 181 0 169] 
#[1 1 217 0 5 1 165 0 11 6 185 0 181] 
#[1 1 217 0 5 1 165 0 11 6 189 0 181] 
#[1 1 217 0 5 1 165 0 11 6 193 0 181] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 6 197 0 131] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 6 201 0 6 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 225 0 23 4 229 0 28 4 233 0 29 4 237 0 31 4 241 0 56 4 245 0 71 4 249 0 74 4 253 0 84 5 1 0 109 5 5 0 237 5 9 0 239 5 13 0 241] 
#[1 4 169 0 1 0 35 0 3 4 177 0 5 2 94 0 6 4 181 0 7 2 94 0 8 2 94 0 9 2 94 0 10 4 193 0 11 4 197 0 12 2 94 0 13 2 94 0 14 2 94 0 15 2 94 0 16 2 94 0 17 2 94 0 18 2 94 0 19 2 94 0 20 2 94 0 21 2 94 0 22 4 225 0 23 2 94 0 24 2 94 0 25 0 39 0 28 4 233 0 29 2 94 0 31 2 94 0 33 2 94 0 34 2 94 0 46 2 94 0 48 2 94 0 49 2 94 0 52 2 94 0 53 2 94 0 54 2 94 0 55 2 94 0 56 2 94 0 58 2 94 0 59 2 94 0 61 2 94 0 62 2 94 0 63 2 94 0 65 2 94 0 66 2 94 0 67 2 94 0 68 2 94 0 71 2 94 0 72 2 94 0 74 2 94 0 76 2 94 0 78 2 94 0 79 2 94 0 81 2 94 0 82 2 94 0 84 2 94 0 87 2 94 0 88 2 94 0 89 2 94 0 90 2 94 0 91 2 94 0 92 2 94 0 93 2 94 0 95 2 94 0 96 2 94 0 98 2 94 0 100 2 94 0 101 2 94 0 102 2 94 0 106 2 94 0 107 2 94 0 108 2 94 0 109 2 94 0 110 2 94 0 115 2 94 0 116 2 94 0 117 2 94 0 118 2 94 0 119 2 94 0 120 2 94 0 121 2 94 0 122 2 94 0 123 2 94 0 125 5 5 0 237 5 9 0 239 5 13 0 241 2 94 1 42] 
#[1 4 169 0 1 0 43 0 3 4 177 0 5 2 98 0 6 4 181 0 7 2 98 0 8 2 98 0 9 2 98 0 10 4 193 0 11 4 197 0 12 2 98 0 13 2 98 0 14 2 98 0 15 2 98 0 16 2 98 0 17 2 98 0 18 2 98 0 19 2 98 0 20 2 98 0 21 2 98 0 22 4 225 0 23 2 98 0 24 2 98 0 25 0 47 0 28 4 233 0 29 2 98 0 31 2 98 0 33 2 98 0 34 2 98 0 46 2 98 0 48 2 98 0 49 2 98 0 52 2 98 0 53 2 98 0 54 2 98 0 55 2 98 0 56 2 98 0 58 2 98 0 59 2 98 0 61 2 98 0 62 2 98 0 63 2 98 0 65 2 98 0 66 2 98 0 67 2 98 0 68 2 98 0 71 2 98 0 72 2 98 0 74 2 98 0 76 2 98 0 78 2 98 0 79 2 98 0 81 2 98 0 82 2 98 0 84 2 98 0 87 2 98 0 88 2 98 0 89 2 98 0 90 2 98 0 91 2 98 0 92 2 98 0 93 2 98 0 95 2 98 0 96 2 98 0 98 2 98 0 100 2 98 0 101 2 98 0 102 2 98 0 106 2 98 0 107 2 98 0 108 2 98 0 109 2 98 0 110 2 98 0 115 2 98 0 116 2 98 0 117 2 98 0 118 2 98 0 119 2 98 0 120 2 98 0 121 2 98 0 122 2 98 0 123 2 98 0 125 5 5 0 237 5 9 0 239 5 13 0 241 2 98 1 42] 
#[1 2 102 0 1 2 102 0 3 2 102 0 5 2 102 0 6 2 102 0 7 2 102 0 8 2 102 0 9 2 102 0 10 1 165 0 11 2 102 0 12 2 102 0 13 2 102 0 14 2 102 0 15 2 102 0 16 2 102 0 17 2 102 0 18 2 102 0 19 2 102 0 20 2 102 0 21 2 102 0 22 2 102 0 23 2 102 0 24 2 102 0 25 2 102 0 28 2 102 0 29 2 102 0 31 2 102 0 33 2 102 0 34 2 102 0 46 2 102 0 48 2 102 0 49 2 102 0 52 2 102 0 53 2 102 0 54 2 102 0 55 2 102 0 56 2 102 0 58 2 102 0 59 2 102 0 61 2 102 0 62 2 102 0 63 2 102 0 65 2 102 0 66 2 102 0 67 2 102 0 68 2 102 0 71 2 102 0 72 2 102 0 74 2 102 0 76 2 102 0 78 2 102 0 79 2 102 0 81 2 102 0 82 2 102 0 84 2 102 0 87 2 102 0 88 2 102 0 89 2 102 0 90 2 102 0 91 2 102 0 92 2 102 0 93 2 102 0 95 2 102 0 96 2 102 0 98 2 102 0 100 2 102 0 101 2 102 0 102 2 102 0 106 2 102 0 107 2 102 0 108 2 102 0 109 2 102 0 110 2 102 0 115 2 102 0 116 2 102 0 117 2 102 0 118 2 102 0 119 2 102 0 120 2 102 0 121 2 102 0 122 2 102 0 123 2 102 0 125 2 102 1 42] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 225 0 23 4 229 0 28 4 233 0 29 4 237 0 31 4 241 0 56 4 245 0 71 4 249 0 74 4 253 0 84 5 1 0 109 5 5 0 237 5 9 0 239 5 13 0 241] 
#[1 0 51 0 1 0 51 0 3 0 51 0 5 2 106 0 6 0 51 0 7 0 51 0 8 2 106 0 9 0 51 0 10 0 51 0 11 0 51 0 12 2 106 0 13 2 106 0 14 0 51 0 15 0 51 0 16 0 51 0 17 0 51 0 18 0 51 0 19 0 51 0 20 2 106 0 21 2 106 0 22 0 51 0 23 2 106 0 24 2 106 0 25 0 51 0 28 0 51 0 29 0 51 0 31 2 106 0 33 2 106 0 34 2 106 0 46 2 106 0 48 2 106 0 49 2 106 0 52 2 106 0 53 2 106 0 54 2 106 0 55 0 51 0 56 2 106 0 58 2 106 0 59 2 106 0 61 2 106 0 62 2 106 0 63 2 106 0 65 2 106 0 66 2 106 0 67 2 106 0 68 0 51 0 71 2 106 0 72 0 51 0 74 2 106 0 76 2 106 0 78 2 106 0 79 2 106 0 81 2 106 0 82 0 51 0 84 2 106 0 87 2 106 0 88 2 106 0 89 2 106 0 90 2 106 0 91 2 106 0 92 2 106 0 93 2 106 0 95 2 106 0 96 2 106 0 98 2 106 0 100 2 106 0 101 2 106 0 102 2 106 0 106 2 106 0 107 2 106 0 108 0 51 0 109 2 106 0 110 2 106 0 115 2 106 0 116 2 106 0 117 2 106 0 118 2 106 0 119 2 106 0 120 2 106 0 121 2 106 0 122 2 106 0 123 2 106 0 125 2 106 1 42] 
#[1 2 110 0 1 2 110 0 3 2 110 0 5 2 110 0 6 2 110 0 7 2 110 0 8 2 110 0 9 2 110 0 10 1 165 0 11 2 110 0 12 2 110 0 13 2 110 0 14 2 110 0 15 2 110 0 16 2 110 0 17 2 110 0 18 2 110 0 19 2 110 0 20 2 110 0 21 2 110 0 22 2 110 0 23 2 110 0 24 2 110 0 25 2 110 0 28 2 110 0 29 2 110 0 31 2 110 0 33 2 110 0 34 2 110 0 46 2 110 0 48 2 110 0 49 2 110 0 52 2 110 0 53 2 110 0 54 2 110 0 55 2 110 0 56 2 110 0 58 2 110 0 59 2 110 0 61 2 110 0 62 2 110 0 63 2 110 0 65 2 110 0 66 2 110 0 67 2 110 0 68 2 110 0 71 2 110 0 72 2 110 0 74 2 110 0 76 2 110 0 78 2 110 0 79 2 110 0 81 2 110 0 82 2 110 0 84 2 110 0 87 2 110 0 88 2 110 0 89 2 110 0 90 2 110 0 91 2 110 0 92 2 110 0 93 2 110 0 95 2 110 0 96 2 110 0 98 2 110 0 100 2 110 0 101 2 110 0 102 2 110 0 106 2 110 0 107 2 110 0 108 2 110 0 109 2 110 0 110 2 110 0 115 2 110 0 116 2 110 0 117 2 110 0 118 2 110 0 119 2 110 0 120 2 110 0 121 2 110 0 122 2 110 0 123 2 110 0 125 2 110 1 42] 
#[1 0 55 0 1 0 55 0 3 0 55 0 5 2 114 0 6 0 55 0 7 0 55 0 8 2 114 0 9 0 55 0 10 0 55 0 11 0 55 0 12 2 114 0 13 2 114 0 14 0 55 0 15 0 55 0 16 0 55 0 17 0 55 0 18 0 55 0 19 0 55 0 20 2 114 0 21 2 114 0 22 0 55 0 23 2 114 0 24 2 114 0 25 0 55 0 28 0 55 0 29 0 55 0 31 2 114 0 33 2 114 0 34 2 114 0 46 2 114 0 48 2 114 0 49 2 114 0 52 2 114 0 53 2 114 0 54 2 114 0 55 0 55 0 56 2 114 0 58 2 114 0 59 2 114 0 61 2 114 0 62 2 114 0 63 2 114 0 65 2 114 0 66 2 114 0 67 2 114 0 68 0 55 0 71 2 114 0 72 0 55 0 74 2 114 0 76 2 114 0 78 2 114 0 79 2 114 0 81 2 114 0 82 0 55 0 84 2 114 0 87 2 114 0 88 2 114 0 89 2 114 0 90 2 114 0 91 2 114 0 92 2 114 0 93 2 114 0 95 2 114 0 96 2 114 0 98 2 114 0 100 2 114 0 101 2 114 0 102 2 114 0 106 2 114 0 107 2 114 0 108 0 55 0 109 2 114 0 110 2 114 0 115 2 114 0 116 2 114 0 117 2 114 0 118 2 114 0 119 2 114 0 120 2 114 0 121 2 114 0 122 2 114 0 123 2 114 0 125 2 114 1 42] 
#[0 2 118 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 122 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 126 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 130 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 2 134 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 4 169 0 1 0 59 0 3 4 177 0 5 2 138 0 6 4 181 0 7 4 185 0 8 2 138 0 9 4 189 0 10 4 193 0 11 4 197 0 12 2 138 0 13 2 138 0 14 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 2 138 0 21 2 138 0 22 4 225 0 23 2 138 0 24 2 138 0 25 0 63 0 28 4 233 0 29 4 237 0 31 2 138 0 33 2 138 0 34 2 138 0 46 2 138 0 48 2 138 0 49 2 138 0 52 2 138 0 53 2 138 0 54 2 138 0 55 4 241 0 56 2 138 0 58 2 138 0 59 2 138 0 61 2 138 0 62 2 138 0 63 2 138 0 65 2 138 0 66 2 138 0 67 2 138 0 68 4 245 0 71 2 138 0 72 4 249 0 74 2 138 0 76 2 138 0 78 2 138 0 79 2 138 0 81 2 138 0 82 4 253 0 84 2 138 0 87 2 138 0 88 2 138 0 89 2 138 0 90 2 138 0 91 2 138 0 92 2 138 0 93 2 138 0 95 2 138 0 96 2 138 0 98 2 138 0 100 2 138 0 101 2 138 0 102 2 138 0 106 2 138 0 107 2 138 0 108 5 1 0 109 2 138 0 110 2 138 0 115 2 138 0 116 2 138 0 117 2 138 0 118 2 138 0 119 2 138 0 120 2 138 0 121 2 138 0 122 2 138 0 123 2 138 0 125 5 5 0 237 5 9 0 239 5 13 0 241 2 138 1 42] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 6 205 0 18 4 217 0 19 4 221 0 20 4 225 0 23 4 229 0 28 4 233 0 29 4 237 0 31 4 241 0 56 4 245 0 71 4 249 0 74 4 253 0 84 5 1 0 109 5 5 0 237 5 9 0 239 5 13 0 241] 
#[0 2 142 0 10 0 114] 
#[1 6 209 0 10 6 213 0 114] 
#[0 2 146 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 2 150 0 1 2 150 0 3 2 113 0 5 2 150 0 6 2 150 0 7 2 117 0 8 6 217 0 9 2 121 0 10 0 205 0 11 2 150 0 12 2 150 0 13 0 67 0 14 2 150 0 15 2 150 0 16 2 150 0 17 2 150 0 18 2 150 0 19 2 150 0 20 0 71 0 21 0 75 0 22 2 150 0 23 0 79 0 24 0 83 0 25 2 150 0 28 2 150 0 29 2 150 0 31 2 150 0 33 2 150 0 34 3 193 0 37 6 229 0 39 2 150 0 46 2 150 0 48 2 150 0 49 2 150 0 52 2 150 0 53 2 150 0 54 2 150 0 55 2 150 0 56 2 150 0 58 0 87 0 59 2 150 0 61 2 150 0 62 2 150 0 63 2 150 0 65 2 150 0 66 2 150 0 67 2 150 0 68 2 150 0 71 0 91 0 72 2 150 0 74 2 150 0 76 2 150 0 78 0 95 0 79 2 150 0 81 2 150 0 82 2 150 0 84 6 225 0 85 2 150 0 87 2 150 0 88 2 150 0 89 2 150 0 90 2 150 0 91 2 150 0 92 0 99 0 93 2 150 0 95 2 150 0 96 2 150 0 98 2 150 0 100 2 150 0 101 2 150 0 102 2 150 0 106 2 150 0 107 2 150 0 108 2 150 0 109 0 103 0 110 0 107 0 115 0 111 0 116 0 115 0 117 0 119 0 118 0 123 0 119 0 127 0 120 0 131 0 121 0 135 0 122 0 139 0 123 2 150 0 125 6 233 0 132 6 233 0 133 6 233 0 134 6 233 0 135 6 233 0 136 6 233 0 137 6 233 0 138 6 233 0 139 6 233 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 6 229 0 180 6 233 0 211 6 233 0 212 6 233 0 213 6 233 0 217 6 233 0 218 6 233 0 219 6 233 0 220 6 233 0 221 6 237 0 222 6 241 0 224 6 245 0 227 6 233 0 228 6 233 0 229 6 233 0 230 6 233 0 231 6 233 0 232 6 233 0 233 6 233 0 234 6 233 0 235 6 233 0 236 6 233 0 238 6 233 0 240 6 233 0 242 6 233 0 243 6 233 0 244 6 233 0 245 6 233 0 246 6 233 0 247 6 233 0 248 6 233 1 36 6 233 1 37 6 233 1 38 6 233 1 39 6 233 1 40 6 233 1 41 2 150 1 42] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 6 249 0 143 6 249 0 144 6 249 0 145 6 249 0 146 6 249 0 147] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 6 253 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 6 253 0 132 6 253 0 133 6 253 0 134 6 253 0 135 6 253 0 136 6 253 0 137 6 253 0 138 6 253 0 139 6 253 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 6 253 0 211 6 253 0 212 6 253 0 213 6 253 0 217 6 253 0 218 6 253 0 219 6 253 0 220 6 253 0 221 6 253 0 228 6 253 0 229 6 253 0 230 6 253 0 231 6 253 0 232 6 253 0 233 6 253 0 234 6 253 0 235 6 253 0 236 6 253 0 238 6 253 0 240 6 253 0 242 6 253 0 243 6 253 0 244 6 253 0 245 6 253 0 246 6 253 0 247 6 253 0 248 6 253 1 36 6 253 1 37 6 253 1 38 6 253 1 39 6 253 1 40 6 253 1 41] 
#[1 1 106 0 5 1 106 0 6 1 106 0 8 1 106 0 9 1 106 0 10 1 106 0 11 1 106 0 14 1 106 0 21 1 106 0 22 1 106 0 24 1 106 0 25 1 106 0 37 1 106 0 39 1 106 0 59 1 106 0 72 1 106 0 79 1 106 0 85 1 106 0 93 1 106 0 110 1 106 0 115 1 106 0 116 1 106 0 117 1 106 0 118 1 106 0 119 1 106 0 120 1 106 0 121 1 106 0 122 1 106 0 123 7 1 0 223 4 165 0 225] 
#[0 2 154 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 158 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 162 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 7 5 0 143 7 5 0 144 7 5 0 145 7 5 0 146 7 5 0 147] 
#[0 2 166 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 170 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 174 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 178 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 7 9 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 7 9 0 132 7 9 0 133 7 9 0 134 7 9 0 135 7 9 0 136 7 9 0 137 7 9 0 138 7 9 0 139 7 9 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 7 9 0 211 7 9 0 212 7 9 0 213 7 9 0 217 7 9 0 218 7 9 0 219 7 9 0 220 7 9 0 221 7 9 0 228 7 9 0 229 7 9 0 230 7 9 0 231 7 9 0 232 7 9 0 233 7 9 0 234 7 9 0 235 7 9 0 236 7 9 0 238 7 9 0 240 7 9 0 242 7 9 0 243 7 9 0 244 7 9 0 245 7 9 0 246 7 9 0 247 7 9 0 248 7 9 1 36 7 9 1 37 7 9 1 38 7 9 1 39 7 9 1 40 7 9 1 41] 
#[0 2 182 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 186 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 190 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 194 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 198 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 202 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 206 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 210 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 214 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 218 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 2 222 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 7 13 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 7 13 0 132 7 13 0 133 7 13 0 134 7 13 0 135 7 13 0 136 7 13 0 137 7 13 0 138 7 13 0 139 7 13 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 7 13 0 211 7 13 0 212 7 13 0 213 7 13 0 217 7 13 0 218 7 13 0 219 7 13 0 220 7 13 0 221 7 13 0 228 7 13 0 229 7 13 0 230 7 13 0 231 7 13 0 232 7 13 0 233 7 13 0 234 7 13 0 235 7 13 0 236 7 13 0 238 7 13 0 240 7 13 0 242 7 13 0 243 7 13 0 244 7 13 0 245 7 13 0 246 7 13 0 247 7 13 0 248 7 13 1 36 7 13 1 37 7 13 1 38 7 13 1 39 7 13 1 40 7 13 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 7 17 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 7 17 0 132 7 17 0 133 7 17 0 134 7 17 0 135 7 17 0 136 7 17 0 137 7 17 0 138 7 17 0 139 7 17 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 7 17 0 211 7 17 0 212 7 17 0 213 7 17 0 217 7 17 0 218 7 17 0 219 7 17 0 220 7 17 0 221 7 17 0 228 7 17 0 229 7 17 0 230 7 17 0 231 7 17 0 232 7 17 0 233 7 17 0 234 7 17 0 235 7 17 0 236 7 17 0 238 7 17 0 240 7 17 0 242 7 17 0 243 7 17 0 244 7 17 0 245 7 17 0 246 7 17 0 247 7 17 0 248 7 17 1 36 7 17 1 37 7 17 1 38 7 17 1 39 7 17 1 40 7 17 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 7 21 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 7 21 0 132 7 21 0 133 7 21 0 134 7 21 0 135 7 21 0 136 7 21 0 137 7 21 0 138 7 21 0 139 7 21 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 7 21 0 211 7 21 0 212 7 21 0 213 7 21 0 217 7 21 0 218 7 21 0 219 7 21 0 220 7 21 0 221 7 21 0 228 7 21 0 229 7 21 0 230 7 21 0 231 7 21 0 232 7 21 0 233 7 21 0 234 7 21 0 235 7 21 0 236 7 21 0 238 7 21 0 240 7 21 0 242 7 21 0 243 7 21 0 244 7 21 0 245 7 21 0 246 7 21 0 247 7 21 0 248 7 21 1 36 7 21 1 37 7 21 1 38 7 21 1 39 7 21 1 40 7 21 1 41] 
#[0 2 226 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 2 230 0 11 0 122 0 123 0 125] 
#[0 2 234 0 54 0 125] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 7 25 0 125 0 217 0 143 0 217 0 144 0 217 0 145 0 217 0 146 0 217 0 147 7 29 0 150] 
#[1 1 217 0 5 7 33 0 30 7 37 0 181] 
#[1 1 217 0 5 7 41 0 30 7 45 0 181] 
#[1 7 49 0 5 2 238 0 6 2 238 0 7 2 238 0 8 2 238 0 9 2 238 0 10 2 238 0 11 2 238 0 18 2 238 0 21 2 238 0 22 2 238 0 24 2 238 0 25 2 238 0 33 2 238 0 34 2 238 0 46 2 238 0 48 2 238 0 49 2 238 0 52 2 238 0 53 2 238 0 54 2 238 0 55 2 238 0 58 2 238 0 59 2 238 0 61 2 238 0 62 2 238 0 63 2 238 0 65 2 238 0 66 2 238 0 67 2 238 0 68 2 238 0 72 2 238 0 76 2 238 0 78 2 238 0 79 2 238 0 81 2 238 0 82 2 238 0 87 2 238 0 88 2 238 0 89 2 238 0 90 2 238 0 91 2 238 0 92 2 238 0 93 2 238 0 95 2 238 0 98 2 238 0 102 2 238 0 106 2 238 0 107 2 238 0 108 2 238 0 110 2 238 0 115 2 238 0 116 2 238 0 117 2 238 0 118 2 238 0 119 2 238 0 120 2 238 0 121 2 238 0 122 2 238 0 123 2 238 0 125 2 238 1 42] 
#[1 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 7 53 0 132 7 53 0 133 7 53 0 134 7 53 0 135 7 53 0 136 7 53 0 137 7 53 0 138 7 53 0 139 7 53 0 140] 
#[0 2 242 0 5 0 8 0 9 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 7 57 0 55] 
#[1 1 165 0 11 7 61 0 18 2 246 0 54 2 246 0 122 2 246 0 123 2 246 0 125] 
#[0 2 250 0 11 0 54 0 122 0 123 0 125] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 7 65 0 143 7 65 0 144 7 65 0 145 7 65 0 146 7 65 0 147] 
#[1 2 74 0 6 2 74 0 9 1 165 0 11 5 81 0 18 1 193 0 32 7 69 0 165 7 69 0 168 7 69 0 169 5 89 0 185 7 73 0 186] 
#[1 0 205 0 11 7 77 0 85 0 209 0 122 0 213 0 123 7 81 0 143 7 81 0 144 7 81 0 145 7 81 0 146 7 81 0 147] 
#[1 2 74 0 6 2 74 0 9 1 165 0 11 5 81 0 18 1 193 0 32 7 85 0 165 7 85 0 168 7 85 0 169 5 89 0 185 7 89 0 186] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 7 93 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 7 93 0 132 7 93 0 133 7 93 0 134 7 93 0 135 7 93 0 136 7 93 0 137 7 93 0 138 7 93 0 139 7 93 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 7 93 0 211 7 93 0 212 7 93 0 213 7 93 0 217 7 93 0 218 7 93 0 219 7 93 0 220 7 93 0 221 7 93 0 228 7 93 0 229 7 93 0 230 7 93 0 231 7 93 0 232 7 93 0 233 7 93 0 234 7 93 0 235 7 93 0 236 7 93 0 238 7 93 0 240 7 93 0 242 7 93 0 243 7 93 0 244 7 93 0 245 7 93 0 246 7 93 0 247 7 93 0 248 7 93 1 36 7 93 1 37 7 93 1 38 7 93 1 39 7 93 1 40 7 93 1 41] 
#[1 2 74 0 6 2 74 0 9 5 81 0 18 5 89 0 185 7 97 0 186] 
#[0 2 254 0 6 0 9] 
#[0 3 2 0 6 0 9] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 7 101 0 143 7 101 0 144 7 101 0 145 7 101 0 146 7 101 0 147] 
#[1 2 74 0 6 2 74 0 9 1 165 0 11 5 81 0 18 1 193 0 32 7 105 0 165 7 105 0 168 7 105 0 169 5 89 0 185 7 109 0 186] 
#[1 7 113 0 6 7 117 0 9 7 121 0 182] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 76 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 7 125 0 103 0 143 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 7 133 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 7 137 0 51 2 141 0 59 7 141 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 7 141 0 132 7 141 0 133 7 141 0 134 7 141 0 135 7 141 0 136 7 141 0 137 7 141 0 138 7 141 0 139 7 141 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 7 141 0 211 7 141 0 212 7 141 0 213 7 141 0 217 7 141 0 218 7 141 0 219 7 141 0 220 7 141 0 221 7 141 0 228 7 141 0 229 7 141 0 230 7 141 0 231 7 141 0 232 7 141 0 233 7 141 0 234 7 141 0 235 7 141 0 236 7 141 0 238 7 141 0 240 7 141 0 242 7 141 0 243 7 141 0 244 7 141 0 245 7 141 0 246 7 141 0 247 7 141 0 248 7 141 1 36 7 141 1 37 7 141 1 38 7 141 1 39 7 141 1 40 7 141 1 41] 
#[1 0 205 0 11 1 37 0 117 0 209 0 122 0 213 0 123 7 145 0 133 7 149 0 143 7 149 0 144 7 149 0 145 7 149 0 146 7 149 0 147] 
#[1 0 205 0 11 1 37 0 117 0 209 0 122 0 213 0 123 7 153 0 133 7 157 0 143 7 157 0 144 7 157 0 145 7 157 0 146 7 157 0 147] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 7 161 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 7 161 0 132 7 161 0 133 7 161 0 134 7 161 0 135 7 161 0 136 7 161 0 137 7 161 0 138 7 161 0 139 7 161 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 7 161 0 211 7 161 0 212 7 161 0 213 7 161 0 217 7 161 0 218 7 161 0 219 7 161 0 220 7 161 0 221 7 161 0 228 7 161 0 229 7 161 0 230 7 161 0 231 7 161 0 232 7 161 0 233 7 161 0 234 7 161 0 235 7 161 0 236 7 161 0 238 7 161 0 240 7 161 0 242 7 161 0 243 7 161 0 244 7 161 0 245 7 161 0 246 7 161 0 247 7 161 0 248 7 161 1 36 7 161 1 37 7 161 1 38 7 161 1 39 7 161 1 40 7 161 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 7 165 0 57 2 141 0 59 7 169 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 7 169 0 132 7 169 0 133 7 169 0 134 7 169 0 135 7 169 0 136 7 169 0 137 7 169 0 138 7 169 0 139 7 169 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 7 169 0 211 7 169 0 212 7 169 0 213 7 169 0 217 7 169 0 218 7 169 0 219 7 169 0 220 7 169 0 221 7 169 0 228 7 169 0 229 7 169 0 230 7 169 0 231 7 169 0 232 7 169 0 233 7 169 0 234 7 169 0 235 7 169 0 236 7 169 0 238 7 169 0 240 7 169 0 242 7 169 0 243 7 169 0 244 7 169 0 245 7 169 0 246 7 169 0 247 7 169 0 248 7 169 1 36 7 169 1 37 7 169 1 38 7 169 1 39 7 169 1 40 7 169 1 41] 
#[1 3 6 0 5 3 6 0 8 3 6 0 10 0 205 0 11 3 6 0 21 3 6 0 22 3 6 0 24 3 6 0 25 3 6 0 33 3 6 0 48 3 6 0 49 3 6 0 52 3 6 0 53 3 6 0 54 3 6 0 55 3 6 0 58 3 6 0 59 3 6 0 61 3 6 0 62 3 6 0 65 3 6 0 66 3 6 0 67 3 6 0 68 3 6 0 72 3 6 0 76 0 147 0 78 3 6 0 79 3 6 0 81 3 6 0 87 3 6 0 89 3 6 0 90 3 6 0 91 3 6 0 92 3 6 0 93 3 6 0 95 3 6 0 102 3 6 0 106 3 6 0 107 3 6 0 108 3 6 0 110 3 6 0 115 3 6 0 116 3 6 0 117 3 6 0 118 3 6 0 119 3 6 0 120 3 6 0 121 0 151 0 122 0 155 0 123 3 6 0 125 7 177 0 143 7 177 0 144 7 177 0 145 7 177 0 146 7 177 0 147] 
#[1 0 205 0 11 0 253 0 26 0 209 0 122 0 213 0 123 1 1 0 143 1 1 0 144 1 1 0 145 1 1 0 146 1 1 0 147 1 69 0 202 1 73 0 207] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 7 181 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 4 109 0 132 4 109 0 133 4 109 0 134 4 109 0 135 4 109 0 136 4 109 0 137 4 109 0 138 4 109 0 139 4 109 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 7 181 0 211 4 109 0 212 4 109 0 213 7 181 0 217 7 181 0 218 7 181 0 219 7 181 0 220 7 181 0 221 7 181 0 228 7 181 0 229 7 181 0 230 7 181 0 231 7 181 0 232 7 181 0 233 7 181 0 234 7 181 0 235 7 181 0 236 7 181 0 238 7 181 0 240 7 181 0 242 7 181 0 243 7 181 0 244 7 181 0 245 7 181 0 246 7 181 0 247 7 181 0 248 4 109 1 36 4 109 1 37 4 109 1 38 4 109 1 39 4 109 1 40 4 109 1 41] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 7 185 0 143 7 185 0 144 7 185 0 145 7 185 0 146 7 185 0 147] 
#[1 0 27 0 1 0 27 0 3 0 27 0 5 0 27 0 7 0 27 0 8 1 106 0 9 0 27 0 10 0 31 0 11 0 27 0 12 7 189 0 13 1 106 0 14 0 27 0 15 0 27 0 16 0 27 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 27 0 21 0 27 0 22 0 27 0 23 0 27 0 24 0 27 0 25 0 27 0 28 0 27 0 29 0 27 0 31 0 27 0 33 1 106 0 37 1 106 0 39 0 27 0 48 0 27 0 49 0 27 0 52 0 27 0 53 0 27 0 54 0 27 0 55 0 27 0 56 0 27 0 58 0 27 0 59 0 27 0 61 0 27 0 62 0 27 0 65 0 27 0 66 0 27 0 67 0 27 0 68 0 27 0 71 0 27 0 72 0 27 0 74 0 27 0 76 0 27 0 78 0 27 0 79 0 27 0 81 0 27 0 84 1 106 0 85 0 27 0 87 0 27 0 89 0 27 0 90 0 27 0 91 0 27 0 92 0 27 0 93 0 27 0 95 0 27 0 102 0 27 0 106 0 27 0 107 0 27 0 108 0 27 0 109 0 27 0 110 0 27 0 115 0 27 0 116 0 27 0 117 0 27 0 118 0 27 0 119 0 27 0 120 0 27 0 121 0 27 0 122 0 27 0 123 0 27 0 125 4 161 0 223 4 165 0 225] 
#[0 3 10 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 3 14 0 5 3 14 0 8 3 14 0 10 3 14 0 11 3 14 0 21 3 14 0 22 3 14 0 24 3 14 0 25 3 14 0 33 3 14 0 48 3 14 0 49 3 14 0 52 3 14 0 53 3 14 0 54 3 14 0 55 3 14 0 58 3 14 0 59 3 14 0 61 3 14 0 62 3 14 0 65 3 14 0 66 3 14 0 67 3 14 0 68 3 14 0 72 3 14 0 76 3 14 0 78 3 14 0 79 3 14 0 81 3 14 0 87 3 14 0 89 3 14 0 90 3 14 0 91 3 14 0 92 3 14 0 93 3 14 0 95 3 14 0 102 3 14 0 106 3 14 0 107 3 14 0 108 3 14 0 110 3 14 0 115 3 14 0 116 3 14 0 117 3 14 0 118 3 14 0 119 3 14 0 120 3 14 0 121 3 14 0 122 3 14 0 123 3 14 0 125 7 193 0 160] 
#[0 7 197 0 54] 
#[1 0 205 0 11 0 253 0 26 1 101 0 43 1 109 0 55 1 113 0 58 1 133 0 102 0 209 0 122 0 213 0 123 1 1 0 143 1 1 0 144 1 1 0 145 1 1 0 146 1 1 0 147 1 141 0 202 1 145 0 207] 
#[0 3 18 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 22 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 3 26 0 21 3 26 0 22 4 225 0 23 3 26 0 24 3 26 0 25 4 229 0 28 4 233 0 29 4 237 0 31 3 26 0 33 3 26 0 48 3 26 0 49 3 26 0 52 3 26 0 53 3 26 0 54 3 26 0 55 4 241 0 56 3 26 0 58 3 26 0 59 3 26 0 61 3 26 0 62 3 26 0 65 3 26 0 66 3 26 0 67 3 26 0 68 4 245 0 71 3 26 0 72 4 249 0 74 3 26 0 76 3 26 0 78 3 26 0 79 3 26 0 81 4 253 0 84 3 26 0 87 3 26 0 89 3 26 0 90 3 26 0 91 3 26 0 92 3 26 0 93 3 26 0 95 3 26 0 102 3 26 0 106 3 26 0 107 3 26 0 108 5 1 0 109 3 26 0 110 3 26 0 115 3 26 0 116 3 26 0 117 3 26 0 118 3 26 0 119 3 26 0 120 3 26 0 121 3 26 0 122 3 26 0 123 3 26 0 125 5 5 0 237 5 9 0 239 5 13 0 241] 
#[0 3 30 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 34 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 38 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 42 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 46 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 50 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 54 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 58 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 62 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 66 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 70 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 74 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 78 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 82 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 86 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 90 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 94 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 0 159 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 106 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 110 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 114 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 118 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 122 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 126 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 130 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 134 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 138 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 142 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 146 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 150 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 154 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 158 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 162 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 166 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 3 170 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 1 222 0 1 1 222 0 3 0 163 0 5 1 222 0 7 0 163 0 8 0 163 0 10 0 163 0 11 1 222 0 12 1 222 0 15 1 222 0 16 1 222 0 17 1 222 0 18 1 222 0 19 1 222 0 20 0 163 0 21 0 163 0 22 1 222 0 23 0 163 0 24 0 163 0 25 1 222 0 28 1 222 0 29 1 222 0 31 0 163 0 33 0 163 0 48 0 163 0 49 0 163 0 52 0 163 0 53 0 163 0 54 0 163 0 55 1 222 0 56 0 163 0 58 0 163 0 59 0 163 0 61 0 163 0 62 0 163 0 65 0 163 0 66 0 163 0 67 0 163 0 68 1 222 0 71 0 163 0 72 1 222 0 74 0 163 0 76 0 163 0 78 0 163 0 79 0 163 0 81 1 222 0 84 0 163 0 87 0 163 0 89 0 163 0 90 0 163 0 91 0 163 0 92 0 163 0 93 0 163 0 95 0 163 0 102 0 163 0 106 0 163 0 107 0 163 0 108 1 222 0 109 0 163 0 110 0 163 0 115 0 163 0 116 0 163 0 117 0 163 0 118 0 163 0 119 0 163 0 120 0 163 0 121 0 163 0 122 0 163 0 123 0 163 0 125] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 7 201 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 7 205 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 7 209 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 7 213 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 7 217 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 7 221 0 54] 
#[0 7 225 0 102] 
#[1 1 165 0 11 1 193 0 32 7 229 0 165 7 229 0 168 7 229 0 169] 
#[0 3 178 0 11 0 54 0 122 0 123 0 125] 
#[1 0 9 0 33 0 13 0 34 0 17 0 46 0 21 0 48 0 25 0 55 0 29 0 58 0 105 0 62 0 37 0 63 0 105 0 65 0 45 0 82 0 105 0 87 0 53 0 88 0 105 0 89 0 61 0 90 0 65 0 95 0 69 0 98 0 73 0 102 1 173 0 125 4 1 0 149 4 1 0 151 4 1 0 152 4 1 0 156 0 105 0 162 4 1 0 170 4 1 0 171 4 1 0 175 4 1 0 176 4 1 0 187 4 1 0 188 4 1 0 189 0 137 0 190 4 1 0 191 4 1 0 192 4 1 0 193 4 1 0 194 4 1 0 195 4 1 0 196 4 1 0 197 4 1 0 198 4 1 0 199 4 1 0 200 4 1 0 201 4 1 0 203 4 1 0 204 4 1 0 205 4 1 0 206 4 1 0 210 3 182 1 42] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 3 186 0 21 3 186 0 22 4 225 0 23 3 186 0 24 3 186 0 25 4 229 0 28 4 233 0 29 4 237 0 31 3 186 0 33 3 186 0 34 3 186 0 46 3 186 0 48 3 186 0 49 3 186 0 52 3 186 0 53 3 186 0 54 3 186 0 55 4 241 0 56 3 186 0 58 3 186 0 59 3 186 0 61 3 186 0 62 3 186 0 63 3 186 0 65 3 186 0 66 3 186 0 67 3 186 0 68 4 245 0 71 3 186 0 72 4 249 0 74 3 186 0 76 3 186 0 78 3 186 0 79 3 186 0 81 3 186 0 82 4 253 0 84 3 186 0 87 3 186 0 88 3 186 0 89 3 186 0 90 3 186 0 91 3 186 0 92 3 186 0 93 3 186 0 95 3 186 0 98 3 186 0 102 3 186 0 106 3 186 0 107 3 186 0 108 5 1 0 109 3 186 0 110 3 186 0 115 3 186 0 116 3 186 0 117 3 186 0 118 3 186 0 119 3 186 0 120 3 186 0 121 3 186 0 122 3 186 0 123 3 186 0 125 5 5 0 237 5 9 0 239 5 13 0 241 3 186 1 42] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 7 233 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 7 233 0 132 7 233 0 133 7 233 0 134 7 233 0 135 7 233 0 136 7 233 0 137 7 233 0 138 7 233 0 139 7 233 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 7 233 0 211 7 233 0 212 7 233 0 213 7 233 0 217 7 233 0 218 7 233 0 219 7 233 0 220 7 233 0 221 7 233 0 228 7 233 0 229 7 233 0 230 7 233 0 231 7 233 0 232 7 233 0 233 7 233 0 234 7 233 0 235 7 233 0 236 7 233 0 238 7 233 0 240 7 233 0 242 7 233 0 243 7 233 0 244 7 233 0 245 7 233 0 246 7 233 0 247 7 233 0 248 7 233 1 36 7 233 1 37 7 233 1 38 7 233 1 39 7 233 1 40 7 233 1 41] 
#[1 2 173 0 120 7 237 0 138] 
#[1 2 173 0 120 7 241 0 138] 
#[1 0 205 0 11 7 245 0 54 0 209 0 122 0 213 0 123 1 173 0 125 5 57 0 143 5 57 0 144 5 57 0 145 5 57 0 146 5 57 0 147 5 61 0 179] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 7 249 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 7 253 0 131] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 1 193 0 32 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 8 1 0 131 8 5 0 165 8 5 0 168 8 5 0 169] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 8 9 0 131] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 8 13 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 8 17 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 205 0 11 8 21 0 54 0 209 0 122 0 213 0 123 1 173 0 125 6 97 0 143 6 97 0 144 6 97 0 145 6 97 0 146 6 97 0 147 6 101 0 174] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 1 193 0 32 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 8 25 0 131 8 29 0 165 8 29 0 168 8 29 0 169] 
#[1 1 217 0 5 1 165 0 11 8 33 0 181] 
#[1 1 217 0 5 1 165 0 11 8 37 0 181] 
#[1 1 217 0 5 1 165 0 11 8 41 0 181] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 8 45 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 8 49 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 8 53 0 131] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 1 193 0 32 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 8 57 0 131 8 61 0 165 8 61 0 168 8 61 0 169] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 8 65 0 131] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 8 69 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 8 73 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 3 190 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 8 77 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 8 77 0 132 8 77 0 133 8 77 0 134 8 77 0 135 8 77 0 136 8 77 0 137 8 77 0 138 8 77 0 139 8 77 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 8 77 0 211 8 77 0 212 8 77 0 213 8 77 0 217 8 77 0 218 8 77 0 219 8 77 0 220 8 77 0 221 8 77 0 228 8 77 0 229 8 77 0 230 8 77 0 231 8 77 0 232 8 77 0 233 8 77 0 234 8 77 0 235 8 77 0 236 8 77 0 238 8 77 0 240 8 77 0 242 8 77 0 243 8 77 0 244 8 77 0 245 8 77 0 246 8 77 0 247 8 77 0 248 8 77 1 36 8 77 1 37 8 77 1 38 8 77 1 39 8 77 1 40 8 77 1 41] 
#[1 8 81 0 114 8 85 0 142] 
#[0 3 194 0 10 0 114] 
#[0 3 198 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 3 202 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 8 89 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 8 89 0 132 8 89 0 133 8 89 0 134 8 89 0 135 8 89 0 136 8 89 0 137 8 89 0 138 8 89 0 139 8 89 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 8 89 0 211 8 89 0 212 8 89 0 213 8 89 0 217 8 89 0 218 8 89 0 219 8 89 0 220 8 89 0 221 8 89 0 228 8 89 0 229 8 89 0 230 8 89 0 231 8 89 0 232 8 89 0 233 8 89 0 234 8 89 0 235 8 89 0 236 8 89 0 238 8 89 0 240 8 89 0 242 8 89 0 243 8 89 0 244 8 89 0 245 8 89 0 246 8 89 0 247 8 89 0 248 8 89 1 36 8 89 1 37 8 89 1 38 8 89 1 39 8 89 1 40 8 89 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 8 97 0 72 2 149 0 79 8 93 0 85 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 8 97 0 132 8 97 0 133 8 97 0 134 8 97 0 135 8 97 0 136 8 97 0 137 8 97 0 138 8 97 0 139 8 97 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 8 97 0 211 8 97 0 212 8 97 0 213 8 97 0 217 8 97 0 218 8 97 0 219 8 97 0 220 8 97 0 221 8 97 0 228 8 97 0 229 8 97 0 230 8 97 0 231 8 97 0 232 8 97 0 233 8 97 0 234 8 97 0 235 8 97 0 236 8 97 0 238 8 97 0 240 8 97 0 242 8 97 0 243 8 97 0 244 8 97 0 245 8 97 0 246 8 97 0 247 8 97 0 248 8 97 1 36 8 97 1 37 8 97 1 38 8 97 1 39 8 97 1 40 8 97 1 41] 
#[1 4 169 0 1 0 167 0 3 4 177 0 5 3 206 0 6 4 181 0 7 4 185 0 8 3 206 0 9 4 189 0 10 4 193 0 11 4 197 0 12 3 206 0 13 3 206 0 14 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 3 206 0 21 3 206 0 22 4 225 0 23 3 206 0 24 3 206 0 25 0 171 0 28 4 233 0 29 4 237 0 31 3 206 0 33 3 206 0 34 3 206 0 46 3 206 0 48 3 206 0 49 3 206 0 52 3 206 0 53 3 206 0 54 3 206 0 55 4 241 0 56 3 206 0 58 3 206 0 59 3 206 0 61 3 206 0 62 3 206 0 63 3 206 0 65 3 206 0 66 3 206 0 67 3 206 0 68 4 245 0 71 3 206 0 72 4 249 0 74 3 206 0 76 3 206 0 78 3 206 0 79 3 206 0 81 3 206 0 82 4 253 0 84 3 206 0 87 3 206 0 88 3 206 0 89 3 206 0 90 3 206 0 91 3 206 0 92 3 206 0 93 3 206 0 95 3 206 0 96 3 206 0 98 3 206 0 100 3 206 0 101 3 206 0 102 3 206 0 106 3 206 0 107 3 206 0 108 5 1 0 109 3 206 0 110 3 206 0 115 3 206 0 116 3 206 0 117 3 206 0 118 3 206 0 119 3 206 0 120 3 206 0 121 3 206 0 122 3 206 0 123 3 206 0 125 5 5 0 237 5 9 0 239 5 13 0 241 3 206 1 42] 
#[1 2 150 0 1 2 150 0 3 2 150 0 5 2 150 0 6 2 150 0 7 2 150 0 8 8 101 0 9 2 150 0 10 2 150 0 11 2 150 0 12 2 150 0 13 0 175 0 14 2 150 0 15 2 150 0 16 2 150 0 17 2 150 0 18 2 150 0 19 2 150 0 20 2 150 0 21 2 150 0 22 2 150 0 23 2 150 0 24 2 150 0 25 2 150 0 28 2 150 0 29 2 150 0 31 2 150 0 33 2 150 0 34 2 150 0 46 2 150 0 48 2 150 0 49 2 150 0 52 2 150 0 53 2 150 0 54 2 150 0 55 2 150 0 56 2 150 0 58 2 150 0 59 2 150 0 61 2 150 0 62 2 150 0 63 2 150 0 65 2 150 0 66 2 150 0 67 2 150 0 68 2 150 0 71 2 150 0 72 2 150 0 74 2 150 0 76 2 150 0 78 2 150 0 79 2 150 0 81 2 150 0 82 2 150 0 84 2 150 0 87 2 150 0 88 2 150 0 89 2 150 0 90 2 150 0 91 2 150 0 92 2 150 0 93 2 150 0 95 2 150 0 96 2 150 0 98 2 150 0 100 2 150 0 101 2 150 0 102 2 150 0 106 2 150 0 107 2 150 0 108 2 150 0 109 2 150 0 110 2 150 0 115 2 150 0 116 2 150 0 117 2 150 0 118 2 150 0 119 2 150 0 120 2 150 0 121 2 150 0 122 2 150 0 123 2 150 0 125 8 109 0 227 2 150 1 42] 
#[0 3 210 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 3 214 0 1 3 214 0 3 3 214 0 5 3 214 0 6 3 214 0 7 3 214 0 8 8 113 0 9 3 214 0 10 3 214 0 11 3 214 0 12 3 214 0 13 0 179 0 14 3 214 0 15 3 214 0 16 3 214 0 17 3 214 0 18 3 214 0 19 3 214 0 20 3 214 0 21 3 214 0 22 3 214 0 23 3 214 0 24 3 214 0 25 3 214 0 28 3 214 0 29 3 214 0 31 3 214 0 33 3 214 0 34 3 214 0 46 3 214 0 48 3 214 0 49 3 214 0 52 3 214 0 53 3 214 0 54 3 214 0 55 3 214 0 56 3 214 0 58 3 214 0 59 3 214 0 61 3 214 0 62 3 214 0 63 3 214 0 65 3 214 0 66 3 214 0 67 3 214 0 68 3 214 0 71 3 214 0 72 3 214 0 74 3 214 0 76 3 214 0 78 3 214 0 79 3 214 0 81 3 214 0 82 3 214 0 84 3 214 0 87 3 214 0 88 3 214 0 89 3 214 0 90 3 214 0 91 3 214 0 92 3 214 0 93 3 214 0 95 3 214 0 96 3 214 0 98 3 214 0 100 3 214 0 101 3 214 0 102 3 214 0 106 3 214 0 107 3 214 0 108 3 214 0 109 3 214 0 110 3 214 0 115 3 214 0 116 3 214 0 117 3 214 0 118 3 214 0 119 3 214 0 120 3 214 0 121 3 214 0 122 3 214 0 123 3 214 0 125 8 121 0 226 3 214 1 42] 
#[0 3 218 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 4 169 0 1 0 183 0 3 4 177 0 5 3 222 0 6 4 181 0 7 4 185 0 8 3 222 0 9 4 189 0 10 4 193 0 11 4 197 0 12 3 222 0 13 3 222 0 14 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 3 222 0 21 3 222 0 22 4 225 0 23 3 222 0 24 3 222 0 25 0 187 0 28 4 233 0 29 4 237 0 31 3 222 0 33 3 222 0 34 3 222 0 46 3 222 0 48 3 222 0 49 3 222 0 52 3 222 0 53 3 222 0 54 3 222 0 55 4 241 0 56 3 222 0 58 3 222 0 59 3 222 0 61 3 222 0 62 3 222 0 63 3 222 0 65 3 222 0 66 3 222 0 67 3 222 0 68 4 245 0 71 3 222 0 72 4 249 0 74 3 222 0 76 3 222 0 78 3 222 0 79 3 222 0 81 3 222 0 82 4 253 0 84 3 222 0 87 3 222 0 88 3 222 0 89 3 222 0 90 3 222 0 91 3 222 0 92 3 222 0 93 3 222 0 95 3 222 0 96 3 222 0 98 3 222 0 100 3 222 0 101 3 222 0 102 3 222 0 106 3 222 0 107 3 222 0 108 5 1 0 109 3 222 0 110 3 222 0 115 3 222 0 116 3 222 0 117 3 222 0 118 3 222 0 119 3 222 0 120 3 222 0 121 3 222 0 122 3 222 0 123 3 222 0 125 5 5 0 237 5 9 0 239 5 13 0 241 3 222 1 42] 
#[0 8 125 0 6] 
#[0 3 226 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 4 169 0 1 0 191 0 3 4 177 0 5 3 230 0 6 4 181 0 7 4 185 0 8 3 230 0 9 4 189 0 10 4 193 0 11 4 197 0 12 3 230 0 13 3 230 0 14 4 201 0 15 4 205 0 16 4 209 0 17 3 230 0 18 4 217 0 19 4 221 0 20 3 230 0 21 3 230 0 22 4 225 0 23 3 230 0 24 3 230 0 25 0 195 0 28 4 233 0 29 4 237 0 31 3 230 0 33 3 230 0 34 3 230 0 46 3 230 0 48 3 230 0 49 3 230 0 52 3 230 0 53 3 230 0 54 3 230 0 55 4 241 0 56 3 230 0 58 3 230 0 59 3 230 0 61 3 230 0 62 3 230 0 63 3 230 0 65 3 230 0 66 3 230 0 67 3 230 0 68 4 245 0 71 3 230 0 72 4 249 0 74 3 230 0 76 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 82 4 253 0 84 3 230 0 87 3 230 0 88 3 230 0 89 3 230 0 90 3 230 0 91 3 230 0 92 3 230 0 93 3 230 0 95 3 230 0 96 3 230 0 98 3 230 0 100 3 230 0 101 3 230 0 102 3 230 0 106 3 230 0 107 3 230 0 108 5 1 0 109 3 230 0 110 3 230 0 115 3 230 0 116 3 230 0 117 3 230 0 118 3 230 0 119 3 230 0 120 3 230 0 121 3 230 0 122 3 230 0 123 3 230 0 125 5 5 0 237 5 9 0 239 5 13 0 241 3 230 1 42] 
#[1 4 169 0 1 0 199 0 3 4 177 0 5 3 234 0 6 4 181 0 7 4 185 0 8 3 234 0 9 4 189 0 10 4 193 0 11 4 197 0 12 3 234 0 13 3 234 0 14 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 3 234 0 21 3 234 0 22 4 225 0 23 3 234 0 24 3 234 0 25 0 203 0 28 4 233 0 29 4 237 0 31 3 234 0 33 3 234 0 34 3 234 0 46 3 234 0 48 3 234 0 49 3 234 0 52 3 234 0 53 3 234 0 54 3 234 0 55 4 241 0 56 3 234 0 58 3 234 0 59 3 234 0 61 3 234 0 62 3 234 0 63 3 234 0 65 3 234 0 66 3 234 0 67 3 234 0 68 4 245 0 71 3 234 0 72 4 249 0 74 3 234 0 76 3 234 0 78 3 234 0 79 3 234 0 81 3 234 0 82 4 253 0 84 3 234 0 87 3 234 0 88 3 234 0 89 3 234 0 90 3 234 0 91 3 234 0 92 3 234 0 93 3 234 0 95 3 234 0 96 3 234 0 98 3 234 0 100 3 234 0 101 3 234 0 102 3 234 0 106 3 234 0 107 3 234 0 108 5 1 0 109 3 234 0 110 3 234 0 115 3 234 0 116 3 234 0 117 3 234 0 118 3 234 0 119 3 234 0 120 3 234 0 121 3 234 0 122 3 234 0 123 3 234 0 125 5 5 0 237 5 9 0 239 5 13 0 241 3 234 1 42] 
#[1 4 169 0 1 0 207 0 3 4 177 0 5 3 238 0 6 4 181 0 7 4 185 0 8 3 238 0 9 4 189 0 10 4 193 0 11 4 197 0 12 3 238 0 13 3 238 0 14 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 3 238 0 21 3 238 0 22 4 225 0 23 3 238 0 24 3 238 0 25 0 211 0 28 4 233 0 29 4 237 0 31 3 238 0 33 3 238 0 34 3 238 0 46 3 238 0 48 3 238 0 49 3 238 0 52 3 238 0 53 3 238 0 54 3 238 0 55 4 241 0 56 3 238 0 58 3 238 0 59 3 238 0 61 3 238 0 62 3 238 0 63 3 238 0 65 3 238 0 66 3 238 0 67 3 238 0 68 4 245 0 71 3 238 0 72 4 249 0 74 3 238 0 76 3 238 0 78 3 238 0 79 3 238 0 81 3 238 0 82 4 253 0 84 3 238 0 87 3 238 0 88 3 238 0 89 3 238 0 90 3 238 0 91 3 238 0 92 3 238 0 93 3 238 0 95 3 238 0 96 3 238 0 98 3 238 0 100 3 238 0 101 3 238 0 102 3 238 0 106 3 238 0 107 3 238 0 108 5 1 0 109 3 238 0 110 3 238 0 115 3 238 0 116 3 238 0 117 3 238 0 118 3 238 0 119 3 238 0 120 3 238 0 121 3 238 0 122 3 238 0 123 3 238 0 125 5 5 0 237 5 9 0 239 5 13 0 241 3 238 1 42] 
#[1 4 169 0 1 0 215 0 3 4 177 0 5 3 242 0 6 4 181 0 7 4 185 0 8 3 242 0 9 4 189 0 10 4 193 0 11 4 197 0 12 3 242 0 13 3 242 0 14 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 3 242 0 21 3 242 0 22 4 225 0 23 3 242 0 24 3 242 0 25 0 219 0 28 4 233 0 29 4 237 0 31 3 242 0 33 3 242 0 34 3 242 0 46 3 242 0 48 3 242 0 49 3 242 0 52 3 242 0 53 3 242 0 54 3 242 0 55 4 241 0 56 3 242 0 58 3 242 0 59 3 242 0 61 3 242 0 62 3 242 0 63 3 242 0 65 3 242 0 66 3 242 0 67 3 242 0 68 4 245 0 71 3 242 0 72 4 249 0 74 3 242 0 76 3 242 0 78 3 242 0 79 3 242 0 81 3 242 0 82 4 253 0 84 3 242 0 87 3 242 0 88 3 242 0 89 3 242 0 90 3 242 0 91 3 242 0 92 3 242 0 93 3 242 0 95 3 242 0 96 3 242 0 98 3 242 0 100 3 242 0 101 3 242 0 102 3 242 0 106 3 242 0 107 3 242 0 108 5 1 0 109 3 242 0 110 3 242 0 115 3 242 0 116 3 242 0 117 3 242 0 118 3 242 0 119 3 242 0 120 3 242 0 121 3 242 0 122 3 242 0 123 3 242 0 125 5 5 0 237 5 9 0 239 5 13 0 241 3 242 1 42] 
#[0 3 246 0 11 0 122 0 123 0 125] 
#[0 3 250 0 54 0 125] 
#[1 2 173 0 120 8 129 0 138] 
#[1 1 193 0 32 8 133 0 165 8 133 0 168 8 133 0 169] 
#[1 2 173 0 120 8 137 0 138] 
#[0 3 254 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 8 141 0 132 8 141 0 133 8 141 0 134 8 141 0 135 8 141 0 136 8 141 0 137 8 141 0 138 8 141 0 139 8 141 0 140] 
#[1 4 2 0 6 4 2 0 9 8 145 0 167] 
#[0 4 6 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 8 149 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 8 149 0 132 8 149 0 133 8 149 0 134 8 149 0 135 8 149 0 136 8 149 0 137 8 149 0 138 8 149 0 139 8 149 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 8 149 0 211 8 149 0 212 8 149 0 213 8 149 0 217 8 149 0 218 8 149 0 219 8 149 0 220 8 149 0 221 8 149 0 228 8 149 0 229 8 149 0 230 8 149 0 231 8 149 0 232 8 149 0 233 8 149 0 234 8 149 0 235 8 149 0 236 8 149 0 238 8 149 0 240 8 149 0 242 8 149 0 243 8 149 0 244 8 149 0 245 8 149 0 246 8 149 0 247 8 149 0 248 8 149 1 36 8 149 1 37 8 149 1 38 8 149 1 39 8 149 1 40 8 149 1 41] 
#[1 2 74 0 6 2 74 0 9 1 165 0 11 5 81 0 18 1 193 0 32 8 153 0 165 8 153 0 168 8 153 0 169 5 89 0 185 8 157 0 186] 
#[1 2 74 0 6 2 74 0 9 5 81 0 18 5 89 0 185 8 161 0 186] 
#[0 4 10 0 6 0 9] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 8 165 0 143 8 165 0 144 8 165 0 145 8 165 0 146 8 165 0 147] 
#[1 2 74 0 6 2 74 0 9 1 165 0 11 5 81 0 18 1 193 0 32 8 169 0 165 8 169 0 168 8 169 0 169 5 89 0 185 8 173 0 186] 
#[1 2 74 0 6 2 74 0 9 5 81 0 18 5 89 0 185 8 177 0 186] 
#[0 4 14 0 6 0 9] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 18 0 6 4 181 0 7 4 185 0 8 4 18 0 9 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 225 0 23 4 229 0 28 4 233 0 29 4 237 0 31 4 241 0 56 4 245 0 71 4 249 0 74 4 253 0 84 5 1 0 109 5 5 0 237 5 9 0 239 5 13 0 241] 
#[0 4 22 0 6 0 9] 
#[1 2 74 0 6 2 74 0 9 1 165 0 11 5 81 0 18 1 193 0 32 8 181 0 165 8 181 0 168 8 181 0 169 5 89 0 185 8 185 0 186] 
#[1 2 74 0 6 2 74 0 9 5 81 0 18 5 89 0 185 8 189 0 186] 
#[0 4 26 0 6 0 9] 
#[0 4 30 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 32 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 0 205 0 11 3 193 0 37 3 213 0 39 3 201 0 83 3 205 0 85 0 209 0 122 0 213 0 123 3 209 0 143 3 209 0 144 3 209 0 145 3 209 0 146 3 209 0 147 3 213 0 180 8 193 0 184] 
#[0 4 34 0 6 0 9] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 8 197 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 4 109 0 132 4 109 0 133 4 109 0 134 4 109 0 135 4 109 0 136 4 109 0 137 4 109 0 138 4 109 0 139 4 109 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 8 197 0 211 4 109 0 212 4 109 0 213 8 197 0 217 8 197 0 218 8 197 0 219 8 197 0 220 8 197 0 221 8 197 0 228 8 197 0 229 8 197 0 230 8 197 0 231 8 197 0 232 8 197 0 233 8 197 0 234 8 197 0 235 8 197 0 236 8 197 0 238 8 197 0 240 8 197 0 242 8 197 0 243 8 197 0 244 8 197 0 245 8 197 0 246 8 197 0 247 8 197 0 248 4 109 1 36 4 109 1 37 4 109 1 38 4 109 1 39 4 109 1 40 4 109 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 8 201 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 4 109 0 132 4 109 0 133 4 109 0 134 4 109 0 135 4 109 0 136 4 109 0 137 4 109 0 138 4 109 0 139 4 109 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 8 201 0 211 4 109 0 212 4 109 0 213 8 201 0 217 8 201 0 218 8 201 0 219 8 201 0 220 8 201 0 221 8 201 0 228 8 201 0 229 8 201 0 230 8 201 0 231 8 201 0 232 8 201 0 233 8 201 0 234 8 201 0 235 8 201 0 236 8 201 0 238 8 201 0 240 8 201 0 242 8 201 0 243 8 201 0 244 8 201 0 245 8 201 0 246 8 201 0 247 8 201 0 248 4 109 1 36 4 109 1 37 4 109 1 38 4 109 1 39 4 109 1 40 4 109 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 0 6 0 76 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 8 205 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 8 209 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 205 0 11 0 209 0 122 0 213 0 123 8 213 0 143 8 213 0 144 8 213 0 145 8 213 0 146 8 213 0 147] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 8 217 0 18 4 217 0 19 4 221 0 20 4 225 0 23 4 229 0 28 4 233 0 29 4 237 0 31 4 241 0 56 4 245 0 71 4 249 0 74 4 253 0 84 5 1 0 109 5 5 0 237 5 9 0 239 5 13 0 241] 
#[0 4 38 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 4 42 0 5 4 42 0 8 4 42 0 10 1 165 0 11 4 42 0 21 4 42 0 22 4 42 0 24 4 42 0 25 4 42 0 33 4 42 0 48 4 42 0 49 4 42 0 52 4 42 0 53 4 42 0 54 4 42 0 55 4 42 0 58 4 42 0 59 4 42 0 61 4 42 0 62 4 42 0 65 4 42 0 66 4 42 0 67 4 42 0 68 4 42 0 72 4 42 0 76 4 42 0 78 4 42 0 79 4 42 0 81 4 42 0 87 4 42 0 89 4 42 0 90 4 42 0 91 4 42 0 92 4 42 0 93 4 42 0 95 4 42 0 102 4 42 0 106 4 42 0 107 4 42 0 108 4 42 0 110 4 42 0 115 4 42 0 116 4 42 0 117 4 42 0 118 4 42 0 119 4 42 0 120 4 42 0 121 4 42 0 122 4 42 0 123 4 42 0 125] 
#[0 4 46 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 4 50 0 5 4 50 0 8 4 50 0 10 1 165 0 11 4 50 0 21 4 50 0 22 4 50 0 24 4 50 0 25 4 50 0 33 4 50 0 48 4 50 0 49 4 50 0 52 4 50 0 53 4 50 0 54 4 50 0 55 4 50 0 58 4 50 0 59 4 50 0 61 4 50 0 62 4 50 0 65 4 50 0 66 4 50 0 67 4 50 0 68 4 50 0 72 4 50 0 76 4 50 0 78 4 50 0 79 4 50 0 81 4 50 0 87 4 50 0 89 4 50 0 90 4 50 0 91 4 50 0 92 4 50 0 93 4 50 0 95 4 50 0 102 4 50 0 106 4 50 0 107 4 50 0 108 4 50 0 110 4 50 0 115 4 50 0 116 4 50 0 117 4 50 0 118 4 50 0 119 4 50 0 120 4 50 0 121 4 50 0 122 4 50 0 123 4 50 0 125] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 225 0 23 4 229 0 28 4 233 0 29 4 237 0 31 4 241 0 56 4 245 0 71 4 249 0 74 4 253 0 84 8 221 0 100 5 1 0 109 5 5 0 237 5 9 0 239 5 13 0 241] 
#[1 5 121 0 67 8 225 0 91 8 229 1 24 8 229 1 25 8 229 1 26] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 225 0 23 4 229 0 28 4 233 0 29 4 237 0 31 4 241 0 56 5 117 0 66 5 121 0 67 4 245 0 71 4 249 0 74 4 253 0 84 5 1 0 109 5 5 0 237 5 9 0 239 5 13 0 241 8 233 1 23 8 233 1 24 8 233 1 25 8 233 1 26 8 233 1 27 8 233 1 28 8 233 1 29] 
#[0 4 54 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 4 58 0 5 4 58 0 8 4 58 0 10 1 165 0 11 4 58 0 21 4 58 0 22 4 58 0 24 4 58 0 25 4 58 0 33 4 58 0 48 4 58 0 49 4 58 0 52 4 58 0 53 4 58 0 54 4 58 0 55 4 58 0 58 4 58 0 59 4 58 0 61 4 58 0 62 4 58 0 65 4 58 0 66 4 58 0 67 4 58 0 68 4 58 0 72 4 58 0 76 4 58 0 78 4 58 0 79 4 58 0 81 4 58 0 87 4 58 0 89 4 58 0 90 4 58 0 91 4 58 0 92 4 58 0 93 4 58 0 95 4 58 0 102 4 58 0 106 4 58 0 107 4 58 0 108 4 58 0 110 4 58 0 115 4 58 0 116 4 58 0 117 4 58 0 118 4 58 0 119 4 58 0 120 4 58 0 121 4 58 0 122 4 58 0 123 4 58 0 125] 
#[1 1 118 0 1 1 118 0 3 0 231 0 5 1 118 0 7 0 231 0 8 0 231 0 10 0 231 0 11 1 118 0 12 1 118 0 15 1 118 0 16 1 118 0 17 1 118 0 18 1 118 0 19 1 118 0 20 0 6 0 21 0 6 0 22 1 118 0 23 0 6 0 24 0 6 0 25 1 118 0 28 1 118 0 29 1 118 0 31 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 1 118 0 56 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 1 118 0 71 0 6 0 72 1 118 0 74 0 6 0 79 0 6 0 81 1 118 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 106 0 6 0 107 0 6 0 108 1 118 0 109 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 8 237 0 131] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 1 165 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 54 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 8 241 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 0 235 0 21 0 239 0 22 0 243 0 24 0 247 0 25 0 251 0 33 0 255 0 48 1 3 0 49 4 62 0 52 4 62 0 53 4 62 0 54 1 7 0 55 1 11 0 58 1 15 0 59 1 19 0 61 1 23 0 62 1 27 0 65 1 31 0 66 1 35 0 67 1 39 0 68 1 43 0 72 4 62 0 76 4 62 0 78 1 47 0 79 1 51 0 81 1 55 0 87 1 59 0 89 1 63 0 90 1 67 0 91 1 71 0 92 1 75 0 93 1 79 0 95 1 83 0 102 4 62 0 106 1 87 0 107 1 91 0 108 1 95 0 110 1 99 0 115 1 103 0 116 1 107 0 117 1 111 0 118 1 115 0 119 1 119 0 120 1 123 0 121 1 127 0 122 1 131 0 123 4 62 0 125 5 177 0 132 8 249 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 8 253 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 4 66 0 52 4 66 0 53 4 66 0 54 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 4 66 0 76 4 66 0 78 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 4 66 0 92 0 6 0 93 0 6 0 95 0 6 0 102 4 66 0 106 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 1 135 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 1 135 0 125 9 1 0 131 9 5 0 159] 
#[0 9 9 0 63] 
#[0 9 13 0 54] 
#[0 9 17 0 54] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 9 21 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 9 25 0 54] 
#[0 9 29 0 54] 
#[0 9 33 0 98] 
#[0 4 70 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 9 37 0 7 4 74 0 11 4 74 0 54 4 74 0 122 4 74 0 123 4 74 0 125] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 78 0 21 4 78 0 22 4 225 0 23 4 78 0 24 4 78 0 25 4 229 0 28 4 233 0 29 4 237 0 31 4 78 0 33 4 78 0 34 4 78 0 46 4 78 0 48 4 78 0 49 4 78 0 52 4 78 0 53 4 78 0 54 4 78 0 55 4 241 0 56 4 78 0 58 4 78 0 59 4 78 0 61 4 78 0 62 4 78 0 63 4 78 0 65 4 78 0 66 4 78 0 67 4 78 0 68 4 245 0 71 4 78 0 72 4 249 0 74 4 78 0 76 4 78 0 78 4 78 0 79 4 78 0 81 4 78 0 82 4 253 0 84 4 78 0 87 4 78 0 88 4 78 0 89 4 78 0 90 4 78 0 91 4 78 0 92 4 78 0 93 4 78 0 95 4 78 0 98 4 78 0 102 4 78 0 106 4 78 0 107 4 78 0 108 5 1 0 109 4 78 0 110 4 78 0 115 4 78 0 116 4 78 0 117 4 78 0 118 4 78 0 119 4 78 0 120 4 78 0 121 4 78 0 122 4 78 0 123 4 78 0 125 5 5 0 237 5 9 0 239 5 13 0 241 4 78 1 42] 
#[1 1 217 0 5 9 41 0 30 9 45 0 181] 
#[1 1 217 0 5 9 49 0 30 9 53 0 181] 
#[0 9 57 0 55] 
#[0 9 61 0 54] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 9 65 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 9 69 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 9 73 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 9 77 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 9 81 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 9 85 0 54] 
#[0 9 89 0 102] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 9 93 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 9 97 0 131] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 1 193 0 32 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 9 101 0 131 9 105 0 165 9 105 0 168 9 105 0 169] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 9 109 0 131] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 9 113 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 9 117 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 9 121 0 54] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 9 125 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 9 129 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 9 133 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 9 137 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 9 141 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 9 145 0 54] 
#[1 1 139 0 1 1 143 0 3 1 147 0 5 4 82 0 6 1 151 0 7 1 155 0 8 4 82 0 9 1 159 0 10 1 163 0 11 1 167 0 12 4 82 0 13 4 82 0 14 1 171 0 15 1 175 0 16 1 179 0 17 1 183 0 18 1 187 0 19 1 191 0 20 4 82 0 21 4 82 0 22 1 195 0 23 4 82 0 24 4 82 0 25 1 199 0 28 1 203 0 29 1 207 0 31 4 82 0 33 4 82 0 34 4 82 0 46 4 82 0 48 4 82 0 49 4 82 0 52 4 82 0 53 4 82 0 54 4 82 0 55 1 211 0 56 4 82 0 58 4 82 0 59 4 82 0 61 4 82 0 62 4 82 0 63 4 82 0 65 4 82 0 66 4 82 0 67 4 82 0 68 1 215 0 71 4 82 0 72 1 219 0 74 4 82 0 76 4 82 0 78 4 82 0 79 4 82 0 81 4 82 0 82 1 223 0 84 4 82 0 87 4 82 0 88 4 82 0 89 4 82 0 90 4 82 0 91 4 82 0 92 4 82 0 93 4 82 0 95 4 82 0 96 4 82 0 98 4 82 0 100 4 82 0 101 4 82 0 102 4 82 0 106 4 82 0 107 4 82 0 108 1 227 0 109 4 82 0 110 4 82 0 115 4 82 0 116 4 82 0 117 4 82 0 118 4 82 0 119 4 82 0 120 4 82 0 121 4 82 0 122 4 82 0 123 4 82 0 125 5 5 0 237 5 9 0 239 5 13 0 241 4 82 1 42] 
#[0 4 86 0 10 0 112 0 114] 
#[1 9 149 0 10 9 153 0 114] 
#[1 4 169 0 1 1 231 0 3 4 177 0 5 4 90 0 6 4 181 0 7 4 185 0 8 4 90 0 9 4 189 0 10 4 193 0 11 4 197 0 12 4 90 0 13 4 90 0 14 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 90 0 21 4 90 0 22 4 225 0 23 4 90 0 24 4 90 0 25 1 235 0 28 4 233 0 29 4 237 0 31 4 90 0 33 4 90 0 34 4 90 0 46 4 90 0 48 4 90 0 49 4 90 0 52 4 90 0 53 4 90 0 54 4 90 0 55 4 241 0 56 4 90 0 58 4 90 0 59 4 90 0 61 4 90 0 62 4 90 0 63 4 90 0 65 4 90 0 66 4 90 0 67 4 90 0 68 4 245 0 71 4 90 0 72 4 249 0 74 4 90 0 76 4 90 0 78 4 90 0 79 4 90 0 81 4 90 0 82 4 253 0 84 4 90 0 87 4 90 0 88 4 90 0 89 4 90 0 90 4 90 0 91 4 90 0 92 4 90 0 93 4 90 0 95 4 90 0 96 4 90 0 98 4 90 0 100 4 90 0 101 4 90 0 102 4 90 0 106 4 90 0 107 4 90 0 108 5 1 0 109 4 90 0 110 4 90 0 115 4 90 0 116 4 90 0 117 4 90 0 118 4 90 0 119 4 90 0 120 4 90 0 121 4 90 0 122 4 90 0 123 4 90 0 125 5 5 0 237 5 9 0 239 5 13 0 241 4 90 1 42] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 9 157 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 9 157 0 132 9 157 0 133 9 157 0 134 9 157 0 135 9 157 0 136 9 157 0 137 9 157 0 138 9 157 0 139 9 157 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 9 157 0 211 9 157 0 212 9 157 0 213 9 157 0 217 9 157 0 218 9 157 0 219 9 157 0 220 9 157 0 221 9 157 0 228 9 157 0 229 9 157 0 230 9 157 0 231 9 157 0 232 9 157 0 233 9 157 0 234 9 157 0 235 9 157 0 236 9 157 0 238 9 157 0 240 9 157 0 242 9 157 0 243 9 157 0 244 9 157 0 245 9 157 0 246 9 157 0 247 9 157 0 248 9 157 1 36 9 157 1 37 9 157 1 38 9 157 1 39 9 157 1 40 9 157 1 41] 
#[1 4 169 0 1 1 239 0 3 4 177 0 5 4 94 0 6 4 181 0 7 4 185 0 8 4 94 0 9 4 189 0 10 4 193 0 11 4 197 0 12 4 94 0 13 4 94 0 14 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 94 0 21 4 94 0 22 4 225 0 23 4 94 0 24 4 94 0 25 1 243 0 28 4 233 0 29 4 237 0 31 4 94 0 33 4 94 0 34 4 94 0 46 4 94 0 48 4 94 0 49 4 94 0 52 4 94 0 53 4 94 0 54 4 94 0 55 4 241 0 56 4 94 0 58 4 94 0 59 4 94 0 61 4 94 0 62 4 94 0 63 4 94 0 65 4 94 0 66 4 94 0 67 4 94 0 68 4 245 0 71 4 94 0 72 4 249 0 74 4 94 0 76 4 94 0 78 4 94 0 79 4 94 0 81 4 94 0 82 4 253 0 84 4 94 0 87 4 94 0 88 4 94 0 89 4 94 0 90 4 94 0 91 4 94 0 92 4 94 0 93 4 94 0 95 4 94 0 96 4 94 0 98 4 94 0 100 4 94 0 101 4 94 0 102 4 94 0 106 4 94 0 107 4 94 0 108 5 1 0 109 4 94 0 110 4 94 0 115 4 94 0 116 4 94 0 117 4 94 0 118 4 94 0 119 4 94 0 120 4 94 0 121 4 94 0 122 4 94 0 123 4 94 0 125 5 5 0 237 5 9 0 239 5 13 0 241 4 94 1 42] 
#[0 4 98 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 4 102 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 37 0 39 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 4 106 0 1 4 106 0 3 4 106 0 5 4 106 0 6 4 106 0 7 4 106 0 8 8 113 0 9 4 106 0 10 4 106 0 11 4 106 0 12 4 106 0 13 1 247 0 14 4 106 0 15 4 106 0 16 4 106 0 17 4 106 0 18 4 106 0 19 4 106 0 20 4 106 0 21 4 106 0 22 4 106 0 23 4 106 0 24 4 106 0 25 4 106 0 28 4 106 0 29 4 106 0 31 4 106 0 33 4 106 0 34 4 106 0 46 4 106 0 48 4 106 0 49 4 106 0 52 4 106 0 53 4 106 0 54 4 106 0 55 4 106 0 56 4 106 0 58 4 106 0 59 4 106 0 61 4 106 0 62 4 106 0 63 4 106 0 65 4 106 0 66 4 106 0 67 4 106 0 68 4 106 0 71 4 106 0 72 4 106 0 74 4 106 0 76 4 106 0 78 4 106 0 79 4 106 0 81 4 106 0 82 4 106 0 84 4 106 0 87 4 106 0 88 4 106 0 89 4 106 0 90 4 106 0 91 4 106 0 92 4 106 0 93 4 106 0 95 4 106 0 96 4 106 0 98 4 106 0 100 4 106 0 101 4 106 0 102 4 106 0 106 4 106 0 107 4 106 0 108 4 106 0 109 4 106 0 110 4 106 0 115 4 106 0 116 4 106 0 117 4 106 0 118 4 106 0 119 4 106 0 120 4 106 0 121 4 106 0 122 4 106 0 123 4 106 0 125 8 121 0 226 4 106 1 42] 
#[1 4 110 0 1 4 110 0 3 2 113 0 5 4 110 0 6 4 110 0 7 2 117 0 8 4 110 0 9 2 121 0 10 0 205 0 11 4 110 0 12 4 110 0 13 4 110 0 14 4 110 0 15 4 110 0 16 4 110 0 17 4 110 0 18 4 110 0 19 4 110 0 20 1 251 0 21 1 255 0 22 4 110 0 23 2 3 0 24 2 7 0 25 4 110 0 28 4 110 0 29 4 110 0 31 4 110 0 33 4 110 0 34 3 193 0 37 6 229 0 39 4 110 0 46 4 110 0 48 4 110 0 49 4 110 0 52 4 110 0 53 4 110 0 54 4 110 0 55 4 110 0 56 4 110 0 58 2 11 0 59 4 110 0 61 4 110 0 62 4 110 0 63 4 110 0 65 4 110 0 66 4 110 0 67 4 110 0 68 4 110 0 71 2 15 0 72 4 110 0 74 4 110 0 76 4 110 0 78 2 19 0 79 4 110 0 81 4 110 0 82 4 110 0 84 6 225 0 85 4 110 0 87 4 110 0 88 4 110 0 89 4 110 0 90 4 110 0 91 4 110 0 92 2 23 0 93 4 110 0 95 4 110 0 96 4 110 0 98 4 110 0 100 4 110 0 101 4 110 0 102 4 110 0 106 4 110 0 107 4 110 0 108 4 110 0 109 2 27 0 110 2 31 0 115 2 35 0 116 2 39 0 117 2 43 0 118 2 47 0 119 2 51 0 120 2 55 0 121 2 59 0 122 2 63 0 123 4 110 0 125 6 233 0 132 6 233 0 133 6 233 0 134 6 233 0 135 6 233 0 136 6 233 0 137 6 233 0 138 6 233 0 139 6 233 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 6 229 0 180 6 233 0 211 6 233 0 212 6 233 0 213 6 233 0 217 6 233 0 218 6 233 0 219 6 233 0 220 6 233 0 221 9 161 0 222 6 233 0 228 6 233 0 229 6 233 0 230 6 233 0 231 6 233 0 232 6 233 0 233 6 233 0 234 6 233 0 235 6 233 0 236 6 233 0 238 6 233 0 240 6 233 0 242 6 233 0 243 6 233 0 244 6 233 0 245 6 233 0 246 6 233 0 247 6 233 0 248 6 233 1 36 6 233 1 37 6 233 1 38 6 233 1 39 6 233 1 40 6 233 1 41 4 110 1 42] 
#[1 4 114 0 1 4 114 0 3 2 113 0 5 4 114 0 6 4 114 0 7 2 117 0 8 4 114 0 9 2 121 0 10 0 205 0 11 4 114 0 12 4 114 0 13 4 114 0 14 4 114 0 15 4 114 0 16 4 114 0 17 4 114 0 18 4 114 0 19 4 114 0 20 2 67 0 21 2 71 0 22 4 114 0 23 2 75 0 24 2 79 0 25 4 114 0 28 4 114 0 29 4 114 0 31 4 114 0 33 4 114 0 34 3 193 0 37 6 229 0 39 4 114 0 46 4 114 0 48 4 114 0 49 4 114 0 52 4 114 0 53 4 114 0 54 4 114 0 55 4 114 0 56 4 114 0 58 2 83 0 59 4 114 0 61 4 114 0 62 4 114 0 63 4 114 0 65 4 114 0 66 4 114 0 67 4 114 0 68 4 114 0 71 2 87 0 72 4 114 0 74 4 114 0 76 4 114 0 78 2 91 0 79 4 114 0 81 4 114 0 82 4 114 0 84 6 225 0 85 4 114 0 87 4 114 0 88 4 114 0 89 4 114 0 90 4 114 0 91 4 114 0 92 2 95 0 93 4 114 0 95 4 114 0 96 4 114 0 98 4 114 0 100 4 114 0 101 4 114 0 102 4 114 0 106 4 114 0 107 4 114 0 108 4 114 0 109 2 99 0 110 2 103 0 115 2 107 0 116 2 111 0 117 2 115 0 118 2 119 0 119 2 123 0 120 2 127 0 121 2 131 0 122 2 135 0 123 4 114 0 125 6 233 0 132 6 233 0 133 6 233 0 134 6 233 0 135 6 233 0 136 6 233 0 137 6 233 0 138 6 233 0 139 6 233 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 6 229 0 180 6 233 0 211 6 233 0 212 6 233 0 213 6 233 0 217 6 233 0 218 6 233 0 219 6 233 0 220 6 233 0 221 9 165 0 222 6 233 0 228 6 233 0 229 6 233 0 230 6 233 0 231 6 233 0 232 6 233 0 233 6 233 0 234 6 233 0 235 6 233 0 236 6 233 0 238 6 233 0 240 6 233 0 242 6 233 0 243 6 233 0 244 6 233 0 245 6 233 0 246 6 233 0 247 6 233 0 248 6 233 1 36 6 233 1 37 6 233 1 38 6 233 1 39 6 233 1 40 6 233 1 41 4 114 1 42] 
#[0 4 118 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 4 122 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 1 217 0 5 9 169 0 181] 
#[0 4 126 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 1 217 0 5 9 173 0 181] 
#[1 4 2 0 6 4 2 0 9 9 177 0 167] 
#[1 9 181 0 6 9 185 0 9 9 189 0 166] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 225 0 23 4 229 0 28 4 233 0 29 4 237 0 31 4 130 0 54 4 241 0 56 4 245 0 71 4 249 0 74 4 253 0 84 5 1 0 109 4 130 0 122 4 130 0 123 4 130 0 125 5 5 0 237 5 9 0 239 5 13 0 241] 
#[1 2 74 0 6 2 74 0 9 5 81 0 18 5 89 0 185 9 193 0 186] 
#[0 4 134 0 6 0 9] 
#[0 4 138 0 6 0 9] 
#[1 2 74 0 6 2 74 0 9 1 165 0 11 5 81 0 18 1 193 0 32 9 197 0 165 9 197 0 168 9 197 0 169 5 89 0 185 9 201 0 186] 
#[1 2 74 0 6 2 74 0 9 5 81 0 18 5 89 0 185 9 205 0 186] 
#[0 4 142 0 6 0 9] 
#[0 4 146 0 6 0 9] 
#[1 2 74 0 6 2 74 0 9 5 81 0 18 5 89 0 185 9 209 0 186] 
#[0 4 150 0 6 0 9] 
#[0 4 154 0 6 0 9] 
#[0 4 158 0 6 0 9] 
#[1 1 118 0 1 1 118 0 3 0 231 0 5 1 118 0 7 0 231 0 8 0 231 0 10 0 231 0 11 1 118 0 12 1 118 0 15 1 118 0 16 1 118 0 17 1 118 0 18 1 118 0 19 1 118 0 20 0 6 0 21 0 6 0 22 1 118 0 23 0 6 0 24 0 6 0 25 1 118 0 28 1 118 0 29 1 118 0 31 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 1 118 0 56 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 1 118 0 71 0 6 0 72 1 118 0 74 0 6 0 79 0 6 0 81 1 118 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 1 118 0 109 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 9 213 0 131] 
#[1 1 118 0 1 1 118 0 3 0 231 0 5 1 118 0 7 0 231 0 8 0 231 0 10 0 231 0 11 1 118 0 12 1 118 0 15 1 118 0 16 1 118 0 17 1 118 0 18 1 118 0 19 1 118 0 20 0 6 0 21 0 6 0 22 1 118 0 23 0 6 0 24 0 6 0 25 1 118 0 28 1 118 0 29 1 118 0 31 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 1 118 0 56 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 1 118 0 71 0 6 0 72 1 118 0 74 0 6 0 76 0 6 0 79 0 6 0 81 1 118 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 1 118 0 109 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 9 217 0 131] 
#[1 9 221 0 76 1 37 0 117 1 173 0 125 9 225 0 133] 
#[1 0 6 0 76 0 6 0 117 0 6 0 125 9 229 0 131] 
#[1 1 165 0 11 9 233 0 69] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 9 237 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 9 237 0 132 9 237 0 133 9 237 0 134 9 237 0 135 9 237 0 136 9 237 0 137 9 237 0 138 9 237 0 139 9 237 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 9 237 0 211 9 237 0 212 9 237 0 213 9 237 0 217 9 237 0 218 9 237 0 219 9 237 0 220 9 237 0 221 9 237 0 228 9 237 0 229 9 237 0 230 9 237 0 231 9 237 0 232 9 237 0 233 9 237 0 234 9 237 0 235 9 237 0 236 9 237 0 238 9 237 0 240 9 237 0 242 9 237 0 243 9 237 0 244 9 237 0 245 9 237 0 246 9 237 0 247 9 237 0 248 9 237 1 36 9 237 1 37 9 237 1 38 9 237 1 39 9 237 1 40 9 237 1 41] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 9 241 0 13 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 52 0 6 0 53 0 6 0 54 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 9 245 0 131] 
#[0 9 249 0 78] 
#[0 4 162 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 4 166 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 0 6 0 106 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 9 253 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 10 1 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 6 0 54 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 10 5 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 10 9 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 4 170 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 1 74 0 1 1 74 0 3 1 74 0 5 1 74 0 7 1 74 0 8 1 74 0 10 1 74 0 11 1 74 0 12 1 74 0 15 1 74 0 16 1 74 0 17 1 74 0 18 1 74 0 19 1 74 0 20 1 74 0 21 1 74 0 22 1 74 0 23 1 74 0 24 1 74 0 25 1 74 0 28 1 74 0 29 1 74 0 31 1 74 0 33 1 74 0 48 1 74 0 49 1 74 0 55 1 74 0 56 1 74 0 58 1 74 0 59 1 74 0 61 1 74 0 62 1 74 0 65 1 74 0 66 1 74 0 67 1 74 0 68 1 74 0 71 1 74 0 72 1 74 0 74 1 74 0 79 1 74 0 81 1 74 0 84 1 74 0 87 1 74 0 89 1 74 0 90 1 74 0 91 2 139 0 92 1 74 0 93 1 74 0 95 1 74 0 102 1 74 0 107 1 74 0 108 1 74 0 109 1 74 0 110 1 74 0 115 1 74 0 116 1 74 0 117 1 74 0 118 1 74 0 119 1 74 0 120 1 74 0 121 1 74 0 122 1 74 0 123 1 74 0 125] 
#[1 10 17 0 92 1 37 0 117 10 21 0 133] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 10 25 0 151 10 25 0 157 5 165 0 162 10 25 0 170 10 25 0 171 10 25 0 175 10 25 0 176 10 25 0 197 10 25 0 198 10 25 0 199 10 25 0 200 10 25 0 201 10 25 0 203 10 25 0 204 10 25 0 205 10 25 0 206 10 25 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 10 25 0 249 10 25 0 250 10 25 0 251 10 25 0 252 10 25 0 253 10 25 0 254 10 25 0 255 10 25 1 0 10 25 1 1 10 25 1 2 10 25 1 3 10 25 1 4 10 25 1 5 10 25 1 6 10 25 1 7 10 25 1 8 10 25 1 16 5 249 1 17 10 25 1 18 10 25 1 19 10 25 1 20 10 25 1 21 10 25 1 22 10 25 1 23 10 25 1 24 10 25 1 25 10 25 1 26 10 25 1 27 10 25 1 28 10 25 1 29 10 25 1 30 10 25 1 31 10 25 1 32 10 25 1 33 10 25 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 4 174 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 4 178 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 10 29 0 63] 
#[0 10 33 0 88] 
#[0 10 37 0 54] 
#[0 10 41 0 88] 
#[0 10 45 0 88] 
#[0 4 182 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 1 37 0 117 10 49 0 133] 
#[1 2 173 0 120 10 53 0 138] 
#[1 1 193 0 32 10 57 0 165 10 57 0 168 10 57 0 169] 
#[1 2 173 0 120 10 61 0 138] 
#[0 4 186 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 4 190 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 10 65 0 63] 
#[0 10 69 0 54] 
#[0 10 73 0 54] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 10 77 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 10 81 0 54] 
#[0 10 85 0 54] 
#[0 10 89 0 98] 
#[0 4 194 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 10 93 0 54] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 10 97 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 10 101 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 10 105 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 10 109 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 10 113 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 10 117 0 54] 
#[0 10 121 0 63] 
#[0 10 125 0 54] 
#[0 10 129 0 54] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 10 133 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 10 137 0 54] 
#[0 10 141 0 54] 
#[0 10 145 0 98] 
#[1 8 81 0 114 10 149 0 142] 
#[0 4 198 0 10 0 112 0 114] 
#[1 4 169 0 1 2 143 0 3 4 177 0 5 4 202 0 6 4 181 0 7 4 185 0 8 4 202 0 9 4 189 0 10 4 193 0 11 4 197 0 12 4 202 0 13 4 202 0 14 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 202 0 21 4 202 0 22 4 225 0 23 4 202 0 24 4 202 0 25 2 147 0 28 4 233 0 29 4 237 0 31 4 202 0 33 4 202 0 34 4 202 0 46 4 202 0 48 4 202 0 49 4 202 0 52 4 202 0 53 4 202 0 54 4 202 0 55 4 241 0 56 4 202 0 58 4 202 0 59 4 202 0 61 4 202 0 62 4 202 0 63 4 202 0 65 4 202 0 66 4 202 0 67 4 202 0 68 4 245 0 71 4 202 0 72 4 249 0 74 4 202 0 76 4 202 0 78 4 202 0 79 4 202 0 81 4 202 0 82 4 253 0 84 4 202 0 87 4 202 0 88 4 202 0 89 4 202 0 90 4 202 0 91 4 202 0 92 4 202 0 93 4 202 0 95 4 202 0 96 4 202 0 98 4 202 0 100 4 202 0 101 4 202 0 102 4 202 0 106 4 202 0 107 4 202 0 108 5 1 0 109 4 202 0 110 4 202 0 115 4 202 0 116 4 202 0 117 4 202 0 118 4 202 0 119 4 202 0 120 4 202 0 121 4 202 0 122 4 202 0 123 4 202 0 125 5 5 0 237 5 9 0 239 5 13 0 241 4 202 1 42] 
#[0 4 206 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 4 210 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 1 193 0 32 10 153 0 165 10 153 0 168 10 153 0 169] 
#[0 4 214 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 10 157 0 6 9 185 0 9 9 189 0 166] 
#[0 4 218 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 10 161 0 132 10 161 0 133 10 161 0 134 10 161 0 135 10 161 0 136 10 161 0 137 10 161 0 138 10 161 0 139 10 161 0 140] 
#[0 4 222 0 6 0 9] 
#[0 4 226 0 6 0 9] 
#[1 2 74 0 6 2 74 0 9 5 81 0 18 5 89 0 185 10 165 0 186] 
#[0 4 230 0 6 0 9] 
#[0 4 234 0 6 0 9] 
#[0 4 238 0 6 0 9] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 10 169 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 0 6 0 76 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 10 173 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 10 177 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 4 242 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 10 181 0 76] 
#[1 10 185 0 76 1 37 0 117 1 173 0 125 10 189 0 133] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 10 193 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 10 193 0 132 10 193 0 133 10 193 0 134 10 193 0 135 10 193 0 136 10 193 0 137 10 193 0 138 10 193 0 139 10 193 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 10 193 0 211 10 193 0 212 10 193 0 213 10 193 0 217 10 193 0 218 10 193 0 219 10 193 0 220 10 193 0 221 10 193 0 228 10 193 0 229 10 193 0 230 10 193 0 231 10 193 0 232 10 193 0 233 10 193 0 234 10 193 0 235 10 193 0 236 10 193 0 238 10 193 0 240 10 193 0 242 10 193 0 243 10 193 0 244 10 193 0 245 10 193 0 246 10 193 0 247 10 193 0 248 10 193 1 36 10 193 1 37 10 193 1 38 10 193 1 39 10 193 1 40 10 193 1 41] 
#[1 4 169 0 1 0 191 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 3 230 0 18 4 217 0 19 4 221 0 20 4 225 0 23 0 195 0 28 4 233 0 29 4 237 0 31 4 241 0 56 4 245 0 71 4 249 0 74 4 253 0 84 10 197 0 101 5 1 0 109 5 5 0 237 5 9 0 239 5 13 0 241] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 10 201 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 10 201 0 132 10 201 0 133 10 201 0 134 10 201 0 135 10 201 0 136 10 201 0 137 10 201 0 138 10 201 0 139 10 201 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 10 201 0 211 10 201 0 212 10 201 0 213 10 201 0 217 10 201 0 218 10 201 0 219 10 201 0 220 10 201 0 221 10 201 0 228 10 201 0 229 10 201 0 230 10 201 0 231 10 201 0 232 10 201 0 233 10 201 0 234 10 201 0 235 10 201 0 236 10 201 0 238 10 201 0 240 10 201 0 242 10 201 0 243 10 201 0 244 10 201 0 245 10 201 0 246 10 201 0 247 10 201 0 248 10 201 1 36 10 201 1 37 10 201 1 38 10 201 1 39 10 201 1 40 10 201 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 6 0 52 0 6 0 53 0 6 0 54 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 10 205 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 10 209 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 4 246 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 10 213 0 106 1 37 0 117 1 173 0 125 10 217 0 133] 
#[1 0 6 0 106 0 6 0 117 0 6 0 125 10 221 0 131] 
#[1 10 225 0 54 1 37 0 117 1 173 0 125 10 229 0 133] 
#[1 0 6 0 54 0 6 0 117 0 6 0 125 10 233 0 131] 
#[0 4 250 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 4 254 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 10 237 0 92] 
#[0 5 2 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 5 6 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 10 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 10 241 0 88] 
#[0 5 14 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 18 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 22 0 11 0 54 0 122 0 123 0 125] 
#[1 1 217 0 5 10 245 0 181] 
#[0 5 26 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 1 217 0 5 10 249 0 181] 
#[0 5 30 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 10 253 0 63] 
#[0 11 1 0 88] 
#[0 11 5 0 54] 
#[0 11 9 0 88] 
#[0 11 13 0 88] 
#[0 5 34 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 11 17 0 63] 
#[0 11 21 0 54] 
#[0 11 25 0 54] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 1 173 0 125 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 11 29 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 11 33 0 54] 
#[0 11 37 0 54] 
#[0 11 41 0 98] 
#[0 5 38 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 11 45 0 63] 
#[0 11 49 0 88] 
#[0 11 53 0 54] 
#[0 11 57 0 88] 
#[0 11 61 0 88] 
#[0 5 42 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 11 65 0 10 9 153 0 114] 
#[0 5 46 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 50 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 25 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 98 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[0 5 54 0 6 0 9] 
#[0 5 58 0 6 0 9] 
#[1 0 6 0 76 0 6 0 117 0 6 0 125 11 69 0 131] 
#[1 11 73 0 76 1 37 0 117 1 173 0 125 11 77 0 133] 
#[1 0 6 0 76 0 6 0 117 0 6 0 125 11 81 0 131] 
#[0 5 62 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 5 66 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 11 85 0 76] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 0 6 0 21 0 6 0 22 4 225 0 23 0 6 0 24 0 6 0 25 4 229 0 28 4 233 0 29 4 237 0 31 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 4 241 0 56 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 4 245 0 71 0 6 0 72 4 249 0 74 0 6 0 78 0 6 0 79 0 6 0 81 4 253 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 5 1 0 109 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 11 89 0 131 5 5 0 237 5 9 0 239 5 13 0 241] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 11 93 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 11 93 0 132 11 93 0 133 11 93 0 134 11 93 0 135 11 93 0 136 11 93 0 137 11 93 0 138 11 93 0 139 11 93 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 11 93 0 211 11 93 0 212 11 93 0 213 11 93 0 217 11 93 0 218 11 93 0 219 11 93 0 220 11 93 0 221 11 93 0 228 11 93 0 229 11 93 0 230 11 93 0 231 11 93 0 232 11 93 0 233 11 93 0 234 11 93 0 235 11 93 0 236 11 93 0 238 11 93 0 240 11 93 0 242 11 93 0 243 11 93 0 244 11 93 0 245 11 93 0 246 11 93 0 247 11 93 0 248 11 93 1 36 11 93 1 37 11 93 1 38 11 93 1 39 11 93 1 40 11 93 1 41] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 5 70 0 21 5 70 0 22 4 225 0 23 5 70 0 24 5 70 0 25 4 229 0 28 4 233 0 29 4 237 0 31 5 70 0 33 5 70 0 48 5 70 0 49 5 70 0 52 5 70 0 53 5 70 0 54 5 70 0 55 4 241 0 56 5 70 0 58 5 70 0 59 5 70 0 61 5 70 0 62 5 70 0 65 5 70 0 66 5 70 0 67 5 70 0 68 4 245 0 71 5 70 0 72 4 249 0 74 5 70 0 76 5 70 0 78 5 70 0 79 5 70 0 81 4 253 0 84 5 70 0 87 5 70 0 89 5 70 0 90 5 70 0 91 5 70 0 92 5 70 0 93 5 70 0 95 5 70 0 102 5 70 0 106 5 70 0 107 5 70 0 108 5 1 0 109 5 70 0 110 5 70 0 115 5 70 0 116 5 70 0 117 5 70 0 118 5 70 0 119 5 70 0 120 5 70 0 121 5 70 0 122 5 70 0 123 5 70 0 125 5 5 0 237 5 9 0 239 5 13 0 241] 
#[1 11 97 0 52 11 101 0 53 11 105 0 54 1 37 0 117 1 173 0 125 11 109 0 133 11 113 1 9 11 117 1 10 11 113 1 11 11 113 1 12 11 113 1 13] 
#[1 0 6 0 52 0 6 0 53 0 6 0 54 0 6 0 117 0 6 0 125 11 133 0 131] 
#[0 5 74 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 11 137 0 106] 
#[1 11 141 0 106 1 37 0 117 1 173 0 125 11 145 0 133] 
#[0 11 149 0 108] 
#[0 11 153 0 54] 
#[1 11 157 0 54 1 37 0 117 1 173 0 125 11 161 0 133] 
#[0 5 78 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 5 82 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 1 193 0 32 11 165 0 165 11 165 0 168 11 165 0 169] 
#[0 5 86 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 90 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 94 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 11 169 0 88] 
#[0 5 98 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 102 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 106 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 11 173 0 63] 
#[0 11 177 0 88] 
#[0 11 181 0 54] 
#[0 11 185 0 88] 
#[0 11 189 0 88] 
#[0 5 110 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 114 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 118 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 11 193 0 88] 
#[0 5 122 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 126 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 8 81 0 114 11 197 0 142] 
#[1 11 201 0 76 1 37 0 117 1 173 0 125 11 205 0 133] 
#[0 5 130 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 11 209 0 76] 
#[1 11 213 0 76 1 37 0 117 1 173 0 125 11 217 0 133] 
#[0 5 134 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 0 6 0 78 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 11 221 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 11 225 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 0 6 0 21 0 6 0 22 4 225 0 23 0 6 0 24 0 6 0 25 4 229 0 28 4 233 0 29 4 237 0 31 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 4 241 0 56 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 4 245 0 71 0 6 0 72 4 249 0 74 0 6 0 78 0 6 0 79 0 6 0 81 4 253 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 11 229 0 96 0 6 0 102 0 6 0 107 0 6 0 108 5 1 0 109 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 11 233 0 131 5 5 0 237 5 9 0 239 5 13 0 241] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 54 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 11 237 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 11 241 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 11 241 0 132 11 241 0 133 11 241 0 134 11 241 0 135 11 241 0 136 11 241 0 137 11 241 0 138 11 241 0 139 11 241 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 11 241 0 211 11 241 0 212 11 241 0 213 11 241 0 217 11 241 0 218 11 241 0 219 11 241 0 220 11 241 0 221 11 241 0 228 11 241 0 229 11 241 0 230 11 241 0 231 11 241 0 232 11 241 0 233 11 241 0 234 11 241 0 235 11 241 0 236 11 241 0 238 11 241 0 240 11 241 0 242 11 241 0 243 11 241 0 244 11 241 0 245 11 241 0 246 11 241 0 247 11 241 0 248 11 241 1 36 11 241 1 37 11 241 1 38 11 241 1 39 11 241 1 40 11 241 1 41] 
#[0 11 245 0 68] 
#[1 11 249 0 52 11 253 0 54] 
#[0 5 138 0 52 0 53] 
#[1 12 1 0 52 11 101 0 53 12 5 1 9 12 5 1 11 12 5 1 12 12 5 1 13] 
#[0 5 142 0 52 0 53] 
#[0 5 146 0 52 0 53] 
#[0 5 150 0 52 0 53] 
#[1 12 9 0 52 11 101 0 53 12 13 0 54 1 37 0 117 1 173 0 125 12 17 0 133 11 113 1 9 12 21 1 10 11 113 1 11 11 113 1 12 11 113 1 13] 
#[0 5 154 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 5 158 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 12 25 0 106] 
#[0 5 162 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 12 29 0 108] 
#[0 12 33 0 108] 
#[0 12 37 0 54] 
#[0 5 166 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 170 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 174 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 178 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 12 41 0 88] 
#[0 5 182 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 186 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[0 5 190 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 12 45 0 10 9 153 0 114] 
#[0 5 194 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 12 49 0 76] 
#[0 5 198 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 5 202 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 12 53 0 76] 
#[1 12 57 0 78 1 37 0 117 1 173 0 125 12 61 0 133] 
#[1 0 6 0 78 0 6 0 117 0 6 0 125 12 65 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 2 141 0 59 12 69 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 12 69 0 132 12 69 0 133 12 69 0 134 12 69 0 135 12 69 0 136 12 69 0 137 12 69 0 138 12 69 0 139 12 69 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 12 69 0 211 12 69 0 212 12 69 0 213 12 69 0 217 12 69 0 218 12 69 0 219 12 69 0 220 12 69 0 221 12 69 0 228 12 69 0 229 12 69 0 230 12 69 0 231 12 69 0 232 12 69 0 233 12 69 0 234 12 69 0 235 12 69 0 236 12 69 0 238 12 69 0 240 12 69 0 242 12 69 0 243 12 69 0 244 12 69 0 245 12 69 0 246 12 69 0 247 12 69 0 248 12 69 1 36 12 69 1 37 12 69 1 38 12 69 1 39 12 69 1 40 12 69 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 0 6 0 78 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 12 73 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 12 77 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 6 0 54 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 12 81 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 12 85 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 225 0 23 4 229 0 28 4 233 0 29 4 237 0 31 4 241 0 56 4 245 0 71 4 249 0 74 4 253 0 84 12 89 0 100 5 1 0 109 5 5 0 237 5 9 0 239 5 13 0 241] 
#[0 5 206 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 54 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 12 93 0 131] 
#[0 12 97 0 68] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 54 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 12 101 0 131] 
#[0 5 210 0 52 0 53] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 54 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 12 105 0 131] 
#[0 12 109 0 68] 
#[1 12 113 0 52 12 117 0 54] 
#[1 12 121 0 52 11 101 0 53 12 5 1 9 12 5 1 11 12 5 1 12 12 5 1 13] 
#[0 5 214 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 5 218 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 5 222 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 12 125 0 108] 
#[0 5 226 0 33 0 34 0 46 0 48 0 55 0 58 0 62 0 63 0 65 0 82 0 87 0 88 0 89 0 90 0 95 0 98 0 102 0 125 1 42] 
#[1 8 81 0 114 12 129 0 142] 
#[0 5 230 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 5 234 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 5 238 0 5 5 238 0 8 5 238 0 10 0 205 0 11 5 238 0 21 5 238 0 22 5 238 0 24 5 238 0 25 5 238 0 33 5 238 0 48 5 238 0 49 5 238 0 52 5 238 0 53 5 238 0 54 5 238 0 55 5 238 0 58 5 238 0 59 5 238 0 61 5 238 0 62 5 238 0 65 5 238 0 66 5 238 0 67 5 238 0 68 5 238 0 72 5 238 0 76 5 238 0 78 5 238 0 79 5 238 0 81 5 238 0 87 5 238 0 89 5 238 0 90 5 238 0 91 5 238 0 92 5 238 0 93 5 238 0 95 5 238 0 102 5 238 0 106 5 238 0 107 5 238 0 108 5 238 0 110 5 238 0 115 5 238 0 116 5 238 0 117 5 238 0 118 5 238 0 119 5 238 0 120 5 238 0 121 2 151 0 122 2 155 0 123 5 238 0 125 12 133 0 143 12 133 0 144 12 133 0 145 12 133 0 146 12 133 0 147] 
#[0 12 137 0 78] 
#[1 12 141 0 78 1 37 0 117 1 173 0 125 12 145 0 133] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 0 6 0 21 0 6 0 22 4 225 0 23 0 6 0 24 0 6 0 25 4 229 0 28 4 233 0 29 4 237 0 31 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 55 4 241 0 56 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 4 245 0 71 0 6 0 72 4 249 0 74 0 6 0 78 0 6 0 79 0 6 0 81 4 253 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 5 1 0 109 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 12 149 0 131 5 5 0 237 5 9 0 239 5 13 0 241] 
#[1 12 153 0 78 1 37 0 117 1 173 0 125 12 157 0 133] 
#[1 0 6 0 78 0 6 0 117 0 6 0 125 12 161 0 131] 
#[1 12 165 0 54 1 37 0 117 1 173 0 125 12 169 0 133] 
#[1 0 6 0 54 0 6 0 117 0 6 0 125 12 173 0 131] 
#[1 2 159 0 5 2 159 0 8 2 159 0 10 2 159 0 11 5 242 0 13 2 159 0 21 2 159 0 22 2 159 0 24 2 159 0 25 0 6 0 33 0 6 0 48 0 6 0 49 2 159 0 52 2 159 0 53 0 6 0 55 0 6 0 58 2 159 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 2 159 0 72 2 159 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 2 159 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 2 159 0 110 2 159 0 115 2 159 0 116 2 159 0 117 2 159 0 118 2 159 0 119 2 159 0 120 2 159 0 121 2 159 0 122 2 159 0 123 0 6 0 125 12 177 0 131 12 181 1 15] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 6 0 54 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 12 185 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 12 189 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 5 246 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 6 0 54 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 12 193 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 12 197 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 6 0 54 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 12 201 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 12 205 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 5 250 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 54 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 12 209 0 131] 
#[0 12 213 0 68] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 33 0 6 0 48 0 6 0 49 0 6 0 54 0 6 0 55 0 6 0 58 0 6 0 59 0 6 0 61 0 6 0 62 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 95 0 6 0 102 0 6 0 107 0 6 0 108 0 6 0 110 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 12 217 0 131] 
#[0 5 254 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 12 221 0 112 9 153 0 114] 
#[1 6 2 0 5 6 2 0 8 6 2 0 10 1 165 0 11 6 2 0 21 6 2 0 22 6 2 0 24 6 2 0 25 6 2 0 33 6 2 0 48 6 2 0 49 6 2 0 52 6 2 0 53 6 2 0 54 6 2 0 55 6 2 0 58 6 2 0 59 6 2 0 61 6 2 0 62 6 2 0 65 6 2 0 66 6 2 0 67 6 2 0 68 6 2 0 72 6 2 0 76 6 2 0 78 6 2 0 79 6 2 0 81 6 2 0 87 6 2 0 89 6 2 0 90 6 2 0 91 6 2 0 92 6 2 0 93 6 2 0 95 6 2 0 102 6 2 0 106 6 2 0 107 6 2 0 108 6 2 0 110 6 2 0 115 6 2 0 116 6 2 0 117 6 2 0 118 6 2 0 119 6 2 0 120 6 2 0 121 6 2 0 122 6 2 0 123 6 2 0 125] 
#[1 6 6 0 5 6 6 0 8 6 6 0 10 0 205 0 11 6 6 0 21 6 6 0 22 6 6 0 24 6 6 0 25 6 6 0 33 6 6 0 48 6 6 0 49 6 6 0 52 6 6 0 53 6 6 0 54 6 6 0 55 6 6 0 58 6 6 0 59 6 6 0 61 6 6 0 62 6 6 0 65 6 6 0 66 6 6 0 67 6 6 0 68 6 6 0 72 6 6 0 76 6 6 0 78 6 6 0 79 6 6 0 81 6 6 0 87 6 6 0 89 6 6 0 90 6 6 0 91 6 6 0 92 6 6 0 93 6 6 0 95 6 6 0 102 6 6 0 106 6 6 0 107 6 6 0 108 6 6 0 110 6 6 0 115 6 6 0 116 6 6 0 117 6 6 0 118 6 6 0 119 6 6 0 120 6 6 0 121 2 163 0 122 2 167 0 123 6 6 0 125 12 225 0 143 12 225 0 144 12 225 0 145 12 225 0 146 12 225 0 147] 
#[1 6 10 0 5 6 10 0 8 6 10 0 10 0 205 0 11 6 10 0 21 6 10 0 22 6 10 0 24 6 10 0 25 6 10 0 33 6 10 0 48 6 10 0 49 6 10 0 52 6 10 0 53 6 10 0 54 6 10 0 55 6 10 0 58 6 10 0 59 6 10 0 61 6 10 0 62 6 10 0 65 6 10 0 66 6 10 0 67 6 10 0 68 6 10 0 72 6 10 0 76 6 10 0 78 6 10 0 79 6 10 0 81 6 10 0 87 6 10 0 89 6 10 0 90 6 10 0 91 6 10 0 92 6 10 0 93 6 10 0 95 6 10 0 102 6 10 0 106 6 10 0 107 6 10 0 108 6 10 0 110 6 10 0 115 6 10 0 116 6 10 0 117 6 10 0 118 6 10 0 119 6 10 0 120 6 10 0 121 2 171 0 122 2 175 0 123 6 10 0 125 12 229 0 143 12 229 0 144 12 229 0 145 12 229 0 146 12 229 0 147] 
#[0 12 233 0 78] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 0 6 0 78 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 12 237 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 12 241 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 6 14 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 12 245 0 78] 
#[1 12 249 0 78 1 37 0 117 1 173 0 125 12 253 0 133] 
#[0 13 1 0 68] 
#[0 13 5 0 54] 
#[1 13 9 0 54 1 37 0 117 1 173 0 125 13 13 0 133] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 6 0 52 0 6 0 53 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 13 17 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 13 21 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 13 25 0 13 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 6 18 0 52 6 18 0 53 2 141 0 59 13 29 0 72 2 149 0 79 2 153 0 93 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 13 29 0 132 13 29 0 133 13 29 0 134 13 29 0 135 13 29 0 136 13 29 0 137 13 29 0 138 13 29 0 139 13 29 0 140 2 217 0 143 2 217 0 144 2 217 0 145 2 217 0 146 2 217 0 147 13 29 0 211 13 29 0 212 13 29 0 213 13 29 0 217 13 29 0 218 13 29 0 219 13 29 0 220 13 29 0 221 13 29 0 228 13 29 0 229 13 29 0 230 13 29 0 231 13 29 0 232 13 29 0 233 13 29 0 234 13 29 0 235 13 29 0 236 13 29 0 238 13 29 0 240 13 29 0 242 13 29 0 243 13 29 0 244 13 29 0 245 13 29 0 246 13 29 0 247 13 29 0 248 13 33 1 14 13 29 1 36 13 29 1 37 13 29 1 38 13 29 1 39 13 29 1 40 13 29 1 41] 
#[1 13 37 0 54 1 37 0 117 1 173 0 125 13 41 0 133] 
#[1 0 6 0 54 0 6 0 117 0 6 0 125 13 45 0 131] 
#[1 13 49 0 54 1 173 0 125] 
#[1 0 6 0 54 0 6 0 125 13 53 0 131] 
#[1 13 57 0 54 1 37 0 117 1 173 0 125 13 61 0 133] 
#[1 0 6 0 54 0 6 0 117 0 6 0 125 13 65 0 131] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 6 0 54 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 0 223 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 13 69 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 13 73 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 6 22 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[1 2 113 0 5 2 117 0 8 2 121 0 10 0 205 0 11 2 125 0 21 2 129 0 22 2 133 0 24 2 137 0 25 0 9 0 33 0 21 0 48 5 109 0 49 0 6 0 54 0 25 0 55 0 29 0 58 2 141 0 59 5 113 0 61 5 165 0 62 5 165 0 65 5 117 0 66 5 121 0 67 5 125 0 68 5 177 0 72 2 149 0 79 5 129 0 81 5 165 0 87 5 165 0 89 0 61 0 90 5 133 0 91 2 153 0 93 5 137 0 95 0 73 0 102 5 141 0 107 5 145 0 108 2 157 0 110 2 161 0 115 2 165 0 116 1 37 0 117 1 85 0 118 2 169 0 119 2 173 0 120 2 177 0 121 0 209 0 122 0 213 0 123 0 227 0 125 13 77 0 131 5 177 0 132 5 177 0 133 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 149 0 143 5 149 0 144 5 149 0 145 5 149 0 146 5 149 0 147 5 157 0 151 5 157 0 157 13 81 0 158 5 165 0 162 5 157 0 170 5 157 0 171 5 157 0 175 5 157 0 176 5 157 0 197 5 157 0 198 5 157 0 199 5 157 0 200 5 157 0 201 5 157 0 203 5 157 0 204 5 157 0 205 5 157 0 206 5 157 0 210 5 177 0 211 5 177 0 212 5 177 0 213 5 177 0 217 5 177 0 218 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 228 5 177 0 229 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 243 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 157 0 249 5 157 0 250 5 157 0 251 5 157 0 252 5 157 0 253 5 157 0 254 5 157 0 255 5 157 1 0 5 157 1 1 5 157 1 2 5 157 1 3 5 157 1 4 5 157 1 5 5 157 1 6 5 157 1 7 5 157 1 8 5 157 1 16 5 249 1 17 5 157 1 18 5 157 1 19 5 157 1 20 5 157 1 21 5 157 1 22 5 157 1 23 5 157 1 24 5 157 1 25 5 157 1 26 5 157 1 27 5 157 1 28 5 157 1 29 5 157 1 30 5 157 1 31 5 157 1 32 5 157 1 33 5 157 1 35 6 65 1 36 6 65 1 37 6 65 1 38 6 65 1 39 6 65 1 40 6 65 1 41] 
#[0 6 26 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 28 0 29 0 31 0 33 0 34 0 46 0 48 0 49 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 61 0 62 0 63 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 95 0 96 0 98 0 100 0 101 0 102 0 106 0 107 0 108 0 109 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125 1 42] 
#[1 6 30 0 5 6 30 0 8 6 30 0 10 1 165 0 11 6 30 0 21 6 30 0 22 6 30 0 24 6 30 0 25 6 30 0 33 6 30 0 48 6 30 0 49 6 30 0 52 6 30 0 53 6 30 0 54 6 30 0 55 6 30 0 58 6 30 0 59 6 30 0 61 6 30 0 62 6 30 0 65 6 30 0 66 6 30 0 67 6 30 0 68 6 30 0 72 6 30 0 76 6 30 0 78 6 30 0 79 6 30 0 81 6 30 0 87 6 30 0 89 6 30 0 90 6 30 0 91 6 30 0 92 6 30 0 93 6 30 0 95 6 30 0 102 6 30 0 106 6 30 0 107 6 30 0 108 6 30 0 110 6 30 0 115 6 30 0 116 6 30 0 117 6 30 0 118 6 30 0 119 6 30 0 120 6 30 0 121 6 30 0 122 6 30 0 123 6 30 0 125] 
#[1 6 34 0 5 6 34 0 8 6 34 0 10 1 165 0 11 6 34 0 21 6 34 0 22 6 34 0 24 6 34 0 25 6 34 0 33 6 34 0 48 6 34 0 49 6 34 0 52 6 34 0 53 6 34 0 54 6 34 0 55 6 34 0 58 6 34 0 59 6 34 0 61 6 34 0 62 6 34 0 65 6 34 0 66 6 34 0 67 6 34 0 68 6 34 0 72 6 34 0 76 6 34 0 78 6 34 0 79 6 34 0 81 6 34 0 87 6 34 0 89 6 34 0 90 6 34 0 91 6 34 0 92 6 34 0 93 6 34 0 95 6 34 0 102 6 34 0 106 6 34 0 107 6 34 0 108 6 34 0 110 6 34 0 115 6 34 0 116 6 34 0 117 6 34 0 118 6 34 0 119 6 34 0 120 6 34 0 121 6 34 0 122 6 34 0 123 6 34 0 125] 
#[1 6 38 0 5 6 38 0 8 6 38 0 10 0 205 0 11 6 38 0 21 6 38 0 22 6 38 0 24 6 38 0 25 6 38 0 33 6 38 0 48 6 38 0 49 6 38 0 52 6 38 0 53 6 38 0 54 6 38 0 55 6 38 0 58 6 38 0 59 6 38 0 61 6 38 0 62 6 38 0 65 6 38 0 66 6 38 0 67 6 38 0 68 6 38 0 72 6 38 0 76 6 38 0 78 6 38 0 79 6 38 0 81 6 38 0 87 6 38 0 89 6 38 0 90 6 38 0 91 6 38 0 92 6 38 0 93 6 38 0 95 6 38 0 102 6 38 0 106 6 38 0 107 6 38 0 108 6 38 0 110 6 38 0 115 6 38 0 116 6 38 0 117 6 38 0 118 6 38 0 119 6 38 0 120 6 38 0 121 2 179 0 122 2 183 0 123 6 38 0 125 13 85 0 143 13 85 0 144 13 85 0 145 13 85 0 146 13 85 0 147] 
#[1 13 89 0 78 1 37 0 117 1 173 0 125 13 93 0 133] 
#[1 0 6 0 78 0 6 0 117 0 6 0 125 13 97 0 131] 
#[0 6 42 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 46 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 13 101 0 78] 
#[0 6 50 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 13 105 0 68] 
#[0 13 109 0 68] 
#[0 13 113 0 54] 
#[1 6 54 0 52 6 54 0 53 1 173 0 125] 
#[1 0 6 0 52 0 6 0 53 0 6 0 125 13 117 0 131] 
#[0 6 58 0 5 0 8 0 10 0 11 0 13 0 21 0 22 0 24 0 25 0 52 0 53 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[1 4 169 0 1 4 173 0 3 4 177 0 5 4 181 0 7 4 185 0 8 4 189 0 10 4 193 0 11 4 197 0 12 13 121 0 13 4 201 0 15 4 205 0 16 4 209 0 17 4 213 0 18 4 217 0 19 4 221 0 20 4 225 0 23 4 229 0 28 4 233 0 29 4 237 0 31 4 241 0 56 4 245 0 71 4 249 0 74 4 253 0 84 5 1 0 109 5 5 0 237 5 9 0 239 5 13 0 241] 
#[0 6 62 0 5 0 8 0 10 0 11 0 13 0 21 0 22 0 24 0 25 0 52 0 53 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 13 125 0 68] 
#[0 13 129 0 54] 
#[1 13 133 0 54 1 37 0 117 1 173 0 125 13 137 0 133] 
#[0 13 141 0 68] 
#[1 13 145 0 54 1 173 0 125] 
#[0 13 149 0 68] 
#[0 13 153 0 54] 
#[1 13 157 0 54 1 37 0 117 1 173 0 125 13 161 0 133] 
#[1 13 165 0 54 1 37 0 117 1 173 0 125 13 169 0 133] 
#[1 0 6 0 54 0 6 0 117 0 6 0 125 13 173 0 131] 
#[1 13 177 0 54 1 173 0 125] 
#[1 0 6 0 54 0 6 0 125 13 181 0 131] 
#[1 6 66 0 5 6 66 0 8 6 66 0 10 1 165 0 11 6 66 0 21 6 66 0 22 6 66 0 24 6 66 0 25 6 66 0 33 6 66 0 48 6 66 0 49 6 66 0 52 6 66 0 53 6 66 0 54 6 66 0 55 6 66 0 58 6 66 0 59 6 66 0 61 6 66 0 62 6 66 0 65 6 66 0 66 6 66 0 67 6 66 0 68 6 66 0 72 6 66 0 76 6 66 0 78 6 66 0 79 6 66 0 81 6 66 0 87 6 66 0 89 6 66 0 90 6 66 0 91 6 66 0 92 6 66 0 93 6 66 0 95 6 66 0 102 6 66 0 106 6 66 0 107 6 66 0 108 6 66 0 110 6 66 0 115 6 66 0 116 6 66 0 117 6 66 0 118 6 66 0 119 6 66 0 120 6 66 0 121 6 66 0 122 6 66 0 123 6 66 0 125] 
#[0 6 70 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 13 185 0 78] 
#[1 13 189 0 78 1 37 0 117 1 173 0 125 13 193 0 133] 
#[0 6 74 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 78 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 82 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 13 197 0 68] 
#[1 6 86 0 52 6 86 0 53 1 173 0 125] 
#[0 6 90 0 5 0 8 0 10 0 11 0 13 0 21 0 22 0 24 0 25 0 52 0 53 0 59 0 72 0 79 0 93 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123] 
#[0 6 94 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 13 201 0 68] 
#[0 13 205 0 68] 
#[0 13 209 0 54] 
#[0 6 98 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 13 213 0 68] 
#[0 6 102 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 13 217 0 68] 
#[0 13 221 0 68] 
#[0 13 225 0 54] 
#[0 13 229 0 68] 
#[0 13 233 0 54] 
#[1 13 237 0 54 1 37 0 117 1 173 0 125 13 241 0 133] 
#[0 13 245 0 68] 
#[1 13 249 0 54 1 173 0 125] 
#[0 6 106 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 110 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 13 253 0 78] 
#[0 6 114 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 118 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 122 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 14 1 0 68] 
#[0 6 126 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 130 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 134 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 14 5 0 68] 
#[0 6 138 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 14 9 0 68] 
#[0 14 13 0 68] 
#[0 14 17 0 54] 
#[0 6 142 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 14 21 0 68] 
#[0 6 146 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 150 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 154 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 158 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 162 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 14 25 0 68] 
#[0 6 166 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125] 
#[0 6 170 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 25 0 33 0 48 0 49 0 52 0 53 0 54 0 55 0 58 0 59 0 61 0 62 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 93 0 95 0 102 0 106 0 107 0 108 0 110 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 125]
	).
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAddressOfClause1: nodes [
	| result |
	result := VBAddressOfClauseNode new.
	result addressOfToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument1: nodes [
	| result |
	result := VBArgumentNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument2: nodes [
	| result |
	result := VBArgumentNode new.
	result paramarrayToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument3: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument4: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result arguments.
	result addTokens: ((nodes at: 2) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addNode: (nodes at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result timesToken: ((nodes at: 2) at: 1).
	result plusToken: ((nodes at: 2) at: 2).
	result minusToken: ((nodes at: 2) at: 3).
	result divideToken: ((nodes at: 2) at: 4).
	result upArrowToken: ((nodes at: 2) at: 5).
	result _Token: ((nodes at: 2) at: 6).
	result modToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator4: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator6: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator7: nodes [
	| result |
	result := Array new: 7.
	result at: 7 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignementOrEquals1: nodes [
	| result |
	result := VBAssignementOrEqualsNode new.
	result left: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBModuleAttributeNode new.
	result attributeToken: (nodes at: 1).
	result setting: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBaseType11: nodes [
	| result |
	result := VBBaseTypeNode new.
	result variantToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addObject: (nodes at: 1) to: result statements.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addObjects: ((nodes at: 2) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanBinaryOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result andToken: ((nodes at: 2) at: 1).
	result orToken: ((nodes at: 2) at: 2).
	result xorToken: ((nodes at: 2) at: 3).
	result eqvToken: ((nodes at: 2) at: 4).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanLiteral1: nodes [
	| result |
	result := VBBooleanLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForColorLiteral1: nodes [
	| result |
	result := VBColorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperation1: nodes [
	| result |
	result := VBComparisonOperationNode new.
	result left: (nodes at: 1).
	result greaterThanToken: ((nodes at: 2) at: 1).
	result lessThanToken: ((nodes at: 2) at: 2).
	result lessThanGreaterThanToken: ((nodes at: 2) at: 3).
	result lessThanEqualToken: ((nodes at: 2) at: 4).
	result greaterThanEqualToken: ((nodes at: 2) at: 5).
	result isToken: ((nodes at: 2) at: 6).
	result likeToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator5: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType1: nodes [
	| result |
	result := VBComplexTypeNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConcatenationOperation1: nodes [
	| result |
	result := VBConcatenationOperationNode new.
	result left: (nodes at: 1).
	result andToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConfiguration1: nodes [
	| result |
	result := VBConfigurationNode new.
	result beginToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result settings.
	result addNodes: ((nodes at: 4) at: 1) to: result settings.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDateLiteral1: nodes [
	| result |
	result := VBDateLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction1: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction2: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction3: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction4: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	result type: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub1: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub2: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub3: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub4: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum1: nodes [
	| result |
	result := VBDefineEnumNode new.
	result addToken: (nodes at: 1) to: result enumTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum2: nodes [
	| result |
	result := VBDefineEnumNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction1: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction2: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction3: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction4: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction5: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction6: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction7: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction8: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub1: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub2: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub3: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub4: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result subTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType1: nodes [
	| result |
	result := VBDefineTypeNode new.
	result addToken: (nodes at: 1) to: result typeTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType2: nodes [
	| result |
	result := VBDefineTypeNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result typeTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariable1: nodes [
	| result |
	result := VBDimVariableNode new.
	result dimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariables1: nodes [
	| result |
	result := VBDimMultipleVariablesNode new.
	result dimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess1: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result receiver: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfBlock1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfBlock2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result ifMatch: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfColon1: nodes [
	| result |
	result := VBElseIfColonNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 4) at: 2) to: result ifMatches.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry1: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry2: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent1: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent2: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result eventToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitDo1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result doToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFor1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result forToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFunction1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitProperty1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result propertyToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitSub1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result setToken: (nodes at: 1).
	result left: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result right: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitCall1: nodes [
	| result |
	result := VBExplicitCallNode new.
	result callToken: (nodes at: 1).
	result call: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFloatLiteral1: nodes [
	| result |
	result := VBFloatLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach1: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach2: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	result addNode: (nodes at: 9) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach3: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach4: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	result addNode: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach5: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach6: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	result addNode: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach7: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach8: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	result addNode: (nodes at: 11) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext1: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext2: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext3: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext4: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext1: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext2: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext3: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext4: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endLineNumber: (nodes at: 12).
	result nextToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLabel1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result gosubToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLine1: nodes [
	| result |
	result := VBGoSubLineNode new.
	result gosubToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result gotoToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLine1: nodes [
	| result |
	result := VBGoToLineNode new.
	result gotoToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGuidLiteral1: nodes [
	| result |
	result := VBGuidLiteralNode new.
	result leftBraceToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 3) to: result minusTokens.
	result addTokens: (nodes at: 4) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 5) to: result minusTokens.
	result addTokens: (nodes at: 6) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 7) to: result minusTokens.
	result addTokens: (nodes at: 8) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 9) to: result minusTokens.
	result addTokens: (nodes at: 10) to: result hEX_INTEGERTokens.
	result rightBraceToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHashIdentifier1: nodes [
	| result |
	result := VBHashIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHeadlessIdentifier1: nodes [
	| result |
	result := VBHeadlessIdentifierNode new.
	result periodToken: (nodes at: 1).
	result token: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen1: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen2: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen3: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen4: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenColon1: nodes [
	| result |
	result := VBIfThenColonNode new.
	result ifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result colonToken: (nodes at: 4).
	result
		ifTrue: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse10: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse11: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse12: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse13: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse14: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse15: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result
		ifFalse: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse16: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result
		ifFalse: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endLineNumber: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result
		ifFalse: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result
		ifFalse: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse5: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse6: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse7: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse8: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse9: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse1: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse2: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result otherwise: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse3: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse4: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result otherwise: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall1: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result identifier: (nodes at: 1).
	result arguments: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop1: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result loopToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop2: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result endLineNumber: (nodes at: 4).
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop3: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop4: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral1: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result returnToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub2: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result returnToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub3: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result block: (nodes at: 3).
	result returnToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub4: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result block: (nodes at: 3).
	result endLineNumber: (nodes at: 4).
	result returnToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess1: nodes [
	| result |
	result := VBMemberAccessNode new.
	result receiver: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant1: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: (nodes at: 2).
	result constant: (nodes at: 3).
	result equalToken: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant2: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: (nodes at: 2).
	result constant: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: (nodes at: 5).
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperties1: nodes [
	| result |
	result := VBModuleMultiplePropertiesNode new.
	result visibility: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperty1: nodes [
	| result |
	result := VBModulePropertyNode new.
	result visibility: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result letToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result letToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result setToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result setToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNegatedOperation1: nodes [
	| result |
	result := VBNegatedOperationNode new.
	result minusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNewClause1: nodes [
	| result |
	result := VBNewClauseNode new.
	result nEWToken: (nodes at: 1).
	result typeName: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation1: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNull1: nodes [
	| result |
	result := VBNullNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorGoTo1: nodes [
	| result |
	result := VBOnErrorGoToNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorResumeNext1: nodes [
	| result |
	result := VBOnErrorResumeNextNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result resumeToken: (nodes at: 3).
	result nextToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnExpressionGo1: nodes [
	| result |
	result := VBOnExpressionGoNode new.
	result onToken: (nodes at: 1).
	result integerExpression: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption1: nodes [
	| result |
	result := VBOptionValueNode new.
	result optionToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption2: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result databaseToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption3: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result binaryToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption4: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result compare: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption5: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result optionToken: (nodes at: 1).
	result explicitToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption6: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result optionToken: (nodes at: 1).
	result privateToken: (nodes at: 2).
	result moduleToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter10: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter11: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter12: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter13: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter14: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter15: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter16: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result type: (nodes at: 5).
	result equalToken: ((nodes at: 6) at: 1).
	result default: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result equalToken: ((nodes at: 2) at: 1).
	result default: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter9: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList1: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result rightParenToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList2: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result parameters.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterPassingStrategy2: nodes [
	| result |
	result := VBParameterPassingStrategyNode new.
	result byrefToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression1: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPositiveOperation1: nodes [
	| result |
	result := VBPositiveOperationNode new.
	result plusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess1: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result receiver: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForQualifiedIdentifier1: nodes [
	| result |
	result := VBQualifiedIdentifierNode new.
	result token: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseEvent1: nodes [
	| result |
	result := VBRaiseEventNode new.
	result raiseEventToken: (nodes at: 1).
	result call: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable1: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable2: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables1: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables2: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeLabel1: nodes [
	| result |
	result := VBResumeLabelNode new.
	result resumeToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeNext1: nodes [
	| result |
	result := VBResumeNextNode new.
	result resumeToken: (nodes at: 1).
	result nextToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSetUpAssignation1: nodes [
	| result |
	result := VBSetUpAssignationNode new.
	result identifier: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleIdentifier1: nodes [
	| result |
	result := VBSimpleIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariable1: nodes [
	| result |
	result := VBStaticVariableNode new.
	result staticToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariables1: nodes [
	| result |
	result := VBStaticMultipleVariablesNode new.
	result staticToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStringLiteral1: nodes [
	| result |
	result := VBStringLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry1: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry2: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing1: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing2: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParenToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result sizes.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing1: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing2: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	result leftParenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result sizes.
	result addTokens: ((nodes at: 5) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue1: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue2: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable1: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable2: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariableList1: nodes [
	| result |
	result := VBVariableListNode new.
	result addNode: (nodes at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result variables.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue1: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue2: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue3: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue4: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend1: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result wendToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend2: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend3: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend4: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result wendToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith1: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith2: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith3: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith4: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________2: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_HEX_INTEGER___1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___Expression__ifMatch__________1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___Expression__ifMatch__________2: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Expression__default___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Expression__default___2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___eol___EnumEntry__field___2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader1: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader2: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	result classToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule1: nodes [
	| result |
	result := VBModuleNode new.
	result addNode: (nodes at: 1) to: result elements.
	result addNodes: ((nodes at: 2) at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule2: nodes [
	| result |
	result := VBModuleNode new.
	result header: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result elements.
	result addNodes: ((nodes at: 4) at: 1) to: result elements.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]
