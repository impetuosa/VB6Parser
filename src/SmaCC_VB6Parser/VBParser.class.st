Class {
	#name : #VBParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_VB6Parser'
}

{ #category : #generated }
VBParser class >> ambiguousTransitions [
^#(
#[ 0 6 0 9] 
#[ 0 6 3 37] 
#[ 0 118 3 133] 
#[ 0 53 0 118] 
#[ 0 57 0 118] 
#[ 0 186 0 190 0 194] 
#[ 0 129 0 186 0 190 0 194] 
#[ 1 206 1 210] 
#[ 2 26 2 30] 
#[ 2 66 3 253] 
#[ 2 66 4 53] 
#[ 2 70 3 253] 
#[ 2 70 4 53] 
#[ 1 70 2 78] 
#[ 2 86 2 90] 
#[ 0 6 0 101] 
#[ 0 6 0 137] 
#[ 2 138 3 253] 
#[ 2 138 4 53] 
#[ 2 86 2 142] 
#[ 2 86 2 158] 
#[ 0 6 1 38] 
#[ 0 181 2 178] 
#[ 0 185 2 178] 
#[ 0 189 2 178] 
#[ 0 9 2 178] 
#[ 0 193 2 178] 
#[ 0 197 2 178] 
#[ 0 201 2 178] 
#[ 0 205 2 178] 
#[ 0 209 2 178] 
#[ 0 213 2 178] 
#[ 0 217 2 178] 
#[ 0 221 2 178] 
#[ 0 225 2 178] 
#[ 0 229 2 178] 
#[ 0 233 2 178] 
#[ 0 237 2 178] 
#[ 0 241 2 178] 
#[ 0 245 2 178] 
#[ 0 249 2 178] 
#[ 0 253 2 178] 
#[ 1 1 2 178] 
#[ 1 5 2 178] 
#[ 2 178 4 245] 
#[ 1 9 2 178] 
#[ 1 13 2 178] 
#[ 1 17 2 178] 
#[ 1 21 2 178] 
#[ 1 25 2 178] 
#[ 1 29 2 178] 
#[ 1 33 2 178] 
#[ 1 37 2 178] 
#[ 0 101 2 178] 
#[ 0 109 2 178] 
#[ 1 41 2 178] 
#[ 1 45 2 178] 
#[ 1 49 2 178] 
#[ 0 53 2 178] 
#[ 0 57 2 178] 
#[ 2 186 5 5] 
#[ 0 181 2 186] 
#[ 0 185 2 186] 
#[ 0 189 2 186] 
#[ 0 213 2 186] 
#[ 0 237 2 186] 
#[ 0 241 2 186] 
#[ 1 29 2 186] 
#[ 1 33 2 186] 
#[ 1 37 2 186] 
#[ 0 101 2 186] 
#[ 0 109 2 186] 
#[ 1 41 2 186] 
#[ 1 45 2 186] 
#[ 1 49 2 186] 
#[ 0 53 2 186] 
#[ 0 57 2 186] 
#[ 0 6 2 190] 
#[ 2 86 2 198] 
#[ 2 86 3 70] 
#[ 0 154 6 93] 
#[ 3 102 3 253] 
#[ 3 102 4 53] 
#[ 2 186 6 121] 
#[ 3 110 6 133] 
#[ 3 126 3 253] 
#[ 3 126 4 53] 
#[ 3 134 3 253] 
#[ 3 134 4 53] 
#[ 3 138 3 253] 
#[ 3 138 4 53] 
#[ 3 142 3 253] 
#[ 3 142 4 53] 
#[ 3 146 3 253] 
#[ 3 146 4 53] 
#[ 3 134 3 246 3 249] 
#[ 3 134 3 246 3 253] 
#[ 3 134 3 246 4 1] 
#[ 3 134 3 246 4 5] 
#[ 3 134 3 246 4 9] 
#[ 3 134 3 246 4 13] 
#[ 3 134 3 246 4 17] 
#[ 3 134 3 246 4 21] 
#[ 3 134 3 246 4 25] 
#[ 3 134 3 246 4 29] 
#[ 3 134 3 246 4 33] 
#[ 3 134 3 246 4 37] 
#[ 3 134 3 246 4 41] 
#[ 3 134 3 246 4 45] 
#[ 3 134 3 246 4 49] 
#[ 3 134 3 246 4 53] 
#[ 3 134 3 246 4 57] 
#[ 3 134 3 246 4 61] 
#[ 3 134 3 246 4 65] 
#[ 3 134 3 246 4 69] 
#[ 3 134 3 246 4 73] 
#[ 3 134 3 246 4 77] 
#[ 3 134 3 246 4 81] 
#[ 3 253 4 14] 
#[ 4 14 4 53] 
#[ 3 253 4 18] 
#[ 4 18 4 53] 
#[ 4 30 6 133] 
#[ 0 181 4 34] 
#[ 0 185 4 34] 
#[ 0 189 4 34] 
#[ 0 213 4 34] 
#[ 0 237 4 34] 
#[ 0 241 4 34] 
#[ 1 29 4 34] 
#[ 1 33 4 34] 
#[ 1 37 4 34] 
#[ 0 101 4 34] 
#[ 0 109 4 34] 
#[ 1 41 4 34] 
#[ 1 45 4 34] 
#[ 1 49 4 34] 
#[ 0 53 4 34] 
#[ 0 57 4 34] 
#[ 0 181 4 38] 
#[ 0 185 4 38] 
#[ 0 189 4 38] 
#[ 0 213 4 38] 
#[ 0 237 4 38] 
#[ 0 241 4 38] 
#[ 1 29 4 38] 
#[ 1 33 4 38] 
#[ 1 37 4 38] 
#[ 0 101 4 38] 
#[ 0 109 4 38] 
#[ 1 41 4 38] 
#[ 1 45 4 38] 
#[ 1 49 4 38] 
#[ 0 53 4 38] 
#[ 0 57 4 38] 
#[ 3 253 4 114] 
#[ 4 53 4 114] 
#[ 0 53 5 82] 
#[ 0 57 5 82] 
#[ 0 6 5 90] 
#[ 0 53 5 150] 
#[ 0 57 5 150] 
#[ 0 53 5 154] 
#[ 0 57 5 154] 
#[ 0 53 5 198] 
#[ 0 57 5 198]
	).
]

{ #category : #'generated-accessing' }
VBParser class >> cacheId [
	^'2020-08-26T12:26:34.6653+02:00'
]

{ #category : #generated }
VBParser class >> definitionComment [
"%glr;
%ignorecase;
%annotate_tokens;

#expression operators -- lowest precedence are first.
%left "")""  ;
%left  ""="";
%left "","";
%right "":"";
%left ""eqv"" ;
%left ""||"" ""or"" ""xor"";
%left ""&&"" ""and"";
%left ""is"" ""like"" ""!="" ""<>"";
%left ""<"" ""<="" "">"" "">="";
%left ""+"" ""-"";
%left ""*"" ""/"" ""Mod"";
%right ""^"";
%right ""delete"" ""~"";
%right ""["" ""("";
%left ""."" ""!"" ;
%prefix VB;
%root Program;
%suffix Node;
%start module;



<DECIMAL_INTEGER>
	: 0 | [1-9] [0-9]*	
	;
<HEX_INTEGER>
	: 0[xX][0-9a-fA-F]+	
	;
<OCTAL_INTEGER>
	: 0[0-7]+	
	;
<EXPONENT>
	: [eE] [\-\+]? [0-9]+ 	
	;
<FLOAT_TYPE>
	: [fFdD]	
	;

<DATE_LITERAL>
   : ""#"" ([^\#\r\n])*  ""#""
   ;
<COLOR_LITERAL>
   : \&H <HEX_INTEGER>+ ""&""?
   ;

<INTEGER_LITERAL>
	: (<DECIMAL_INTEGER> | <HEX_INTEGER> | <OCTAL_INTEGER>) [lL]?	
	;
<FLOATING_POINT_LITERAL>
	: [0-9]+ \. [0-9]* <EXPONENT>? <FLOAT_TYPE>? 
	| \. [0-9]+ <EXPONENT>? <FLOAT_TYPE>? 
	| [0-9]+ <EXPONENT> <FLOAT_TYPE>? 
	| [0-9]+ <FLOAT_TYPE>	
	| <HEX_INTEGER> \. [0-9a-fA-F]+ [pP] [\-\+]? [0-9]+ <FLOAT_TYPE>?
	;
<BOOLEAN_LITERAL>
	: true
	| false
	;
<STRING_LITERAL>
   : \"" ([^\""\r\n] | \""\"")* \""
   ;
<NULL_LITERAL>
	: Nothing	
	;

<IDENTIFIER>
	: (<isLetter> | [a-zA-Z_$]) (<isLetter>|\w|$)*	
	;
<HASH_IDENTIFIER>
	: ( \#) (<isLetter>|\w|$)*
	;
	
<whitespace>
	: \s+
	;

<line_continuation>
   : \  _ \r? \n 
   ;
<eol>
   :  (\r? \n | "":"" \ ) 
   ;

<comment>
   :  (\' | :?  REM  \ ) (<line_continuation> | [^\n\r])* 
   ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Basic module
########## ########## ########## ########## ########## ########## ########## ########## 

module: (header 'header' <eol>*)? ModuleStatement 'element'  (<eol>* ModuleStatement 'element' )*  (Body 'body')?   {{Module}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Literals
########## ########## ########## ########## ########## ########## ########## ########## 
literal 
	: IntegerLiteral
	| ColorLiteral
	| DateLiteral
	| FloatLiteral
	| BooleanLiteral
	| StringLiteral
	| Null
	| GuidLiteral
;
IntegerLiteral :  <INTEGER_LITERAL> 'token' {{IntegerLiteral}};
ColorLiteral: <COLOR_LITERAL> 'token' {{ColorLiteral}} ; 
DateLiteral:  <DATE_LITERAL> 'token' {{DateLiteral}};
FloatLiteral: <FLOATING_POINT_LITERAL> 'token' {{FloatLiteral}};
BooleanLiteral: <BOOLEAN_LITERAL> 'token' {{BooleanLiteral}};
StringLiteral:  <STRING_LITERAL> 'token' {{StringLiteral}};
Null: <NULL_LITERAL> 'token' {{Null}};
GuidLiteral: ""{""<HEX_INTEGER> + ""-""<HEX_INTEGER>+""-"" <HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""}"" {{GuidLiteral}};

Identifier : 
	   SimpleIdentifier 
	| HashIdentifier
	| QualifiedIdentifier | HeadlessIdentifier;

HashIdentifier :  <HASH_IDENTIFIER> 'token'   {{HashIdentifier}};
SimpleIdentifier : <IDENTIFIER> 'token'  {{SimpleIdentifier}};
HeadlessIdentifier  : "".""  Identifier 'token'  {{HeadlessIdentifier}};
QualifiedIdentifier : Identifier 'token'  "".""  <IDENTIFIER> 'member' {{QualifiedIdentifier}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Module header and configuration
########## ########## ########## ########## ########## ########## ########## ########## 

header: ""version""   FloatLiteral  'version'  (""class"")?  {{}};
Option
   :   ""option"" IntegerLiteral 'value' {{OptionValue}}
   |   ""option"" ""compare"" ""database"" {{OptionCompareDatabase}}
   |   ""option"" ""compare""  (""binary""| ""text"" 'compare') {{OptionCompare}}
   |   ""option"" ""explicit"" {{OptionExplicit}}
   |  ""option"" ""private"" ""module""{{OptionPrivateModule}}
   ;

SetUpAssignation :  
	Identifier  'identifier' ""="" Expression 'value' {{SetUpAssignation}} 
;
Attribute
 : ""attribute"" SetUpAssignation 'setting' {{ModuleAttribute}}
 ;
Configuration 
:	""begin""  <eol>* SetUpAssignation 'setting' ( <eol>+ SetUpAssignation 'setting')* ""end"" {{Configuration}};

ModuleStatement :  
	Option  | Configuration | Attribute
;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Body statements
########## ########## ########## ########## ########## ########## ########## ########## 

	
Statement : DeclareExternal | BehaviourDefinition | VariableDefinition | Attribute | Expression | ControlFlowStatement | Types ;
Block: Statement 'statement' (<eol>* Statement 'statement'  )* {{Block}};
Body : Block 'element' (<eol>* Block 'element'  )* {{Body}};

BaseType: ""boolean"" | ""byte"" | ""collection"" | ""date"" | ""double"" | ""integer"" | ""long"" | ""object"" | ""single"" | ""string"" | ""variant"" {{BaseType}};
Visibility: ""private"" | ""public""{{Visibility}}; 

ComplexType: Identifier 'name' {{ComplexType}};
Type: BaseType | ComplexType ;

TypedThing: ""as""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsType}}; 
TypedAndInstantiatedThing: ""as"" ""new""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsTypeAndNew}}; 

AsType: TypedThing | TypedAndInstantiatedThing;



########## ########## ########## ########## ########## ########## ########## ########## 
########## Types
########## ########## ########## ########## ########## ########## ########## ########## 
Types : DefineEnum | DefineType | Event ;

DefineType : 	 (Visibility 'visibility')? ""type"" Identifier 'name' ( <eol>* TypeEntry 'field' )* <eol>* ""end"" ""type"" {{DefineType}}    ;
TypeEntry    : Identifier 'name' AsType 'type' (""*"" IntegerLiteral 'size' )? {{TypeEntry}}     ;
Event  : (Visibility 'visibility')?  ""event"" Identifier 'selector' ParameterList 'parameters' {{Event}} ;
DefineEnum    :  (Visibility 'visibility')?  ""enum"" Identifier 'name'  ( <eol>* EnumEntry 'field')* <eol>*  ""end"" ""enum"" {{DefineEnum}}    ;
EnumEntry    : Identifier 'name'  ( ""=""  Expression 'value')? {{EnumEntry}}    ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Parameters
########## ########## ########## ########## ########## ########## ########## ########## 
ParameterPassingStrategy :  ""byval"" | ""byref"" {{ParameterPassingStrategy}};
ParameterList:  ""("" (Parameter 'parameter' ( "","" Parameter 'parameter')* )? "")"" {{ParameterList}};
Parameter: ""optional"" ? (ParameterPassingStrategy 'strategy')? ""paramarray""? Identifier 'name'  (AsType 'type')? (""="" Expression 'default')? {{Parameter}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## External declaration
########## ########## ########## ########## ########## ########## ########## ########## 
DeclareSub: (Visibility 'visibility')? ""declare""  ""sub"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  {{ExternalSub}};
DeclareFunction: (Visibility 'visibility')? ""declare""  ""function"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  AsType 'type' {{ExternalFunction}};
DeclareExternal: DeclareSub|DeclareFunction; 

########## ########## ########## ########## ########## ########## ########## ########## 
########## Function / Sub Definition 
########## ########## ########## ########## ########## ########## ########## ########## 

Modifier: ""static"" {{Modifier}};
DefineFunction: (Visibility 'visibility')? (Modifier 'modifier')? ""function"" Identifier 'selector' ParameterList 'parameters' (AsType 'type')? <eol>* Block 'block' ""end"" ""function"" {{FunctionDefinition}};
DefineSub:  (Visibility 'visibility')? (Modifier 'modifier')? ""sub"" Identifier 'selector' ParameterList 'parameters' <eol>* Block 'block' ""end"" ""sub"" {{SubDefinition}};
BehaviourDefinition:  DefineFunction | DefineSub;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Variable / And Multiple Variables
########## ########## ########## ########## ########## ########## ########## ########## 

ModuleProperty : Visibility 'visibility' Variable 'variable' {{ModuleProperty}};
ModuleConstant : (Visibility 'visibility') ""const"" Identifier 'constant' ""="" Expression 'value'  {{ModuleConstant}};
DefineVariable : ""dim"" Variable 'variable' {{DimVariable}};
ReDefineVariable : ""redim"" ""preserve""? Variable 'variable' {{ReDimVariable}};
StaticVariable : ""static"" Variable 'variable' {{StaticVariable}};
Variable : ""WithEvents"" ? Identifier 'name' (AsType 'type') {{Variable}};

ModuleProperties : Visibility 'visibility' VariableList 'variables' {{ModuleMultipleProperties}};
DefineVariables : ""dim"" VariableList 'variables' {{DimMultipleVariables}};
ReDefineVariables : ""redim""  ""preserve""?  VariableList 'variables' {{ReDimMultipleVariables}};
StaticVariables : ""static"" VariableList 'variables' {{StaticMultipleVariables}};
VariableList : Variable 'variable' ("",""  Variable 'variable' )* {{VariableList}};

VariableDefinition : ModuleProperties | ModuleProperty | ModuleConstant | DefineVariable | ReDefineVariable |  DefineVariables |  ReDefineVariables | StaticVariable | StaticVariables ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Value Statements
########## ########## ########## ########## ########## ########## ########## ########## 

ValueStatement :  Operation | ValueClause | ImplicitCall | StateAccess | ExplicitCall  ;
Expression :  ValueStatement |  Identifier | literal  | ParentheseesExpression | Exits ; 
ParentheseesExpression : ""("" Expression 'expression' "")"" {{ParentheseesExpression}};
ValueStatementList : ValueStatement 'value' ("","" ValueStatement 'value' ) * {{ValueStatementList}} ; 

### Ops

Operation : UnaryOperation | BinaryOperation ;

DictionaryAccess :   Expression 'receiver' ""!"" Identifier 'member' {{DictionaryAccess}} ;
MemberAccess : Expression 'receiver' ""."" Identifier 'member' {{MemberAccess}} ;
ImplicitParenthesesLessCall : Identifier 'identifier' ArgumentList 'arguments' {{ImplicitParenthesesLessCall}} ;
ProcedureCallOrArrayAccess :  Expression 'receiver' ""("" ArgumentList 'arguments' "")"" {{ProcedureCallOrArrayAccess}} ;

Argument : (ParameterPassingStrategy 'strategy')?  ""paramarray""?  Expression 'value' {{Argument}};
ArgumentList : (Argument 'argument' ? ("","" | "";"" ))* Argument 'argument'? ( ("","" | "";"" )Argument 'argument' ?)* {{ArgumentList}};

ImplicitCall : Identifier | ProcedureCallOrArrayAccess | ImplicitParenthesesLessCall ;
StateAccess : DictionaryAccess | MemberAccess ;

ExplicitCall : ""Call""  ImplicitCall 'call'  {{ExplicitCall}}; 


### Unary Ops 
UnaryOperation:  NegatedOperation | PositiveOperation |  NotOperation ; 

NegatedOperation : ""-""  Expression 'value' {{NegatedOperation}} ;
PositiveOperation : ""+"" Expression 'value' {{PositiveOperation}} ;
NotOperation : ""not""  Expression 'value'  {{NotOperation}};

### Binary Ops 
BinaryOperation: ComparisonOperation  
				| ArithmeticOperation | BooleanBinaryOperation 
				| ExplicitAssignement | AssignementOrEquals  | ConcatenationOperation ;

ComparisonOperator : "">"" | ""<""  |  ""<>"" | ""<="" | "">="" | ""is"" | ""like""  ;
ComparisonOperation : Expression 'left' ComparisonOperator Expression 'right' {{ComparisonOperation}};
ArithmeticOperator : ""*"" | ""+"" | ""-"" | ""/"" | ""^"" | ""\"" | ""Mod"";
ArithmeticOperation : Expression 'left' ArithmeticOperator Expression 'right' {{ArithmeticOperation}};
BooleanOperator : ""and"" | ""or"" | ""xor"" | ""eqv"";
BooleanBinaryOperation : Expression 'left' BooleanOperator Expression 'right' {{ArithmeticOperation}};
ConcatenationOperation : Expression 'left' ""&"" Expression 'right' {{ConcatenationOperation}}; 
AssignementOrEquals : Expression 'left' ""="" Expression  'right' {{AssignementOrEquals}}; 
ExplicitAssignement : ""let""  Expression 'left' ""=""  Expression 'right' {{ExplicitAssignement}}; 

### Value Clause 
ValueClause: AddressOfClause | NewClause ;
AddressOfClause : ""AddressOf"" Identifier 'name'  {{AddressOfClause}}; 
NewClause : ""New"" Identifier 'typeName' {{NewClause}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Control flow statements
########## ########## ########## ########## ########## ########## ########## ########## 


ControlFlowStatement : Exits| Loops | If  | On | Resume| Go | To | Label | With ; 

#### Loops
Loops : DoLoop | WhileWend | ForLoop ;

########## Do
DoLoop : InfinityLoop | WhileTrue | UntilTrue ; 
InfinityLoop : 
	""do""  
		<eol>* (Block 'body')? <eol>* 
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{InfinityLoop}} ;

WhileTrue :  
	""do"" ""while"" ValueStatement 'condition' 
		<eol>* ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{WhileTrue}}; 
UntilTrue : 
	""do"" ""until"" ValueStatement 'condition'
		 <eol>*  Block 'body' <eol>* 
	(IntegerLiteral 'endLineNumber')?""loop"" 
 {{UntilTrue}}; 

########## WhileWend
WhileWend: 
	""while"" ValueStatement 'condition'
		 <eol>* ( Block 'body')? <eol>*  (IntegerLiteral 'endLineNumber')? 
	""wend""  {{WhileWend}}; 

########## For 
ForLoop : ForEach | ForNext | ForStepNext;

ForEach :  
	""for"" ""each"" Identifier 'element' ""in"" Expression 'group' 
		 <eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next"" (Identifier 'element' )? 
{{ForEach}} ;
 
ForNext :   
	""for"" Expression 'counter' ""="" Expression  'initialValue'  ""to"" Expression  'limit'   
		<eol>*  ( Block 'body')? <eol>* 
	 (IntegerLiteral 'endLineNumber')? 	""next"" 
{{ForNext}} ;
ForStepNext:   
	""for"" Expression 'counter' ""="" Expression  'initialValue'  ""to"" Expression  'limit' ""step"" Expression 'step'   
		<eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next""
 {{ForStepNext}} ;

########## If

If : IfThenColon| IfThen | IfThenElse | IfThenElseIfElse ; 

IfThenColon : ""if"" Expression 'condition' ""then"" "":"" Expression  'ifTrue' {{IfThenColon}} ;
IfThen : 
	""if"" Expression 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>*  
	(IntegerLiteral 'endLineNumber')?  ""end"" ""if"" 
{{IfThen}};
IfThenElse : 
	""if"" Expression 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>* 
	(IntegerLiteral 'elseLineNumber')? ""else"" 
		 <eol>* (Block 'ifFalse')? <eol>* 
	(IntegerLiteral 'endLineNumber')? ""end"" ""if"" 
{{IfThenElse}};
IfThenElseIfElse  : 
""if"" Expression 'condition' ""then"" 
	<eol>* (Block 'ifTrue')? <eol>* 
(ElseIf 'case') + 
""else""  
	<eol>* (Block 'otherwise')? <eol>*
 ""end"" ""if""
{{IfThenElseIfElse}};

ElseIf: ElseIfBlock | ElseIfColon ;

ElseIfBlock : ""elseif"" Expression 'condition' ""then"" 
	<eol>* (Block 'ifMatch')? <eol>*  {{ElseIfBlock}};
ElseIfColon : ""elseif"" Expression 'condition' ""then"" (  Expression 'ifMatch' ?  "":"" )* {{ElseIfColon}} ;

###### Label / LabelSub
To : Label | LabelSub ;
Label : Identifier 'label' "":""  {{GoToLabel}}; 
LabelSub : Identifier 'label' "":"" (Block 'block' )? (IntegerLiteral 'endLineNumber')? ""return"" {{GoSubLabel}}; 

###### Resume
	Resume : ResumeLabel | ResumeNext | ResumeEmpty ;
	
	ResumeLabel : ""resume"" Identifier 'label' {{ResumeLabel}} ; 
	ResumeNext : ""resume"" ""next"" {{ResumeNext}} ; 
	ResumeEmpty : ""resume"" ; 
	
###### GoTo / GoSub 
Go: GoTo | GoSub ;

GoTo :  GoToLabel | GoToLine ;
GoToLabel : ""goto"" Identifier 'label' {{GoToLabel}}  ;
GoToLine :  ""goto"" IntegerLiteral 'lineNumber' {{GoToLine}}  ;

GoSub: GoSubLabel | GoSubLine ;
GoSubLabel :  ""gosub"" Identifier 'label'  {{GoSubLabel}} ;
GoSubLine :  ""gosub""  IntegerLiteral 'lineNumber'{{GoSubLine}} ;

########## On 

On: OnErrorGoTo | OnErrorResumeNext |  OnExpressionGo  ; 

OnErrorGoTo : ""on"" ""error"" GoTo 'to' {{OnErrorGoTo}}  ;
OnErrorResumeNext : ""on"" ""error"" ""resume""  ""next"" {{OnErrorResumeNext }} ;
OnExpressionGo : ""on"" Expression 'integerExpression' Go 'to' {{OnExpressionGo}} ;

########## Error
Error: ""error"" Expression 'errorCode' {{Error}} ;

########## With
With : ""with"" Identifier 'with' <eol>* (Block 'block' )? <eol>*  (IntegerLiteral 'endLineNumber')?""end"" ""with"" {{With}} ;

########## Exits

Exits : ExitFunction | ExitSub | ExitProperty | ExitDo |ExitFor ; 
ExitFunction : ""exit"" ""function"" {{Exits}} ; 
ExitSub : ""exit"" ""sub"" {{Exits}} ; 
ExitDo : ""exit"" ""do"" {{Exits}} ; 
ExitFor : ""exit"" ""for"" {{Exits}} ; 
ExitProperty : ""exit"" ""property"" {{Exits}} ;"
]

{ #category : #generated }
VBParser class >> reduceTable [
^#(
	#(126 0 #reduceActionFor_eol__1: 1736705 false ) 
	#(151 1 #liftFirstValue: 3997697 false ) 
	#(151 1 #liftFirstValue: 3997699 false ) 
	#(151 1 #liftFirstValue: 3997698 false ) 
	#(125 0 #reduceActionFor__eol___ModuleStatement__element____1: 1735681 false ) 
	#(140 1 #reduceActionForSimpleIdentifier1: 2855937 false ) 
	#(139 1 #reduceActionForHashIdentifier1: 2788353 false ) 
	#(138 1 #liftFirstValue: 2685954 false ) 
	#(138 1 #liftFirstValue: 2685953 false ) 
	#(138 1 #liftFirstValue: 2685956 false ) 
	#(138 1 #liftFirstValue: 2685955 false ) 
	#(146 2 #reduceActionForAttribute1: 3793921 false ) 
	#(144 2 #reduceActionForOption5: 3382277 false ) 
	#(128 1 #reduceActionForIntegerLiteral1: 2145281 false ) 
	#(144 2 #reduceActionForOption1: 3382273 false ) 
	#(131 1 #reduceActionForFloatLiteral1: 2325505 false ) 
	#(143 2 #reduceActionForheader1: 3317761 false ) 
	#(123 2 #reduceActionFormodule1: 1673217 false ) 
	#(141 2 #reduceActionForHeadlessIdentifier1: 2920449 false ) 
	#(126 2 #reduceActionFor_eol__2: 1736706 false ) 
	#(149 0 #reduceActionFor__eol___ModuleStatement__element____1: 3932161 false ) 
	#(144 3 #reduceActionForOption3: 3382275 false ) 
	#(144 3 #reduceActionForOption2: 3382274 false ) 
	#(144 3 #reduceActionForOption4: 3382276 false ) 
	#(144 3 #reduceActionForOption6: 3382278 false ) 
	#(143 3 #reduceActionForheader2: 3317762 false ) 
	#(160 1 #liftFirstValue: 4690945 false ) 
	#(160 1 #reduceActionForVisibility2: 4690946 false ) 
	#(272 1 #liftFirstValue: 15250433 false ) 
	#(188 1 #reduceActionForModifier1: 7354369 false ) 
	#(130 1 #reduceActionForDateLiteral1: 2270209 false ) 
	#(129 1 #reduceActionForColorLiteral1: 2210817 false ) 
	#(132 1 #reduceActionForBooleanLiteral1: 2392065 false ) 
	#(133 1 #reduceActionForStringLiteral1: 2455553 false ) 
	#(134 1 #reduceActionForNull1: 2516993 false ) 
	#(125 2 #reduceActionFor__eol___ModuleStatement__element____2: 1735682 false ) 
	#(207 1 #liftFirstValue: 9477123 false ) 
	#(127 1 #liftFirstValue: 2008065 false ) 
	#(127 1 #liftFirstValue: 2008066 false ) 
	#(127 1 #liftFirstValue: 2008067 false ) 
	#(127 1 #liftFirstValue: 2008068 false ) 
	#(127 1 #liftFirstValue: 2008069 false ) 
	#(127 1 #liftFirstValue: 2008070 false ) 
	#(127 1 #liftFirstValue: 2008071 false ) 
	#(127 1 #liftFirstValue: 2008072 false ) 
	#(220 0 #reduceActionFor_Argument__argument__________________1: 10348545 false ) 
	#(223 1 #liftFirstValue: 10467329 false ) 
	#(207 1 #liftFirstValue: 9477122 false ) 
	#(152 1 #liftFirstValue: 4272132 false ) 
	#(155 0 #reduceActionFor__eol___ModuleStatement__element____1: 4433921 false ) 
	#(158 0 #reduceActionFor__eol___ModuleStatement__element____1: 4503553 false ) 
	#(123 3 #reduceActionFormodule2: 1673218 false ) 
	#(152 1 #liftFirstValue: 4272135 false ) 
	#(168 1 #liftFirstValue: 5293058 false ) 
	#(168 1 #liftFirstValue: 5293059 false ) 
	#(168 1 #liftFirstValue: 5293057 false ) 
	#(187 1 #liftFirstValue: 7084033 false ) 
	#(187 1 #liftFirstValue: 7084034 false ) 
	#(152 1 #liftFirstValue: 4272129 false ) 
	#(191 1 #liftFirstValue: 7771137 false ) 
	#(191 1 #liftFirstValue: 7771138 false ) 
	#(152 1 #liftFirstValue: 4272130 false ) 
	#(205 1 #liftFirstValue: 8983554 false ) 
	#(205 1 #liftFirstValue: 8983555 false ) 
	#(205 1 #liftFirstValue: 8983556 false ) 
	#(205 1 #liftFirstValue: 8983557 false ) 
	#(205 1 #liftFirstValue: 8983560 false ) 
	#(205 1 #liftFirstValue: 8983553 false ) 
	#(205 1 #liftFirstValue: 8983558 false ) 
	#(205 1 #liftFirstValue: 8983559 false ) 
	#(205 1 #liftFirstValue: 8983561 false ) 
	#(152 1 #liftFirstValue: 4272131 false ) 
	#(207 1 #liftFirstValue: 9477121 false ) 
	#(152 1 #liftFirstValue: 4272133 false ) 
	#(207 1 #liftFirstValue: 9477124 false ) 
	#(206 1 #liftFirstValue: 9385985 false ) 
	#(224 1 #liftFirstValue: 10556417 false ) 
	#(224 1 #liftFirstValue: 10556418 false ) 
	#(223 1 #liftFirstValue: 10467331 false ) 
	#(223 1 #liftFirstValue: 10467330 false ) 
	#(206 1 #liftFirstValue: 9385987 false ) 
	#(206 1 #liftFirstValue: 9385988 false ) 
	#(206 1 #liftFirstValue: 9385989 false ) 
	#(212 1 #liftFirstValue: 9771009 false ) 
	#(226 1 #liftFirstValue: 10688513 false ) 
	#(226 1 #liftFirstValue: 10688514 false ) 
	#(226 1 #liftFirstValue: 10688515 false ) 
	#(212 1 #liftFirstValue: 9771010 false ) 
	#(230 1 #liftFirstValue: 10979329 false ) 
	#(230 1 #liftFirstValue: 10979330 false ) 
	#(230 1 #liftFirstValue: 10979331 false ) 
	#(230 1 #liftFirstValue: 10979334 false ) 
	#(230 1 #liftFirstValue: 10979333 false ) 
	#(230 1 #liftFirstValue: 10979332 false ) 
	#(206 1 #liftFirstValue: 9385986 false ) 
	#(240 1 #liftFirstValue: 11965441 false ) 
	#(240 1 #liftFirstValue: 11965442 false ) 
	#(152 1 #liftFirstValue: 4272134 false ) 
	#(243 1 #liftFirstValue: 12359682 false ) 
	#(244 1 #liftFirstValue: 12456961 false ) 
	#(245 1 #liftFirstValue: 12512257 false ) 
	#(245 1 #liftFirstValue: 12512258 false ) 
	#(245 1 #liftFirstValue: 12512259 false ) 
	#(244 1 #liftFirstValue: 12456962 false ) 
	#(244 1 #liftFirstValue: 12456963 false ) 
	#(250 1 #liftFirstValue: 13175809 false ) 
	#(250 1 #liftFirstValue: 13175810 false ) 
	#(250 1 #liftFirstValue: 13175811 false ) 
	#(243 1 #liftFirstValue: 12359683 false ) 
	#(254 1 #liftFirstValue: 13865985 false ) 
	#(254 1 #liftFirstValue: 13865986 false ) 
	#(254 1 #liftFirstValue: 13865987 false ) 
	#(254 1 #liftFirstValue: 13865988 false ) 
	#(243 1 #liftFirstValue: 12359687 false ) 
	#(243 1 #liftFirstValue: 12359688 false ) 
	#(266 1 #liftFirstValue: 14878721 false ) 
	#(266 1 #liftFirstValue: 14878722 false ) 
	#(243 1 #liftFirstValue: 12359685 false ) 
	#(269 1 #liftFirstValue: 15083521 false ) 
	#(269 1 #liftFirstValue: 15083522 false ) 
	#(269 1 #liftFirstValue: 15083523 false ) 
	#(243 1 #liftFirstValue: 12359686 false ) 
	#(273 1 #liftFirstValue: 15300609 false ) 
	#(274 1 #liftFirstValue: 15321089 false ) 
	#(274 1 #liftFirstValue: 15321090 false ) 
	#(273 1 #liftFirstValue: 15300610 false ) 
	#(277 1 #liftFirstValue: 15474689 false ) 
	#(277 1 #liftFirstValue: 15474690 false ) 
	#(243 1 #liftFirstValue: 12359684 false ) 
	#(280 1 #liftFirstValue: 15651841 false ) 
	#(280 1 #liftFirstValue: 15651842 false ) 
	#(280 1 #liftFirstValue: 15651843 false ) 
	#(243 1 #liftFirstValue: 12359689 false ) 
	#(207 1 #liftFirstValue: 9477125 false ) 
	#(243 1 #liftFirstValue: 12359681 false ) 
	#(286 1 #liftFirstValue: 16161793 false ) 
	#(286 1 #liftFirstValue: 16161794 false ) 
	#(286 1 #liftFirstValue: 16161796 false ) 
	#(286 1 #liftFirstValue: 16161797 false ) 
	#(286 1 #liftFirstValue: 16161795 false ) 
	#(142 3 #reduceActionForQualifiedIdentifier1: 2993153 false ) 
	#(145 3 #reduceActionForSetUpAssignation1: 3697665 false ) 
	#(123 4 #reduceActionFormodule3: 1673219 false ) 
	#(228 2 #reduceActionForPositiveOperation1: 10831873 false ) 
	#(227 2 #reduceActionForNegatedOperation1: 10764289 false ) 
	#(241 2 #reduceActionForAddressOfClause1: 12009473 false ) 
	#(225 2 #reduceActionForExplicitCall1: 10606593 false ) 
	#(242 2 #reduceActionForNewClause1: 12082177 false ) 
	#(204 0 #reduceActionFor__eol___ModuleStatement__element____1: 8934401 false ) 
	#(194 2 #reduceActionForDefineVariable1: 8255489 false ) 
	#(199 2 #reduceActionForDefineVariables1: 8641537 false ) 
	#(176 0 #reduceActionFor__eol___ModuleStatement__element____1: 5757953 false ) 
	#(289 2 #reduceActionForExitDo1: 16314369 false ) 
	#(290 2 #reduceActionForExitFor1: 16349185 false ) 
	#(287 2 #reduceActionForExitFunction1: 16230401 false ) 
	#(291 2 #reduceActionForExitProperty1: 16386049 false ) 
	#(288 2 #reduceActionForExitSub1: 16277505 false ) 
	#(279 2 #reduceActionForGoSubLine1: 15567873 false ) 
	#(278 2 #reduceActionForGoSubLabel1: 15507457 false ) 
	#(276 2 #reduceActionForGoToLine1: 15409153 false ) 
	#(275 2 #reduceActionForGoToLabel1: 15352833 false ) 
	#(229 2 #reduceActionForNotOperation1: 10900481 false ) 
	#(195 2 #reduceActionForReDefineVariable1: 8316929 false ) 
	#(200 2 #reduceActionForReDefineVariables1: 8718337 false ) 
	#(271 2 #reduceActionForResumeNext1: 15201281 false ) 
	#(270 2 #reduceActionForResumeLabel1: 15137793 false ) 
	#(196 2 #reduceActionForStaticVariable1: 8396801 false ) 
	#(201 2 #reduceActionForStaticVariables1: 8815617 false ) 
	#(171 0 #reduceActionFor__eol___ModuleStatement__element____1: 5405697 false ) 
	#(136 1 #reduceActionFor_HEX_INTEGER___1: 2573313 false ) 
	#(124 2 #reduceActionFor__eol___ModuleStatement__element___1: 1735681 false ) 
	#(267 2 #reduceActionForLabel1: 14903297 false ) 
	#(215 2 #reduceActionForImplicitParenthesesLessCall1: 9994241 false ) 
	#(222 0 #reduceActionFor_Argument__argument__________________1: 10408961 false ) 
	#(153 2 #reduceActionForBlock1: 4404225 false ) 
	#(156 2 #reduceActionForBody1: 4480001 false ) 
	#(192 2 #reduceActionForModuleProperty1: 8052737 false ) 
	#(198 2 #reduceActionForModuleProperties1: 8541185 false ) 
	#(233 1 #reduceActionForArithmeticOperator1: 11331585 false ) 
	#(233 1 #reduceActionForArithmeticOperator2: 11331586 false ) 
	#(233 1 #reduceActionForArithmeticOperator3: 11331587 false ) 
	#(233 1 #reduceActionForArithmeticOperator4: 11331588 false ) 
	#(231 1 #reduceActionForArithmeticOperator2: 11151362 false ) 
	#(231 1 #reduceActionForArithmeticOperator4: 11151364 false ) 
	#(231 1 #reduceActionForArithmeticOperator3: 11151363 false ) 
	#(231 1 #reduceActionForArithmeticOperator1: 11151361 false ) 
	#(231 1 #reduceActionForComparisonOperator5: 11151365 false ) 
	#(233 1 #reduceActionForArithmeticOperator7: 11331591 false ) 
	#(233 1 #reduceActionForArithmeticOperator6: 11331590 false ) 
	#(233 1 #reduceActionForComparisonOperator5: 11331589 false ) 
	#(235 1 #reduceActionForBooleanOperator1: 11502593 false ) 
	#(235 1 #reduceActionForBooleanOperator4: 11502596 false ) 
	#(231 1 #reduceActionForArithmeticOperator6: 11151366 false ) 
	#(231 1 #reduceActionForArithmeticOperator7: 11151367 false ) 
	#(235 1 #reduceActionForBooleanOperator2: 11502594 false ) 
	#(235 1 #reduceActionForBooleanOperator3: 11502595 false ) 
	#(147 5 #reduceActionForConfiguration1: 3870721 false ) 
	#(150 1 #reduceActionFor_HEX_INTEGER___1: 3934209 false ) 
	#(149 2 #reduceActionFor__eol___ModuleStatement__element____2: 3932162 false ) 
	#(123 5 #reduceActionFormodule4: 1673220 false ) 
	#(208 3 #reduceActionForParentheseesExpression1: 9569281 false ) 
	#(167 1 #liftFirstValue: 5041153 false ) 
	#(167 1 #liftFirstValue: 5041154 false ) 
	#(197 2 #reduceActionForVariable1: 8464385 false ) 
	#(202 2 #reduceActionForVariableList1: 8898561 false ) 
	#(173 3 #reduceActionForEvent1: 5576705 false ) 
	#(281 3 #reduceActionForOnErrorGoTo1: 15712257 false ) 
	#(283 3 #reduceActionForOnExpressionGo1: 15846401 false ) 
	#(195 3 #reduceActionForReDefineVariable2: 8316930 false ) 
	#(200 3 #reduceActionForReDefineVariables2: 8718338 false ) 
	#(136 2 #reduceActionFor_eol__2: 2573314 false ) 
	#(268 3 #reduceActionForLabelSub1: 14952449 false ) 
	#(219 1 #reduceActionFor_Argument__argument_________________1: 10348545 false ) 
	#(219 1 #reduceActionFor_Argument__argument_________________2: 10348546 false ) 
	#(178 1 #reduceActionForParameterPassingStrategy2: 6118402 false ) 
	#(178 1 #liftFirstValue: 6118401 false ) 
	#(217 1 #reduceActionForArgument1: 10231809 false ) 
	#(220 2 #reduceActionFor_Argument__argument__________________2: 10348546 false ) 
	#(218 2 #reduceActionForArgumentList1: 10333185 false ) 
	#(155 2 #reduceActionFor__eol___Statement__statement_____2: 4433922 false ) 
	#(158 2 #reduceActionFor__eol___Statement__statement_____2: 4503554 false ) 
	#(213 3 #reduceActionForDictionaryAccess1: 9820161 false ) 
	#(237 3 #reduceActionForConcatenationOperation1: 11657217 false ) 
	#(214 3 #reduceActionForMemberAccess1: 9912321 false ) 
	#(238 3 #reduceActionForAssignementOrEquals1: 11754497 false ) 
	#(232 3 #reduceActionForComparisonOperation1: 11226113 false ) 
	#(234 3 #reduceActionForArithmeticOperation1: 11397121 false ) 
	#(236 3 #reduceActionForBooleanBinaryOperation1: 11551745 false ) 
	#(150 2 #reduceActionFor_eol__2: 3934210 false ) 
	#(148 2 #reduceActionFor__eol___ModuleStatement__element___1: 3932161 false ) 
	#(197 3 #reduceActionForVariable2: 8464386 false ) 
	#(159 1 #liftFirstValue: 4543489 false ) 
	#(159 1 #liftFirstValue: 4543490 false ) 
	#(159 1 #liftFirstValue: 4543491 false ) 
	#(159 1 #liftFirstValue: 4543492 false ) 
	#(159 1 #liftFirstValue: 4543493 false ) 
	#(159 1 #liftFirstValue: 4543494 false ) 
	#(159 1 #liftFirstValue: 4543495 false ) 
	#(159 1 #liftFirstValue: 4543496 false ) 
	#(159 1 #liftFirstValue: 4543497 false ) 
	#(159 1 #liftFirstValue: 4543498 false ) 
	#(159 1 #reduceActionForBaseType11: 4543499 false ) 
	#(161 1 #reduceActionForComplexType1: 4742145 false ) 
	#(162 1 #liftFirstValue: 4791297 false ) 
	#(162 1 #liftFirstValue: 4791298 false ) 
	#(163 2 #reduceActionForTypedThing1: 4824065 false ) 
	#(204 2 #reduceActionFor______Variable__variable____2: 8934402 false ) 
	#(246 4 #reduceActionForInfinityLoop1: 12562433 false ) 
	#(176 2 #reduceActionFor__eol___Statement__statement_____2: 5757954 false ) 
	#(179 2 #reduceActionForParameterList1: 6196225 false ) 
	#(184 0 #reduceActionFor_____Expression__default___1: 6413313 false ) 
	#(181 0 #reduceActionFor__eol___ModuleStatement__element____1: 6240257 false ) 
	#(239 4 #reduceActionForExplicitAssignement1: 11846657 false ) 
	#(282 4 #reduceActionForOnErrorResumeNext1: 15769601 false ) 
	#(171 2 #reduceActionFor__eol___Statement__statement_____2: 5405698 false ) 
	#(137 1 #reduceActionFor_HEX_INTEGER___1: 2592769 false ) 
	#(268 4 #reduceActionForLabelSub2: 14952450 false ) 
	#(268 4 #reduceActionForLabelSub3: 14952451 false ) 
	#(217 2 #reduceActionForArgument2: 10231810 false ) 
	#(217 2 #reduceActionForArgument3: 10231811 false ) 
	#(219 2 #reduceActionFor_Argument__argument_________________3: 10348547 false ) 
	#(219 2 #reduceActionFor_Argument__argument_________________4: 10348548 false ) 
	#(218 3 #reduceActionForArgumentList2: 10333186 false ) 
	#(221 1 #reduceActionFor_Argument__argument_________________1: 10408961 false ) 
	#(221 1 #reduceActionFor______________Argument__argument____3: 10408963 false ) 
	#(222 2 #reduceActionFor_Argument__argument__________________2: 10408962 false ) 
	#(154 2 #reduceActionFor__eol___ModuleStatement__element___1: 4433921 false ) 
	#(157 2 #reduceActionFor__eol___ModuleStatement__element___1: 4503553 false ) 
	#(173 4 #reduceActionForEvent2: 5576706 false ) 
	#(216 4 #reduceActionForProcedureCallOrArrayAccess1: 10109953 false ) 
	#(166 3 #reduceActionForTypedAndInstantiatedThing1: 4918273 false ) 
	#(203 2 #reduceActionFor______Variable__variable___1: 8934401 false ) 
	#(246 5 #reduceActionForInfinityLoop2: 12562434 false ) 
	#(246 5 #reduceActionForInfinityLoop3: 12562435 false ) 
	#(177 1 #reduceActionForEnumEntry1: 5829633 false ) 
	#(175 2 #reduceActionFor__eol___ModuleStatement__element___1: 5757953 false ) 
	#(184 1 #reduceActionFor_____Expression__default___2: 6413314 false ) 
	#(182 2 #reduceActionForParameter1: 6297601 false ) 
	#(255 5 #reduceActionForIfThenColon1: 13928449 false ) 
	#(170 2 #reduceActionFor__eol___ModuleStatement__element___1: 5405697 false ) 
	#(249 5 #reduceActionForWhileWend1: 13011969 false ) 
	#(137 2 #reduceActionFor_eol__2: 2592770 false ) 
	#(268 5 #reduceActionForLabelSub4: 14952452 false ) 
	#(217 3 #reduceActionForArgument4: 10231812 false ) 
	#(221 2 #reduceActionFor______________Argument__argument____2: 10408962 false ) 
	#(221 2 #reduceActionFor_Argument__argument_________________4: 10408964 false ) 
	#(193 5 #reduceActionForModuleConstant1: 8135681 false ) 
	#(185 6 #reduceActionForDeclareSub1: 6673409 false ) 
	#(165 0 #reduceActionFor__eol___ModuleStatement__element____1: 4875265 false ) 
	#(247 6 #reduceActionForWhileTrue1: 12686337 false ) 
	#(246 6 #reduceActionForInfinityLoop4: 12562436 false ) 
	#(174 6 #reduceActionForDefineEnum1: 5685249 false ) 
	#(182 3 #reduceActionForParameter9: 6297609 false ) 
	#(182 3 #reduceActionForParameter3: 6297603 false ) 
	#(183 2 #reduceActionFor______Variable__variable___1: 6413313 false ) 
	#(182 3 #reduceActionForParameter2: 6297602 false ) 
	#(182 3 #reduceActionForParameter5: 6297605 false ) 
	#(179 4 #reduceActionForParameterList2: 6196226 false ) 
	#(181 2 #reduceActionFor______Variable__variable____2: 6240258 false ) 
	#(260 1 #reduceActionFor_HEX_INTEGER___1: 14497793 false ) 
	#(259 1 #liftFirstValue: 14497793 false ) 
	#(261 1 #liftFirstValue: 14599169 false ) 
	#(261 1 #liftFirstValue: 14599170 false ) 
	#(169 6 #reduceActionForDefineType1: 5337089 false ) 
	#(172 2 #reduceActionForTypeEntry1: 5477377 false ) 
	#(249 6 #reduceActionForWhileWend2: 13011970 false ) 
	#(249 6 #reduceActionForWhileWend3: 13011971 false ) 
	#(285 6 #reduceActionForWith1: 16017409 false ) 
	#(186 7 #reduceActionForDeclareFunction1: 6863873 false ) 
	#(248 7 #reduceActionForUntilTrue1: 12840961 false ) 
	#(247 7 #reduceActionForWhileTrue2: 12686338 false ) 
	#(247 7 #reduceActionForWhileTrue3: 12686339 false ) 
	#(177 3 #reduceActionForEnumEntry2: 5829634 false ) 
	#(182 4 #reduceActionForParameter11: 6297611 false ) 
	#(182 4 #reduceActionForParameter10: 6297610 false ) 
	#(182 4 #reduceActionForParameter13: 6297613 false ) 
	#(182 4 #reduceActionForParameter4: 6297604 false ) 
	#(182 4 #reduceActionForParameter7: 6297607 false ) 
	#(182 4 #reduceActionForParameter6: 6297606 false ) 
	#(180 2 #reduceActionFor______Variable__variable___1: 6240257 false ) 
	#(189 7 #reduceActionForDefineFunction1: 7388161 false ) 
	#(256 7 #reduceActionForIfThen1: 14022657 false ) 
	#(260 2 #reduceActionFor_eol__2: 14497794 false ) 
	#(190 7 #reduceActionForDefineSub1: 7598081 false ) 
	#(249 7 #reduceActionForWhileWend4: 13011972 false ) 
	#(285 7 #reduceActionForWith2: 16017410 false ) 
	#(285 7 #reduceActionForWith3: 16017411 false ) 
	#(185 7 #reduceActionForDeclareSub3: 6673411 false ) 
	#(174 7 #reduceActionForDefineEnum2: 5685250 false ) 
	#(169 7 #reduceActionForDefineType2: 5337090 false ) 
	#(185 8 #reduceActionForDeclareSub2: 6673410 false ) 
	#(163 6 #reduceActionForTypedThing2: 4824066 false ) 
	#(165 2 #reduceActionFor______Variable__variable____2: 4875266 false ) 
	#(248 8 #reduceActionForUntilTrue2: 12840962 false ) 
	#(247 8 #reduceActionForWhileTrue4: 12686340 false ) 
	#(182 5 #reduceActionForParameter12: 6297612 false ) 
	#(182 5 #reduceActionForParameter15: 6297615 false ) 
	#(182 5 #reduceActionForParameter14: 6297614 false ) 
	#(182 5 #reduceActionForParameter8: 6297608 false ) 
	#(251 8 #reduceActionForForEach1: 13220865 false ) 
	#(189 8 #reduceActionForDefineFunction2: 7388162 false ) 
	#(265 0 #reduceActionFor__eol___ModuleStatement__element____1: 14799873 false ) 
	#(256 8 #reduceActionForIfThen2: 14022658 false ) 
	#(256 8 #reduceActionForIfThen3: 14022659 false ) 
	#(172 4 #reduceActionForTypeEntry2: 5477378 false ) 
	#(285 8 #reduceActionForWith4: 16017412 false ) 
	#(186 8 #reduceActionForDeclareFunction3: 6863875 false ) 
	#(189 8 #reduceActionForDefineFunction5: 7388165 false ) 
	#(190 8 #reduceActionForDefineSub3: 7598083 false ) 
	#(189 8 #reduceActionForDefineFunction3: 7388163 false ) 
	#(190 8 #reduceActionForDefineSub2: 7598082 false ) 
	#(186 9 #reduceActionForDeclareFunction2: 6863874 false ) 
	#(166 7 #reduceActionForTypedAndInstantiatedThing2: 4918274 false ) 
	#(164 2 #reduceActionFor______Variable__variable___1: 4875265 false ) 
	#(182 6 #reduceActionForParameter16: 6297616 false ) 
	#(251 9 #reduceActionForForEach2: 13220866 false ) 
	#(251 9 #reduceActionForForEach3: 13220867 false ) 
	#(251 9 #reduceActionForForEach5: 13220869 false ) 
	#(252 9 #reduceActionForForNext1: 13418497 false ) 
	#(263 4 #reduceActionForElseIfColon1: 14745601 false ) 
	#(256 9 #reduceActionForIfThen4: 14022660 false ) 
	#(185 9 #reduceActionForDeclareSub4: 6673412 false ) 
	#(189 9 #reduceActionForDefineFunction6: 7388166 false ) 
	#(189 9 #reduceActionForDefineFunction7: 7388167 false ) 
	#(190 9 #reduceActionForDefineSub4: 7598084 false ) 
	#(189 9 #reduceActionForDefineFunction4: 7388164 false ) 
	#(251 10 #reduceActionForForEach4: 13220868 false ) 
	#(251 10 #reduceActionForForEach6: 13220870 false ) 
	#(251 10 #reduceActionForForEach7: 13220871 false ) 
	#(252 10 #reduceActionForForNext2: 13418498 false ) 
	#(252 10 #reduceActionForForNext3: 13418499 false ) 
	#(257 10 #reduceActionForIfThenElse1: 14169089 false ) 
	#(262 5 #reduceActionForElseIfBlock1: 14637057 false ) 
	#(264 1 #reduceActionFor___Expression__ifMatch__________1: 14799873 false ) 
	#(265 2 #reduceActionFor______Variable__variable____2: 14799874 false ) 
	#(186 10 #reduceActionForDeclareFunction4: 6863876 false ) 
	#(189 10 #reduceActionForDefineFunction8: 7388168 false ) 
	#(251 11 #reduceActionForForEach8: 13220872 false ) 
	#(253 11 #reduceActionForForStepNext1: 13618177 false ) 
	#(252 11 #reduceActionForForNext4: 13418500 false ) 
	#(257 11 #reduceActionForIfThenElse2: 14169090 false ) 
	#(257 11 #reduceActionForIfThenElse3: 14169091 false ) 
	#(262 6 #reduceActionForElseIfBlock2: 14637058 false ) 
	#(264 2 #reduceActionFor___Expression__ifMatch__________2: 14799874 false ) 
	#(257 11 #reduceActionForIfThenElse5: 14169093 false ) 
	#(258 11 #reduceActionForIfThenElseIfElse1: 14404609 false ) 
	#(257 11 #reduceActionForIfThenElse9: 14169097 false ) 
	#(135 11 #reduceActionForGuidLiteral1: 2556929 false ) 
	#(253 12 #reduceActionForForStepNext2: 13618178 false ) 
	#(253 12 #reduceActionForForStepNext3: 13618179 false ) 
	#(257 12 #reduceActionForIfThenElse4: 14169092 false ) 
	#(257 12 #reduceActionForIfThenElse6: 14169094 false ) 
	#(257 12 #reduceActionForIfThenElse7: 14169095 false ) 
	#(258 12 #reduceActionForIfThenElseIfElse2: 14404610 false ) 
	#(257 12 #reduceActionForIfThenElse10: 14169098 false ) 
	#(257 12 #reduceActionForIfThenElse11: 14169099 false ) 
	#(257 12 #reduceActionForIfThenElse13: 14169101 false ) 
	#(258 12 #reduceActionForIfThenElseIfElse3: 14404611 false ) 
	#(253 13 #reduceActionForForStepNext4: 13618180 false ) 
	#(257 13 #reduceActionForIfThenElse8: 14169096 false ) 
	#(257 13 #reduceActionForIfThenElse12: 14169100 false ) 
	#(257 13 #reduceActionForIfThenElse14: 14169102 false ) 
	#(257 13 #reduceActionForIfThenElse15: 14169103 false ) 
	#(258 13 #reduceActionForIfThenElseIfElse4: 14404612 false ) 
	#(257 14 #reduceActionForIfThenElse16: 14169104 false )
	).
]

{ #category : #'generated-accessing' }
VBParser class >> scannerClass [
	^VBScanner
]

{ #category : #generated }
VBParser class >> startingStateFormodule [
	^ 1
]

{ #category : #generated }
VBParser class >> symbolNames [
	^ #('"!"' '"!="' '"&"' '"&&"' '"("' '")"' '"*"' '"+"' '","' '"-"' '"."' '"/"' '":"' '";"' '"<"' '"<="' '"<>"' '"="' '">"' '">="' '"AddressOf"' '"Call"' '"Mod"' '"NEW"' '"WithEvents"' '"["' '"\"' '"^"' '"alias"' '"and"' '"as"' '"attribute"' '"begin"' '"binary"' '"boolean"' '"byref"' '"byte"' '"byval"' '"class"' '"collection"' '"compare"' '"const"' '"database"' '"date"' '"declare"' '"delete"' '"dim"' '"do"' '"double"' '"each"' '"else"' '"elseif"' '"end"' '"enum"' '"eqv"' '"error"' '"event"' '"exit"' '"explicit"' '"for"' '"function"' '"gosub"' '"goto"' '"if"' '"in"' '"integer"' '"is"' '"let"' '"lib"' '"like"' '"long"' '"loop"' '"module"' '"next"' '"not"' '"object"' '"on"' '"option"' '"optional"' '"or"' '"paramarray"' '"preserve"' '"private"' '"property"' '"public"' '"redim"' '"resume"' '"return"' '"single"' '"static"' '"step"' '"string"' '"sub"' '"text"' '"then"' '"to"' '"type"' '"until"' '"variant"' '"version"' '"wend"' '"while"' '"with"' '"xor"' '"{"' '"||"' '"}"' '"~"' '<HEX_INTEGER>' '<DATE_LITERAL>' '<COLOR_LITERAL>' '<INTEGER_LITERAL>' '<FLOATING_POINT_LITERAL>' '<BOOLEAN_LITERAL>' '<STRING_LITERAL>' '<NULL_LITERAL>' '<IDENTIFIER>' '<HASH_IDENTIFIER>' '<whitespace>' '<eol>' '<comment>' 'B e g i n' 'module' '(<eol>* ModuleStatement ''element'' )' '(<eol>* ModuleStatement ''element'' )*' '<eol>*' 'literal' 'IntegerLiteral' 'ColorLiteral' 'DateLiteral' 'FloatLiteral' 'BooleanLiteral' 'StringLiteral' 'Null' 'GuidLiteral' '<HEX_INTEGER> +' '<HEX_INTEGER>+' 'Identifier' 'HashIdentifier' 'SimpleIdentifier' 'HeadlessIdentifier' 'QualifiedIdentifier' 'header' 'Option' 'SetUpAssignation' 'Attribute' 'Configuration' '( <eol>+ SetUpAssignation ''setting'')' '( <eol>+ SetUpAssignation ''setting'')*' '<eol>+' 'ModuleStatement' 'Statement' 'Block' '(<eol>* Statement ''statement''  )' '(<eol>* Statement ''statement''  )*' 'Body' '(<eol>* Block ''element''  )' '(<eol>* Block ''element''  )*' 'BaseType' 'Visibility' 'ComplexType' 'Type' 'TypedThing' '( "," literal ''size'')' '( "," literal ''size'')*' 'TypedAndInstantiatedThing' 'AsType' 'Types' 'DefineType' '( <eol>* TypeEntry ''field'' )' '( <eol>* TypeEntry ''field'' )*' 'TypeEntry' 'Event' 'DefineEnum' '( <eol>* EnumEntry ''field'')' '( <eol>* EnumEntry ''field'')*' 'EnumEntry' 'ParameterPassingStrategy' 'ParameterList' '( "," Parameter ''parameter'')' '( "," Parameter ''parameter'')*' 'Parameter' '("=" Expression ''default'')' '("=" Expression ''default'')?' 'DeclareSub' 'DeclareFunction' 'DeclareExternal' 'Modifier' 'DefineFunction' 'DefineSub' 'BehaviourDefinition' 'ModuleProperty' 'ModuleConstant' 'DefineVariable' 'ReDefineVariable' 'StaticVariable' 'Variable' 'ModuleProperties' 'DefineVariables' 'ReDefineVariables' 'StaticVariables' 'VariableList' '(","  Variable ''variable'' )' '(","  Variable ''variable'' )*' 'VariableDefinition' 'ValueStatement' 'Expression' 'ParentheseesExpression' 'ValueStatementList' '("," ValueStatement ''value'' )' '("," ValueStatement ''value'' ) *' 'Operation' 'DictionaryAccess' 'MemberAccess' 'ImplicitParenthesesLessCall' 'ProcedureCallOrArrayAccess' 'Argument' 'ArgumentList' '(Argument ''argument'' ? ("," | ";" ))' '(Argument ''argument'' ? ("," | ";" ))*' '( ("," | ";" )Argument ''argument'' ?)' '( ("," | ";" )Argument ''argument'' ?)*' 'ImplicitCall' 'StateAccess' 'ExplicitCall' 'UnaryOperation' 'NegatedOperation' 'PositiveOperation' 'NotOperation' 'BinaryOperation' 'ComparisonOperator' 'ComparisonOperation' 'ArithmeticOperator' 'ArithmeticOperation' 'BooleanOperator' 'BooleanBinaryOperation' 'ConcatenationOperation' 'AssignementOrEquals' 'ExplicitAssignement' 'ValueClause' 'AddressOfClause' 'NewClause' 'ControlFlowStatement' 'Loops' 'DoLoop' 'InfinityLoop' 'WhileTrue' 'UntilTrue' 'WhileWend' 'ForLoop' 'ForEach' 'ForNext' 'ForStepNext' 'If' 'IfThenColon' 'IfThen' 'IfThenElse' 'IfThenElseIfElse' '(ElseIf ''case'')' '(ElseIf ''case'') +' 'ElseIf' 'ElseIfBlock' 'ElseIfColon' '(  Expression ''ifMatch'' ?  ":" )' '(  Expression ''ifMatch'' ?  ":" )*' 'To' 'Label' 'LabelSub' 'Resume' 'ResumeLabel' 'ResumeNext' 'ResumeEmpty' 'Go' 'GoTo' 'GoToLabel' 'GoToLine' 'GoSub' 'GoSubLabel' 'GoSubLine' 'On' 'OnErrorGoTo' 'OnErrorResumeNext' 'OnExpressionGo' 'Error' 'With' 'Exits' 'ExitFunction' 'ExitSub' 'ExitDo' 'ExitFor' 'ExitProperty' 'E O F' 'error')
]

{ #category : #generated }
VBParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBModuleNode #VBModuleNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBIntegerLiteralNode #VBColorLiteralNode #VBDateLiteralNode #VBFloatLiteralNode #VBBooleanLiteralNode #VBStringLiteralNode #VBNullNode #VBGuidLiteralNode #OrderedCollection #OrderedCollection #VBProgramNode #VBHashIdentifierNode #VBSimpleIdentifierNode #VBHeadlessIdentifierNode #VBQualifiedIdentifierNode #VBHeaderNode #VBProgramNode #VBSetUpAssignationNode #VBModuleAttributeNode #VBConfigurationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #Object #VBBlockNode #OrderedCollection #OrderedCollection #VBBodyNode #OrderedCollection #OrderedCollection #Object #Object #VBComplexTypeNode #Object #VBAsTypeNode #OrderedCollection #OrderedCollection #VBAsTypeAndNewNode #VBProgramNode #VBProgramNode #VBDefineTypeNode #OrderedCollection #OrderedCollection #VBTypeEntryNode #VBEventNode #VBDefineEnumNode #OrderedCollection #OrderedCollection #VBEnumEntryNode #Object #VBParameterListNode #OrderedCollection #OrderedCollection #VBParameterNode #OrderedCollection #OrderedCollection #VBExternalSubNode #VBExternalFunctionNode #VBProgramNode #VBModifierNode #VBFunctionDefinitionNode #VBSubDefinitionNode #VBProgramNode #VBModulePropertyNode #VBModuleConstantNode #VBDimVariableNode #VBReDimVariableNode #VBStaticVariableNode #VBVariableNode #VBModuleMultiplePropertiesNode #VBDimMultipleVariablesNode #VBReDimMultipleVariablesNode #VBStaticMultipleVariablesNode #VBVariableListNode #OrderedCollection #OrderedCollection #VBProgramNode #VBProgramNode #VBProgramNode #VBParentheseesExpressionNode #VBValueStatementListNode #OrderedCollection #OrderedCollection #VBProgramNode #VBDictionaryAccessNode #VBMemberAccessNode #VBImplicitParenthesesLessCallNode #VBProcedureCallOrArrayAccessNode #VBArgumentNode #VBArgumentListNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBProgramNode #VBExplicitCallNode #VBProgramNode #VBNegatedOperationNode #VBPositiveOperationNode #VBNotOperationNode #VBProgramNode #OrderedCollection #VBComparisonOperationNode #OrderedCollection #VBArithmeticOperationNode #OrderedCollection #VBArithmeticOperationNode #VBConcatenationOperationNode #VBAssignementOrEqualsNode #VBExplicitAssignementNode #VBProgramNode #VBAddressOfClauseNode #VBNewClauseNode #Object #VBProgramNode #VBProgramNode #VBInfinityLoopNode #VBWhileTrueNode #VBUntilTrueNode #VBWhileWendNode #VBProgramNode #VBForEachNode #VBForNextNode #VBForStepNextNode #VBProgramNode #VBIfThenColonNode #VBIfThenNode #VBIfThenElseNode #VBIfThenElseIfElseNode #VBProgramNode #OrderedCollection #VBProgramNode #VBElseIfBlockNode #VBElseIfColonNode #OrderedCollection #OrderedCollection #VBProgramNode #VBGoToLabelNode #VBGoSubLabelNode #Object #VBResumeLabelNode #VBResumeNextNode #SmaCCToken #VBProgramNode #VBProgramNode #VBGoToLabelNode #VBGoToLineNode #VBProgramNode #VBGoSubLabelNode #VBGoSubLineNode #VBProgramNode #VBOnErrorGoToNode #VBOnErrorResumeNextNode #VBOnExpressionGoNode #VBErrorNode #VBWithNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBParser class >> transitionTable [
^#(
#[1 0 9 0 32 0 13 0 33 0 17 0 78 0 21 0 100 0 25 0 123 0 29 0 143 0 45 0 144 0 45 0 146 0 45 0 147 0 45 0 151] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 0 61 0 138 0 61 0 139 0 61 0 140 0 61 0 141 0 61 0 142 0 81 0 145] 
#[1 0 6 0 11 0 6 0 117 0 6 0 118 0 6 0 120 0 85 0 126] 
#[1 0 89 0 41 0 93 0 59 0 97 0 83 0 101 0 112 0 105 0 128] 
#[1 0 109 0 113 0 113 0 131] 
#[0 0 0 1 36] 
#[1 0 6 0 32 0 6 0 33 0 6 0 78 0 6 0 120 0 117 0 126] 
#[0 0 10 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 14 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 18 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 22 0 5 0 22 0 8 0 22 0 10 0 22 0 11 0 22 0 21 0 22 0 22 0 22 0 24 0 22 0 32 0 22 0 33 0 22 0 45 0 22 0 47 0 22 0 48 0 22 0 54 0 22 0 57 0 22 0 58 0 22 0 60 0 22 0 61 0 22 0 62 0 22 0 63 0 22 0 64 0 22 0 68 0 22 0 75 0 22 0 77 0 22 0 78 0 22 0 83 0 22 0 85 0 22 0 86 0 22 0 87 0 22 0 90 0 22 0 93 0 22 0 97 0 22 0 102 0 22 0 103 0 22 0 105 0 22 0 110 0 22 0 111 0 22 0 112 0 22 0 113 0 22 0 114 0 22 0 115 0 22 0 116 0 22 0 117 0 22 0 118 0 22 0 120 0 121 0 125 0 22 1 36] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 0 125 0 138 0 125 0 139 0 125 0 140 0 125 0 141 0 125 0 142] 
#[0 0 26 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 31 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 65 0 67 0 68 0 69 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 30 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 31 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 65 0 67 0 68 0 69 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 129 0 11 0 133 0 18] 
#[0 0 34 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 31 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 65 0 67 0 68 0 69 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 38 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 31 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 65 0 67 0 68 0 69 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 42 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 31 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 65 0 67 0 68 0 69 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 46 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 31 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 65 0 67 0 68 0 69 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 50 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 0 137 0 120 0 61 0 138 0 61 0 139 0 61 0 140 0 61 0 141 0 61 0 142 0 141 0 145] 
#[1 0 145 0 34 0 149 0 43 0 153 0 94] 
#[0 0 54 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 157 0 73] 
#[0 0 58 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 62 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 66 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 39 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 70 0 32 0 70 0 33 0 161 0 39 0 70 0 78 0 70 0 120] 
#[1 0 9 0 32 0 13 0 33 0 17 0 78 0 137 0 120 0 165 0 144 0 165 0 146 0 165 0 147 0 165 0 151] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 7 0 32 0 6 0 33 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 0 6 0 78 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 6 0 120 1 53 0 124 1 57 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 1 109 0 153 1 113 0 156 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35 0 74 1 36] 
#[0 0 78 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 31 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 65 0 67 0 68 0 69 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 213 0 117] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 2 221 0 127 2 221 0 128 2 221 0 129 2 221 0 130 2 221 0 131 2 221 0 132 2 221 0 133 2 221 0 134 2 221 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 2 221 0 206 2 221 0 207 2 221 0 208 2 221 0 212 2 221 0 213 2 221 0 214 2 221 0 215 2 221 0 216 2 221 0 223 2 221 0 224 2 221 0 225 2 221 0 226 2 221 0 227 2 221 0 228 2 221 0 229 2 221 0 230 2 221 0 232 2 221 0 234 2 221 0 236 2 221 0 237 2 221 0 238 2 221 0 239 2 221 0 240 2 221 0 241 2 221 0 242 2 221 1 30 2 221 1 31 2 221 1 32 2 221 1 33 2 221 1 34 2 221 1 35] 
#[0 0 82 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120] 
#[1 0 86 0 53 0 86 0 120 2 229 0 149] 
#[0 0 90 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 94 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 98 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 102 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 106 0 32 0 33 0 78 0 120] 
#[1 0 22 0 5 0 22 0 8 0 22 0 10 0 22 0 11 0 22 0 21 0 22 0 22 0 22 0 24 0 22 0 32 0 22 0 33 0 22 0 45 0 22 0 47 0 22 0 48 0 22 0 54 0 22 0 57 0 22 0 58 0 22 0 60 0 22 0 61 0 22 0 62 0 22 0 63 0 22 0 64 0 22 0 68 0 22 0 75 0 22 0 77 0 22 0 78 0 22 0 83 0 22 0 85 0 22 0 86 0 22 0 87 0 22 0 90 0 22 0 93 0 22 0 97 0 22 0 102 0 22 0 103 0 22 0 105 0 22 0 110 0 22 0 111 0 22 0 112 0 22 0 113 0 22 0 114 0 22 0 115 0 22 0 116 0 22 0 117 0 22 0 118 0 22 0 120 2 233 0 125 0 22 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 2 237 0 127 2 237 0 128 2 237 0 129 2 237 0 130 2 237 0 131 2 237 0 132 2 237 0 133 2 237 0 134 2 237 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 2 237 0 206 2 237 0 207 2 237 0 208 2 237 0 212 2 237 0 213 2 237 0 214 2 237 0 215 2 237 0 216 2 237 0 223 2 237 0 224 2 237 0 225 2 237 0 226 2 237 0 227 2 237 0 228 2 237 0 229 2 237 0 230 2 237 0 232 2 237 0 234 2 237 0 236 2 237 0 237 2 237 0 238 2 237 0 239 2 237 0 240 2 237 0 241 2 237 0 242 2 237 1 30 2 237 1 31 2 237 1 32 2 237 1 33 2 237 1 34 2 237 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 2 241 0 127 2 241 0 128 2 241 0 129 2 241 0 130 2 241 0 131 2 241 0 132 2 241 0 133 2 241 0 134 2 241 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 2 241 0 206 2 241 0 207 2 241 0 208 2 241 0 212 2 241 0 213 2 241 0 214 2 241 0 215 2 241 0 216 2 241 0 223 2 241 0 224 2 241 0 225 2 241 0 226 2 241 0 227 2 241 0 228 2 241 0 229 2 241 0 230 2 241 0 232 2 241 0 234 2 241 0 236 2 241 0 237 2 241 0 238 2 241 0 239 2 241 0 240 2 241 0 241 2 241 0 242 2 241 1 30 2 241 1 31 2 241 1 32 2 241 1 33 2 241 1 34 2 241 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 2 245 0 127 2 245 0 128 2 245 0 129 2 245 0 130 2 245 0 131 2 245 0 132 2 245 0 133 2 245 0 134 2 245 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 2 245 0 206 2 245 0 207 2 245 0 208 2 245 0 212 2 245 0 213 2 245 0 214 2 245 0 215 2 245 0 216 2 245 0 223 2 245 0 224 2 245 0 225 2 245 0 226 2 245 0 227 2 245 0 228 2 245 0 229 2 245 0 230 2 245 0 232 2 245 0 234 2 245 0 236 2 245 0 237 2 245 0 238 2 245 0 239 2 245 0 240 2 245 0 241 2 245 0 242 2 245 1 30 2 245 1 31 2 245 1 32 2 245 1 33 2 245 1 34 2 245 1 35] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 2 249 0 138 2 249 0 139 2 249 0 140 2 249 0 141 2 249 0 142] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 2 253 0 127 2 253 0 128 2 253 0 129 2 253 0 130 2 253 0 131 2 253 0 132 2 253 0 133 2 253 0 134 2 253 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 2 253 0 206 2 253 0 207 2 253 0 208 2 253 0 212 2 253 0 213 2 253 0 214 3 1 0 215 3 1 0 216 3 1 0 223 2 253 0 224 2 253 0 225 2 253 0 226 2 253 0 227 2 253 0 228 2 253 0 229 2 253 0 230 2 253 0 232 2 253 0 234 2 253 0 236 2 253 0 237 2 253 0 238 2 253 0 239 2 253 0 240 2 253 0 241 2 253 0 242 2 253 1 30 2 253 1 31 2 253 1 32 2 253 1 33 2 253 1 34 2 253 1 35] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 3 5 0 138 3 5 0 139 3 5 0 140 3 5 0 141 3 5 0 142] 
#[1 3 9 0 61 3 13 0 93] 
#[1 0 49 0 11 3 17 0 25 0 53 0 117 0 57 0 118 3 21 0 138 3 21 0 139 3 21 0 140 3 21 0 141 3 21 0 142 3 25 0 197 3 29 0 202] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 72 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 3 33 0 98 0 11 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 3 41 0 126] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 3 45 0 138 3 45 0 139 3 45 0 140 3 45 0 141 3 45 0 142] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 3 49 0 138 3 49 0 139 3 49 0 140 3 49 0 141 3 49 0 142] 
#[1 3 53 0 48 3 57 0 60 3 61 0 61 3 65 0 84 3 69 0 93] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 3 73 0 50 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 3 77 0 127 3 77 0 128 3 77 0 129 3 77 0 130 3 77 0 131 3 77 0 132 3 77 0 133 3 77 0 134 3 77 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 3 77 0 206 3 77 0 207 3 77 0 208 3 77 0 212 3 77 0 213 3 77 0 214 3 77 0 215 3 77 0 216 3 77 0 223 3 77 0 224 3 77 0 225 3 77 0 226 3 77 0 227 3 77 0 228 3 77 0 229 3 77 0 230 3 77 0 232 3 77 0 234 3 77 0 236 3 77 0 237 3 77 0 238 3 77 0 239 3 77 0 240 3 77 0 241 3 77 0 242 3 77 1 30 3 77 1 31 3 77 1 32 3 77 1 33 3 77 1 34 3 77 1 35] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 3 81 0 138 3 81 0 139 3 81 0 140 3 81 0 141 3 81 0 142] 
#[1 0 49 0 11 0 101 0 112 0 53 0 117 0 57 0 118 3 85 0 128 3 89 0 138 3 89 0 139 3 89 0 140 3 89 0 141 3 89 0 142] 
#[1 0 49 0 11 0 101 0 112 0 53 0 117 0 57 0 118 3 93 0 128 3 97 0 138 3 97 0 139 3 97 0 140 3 97 0 141 3 97 0 142] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 3 101 0 127 3 101 0 128 3 101 0 129 3 101 0 130 3 101 0 131 3 101 0 132 3 101 0 133 3 101 0 134 3 101 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 3 101 0 206 3 101 0 207 3 101 0 208 3 101 0 212 3 101 0 213 3 101 0 214 3 101 0 215 3 101 0 216 3 101 0 223 3 101 0 224 3 101 0 225 3 101 0 226 3 101 0 227 3 101 0 228 3 101 0 229 3 101 0 230 3 101 0 232 3 101 0 234 3 101 0 236 3 101 0 237 3 101 0 238 3 101 0 239 3 101 0 240 3 101 0 241 3 101 0 242 3 101 1 30 3 101 1 31 3 101 1 32 3 101 1 33 3 101 1 34 3 101 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 3 105 0 127 3 105 0 128 3 105 0 129 3 105 0 130 3 105 0 131 3 105 0 132 3 105 0 133 3 105 0 134 3 105 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 3 105 0 206 3 105 0 207 3 105 0 208 3 105 0 212 3 105 0 213 3 105 0 214 3 105 0 215 3 105 0 216 3 105 0 223 3 105 0 224 3 105 0 225 3 105 0 226 3 105 0 227 3 105 0 228 3 105 0 229 3 105 0 230 3 105 0 232 3 105 0 234 3 105 0 236 3 105 0 237 3 105 0 238 3 105 0 239 3 105 0 240 3 105 0 241 3 105 0 242 3 105 1 30 3 105 1 31 3 105 1 32 3 105 1 33 3 105 1 34 3 105 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 3 109 0 127 3 109 0 128 3 109 0 129 3 109 0 130 3 109 0 131 3 109 0 132 3 109 0 133 3 109 0 134 3 109 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 3 109 0 206 3 109 0 207 3 109 0 208 3 109 0 212 3 109 0 213 3 109 0 214 3 109 0 215 3 109 0 216 3 109 0 223 3 109 0 224 3 109 0 225 3 109 0 226 3 109 0 227 3 109 0 228 3 109 0 229 3 109 0 230 3 109 0 232 3 109 0 234 3 109 0 236 3 109 0 237 3 109 0 238 3 109 0 239 3 109 0 240 3 109 0 241 3 109 0 242 3 109 1 30 3 109 1 31 3 109 1 32 3 109 1 33 3 109 1 34 3 109 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 3 113 0 56 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 3 117 0 127 3 117 0 128 3 117 0 129 3 117 0 130 3 117 0 131 3 117 0 132 3 117 0 133 3 117 0 134 3 117 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 3 117 0 206 3 117 0 207 3 117 0 208 3 117 0 212 3 117 0 213 3 117 0 214 3 117 0 215 3 117 0 216 3 117 0 223 3 117 0 224 3 117 0 225 3 117 0 226 3 117 0 227 3 117 0 228 3 117 0 229 3 117 0 230 3 117 0 232 3 117 0 234 3 117 0 236 3 117 0 237 3 117 0 238 3 117 0 239 3 117 0 240 3 117 0 241 3 117 0 242 3 117 1 30 3 117 1 31 3 117 1 32 3 117 1 33 3 117 1 34 3 117 1 35] 
#[0 0 110 0 11 0 25 0 42 0 45 0 54 0 57 0 61 0 90 0 93 0 97 0 117 0 118] 
#[0 0 114 0 11 0 25 0 42 0 45 0 54 0 57 0 61 0 90 0 93 0 97 0 117 0 118] 
#[1 0 49 0 11 3 17 0 25 3 121 0 82 0 53 0 117 0 57 0 118 3 21 0 138 3 21 0 139 3 21 0 140 3 21 0 141 3 21 0 142 3 125 0 197 3 129 0 202] 
#[1 0 118 0 5 0 118 0 8 0 118 0 10 0 49 0 11 0 118 0 21 0 118 0 22 0 118 0 24 0 118 0 32 0 118 0 45 0 118 0 47 0 118 0 48 0 118 0 51 0 118 0 52 0 118 0 53 0 118 0 54 0 118 0 57 0 118 0 58 0 118 0 60 0 118 0 61 0 118 0 62 0 118 0 63 0 118 0 64 0 118 0 68 0 118 0 72 0 15 0 74 0 118 0 75 0 118 0 77 0 118 0 83 0 118 0 85 0 118 0 86 0 118 0 87 0 118 0 88 0 118 0 90 0 118 0 93 0 118 0 97 0 118 0 101 0 118 0 102 0 118 0 103 0 118 0 105 0 118 0 110 0 118 0 111 0 118 0 112 0 118 0 113 0 118 0 114 0 118 0 115 0 118 0 116 0 19 0 117 0 23 0 118 0 118 0 120 3 137 0 138 3 137 0 139 3 137 0 140 3 137 0 141 3 137 0 142 0 118 1 36] 
#[1 0 49 0 11 3 17 0 25 0 122 0 61 0 122 0 93 0 53 0 117 0 57 0 118 3 21 0 138 3 21 0 139 3 21 0 140 3 21 0 141 3 21 0 142 3 141 0 197 3 145 0 202] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 3 149 0 138 3 149 0 139 3 149 0 140 3 149 0 141 3 149 0 142] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 3 153 0 138 3 153 0 139 3 153 0 140 3 153 0 141 3 153 0 142] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 2 253 0 127 2 253 0 128 2 253 0 129 2 253 0 130 2 253 0 131 2 253 0 132 2 253 0 133 2 253 0 134 2 253 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 3 157 0 206 2 253 0 207 2 253 0 208 3 157 0 212 3 157 0 213 3 157 0 214 3 157 0 215 3 157 0 216 3 157 0 223 3 157 0 224 3 157 0 225 3 157 0 226 3 157 0 227 3 157 0 228 3 157 0 229 3 157 0 230 3 157 0 232 3 157 0 234 3 157 0 236 3 157 0 237 3 157 0 238 3 157 0 239 3 157 0 240 3 157 0 241 3 157 0 242 2 253 1 30 2 253 1 31 2 253 1 32 2 253 1 33 2 253 1 34 2 253 1 35] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 3 161 0 138 3 161 0 139 3 161 0 140 3 161 0 141 3 161 0 142] 
#[1 3 165 0 109 3 169 0 136] 
#[0 0 126 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 130 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 134 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 138 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 29 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 142 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 146 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 9 0 32 0 13 0 33 0 17 0 78 0 137 0 120 3 173 0 144 3 173 0 146 3 173 0 147 3 173 0 151] 
#[0 0 150 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 154 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 158 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 162 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 166 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 170 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 174 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 178 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 182 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 27 0 1 0 27 0 3 0 27 0 5 0 27 0 7 0 27 0 8 0 186 0 9 0 27 0 10 0 31 0 11 0 27 0 12 3 177 0 13 0 186 0 14 0 27 0 15 0 27 0 16 0 27 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 27 0 21 0 27 0 22 0 27 0 23 0 27 0 24 0 27 0 27 0 27 0 28 0 27 0 30 0 27 0 32 0 186 0 36 0 186 0 38 0 27 0 45 0 27 0 47 0 27 0 48 0 27 0 51 0 27 0 52 0 27 0 53 0 27 0 54 0 27 0 55 0 27 0 57 0 27 0 58 0 27 0 60 0 27 0 61 0 27 0 62 0 27 0 63 0 27 0 64 0 27 0 67 0 27 0 68 0 27 0 70 0 27 0 72 0 27 0 74 0 27 0 75 0 27 0 77 0 27 0 80 0 186 0 81 0 27 0 83 0 27 0 85 0 27 0 86 0 27 0 87 0 27 0 88 0 27 0 90 0 27 0 93 0 27 0 97 0 27 0 101 0 27 0 102 0 27 0 103 0 27 0 104 0 27 0 105 0 27 0 110 0 27 0 111 0 27 0 112 0 27 0 113 0 27 0 114 0 27 0 115 0 27 0 116 0 27 0 117 0 27 0 118 0 27 0 120 3 181 0 218 3 185 0 220 0 27 1 36] 
#[0 0 198 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 202 0 5 0 202 0 8 0 202 0 10 0 202 0 11 0 202 0 21 0 202 0 22 0 202 0 24 0 202 0 32 0 202 0 45 0 202 0 47 0 202 0 48 0 202 0 51 0 202 0 52 0 202 0 53 0 202 0 54 0 202 0 57 0 202 0 58 0 202 0 60 0 202 0 61 0 202 0 62 0 202 0 63 0 202 0 64 0 202 0 68 0 202 0 72 0 202 0 74 0 202 0 75 0 202 0 77 0 202 0 83 0 202 0 85 0 202 0 86 0 202 0 87 0 202 0 88 0 202 0 90 0 202 0 93 0 202 0 97 0 202 0 101 0 202 0 102 0 202 0 103 0 202 0 105 0 202 0 110 0 202 0 111 0 202 0 112 0 202 0 113 0 202 0 114 0 202 0 115 0 202 0 116 0 202 0 117 0 202 0 118 0 202 0 120 3 189 0 155 0 202 1 36] 
#[1 0 206 0 5 0 206 0 8 0 206 0 10 0 206 0 11 0 206 0 21 0 206 0 22 0 206 0 24 0 206 0 32 0 206 0 45 0 206 0 47 0 206 0 48 0 206 0 54 0 206 0 57 0 206 0 58 0 206 0 60 0 206 0 61 0 206 0 62 0 206 0 63 0 206 0 64 0 206 0 68 0 206 0 75 0 206 0 77 0 206 0 83 0 206 0 85 0 206 0 86 0 206 0 87 0 206 0 90 0 206 0 93 0 206 0 97 0 206 0 102 0 206 0 103 0 206 0 105 0 206 0 110 0 206 0 111 0 206 0 112 0 206 0 113 0 206 0 114 0 206 0 115 0 206 0 116 0 206 0 117 0 206 0 118 0 206 0 120 3 193 0 158 0 206 1 36] 
#[0 0 210 1 36] 
#[1 0 49 0 11 3 17 0 25 3 197 0 42 3 201 0 45 3 205 0 54 3 209 0 57 3 213 0 61 3 217 0 90 3 221 0 93 3 225 0 97 0 53 0 117 0 57 0 118 3 21 0 138 3 21 0 139 3 21 0 140 3 21 0 141 3 21 0 142 3 229 0 188 3 233 0 197 3 237 0 202] 
#[0 0 214 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 218 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 222 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 226 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 230 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 234 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 238 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 3 241 0 61 3 245 0 93] 
#[0 0 242 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 246 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 250 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 254 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 2 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 6 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 10 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 14 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 18 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 22 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 26 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 30 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 34 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 38 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 1 42 0 21 1 42 0 22 4 49 0 23 1 42 0 24 4 53 0 27 4 57 0 28 4 61 0 30 1 42 0 32 1 42 0 45 1 42 0 47 1 42 0 48 1 42 0 51 1 42 0 52 1 42 0 53 1 42 0 54 4 65 0 55 1 42 0 57 1 42 0 58 1 42 0 60 1 42 0 61 1 42 0 62 1 42 0 63 1 42 0 64 4 69 0 67 1 42 0 68 4 73 0 70 1 42 0 72 1 42 0 74 1 42 0 75 1 42 0 77 4 77 0 80 1 42 0 83 1 42 0 85 1 42 0 86 1 42 0 87 1 42 0 88 1 42 0 90 1 42 0 93 1 42 0 97 1 42 0 101 1 42 0 102 1 42 0 103 4 81 0 104 1 42 0 105 1 42 0 110 1 42 0 111 1 42 0 112 1 42 0 113 1 42 0 114 1 42 0 115 1 42 0 116 1 42 0 117 1 42 0 118 1 42 0 120 4 85 0 231 4 89 0 233 4 93 0 235 1 42 1 36] 
#[0 1 46 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 50 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 54 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 58 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 62 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 66 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 70 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 74 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 78 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 82 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 86 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 90 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 94 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 98 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 102 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 106 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 110 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 114 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 118 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 122 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 126 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 130 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 134 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 138 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 142 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 146 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 150 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 154 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 158 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 162 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 166 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 170 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 174 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 178 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 182 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 186 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 190 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 194 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 198 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 202 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 0 35 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 214 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 218 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 222 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 226 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 230 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 234 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 238 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 242 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 246 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 250 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 1 254 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 2 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 6 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 10 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 14 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 18 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 22 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 2 26 0 1 2 26 0 3 0 39 0 5 2 26 0 7 0 39 0 8 0 39 0 10 0 39 0 11 2 26 0 12 2 26 0 15 2 26 0 16 2 26 0 17 2 26 0 18 2 26 0 19 2 26 0 20 0 39 0 21 0 39 0 22 2 26 0 23 0 39 0 24 2 26 0 27 2 26 0 28 2 26 0 30 0 39 0 32 0 39 0 45 0 39 0 47 0 39 0 48 0 39 0 51 0 39 0 52 0 39 0 53 0 39 0 54 2 26 0 55 0 39 0 57 0 39 0 58 0 39 0 60 0 39 0 61 0 39 0 62 0 39 0 63 0 39 0 64 2 26 0 67 0 39 0 68 2 26 0 70 0 39 0 72 0 39 0 74 0 39 0 75 0 39 0 77 2 26 0 80 0 39 0 83 0 39 0 85 0 39 0 86 0 39 0 87 0 39 0 88 0 39 0 90 0 39 0 93 0 39 0 97 0 39 0 101 0 39 0 102 0 39 0 103 2 26 0 104 0 39 0 105 0 39 0 110 0 39 0 111 0 39 0 112 0 39 0 113 0 39 0 114 0 39 0 115 0 39 0 116 0 39 0 117 0 39 0 118 0 39 0 120 0 39 1 36] 
#[0 2 34 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 38 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 42 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 46 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 50 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 54 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 31 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 65 0 67 0 68 0 69 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 27 0 1 0 27 0 3 0 27 0 5 0 27 0 6 0 27 0 7 0 27 0 8 0 27 0 9 0 27 0 10 0 31 0 11 0 27 0 12 0 27 0 13 0 27 0 14 0 27 0 15 0 27 0 16 0 27 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 27 0 21 0 27 0 22 0 27 0 23 0 27 0 24 0 27 0 27 0 27 0 28 0 27 0 30 0 27 0 32 0 27 0 33 0 186 0 36 0 186 0 38 0 27 0 45 0 27 0 47 0 27 0 48 0 27 0 51 0 27 0 52 0 27 0 53 0 27 0 54 0 27 0 55 0 27 0 57 0 27 0 58 0 27 0 60 0 27 0 61 0 27 0 62 0 27 0 63 0 27 0 64 0 27 0 67 0 27 0 68 0 27 0 70 0 27 0 72 0 27 0 74 0 27 0 75 0 27 0 77 0 27 0 78 0 27 0 80 0 186 0 81 0 27 0 83 0 27 0 85 0 27 0 86 0 27 0 87 0 27 0 88 0 27 0 90 0 27 0 91 0 27 0 93 0 27 0 95 0 27 0 96 0 27 0 97 0 27 0 101 0 27 0 102 0 27 0 103 0 27 0 104 0 27 0 105 0 27 0 110 0 27 0 111 0 27 0 112 0 27 0 113 0 27 0 114 0 27 0 115 0 27 0 116 0 27 0 117 0 27 0 118 0 27 0 120 3 181 0 218 3 185 0 220 0 27 1 36] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 2 58 0 21 2 58 0 22 4 49 0 23 2 58 0 24 4 53 0 27 4 57 0 28 4 61 0 30 2 58 0 32 2 58 0 33 2 58 0 45 2 58 0 47 2 58 0 48 2 58 0 51 2 58 0 52 2 58 0 53 2 58 0 54 4 65 0 55 2 58 0 57 2 58 0 58 2 58 0 60 2 58 0 61 2 58 0 62 2 58 0 63 2 58 0 64 4 69 0 67 2 58 0 68 4 73 0 70 2 58 0 72 2 58 0 74 2 58 0 75 2 58 0 77 2 58 0 78 4 77 0 80 2 58 0 83 2 58 0 85 2 58 0 86 2 58 0 87 2 58 0 88 2 58 0 90 2 58 0 93 2 58 0 97 2 58 0 101 2 58 0 102 2 58 0 103 4 81 0 104 2 58 0 105 2 58 0 110 2 58 0 111 2 58 0 112 2 58 0 113 2 58 0 114 2 58 0 115 2 58 0 116 2 58 0 117 2 58 0 118 2 58 0 120 4 85 0 231 4 89 0 233 4 93 0 235 2 58 1 36] 
#[0 2 26 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 4 97 0 53 4 101 0 120 4 105 0 148 4 109 0 150] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 7 0 32 0 6 0 33 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 0 6 0 78 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 6 0 120 1 53 0 124 1 57 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 1 109 0 153 4 113 0 156 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35 2 62 1 36] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 117 0 6 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 49 0 23 4 53 0 27 4 57 0 28 4 61 0 30 4 65 0 55 4 69 0 67 4 73 0 70 4 77 0 80 4 81 0 104 4 85 0 231 4 89 0 233 4 93 0 235] 
#[1 3 249 0 1 0 43 0 3 4 1 0 5 2 66 0 6 4 5 0 7 2 66 0 8 2 66 0 9 2 66 0 10 4 17 0 11 4 21 0 12 2 66 0 13 2 66 0 14 2 66 0 15 2 66 0 16 2 66 0 17 2 66 0 18 2 66 0 19 2 66 0 20 2 66 0 21 2 66 0 22 4 49 0 23 2 66 0 24 0 47 0 27 4 57 0 28 2 66 0 30 2 66 0 32 2 66 0 33 2 66 0 45 2 66 0 47 2 66 0 48 2 66 0 51 2 66 0 52 2 66 0 53 2 66 0 54 2 66 0 55 2 66 0 57 2 66 0 58 2 66 0 60 2 66 0 61 2 66 0 62 2 66 0 63 2 66 0 64 2 66 0 67 2 66 0 68 2 66 0 70 2 66 0 72 2 66 0 74 2 66 0 75 2 66 0 77 2 66 0 78 2 66 0 80 2 66 0 83 2 66 0 85 2 66 0 86 2 66 0 87 2 66 0 88 2 66 0 90 2 66 0 91 2 66 0 93 2 66 0 95 2 66 0 96 2 66 0 97 2 66 0 101 2 66 0 102 2 66 0 103 2 66 0 104 2 66 0 105 2 66 0 110 2 66 0 111 2 66 0 112 2 66 0 113 2 66 0 114 2 66 0 115 2 66 0 116 2 66 0 117 2 66 0 118 2 66 0 120 4 85 0 231 4 89 0 233 4 93 0 235 2 66 1 36] 
#[1 3 249 0 1 0 51 0 3 4 1 0 5 2 70 0 6 4 5 0 7 2 70 0 8 2 70 0 9 2 70 0 10 4 17 0 11 4 21 0 12 2 70 0 13 2 70 0 14 2 70 0 15 2 70 0 16 2 70 0 17 2 70 0 18 2 70 0 19 2 70 0 20 2 70 0 21 2 70 0 22 4 49 0 23 2 70 0 24 0 55 0 27 4 57 0 28 2 70 0 30 2 70 0 32 2 70 0 33 2 70 0 45 2 70 0 47 2 70 0 48 2 70 0 51 2 70 0 52 2 70 0 53 2 70 0 54 2 70 0 55 2 70 0 57 2 70 0 58 2 70 0 60 2 70 0 61 2 70 0 62 2 70 0 63 2 70 0 64 2 70 0 67 2 70 0 68 2 70 0 70 2 70 0 72 2 70 0 74 2 70 0 75 2 70 0 77 2 70 0 78 2 70 0 80 2 70 0 83 2 70 0 85 2 70 0 86 2 70 0 87 2 70 0 88 2 70 0 90 2 70 0 91 2 70 0 93 2 70 0 95 2 70 0 96 2 70 0 97 2 70 0 101 2 70 0 102 2 70 0 103 2 70 0 104 2 70 0 105 2 70 0 110 2 70 0 111 2 70 0 112 2 70 0 113 2 70 0 114 2 70 0 115 2 70 0 116 2 70 0 117 2 70 0 118 2 70 0 120 4 85 0 231 4 89 0 233 4 93 0 235 2 70 1 36] 
#[1 2 74 0 1 2 74 0 3 2 74 0 5 2 74 0 6 2 74 0 7 2 74 0 8 2 74 0 9 2 74 0 10 0 129 0 11 2 74 0 12 2 74 0 13 2 74 0 14 2 74 0 15 2 74 0 16 2 74 0 17 2 74 0 18 2 74 0 19 2 74 0 20 2 74 0 21 2 74 0 22 2 74 0 23 2 74 0 24 2 74 0 27 2 74 0 28 2 74 0 30 2 74 0 32 2 74 0 33 2 74 0 45 2 74 0 47 2 74 0 48 2 74 0 51 2 74 0 52 2 74 0 53 2 74 0 54 2 74 0 55 2 74 0 57 2 74 0 58 2 74 0 60 2 74 0 61 2 74 0 62 2 74 0 63 2 74 0 64 2 74 0 67 2 74 0 68 2 74 0 70 2 74 0 72 2 74 0 74 2 74 0 75 2 74 0 77 2 74 0 78 2 74 0 80 2 74 0 83 2 74 0 85 2 74 0 86 2 74 0 87 2 74 0 88 2 74 0 90 2 74 0 91 2 74 0 93 2 74 0 95 2 74 0 96 2 74 0 97 2 74 0 101 2 74 0 102 2 74 0 103 2 74 0 104 2 74 0 105 2 74 0 110 2 74 0 111 2 74 0 112 2 74 0 113 2 74 0 114 2 74 0 115 2 74 0 116 2 74 0 117 2 74 0 118 2 74 0 120 2 74 1 36] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 49 0 23 4 53 0 27 4 57 0 28 4 61 0 30 4 65 0 55 4 69 0 67 4 73 0 70 4 77 0 80 4 81 0 104 4 85 0 231 4 89 0 233 4 93 0 235] 
#[1 0 59 0 1 0 59 0 3 0 59 0 5 2 78 0 6 0 59 0 7 0 59 0 8 2 78 0 9 0 59 0 10 0 59 0 11 0 59 0 12 2 78 0 13 2 78 0 14 0 59 0 15 0 59 0 16 0 59 0 17 0 59 0 18 0 59 0 19 0 59 0 20 2 78 0 21 2 78 0 22 0 59 0 23 2 78 0 24 0 59 0 27 0 59 0 28 0 59 0 30 2 78 0 32 2 78 0 33 2 78 0 45 2 78 0 47 2 78 0 48 2 78 0 51 2 78 0 52 2 78 0 53 2 78 0 54 0 59 0 55 2 78 0 57 2 78 0 58 2 78 0 60 2 78 0 61 2 78 0 62 2 78 0 63 2 78 0 64 0 59 0 67 2 78 0 68 0 59 0 70 2 78 0 72 2 78 0 74 2 78 0 75 2 78 0 77 2 78 0 78 0 59 0 80 2 78 0 83 2 78 0 85 2 78 0 86 2 78 0 87 2 78 0 88 2 78 0 90 2 78 0 91 2 78 0 93 2 78 0 95 2 78 0 96 2 78 0 97 2 78 0 101 2 78 0 102 2 78 0 103 0 59 0 104 2 78 0 105 2 78 0 110 2 78 0 111 2 78 0 112 2 78 0 113 2 78 0 114 2 78 0 115 2 78 0 116 2 78 0 117 2 78 0 118 2 78 0 120 2 78 1 36] 
#[1 2 82 0 1 2 82 0 3 2 82 0 5 2 82 0 6 2 82 0 7 2 82 0 8 2 82 0 9 2 82 0 10 0 129 0 11 2 82 0 12 2 82 0 13 2 82 0 14 2 82 0 15 2 82 0 16 2 82 0 17 2 82 0 18 2 82 0 19 2 82 0 20 2 82 0 21 2 82 0 22 2 82 0 23 2 82 0 24 2 82 0 27 2 82 0 28 2 82 0 30 2 82 0 32 2 82 0 33 2 82 0 45 2 82 0 47 2 82 0 48 2 82 0 51 2 82 0 52 2 82 0 53 2 82 0 54 2 82 0 55 2 82 0 57 2 82 0 58 2 82 0 60 2 82 0 61 2 82 0 62 2 82 0 63 2 82 0 64 2 82 0 67 2 82 0 68 2 82 0 70 2 82 0 72 2 82 0 74 2 82 0 75 2 82 0 77 2 82 0 78 2 82 0 80 2 82 0 83 2 82 0 85 2 82 0 86 2 82 0 87 2 82 0 88 2 82 0 90 2 82 0 91 2 82 0 93 2 82 0 95 2 82 0 96 2 82 0 97 2 82 0 101 2 82 0 102 2 82 0 103 2 82 0 104 2 82 0 105 2 82 0 110 2 82 0 111 2 82 0 112 2 82 0 113 2 82 0 114 2 82 0 115 2 82 0 116 2 82 0 117 2 82 0 118 2 82 0 120 2 82 1 36] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 4 121 0 138 4 121 0 139 4 121 0 140 4 121 0 141 4 121 0 142] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 4 125 0 138 4 125 0 139 4 125 0 140 4 125 0 141 4 125 0 142] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 4 129 0 138 4 129 0 139 4 129 0 140 4 129 0 141 4 129 0 142] 
#[1 0 129 0 11 4 133 0 31 4 145 0 163 4 145 0 166 4 145 0 167] 
#[1 0 63 0 5 0 63 0 8 2 86 0 9 0 63 0 10 0 63 0 11 0 63 0 21 0 63 0 22 0 63 0 24 0 63 0 32 0 63 0 45 0 63 0 47 0 63 0 48 0 63 0 51 0 63 0 52 0 63 0 53 0 63 0 54 0 63 0 57 0 63 0 58 0 63 0 60 0 63 0 61 0 63 0 62 0 63 0 63 0 63 0 64 0 63 0 68 0 63 0 72 0 63 0 74 0 63 0 75 0 63 0 77 0 63 0 83 0 63 0 85 0 63 0 86 0 63 0 87 0 63 0 88 0 63 0 90 0 63 0 93 0 63 0 97 0 63 0 101 0 63 0 102 0 63 0 103 0 63 0 105 0 63 0 110 0 63 0 111 0 63 0 112 0 63 0 113 0 63 0 114 0 63 0 115 0 63 0 116 0 63 0 117 0 63 0 118 0 63 0 120 4 149 0 204 0 63 1 36] 
#[0 2 94 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 2 253 0 127 2 253 0 128 2 253 0 129 2 253 0 130 2 253 0 131 2 253 0 132 2 253 0 133 2 253 0 134 2 253 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 4 153 0 206 2 253 0 207 2 253 0 208 4 153 0 212 4 153 0 213 4 153 0 214 4 153 0 215 4 153 0 216 4 153 0 223 4 153 0 224 4 153 0 225 4 153 0 226 4 153 0 227 4 153 0 228 4 153 0 229 4 153 0 230 4 153 0 232 4 153 0 234 4 153 0 236 4 153 0 237 4 153 0 238 4 153 0 239 4 153 0 240 4 153 0 241 4 153 0 242 2 253 1 30 2 253 1 31 2 253 1 32 2 253 1 33 2 253 1 34 2 253 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 2 253 0 127 2 253 0 128 2 253 0 129 2 253 0 130 2 253 0 131 2 253 0 132 2 253 0 133 2 253 0 134 2 253 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 4 157 0 206 2 253 0 207 2 253 0 208 4 157 0 212 4 157 0 213 4 157 0 214 4 157 0 215 4 157 0 216 4 157 0 223 4 157 0 224 4 157 0 225 4 157 0 226 4 157 0 227 4 157 0 228 4 157 0 229 4 157 0 230 4 157 0 232 4 157 0 234 4 157 0 236 4 157 0 237 4 157 0 238 4 157 0 239 4 157 0 240 4 157 0 241 4 157 0 242 2 253 1 30 2 253 1 31 2 253 1 32 2 253 1 33 2 253 1 34 2 253 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 6 0 72 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 4 161 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 4 165 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 0 129 0 11 2 98 0 53 2 98 0 117 2 98 0 118 2 98 0 120 4 169 0 176] 
#[1 4 173 0 5 0 129 0 11 4 177 0 179] 
#[0 2 102 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 106 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 110 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 114 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 118 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 4 181 0 138 4 181 0 139 4 181 0 140 4 181 0 141 4 181 0 142] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 185 0 18 4 41 0 19 4 45 0 20 4 49 0 23 4 53 0 27 4 57 0 28 4 61 0 30 4 65 0 55 4 69 0 67 4 73 0 70 4 77 0 80 4 81 0 104 4 85 0 231 4 89 0 233 4 93 0 235] 
#[1 4 173 0 5 0 129 0 11 4 189 0 179] 
#[0 2 122 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 2 126 0 5 2 126 0 8 2 126 0 10 0 129 0 11 2 126 0 21 2 126 0 22 2 126 0 24 2 126 0 32 2 126 0 45 2 126 0 47 2 126 0 48 2 126 0 51 2 126 0 52 2 126 0 53 2 126 0 54 2 126 0 57 2 126 0 58 2 126 0 60 2 126 0 61 2 126 0 62 2 126 0 63 2 126 0 64 2 126 0 68 2 126 0 72 2 126 0 74 2 126 0 75 2 126 0 77 2 126 0 83 2 126 0 85 2 126 0 86 2 126 0 87 2 126 0 88 2 126 0 90 2 126 0 93 2 126 0 97 2 126 0 101 2 126 0 102 2 126 0 103 2 126 0 105 2 126 0 110 2 126 0 111 2 126 0 112 2 126 0 113 2 126 0 114 2 126 0 115 2 126 0 116 2 126 0 117 2 126 0 118 2 126 0 120 2 126 1 36] 
#[0 2 130 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 2 134 0 5 2 134 0 8 2 134 0 10 0 129 0 11 2 134 0 21 2 134 0 22 2 134 0 24 2 134 0 32 2 134 0 45 2 134 0 47 2 134 0 48 2 134 0 51 2 134 0 52 2 134 0 53 2 134 0 54 2 134 0 57 2 134 0 58 2 134 0 60 2 134 0 61 2 134 0 62 2 134 0 63 2 134 0 64 2 134 0 68 2 134 0 72 2 134 0 74 2 134 0 75 2 134 0 77 2 134 0 83 2 134 0 85 2 134 0 86 2 134 0 87 2 134 0 88 2 134 0 90 2 134 0 93 2 134 0 97 2 134 0 101 2 134 0 102 2 134 0 103 2 134 0 105 2 134 0 110 2 134 0 111 2 134 0 112 2 134 0 113 2 134 0 114 2 134 0 115 2 134 0 116 2 134 0 117 2 134 0 118 2 134 0 120 2 134 1 36] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 49 0 23 4 53 0 27 4 57 0 28 4 61 0 30 4 65 0 55 4 69 0 67 4 73 0 70 4 77 0 80 4 193 0 95 4 81 0 104 4 85 0 231 4 89 0 233 4 93 0 235] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 197 0 18 4 41 0 19 4 45 0 20 4 49 0 23 4 53 0 27 4 57 0 28 4 61 0 30 4 65 0 55 4 69 0 67 4 73 0 70 4 77 0 80 4 81 0 104 4 85 0 231 4 89 0 233 4 93 0 235] 
#[1 3 249 0 1 0 75 0 3 4 1 0 5 2 138 0 6 4 5 0 7 4 9 0 8 2 138 0 9 4 13 0 10 4 17 0 11 4 21 0 12 2 138 0 13 2 138 0 14 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 2 138 0 21 2 138 0 22 4 49 0 23 2 138 0 24 0 79 0 27 4 57 0 28 4 61 0 30 2 138 0 32 2 138 0 33 2 138 0 45 2 138 0 47 2 138 0 48 2 138 0 51 2 138 0 52 2 138 0 53 2 138 0 54 4 65 0 55 2 138 0 57 2 138 0 58 2 138 0 60 2 138 0 61 2 138 0 62 2 138 0 63 2 138 0 64 4 69 0 67 2 138 0 68 4 73 0 70 2 138 0 72 2 138 0 74 2 138 0 75 2 138 0 77 2 138 0 78 4 77 0 80 2 138 0 83 2 138 0 85 2 138 0 86 2 138 0 87 2 138 0 88 2 138 0 90 2 138 0 91 2 138 0 93 2 138 0 95 2 138 0 96 2 138 0 97 2 138 0 101 2 138 0 102 2 138 0 103 4 81 0 104 2 138 0 105 2 138 0 110 2 138 0 111 2 138 0 112 2 138 0 113 2 138 0 114 2 138 0 115 2 138 0 116 2 138 0 117 2 138 0 118 2 138 0 120 4 85 0 231 4 89 0 233 4 93 0 235 2 138 1 36] 
#[1 0 229 0 63 4 201 0 87 4 205 1 18 4 205 1 19 4 205 1 20] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 49 0 23 4 53 0 27 4 57 0 28 4 61 0 30 4 65 0 55 0 225 0 62 0 229 0 63 4 69 0 67 4 73 0 70 4 77 0 80 4 81 0 104 4 85 0 231 4 89 0 233 4 93 0 235 4 209 1 17 4 209 1 18 4 209 1 19 4 209 1 20 4 209 1 21 4 209 1 22 4 209 1 23] 
#[1 0 49 0 11 3 17 0 25 0 53 0 117 0 57 0 118 3 21 0 138 3 21 0 139 3 21 0 140 3 21 0 141 3 21 0 142 4 213 0 197 4 217 0 202] 
#[1 0 83 0 5 0 83 0 8 2 86 0 9 0 83 0 10 0 83 0 11 0 83 0 21 0 83 0 22 0 83 0 24 0 83 0 32 0 83 0 45 0 83 0 47 0 83 0 48 0 83 0 51 0 83 0 52 0 83 0 53 0 83 0 54 0 83 0 57 0 83 0 58 0 83 0 60 0 83 0 61 0 83 0 62 0 83 0 63 0 83 0 64 0 83 0 68 0 83 0 72 0 83 0 74 0 83 0 75 0 83 0 77 0 83 0 83 0 83 0 85 0 83 0 86 0 83 0 87 0 83 0 88 0 83 0 90 0 83 0 93 0 83 0 97 0 83 0 101 0 83 0 102 0 83 0 103 0 83 0 105 0 83 0 110 0 83 0 111 0 83 0 112 0 83 0 113 0 83 0 114 0 83 0 115 0 83 0 116 0 83 0 117 0 83 0 118 0 83 0 120 4 149 0 204 0 83 1 36] 
#[0 2 146 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 2 150 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 2 154 0 5 2 154 0 8 2 154 0 10 0 129 0 11 2 154 0 21 2 154 0 22 2 154 0 24 2 154 0 32 2 154 0 45 2 154 0 47 2 154 0 48 2 154 0 51 2 154 0 52 2 154 0 53 2 154 0 54 2 154 0 57 2 154 0 58 2 154 0 60 2 154 0 61 2 154 0 62 2 154 0 63 2 154 0 64 2 154 0 68 2 154 0 72 2 154 0 74 2 154 0 75 2 154 0 77 2 154 0 83 2 154 0 85 2 154 0 86 2 154 0 87 2 154 0 88 2 154 0 90 2 154 0 93 2 154 0 97 2 154 0 101 2 154 0 102 2 154 0 103 2 154 0 105 2 154 0 110 2 154 0 111 2 154 0 112 2 154 0 113 2 154 0 114 2 154 0 115 2 154 0 116 2 154 0 117 2 154 0 118 2 154 0 120 2 154 1 36] 
#[1 0 87 0 5 0 87 0 8 2 86 0 9 0 87 0 10 0 87 0 11 0 87 0 21 0 87 0 22 0 87 0 24 0 87 0 32 0 87 0 45 0 87 0 47 0 87 0 48 0 87 0 51 0 87 0 52 0 87 0 53 0 87 0 54 0 87 0 57 0 87 0 58 0 87 0 60 0 87 0 61 0 87 0 62 0 87 0 63 0 87 0 64 0 87 0 68 0 87 0 72 0 87 0 74 0 87 0 75 0 87 0 77 0 87 0 83 0 87 0 85 0 87 0 86 0 87 0 87 0 87 0 88 0 87 0 90 0 87 0 93 0 87 0 97 0 87 0 101 0 87 0 102 0 87 0 103 0 87 0 105 0 87 0 110 0 87 0 111 0 87 0 112 0 87 0 113 0 87 0 114 0 87 0 115 0 87 0 116 0 87 0 117 0 87 0 118 0 87 0 120 4 149 0 204 0 87 1 36] 
#[0 2 162 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 4 173 0 5 0 129 0 11 4 221 0 179] 
#[1 0 129 0 11 2 166 0 53 2 166 0 117 2 166 0 118 2 166 0 120 4 225 0 171] 
#[1 1 38 0 1 1 38 0 3 0 91 0 5 1 38 0 7 0 91 0 8 0 91 0 10 0 91 0 11 1 38 0 12 1 38 0 15 1 38 0 16 1 38 0 17 1 38 0 18 1 38 0 19 1 38 0 20 0 6 0 21 0 6 0 22 1 38 0 23 0 6 0 24 1 38 0 27 1 38 0 28 1 38 0 30 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 1 38 0 55 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 1 38 0 67 0 6 0 68 1 38 0 70 0 6 0 75 0 6 0 77 1 38 0 80 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 101 0 6 0 102 0 6 0 103 1 38 0 104 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 4 229 0 126] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 129 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 53 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 4 233 0 126] 
#[0 2 170 0 10 0 109] 
#[1 4 237 0 10 4 241 0 109] 
#[0 2 174 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 95 0 21 0 99 0 22 0 103 0 24 0 107 0 32 0 111 0 45 0 115 0 47 0 119 0 48 2 178 0 51 2 178 0 52 2 178 0 53 0 123 0 54 0 127 0 57 0 131 0 58 0 135 0 60 0 139 0 61 0 143 0 62 0 147 0 63 0 151 0 64 0 155 0 68 2 178 0 72 2 178 0 74 0 159 0 75 0 163 0 77 0 167 0 83 0 171 0 85 0 175 0 86 0 179 0 87 0 183 0 88 0 187 0 90 0 191 0 93 0 195 0 97 2 178 0 101 0 199 0 102 0 203 0 103 0 207 0 105 0 211 0 110 0 215 0 111 0 219 0 112 0 223 0 113 0 227 0 114 0 231 0 115 0 235 0 116 0 239 0 117 0 243 0 118 2 178 0 120 1 209 0 127 4 249 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 4 253 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35 2 178 1 36] 
#[0 2 182 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 2 186 0 1 2 186 0 3 0 169 0 5 2 186 0 6 2 186 0 7 0 173 0 8 5 1 0 9 0 177 0 10 0 49 0 11 2 186 0 12 2 186 0 13 0 247 0 14 2 186 0 15 2 186 0 16 2 186 0 17 2 186 0 18 2 186 0 19 2 186 0 20 0 251 0 21 0 255 0 22 2 186 0 23 1 3 0 24 2 186 0 27 2 186 0 28 2 186 0 30 2 186 0 32 2 186 0 33 5 9 0 36 5 21 0 38 2 186 0 45 2 186 0 47 2 186 0 48 2 186 0 51 2 186 0 52 2 186 0 53 2 186 0 54 2 186 0 55 2 186 0 57 1 7 0 58 2 186 0 60 2 186 0 61 2 186 0 62 2 186 0 63 2 186 0 64 2 186 0 67 1 11 0 68 2 186 0 70 2 186 0 72 2 186 0 74 1 15 0 75 2 186 0 77 2 186 0 78 2 186 0 80 5 17 0 81 2 186 0 83 2 186 0 85 2 186 0 86 2 186 0 87 2 186 0 88 2 186 0 90 2 186 0 91 2 186 0 93 2 186 0 95 2 186 0 96 2 186 0 97 2 186 0 101 2 186 0 102 2 186 0 103 2 186 0 104 1 19 0 105 1 23 0 110 1 27 0 111 1 31 0 112 1 35 0 113 1 39 0 114 1 43 0 115 1 47 0 116 1 51 0 117 1 55 0 118 2 186 0 120 5 25 0 127 5 25 0 128 5 25 0 129 5 25 0 130 5 25 0 131 5 25 0 132 5 25 0 133 5 25 0 134 5 25 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 5 21 0 178 5 25 0 206 5 25 0 207 5 25 0 208 5 25 0 212 5 25 0 213 5 25 0 214 5 25 0 215 5 25 0 216 5 29 0 217 5 33 0 219 5 37 0 222 5 25 0 223 5 25 0 224 5 25 0 225 5 25 0 226 5 25 0 227 5 25 0 228 5 25 0 229 5 25 0 230 5 25 0 232 5 25 0 234 5 25 0 236 5 25 0 237 5 25 0 238 5 25 0 239 5 25 0 240 5 25 0 241 5 25 0 242 5 25 1 30 5 25 1 31 5 25 1 32 5 25 1 33 5 25 1 34 5 25 1 35 2 186 1 36] 
#[1 1 59 0 5 1 59 0 8 1 59 0 10 1 59 0 11 1 59 0 21 1 59 0 22 1 59 0 24 1 59 0 32 1 59 0 45 1 59 0 47 1 59 0 48 2 190 0 51 2 190 0 52 2 190 0 53 1 59 0 54 1 59 0 57 1 59 0 58 1 59 0 60 1 59 0 61 1 59 0 62 1 59 0 63 1 59 0 64 1 59 0 68 2 190 0 72 2 190 0 74 1 59 0 75 1 59 0 77 1 59 0 83 1 59 0 85 1 59 0 86 1 59 0 87 2 190 0 88 1 59 0 90 1 59 0 93 1 59 0 97 2 190 0 101 1 59 0 102 1 59 0 103 1 59 0 105 1 59 0 110 1 59 0 111 1 59 0 112 1 59 0 113 1 59 0 114 1 59 0 115 1 59 0 116 1 59 0 117 1 59 0 118 1 59 0 120 5 41 0 126 5 45 0 154 2 190 1 36] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 5 49 0 126 5 53 0 157 2 194 1 36] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 5 57 0 138 5 57 0 139 5 57 0 140 5 57 0 141 5 57 0 142] 
#[1 5 61 0 61 5 65 0 93] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 5 69 0 138 5 69 0 139 5 69 0 140 5 69 0 141 5 69 0 142] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 5 73 0 138 5 73 0 139 5 73 0 140 5 73 0 141 5 73 0 142] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 5 77 0 138 5 77 0 139 5 77 0 140 5 77 0 141 5 77 0 142] 
#[0 0 122 0 61 0 93] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 5 81 0 138 5 81 0 139 5 81 0 140 5 81 0 141 5 81 0 142] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 5 85 0 138 5 85 0 139 5 85 0 140 5 85 0 141 5 85 0 142] 
#[1 5 89 0 61 5 93 0 93] 
#[1 1 63 0 5 1 63 0 8 2 86 0 9 1 63 0 10 1 63 0 11 1 63 0 21 1 63 0 22 1 63 0 24 1 63 0 32 1 63 0 45 1 63 0 47 1 63 0 48 1 63 0 51 1 63 0 52 1 63 0 53 1 63 0 54 1 63 0 57 1 63 0 58 1 63 0 60 1 63 0 61 1 63 0 62 1 63 0 63 1 63 0 64 1 63 0 68 1 63 0 72 1 63 0 74 1 63 0 75 1 63 0 77 1 63 0 83 1 63 0 85 1 63 0 86 1 63 0 87 1 63 0 88 1 63 0 90 1 63 0 93 1 63 0 97 1 63 0 101 1 63 0 102 1 63 0 103 1 63 0 105 1 63 0 110 1 63 0 111 1 63 0 112 1 63 0 113 1 63 0 114 1 63 0 115 1 63 0 116 1 63 0 117 1 63 0 118 1 63 0 120 4 149 0 204 1 63 1 36] 
#[0 2 202 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 5 97 0 138 5 97 0 139 5 97 0 140 5 97 0 141 5 97 0 142] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 5 101 0 138 5 101 0 139 5 101 0 140 5 101 0 141 5 101 0 142] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 5 105 0 138 5 105 0 139 5 105 0 140 5 105 0 141 5 105 0 142] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 5 109 0 127 5 109 0 128 5 109 0 129 5 109 0 130 5 109 0 131 5 109 0 132 5 109 0 133 5 109 0 134 5 109 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 5 109 0 206 5 109 0 207 5 109 0 208 5 109 0 212 5 109 0 213 5 109 0 214 5 109 0 215 5 109 0 216 5 109 0 223 5 109 0 224 5 109 0 225 5 109 0 226 5 109 0 227 5 109 0 228 5 109 0 229 5 109 0 230 5 109 0 232 5 109 0 234 5 109 0 236 5 109 0 237 5 109 0 238 5 109 0 239 5 109 0 240 5 109 0 241 5 109 0 242 5 109 1 30 5 109 1 31 5 109 1 32 5 109 1 33 5 109 1 34 5 109 1 35] 
#[1 0 186 0 5 0 186 0 6 0 186 0 8 0 186 0 9 0 186 0 10 0 186 0 11 0 186 0 14 0 186 0 21 0 186 0 22 0 186 0 24 0 186 0 36 0 186 0 38 0 186 0 58 0 186 0 68 0 186 0 75 0 186 0 81 0 186 0 105 0 186 0 110 0 186 0 111 0 186 0 112 0 186 0 113 0 186 0 114 0 186 0 115 0 186 0 116 0 186 0 117 0 186 0 118 5 113 0 218 3 185 0 220] 
#[0 2 206 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 2 210 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 2 214 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 5 117 0 138 5 117 0 139 5 117 0 140 5 117 0 141 5 117 0 142] 
#[0 2 218 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 2 222 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 2 226 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 2 230 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 5 121 0 127 5 121 0 128 5 121 0 129 5 121 0 130 5 121 0 131 5 121 0 132 5 121 0 133 5 121 0 134 5 121 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 5 121 0 206 5 121 0 207 5 121 0 208 5 121 0 212 5 121 0 213 5 121 0 214 5 121 0 215 5 121 0 216 5 121 0 223 5 121 0 224 5 121 0 225 5 121 0 226 5 121 0 227 5 121 0 228 5 121 0 229 5 121 0 230 5 121 0 232 5 121 0 234 5 121 0 236 5 121 0 237 5 121 0 238 5 121 0 239 5 121 0 240 5 121 0 241 5 121 0 242 5 121 1 30 5 121 1 31 5 121 1 32 5 121 1 33 5 121 1 34 5 121 1 35] 
#[0 2 234 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 2 238 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 2 242 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 2 246 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 2 250 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 2 254 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 3 2 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 3 6 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 3 10 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 3 14 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 3 18 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 5 125 0 127 5 125 0 128 5 125 0 129 5 125 0 130 5 125 0 131 5 125 0 132 5 125 0 133 5 125 0 134 5 125 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 5 125 0 206 5 125 0 207 5 125 0 208 5 125 0 212 5 125 0 213 5 125 0 214 5 125 0 215 5 125 0 216 5 125 0 223 5 125 0 224 5 125 0 225 5 125 0 226 5 125 0 227 5 125 0 228 5 125 0 229 5 125 0 230 5 125 0 232 5 125 0 234 5 125 0 236 5 125 0 237 5 125 0 238 5 125 0 239 5 125 0 240 5 125 0 241 5 125 0 242 5 125 1 30 5 125 1 31 5 125 1 32 5 125 1 33 5 125 1 34 5 125 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 5 129 0 127 5 129 0 128 5 129 0 129 5 129 0 130 5 129 0 131 5 129 0 132 5 129 0 133 5 129 0 134 5 129 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 5 129 0 206 5 129 0 207 5 129 0 208 5 129 0 212 5 129 0 213 5 129 0 214 5 129 0 215 5 129 0 216 5 129 0 223 5 129 0 224 5 129 0 225 5 129 0 226 5 129 0 227 5 129 0 228 5 129 0 229 5 129 0 230 5 129 0 232 5 129 0 234 5 129 0 236 5 129 0 237 5 129 0 238 5 129 0 239 5 129 0 240 5 129 0 241 5 129 0 242 5 129 1 30 5 129 1 31 5 129 1 32 5 129 1 33 5 129 1 34 5 129 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 5 133 0 127 5 133 0 128 5 133 0 129 5 133 0 130 5 133 0 131 5 133 0 132 5 133 0 133 5 133 0 134 5 133 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 5 133 0 206 5 133 0 207 5 133 0 208 5 133 0 212 5 133 0 213 5 133 0 214 5 133 0 215 5 133 0 216 5 133 0 223 5 133 0 224 5 133 0 225 5 133 0 226 5 133 0 227 5 133 0 228 5 133 0 229 5 133 0 230 5 133 0 232 5 133 0 234 5 133 0 236 5 133 0 237 5 133 0 238 5 133 0 239 5 133 0 240 5 133 0 241 5 133 0 242 5 133 1 30 5 133 1 31 5 133 1 32 5 133 1 33 5 133 1 34 5 133 1 35] 
#[0 3 22 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 33 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 78 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 26 0 11 0 117 0 118 0 120] 
#[0 3 30 0 53 0 120] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 5 137 0 120 0 61 0 138 0 61 0 139 0 61 0 140 0 61 0 141 0 61 0 142 5 141 0 145] 
#[0 3 34 1 36] 
#[0 3 38 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 129 0 11 5 145 0 69] 
#[1 0 129 0 11 5 149 0 69] 
#[1 0 129 0 11 4 133 0 31 5 153 0 163 5 153 0 166 5 153 0 167] 
#[1 0 49 0 11 5 157 0 24 5 217 0 35 5 217 0 37 5 217 0 40 5 217 0 44 5 217 0 49 5 217 0 66 5 217 0 71 5 217 0 76 5 217 0 89 5 217 0 92 5 201 0 99 0 53 0 117 0 57 0 118 5 205 0 138 5 205 0 139 5 205 0 140 5 205 0 141 5 205 0 142 5 217 0 159 5 217 0 161 5 217 0 162] 
#[0 3 42 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 46 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 50 0 5 0 8 0 9 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 3 54 0 5 3 54 0 8 5 221 0 9 3 54 0 10 3 54 0 11 3 54 0 21 3 54 0 22 3 54 0 24 3 54 0 32 3 54 0 45 3 54 0 47 3 54 0 48 3 54 0 51 3 54 0 52 3 54 0 53 3 54 0 54 3 54 0 57 3 54 0 58 3 54 0 60 3 54 0 61 3 54 0 62 3 54 0 63 3 54 0 64 3 54 0 68 3 54 0 72 3 54 0 74 3 54 0 75 3 54 0 77 3 54 0 83 3 54 0 85 3 54 0 86 3 54 0 87 3 54 0 88 3 54 0 90 3 54 0 93 3 54 0 97 3 54 0 101 3 54 0 102 3 54 0 103 3 54 0 105 3 54 0 110 3 54 0 111 3 54 0 112 3 54 0 113 3 54 0 114 3 54 0 115 3 54 0 116 3 54 0 117 3 54 0 118 3 54 0 120 5 225 0 203 3 54 1 36] 
#[1 1 38 0 1 1 38 0 3 0 91 0 5 1 38 0 7 0 91 0 8 0 91 0 10 0 91 0 11 1 38 0 12 1 38 0 15 1 38 0 16 1 38 0 17 1 38 0 18 1 38 0 19 1 38 0 20 0 6 0 21 0 6 0 22 1 38 0 23 0 6 0 24 1 38 0 27 1 38 0 28 1 38 0 30 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 1 38 0 55 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 1 38 0 67 0 6 0 68 1 38 0 70 0 6 0 75 0 6 0 77 1 38 0 80 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 1 38 0 104 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 5 229 0 126] 
#[1 1 38 0 1 1 38 0 3 0 91 0 5 1 38 0 7 0 91 0 8 0 91 0 10 0 91 0 11 1 38 0 12 1 38 0 15 1 38 0 16 1 38 0 17 1 38 0 18 1 38 0 19 1 38 0 20 0 6 0 21 0 6 0 22 1 38 0 23 0 6 0 24 1 38 0 27 1 38 0 28 1 38 0 30 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 1 38 0 55 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 1 38 0 67 0 6 0 68 1 38 0 70 0 6 0 72 0 6 0 75 0 6 0 77 1 38 0 80 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 1 38 0 104 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 5 233 0 126] 
#[1 5 237 0 72 0 101 0 112 0 137 0 120 5 241 0 128] 
#[1 0 6 0 72 0 6 0 112 0 6 0 120 5 245 0 126] 
#[1 0 6 0 11 0 6 0 53 0 6 0 117 0 6 0 118 0 6 0 120 5 249 0 126 5 253 0 175] 
#[1 6 1 0 6 0 49 0 11 5 9 0 36 6 17 0 38 6 5 0 79 6 9 0 81 0 53 0 117 0 57 0 118 6 13 0 138 6 13 0 139 6 13 0 140 6 13 0 141 6 13 0 142 6 17 0 178 6 21 0 182] 
#[0 3 58 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 129 0 11 6 25 0 65] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 6 29 0 127 6 29 0 128 6 29 0 129 6 29 0 130 6 29 0 131 6 29 0 132 6 29 0 133 6 29 0 134 6 29 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 6 29 0 206 6 29 0 207 6 29 0 208 6 29 0 212 6 29 0 213 6 29 0 214 6 29 0 215 6 29 0 216 6 29 0 223 6 29 0 224 6 29 0 225 6 29 0 226 6 29 0 227 6 29 0 228 6 29 0 229 6 29 0 230 6 29 0 232 6 29 0 234 6 29 0 236 6 29 0 237 6 29 0 238 6 29 0 239 6 29 0 240 6 29 0 241 6 29 0 242 6 29 1 30 6 29 1 31 6 29 1 32 6 29 1 33 6 29 1 34 6 29 1 35] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 4 133 0 31 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 6 33 0 126 6 37 0 163 6 37 0 166 6 37 0 167] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 6 41 0 13 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 51 0 6 0 52 0 6 0 53 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 6 45 0 126] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 6 49 0 127 6 49 0 128 6 49 0 129 6 49 0 130 6 49 0 131 6 49 0 132 6 49 0 133 6 49 0 134 6 49 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 6 49 0 206 6 49 0 207 6 49 0 208 6 49 0 212 6 49 0 213 6 49 0 214 6 49 0 215 6 49 0 216 6 49 0 223 6 49 0 224 6 49 0 225 6 49 0 226 6 49 0 227 6 49 0 228 6 49 0 229 6 49 0 230 6 49 0 232 6 49 0 234 6 49 0 236 6 49 0 237 6 49 0 238 6 49 0 239 6 49 0 240 6 49 0 241 6 49 0 242 6 49 1 30 6 49 1 31 6 49 1 32 6 49 1 33 6 49 1 34 6 49 1 35] 
#[0 6 53 0 74] 
#[0 3 62 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 66 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 1 67 0 5 1 67 0 8 2 86 0 9 1 67 0 10 1 67 0 11 1 67 0 21 1 67 0 22 1 67 0 24 1 67 0 32 1 67 0 45 1 67 0 47 1 67 0 48 1 67 0 51 1 67 0 52 1 67 0 53 1 67 0 54 1 67 0 57 1 67 0 58 1 67 0 60 1 67 0 61 1 67 0 62 1 67 0 63 1 67 0 64 1 67 0 68 1 67 0 72 1 67 0 74 1 67 0 75 1 67 0 77 1 67 0 83 1 67 0 85 1 67 0 86 1 67 0 87 1 67 0 88 1 67 0 90 1 67 0 93 1 67 0 97 1 67 0 101 1 67 0 102 1 67 0 103 1 67 0 105 1 67 0 110 1 67 0 111 1 67 0 112 1 67 0 113 1 67 0 114 1 67 0 115 1 67 0 116 1 67 0 117 1 67 0 118 1 67 0 120 4 149 0 204 1 67 1 36] 
#[0 3 74 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 6 57 0 126] 
#[1 0 6 0 11 0 6 0 53 0 6 0 117 0 6 0 118 0 6 0 120 6 61 0 126 6 65 0 170] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 0 6 0 101 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 6 69 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 6 73 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 6 0 53 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 6 77 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 6 81 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 6 85 0 109 6 89 0 137] 
#[0 3 78 0 10 0 109] 
#[0 3 82 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 154 0 1 0 154 0 3 0 154 0 5 0 154 0 7 0 154 0 8 0 154 0 10 0 154 0 11 0 154 0 12 0 154 0 15 0 154 0 16 0 154 0 17 0 154 0 18 0 154 0 19 0 154 0 20 0 154 0 21 0 154 0 22 0 154 0 23 0 154 0 24 0 154 0 27 0 154 0 28 0 154 0 30 0 154 0 32 0 154 0 45 0 154 0 47 0 154 0 48 0 154 0 54 0 154 0 55 0 154 0 57 0 154 0 58 0 154 0 60 0 154 0 61 0 154 0 62 0 154 0 63 0 154 0 64 0 154 0 67 0 154 0 68 0 154 0 70 0 154 0 75 0 154 0 77 0 154 0 80 0 154 0 83 0 154 0 85 0 154 0 86 0 154 0 87 1 71 0 88 0 154 0 90 0 154 0 93 0 154 0 97 0 154 0 102 0 154 0 103 0 154 0 104 0 154 0 105 0 154 0 110 0 154 0 111 0 154 0 112 0 154 0 113 0 154 0 114 0 154 0 115 0 154 0 116 0 154 0 117 0 154 0 118 0 154 0 120] 
#[1 6 97 0 88 0 101 0 112 6 101 0 128] 
#[0 3 86 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 90 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 94 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 81 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 3 98 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 58 0 68 0 75 0 81 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 6 105 0 127 6 105 0 128 6 105 0 129 6 105 0 130 6 105 0 131 6 105 0 132 6 105 0 133 6 105 0 134 6 105 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 6 105 0 206 6 105 0 207 6 105 0 208 6 105 0 212 6 105 0 213 6 105 0 214 6 105 0 215 6 105 0 216 6 105 0 223 6 105 0 224 6 105 0 225 6 105 0 226 6 105 0 227 6 105 0 228 6 105 0 229 6 105 0 230 6 105 0 232 6 105 0 234 6 105 0 236 6 105 0 237 6 105 0 238 6 105 0 239 6 105 0 240 6 105 0 241 6 105 0 242 6 105 1 30 6 105 1 31 6 105 1 32 6 105 1 33 6 105 1 34 6 105 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 6 109 0 81 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 6 113 0 127 6 113 0 128 6 113 0 129 6 113 0 130 6 113 0 131 6 113 0 132 6 113 0 133 6 113 0 134 6 113 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 6 113 0 206 6 113 0 207 6 113 0 208 6 113 0 212 6 113 0 213 6 113 0 214 6 113 0 215 6 113 0 216 6 113 0 223 6 113 0 224 6 113 0 225 6 113 0 226 6 113 0 227 6 113 0 228 6 113 0 229 6 113 0 230 6 113 0 232 6 113 0 234 6 113 0 236 6 113 0 237 6 113 0 238 6 113 0 239 6 113 0 240 6 113 0 241 6 113 0 242 6 113 1 30 6 113 1 31 6 113 1 32 6 113 1 33 6 113 1 34 6 113 1 35] 
#[1 3 249 0 1 1 75 0 3 4 1 0 5 3 102 0 6 4 5 0 7 4 9 0 8 3 102 0 9 4 13 0 10 4 17 0 11 4 21 0 12 3 102 0 13 3 102 0 14 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 3 102 0 21 3 102 0 22 4 49 0 23 3 102 0 24 1 79 0 27 4 57 0 28 4 61 0 30 3 102 0 32 3 102 0 33 3 102 0 45 3 102 0 47 3 102 0 48 3 102 0 51 3 102 0 52 3 102 0 53 3 102 0 54 4 65 0 55 3 102 0 57 3 102 0 58 3 102 0 60 3 102 0 61 3 102 0 62 3 102 0 63 3 102 0 64 4 69 0 67 3 102 0 68 4 73 0 70 3 102 0 72 3 102 0 74 3 102 0 75 3 102 0 77 3 102 0 78 4 77 0 80 3 102 0 83 3 102 0 85 3 102 0 86 3 102 0 87 3 102 0 88 3 102 0 90 3 102 0 91 3 102 0 93 3 102 0 95 3 102 0 96 3 102 0 97 3 102 0 101 3 102 0 102 3 102 0 103 4 81 0 104 3 102 0 105 3 102 0 110 3 102 0 111 3 102 0 112 3 102 0 113 3 102 0 114 3 102 0 115 3 102 0 116 3 102 0 117 3 102 0 118 3 102 0 120 4 85 0 231 4 89 0 233 4 93 0 235 3 102 1 36] 
#[1 2 186 0 1 2 186 0 3 2 186 0 5 2 186 0 6 2 186 0 7 2 186 0 8 6 117 0 9 2 186 0 10 2 186 0 11 2 186 0 12 2 186 0 13 1 83 0 14 2 186 0 15 2 186 0 16 2 186 0 17 2 186 0 18 2 186 0 19 2 186 0 20 2 186 0 21 2 186 0 22 2 186 0 23 2 186 0 24 2 186 0 27 2 186 0 28 2 186 0 30 2 186 0 32 2 186 0 33 2 186 0 45 2 186 0 47 2 186 0 48 2 186 0 51 2 186 0 52 2 186 0 53 2 186 0 54 2 186 0 55 2 186 0 57 2 186 0 58 2 186 0 60 2 186 0 61 2 186 0 62 2 186 0 63 2 186 0 64 2 186 0 67 2 186 0 68 2 186 0 70 2 186 0 72 2 186 0 74 2 186 0 75 2 186 0 77 2 186 0 78 2 186 0 80 2 186 0 83 2 186 0 85 2 186 0 86 2 186 0 87 2 186 0 88 2 186 0 90 2 186 0 91 2 186 0 93 2 186 0 95 2 186 0 96 2 186 0 97 2 186 0 101 2 186 0 102 2 186 0 103 2 186 0 104 2 186 0 105 2 186 0 110 2 186 0 111 2 186 0 112 2 186 0 113 2 186 0 114 2 186 0 115 2 186 0 116 2 186 0 117 2 186 0 118 2 186 0 120 6 125 0 222 2 186 1 36] 
#[0 3 106 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 3 110 0 1 3 110 0 3 3 110 0 5 3 110 0 6 3 110 0 7 3 110 0 8 6 129 0 9 3 110 0 10 3 110 0 11 3 110 0 12 3 110 0 13 1 87 0 14 3 110 0 15 3 110 0 16 3 110 0 17 3 110 0 18 3 110 0 19 3 110 0 20 3 110 0 21 3 110 0 22 3 110 0 23 3 110 0 24 3 110 0 27 3 110 0 28 3 110 0 30 3 110 0 32 3 110 0 33 3 110 0 45 3 110 0 47 3 110 0 48 3 110 0 51 3 110 0 52 3 110 0 53 3 110 0 54 3 110 0 55 3 110 0 57 3 110 0 58 3 110 0 60 3 110 0 61 3 110 0 62 3 110 0 63 3 110 0 64 3 110 0 67 3 110 0 68 3 110 0 70 3 110 0 72 3 110 0 74 3 110 0 75 3 110 0 77 3 110 0 78 3 110 0 80 3 110 0 83 3 110 0 85 3 110 0 86 3 110 0 87 3 110 0 88 3 110 0 90 3 110 0 91 3 110 0 93 3 110 0 95 3 110 0 96 3 110 0 97 3 110 0 101 3 110 0 102 3 110 0 103 3 110 0 104 3 110 0 105 3 110 0 110 3 110 0 111 3 110 0 112 3 110 0 113 3 110 0 114 3 110 0 115 3 110 0 116 3 110 0 117 3 110 0 118 3 110 0 120 6 137 0 221 3 110 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 6 141 0 146 6 141 0 152 1 117 0 160 6 141 0 168 6 141 0 169 6 141 0 173 6 141 0 174 6 141 0 185 6 141 0 186 6 141 0 187 1 149 0 188 6 141 0 189 6 141 0 190 6 141 0 191 6 141 0 192 6 141 0 193 6 141 0 194 6 141 0 195 6 141 0 196 6 141 0 198 6 141 0 199 6 141 0 200 6 141 0 201 6 141 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 6 141 0 243 6 141 0 244 6 141 0 245 6 141 0 246 6 141 0 247 6 141 0 248 6 141 0 249 6 141 0 250 6 141 0 251 6 141 0 252 6 141 0 253 6 141 0 254 6 141 0 255 6 141 1 0 6 141 1 1 6 141 1 2 6 141 1 10 2 117 1 11 6 141 1 12 6 141 1 13 6 141 1 14 6 141 1 15 6 141 1 16 6 141 1 17 6 141 1 18 6 141 1 19 6 141 1 20 6 141 1 21 6 141 1 22 6 141 1 23 6 141 1 24 6 141 1 25 6 141 1 26 6 141 1 27 6 141 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 3 114 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 6 145 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 3 118 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 129 0 11 6 149 0 18] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 6 153 0 138 6 153 0 139 6 153 0 140 6 153 0 141 6 153 0 142] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 6 157 0 138 6 157 0 139 6 157 0 140 6 157 0 141 6 157 0 142] 
#[1 0 129 0 11 2 98 0 53 2 98 0 117 2 98 0 118 2 98 0 120 6 161 0 176] 
#[1 4 173 0 5 0 129 0 11 6 165 0 179] 
#[1 4 173 0 5 0 129 0 11 6 169 0 179] 
#[1 4 173 0 5 0 129 0 11 6 173 0 179] 
#[1 0 129 0 11 2 166 0 53 2 166 0 117 2 166 0 118 2 166 0 120 6 177 0 171] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 6 181 0 138 6 181 0 139 6 181 0 140 6 181 0 141 6 181 0 142] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 6 185 0 138 6 185 0 139 6 185 0 140 6 185 0 141 6 185 0 142] 
#[1 4 173 0 5 0 129 0 11 6 189 0 179] 
#[1 4 173 0 5 0 129 0 11 6 193 0 179] 
#[0 3 122 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 3 249 0 1 1 91 0 3 4 1 0 5 3 126 0 6 4 5 0 7 4 9 0 8 3 126 0 9 4 13 0 10 4 17 0 11 4 21 0 12 3 126 0 13 3 126 0 14 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 3 126 0 21 3 126 0 22 4 49 0 23 3 126 0 24 1 95 0 27 4 57 0 28 4 61 0 30 3 126 0 32 3 126 0 33 3 126 0 45 3 126 0 47 3 126 0 48 3 126 0 51 3 126 0 52 3 126 0 53 3 126 0 54 4 65 0 55 3 126 0 57 3 126 0 58 3 126 0 60 3 126 0 61 3 126 0 62 3 126 0 63 3 126 0 64 4 69 0 67 3 126 0 68 4 73 0 70 3 126 0 72 3 126 0 74 3 126 0 75 3 126 0 77 3 126 0 78 4 77 0 80 3 126 0 83 3 126 0 85 3 126 0 86 3 126 0 87 3 126 0 88 3 126 0 90 3 126 0 91 3 126 0 93 3 126 0 95 3 126 0 96 3 126 0 97 3 126 0 101 3 126 0 102 3 126 0 103 4 81 0 104 3 126 0 105 3 126 0 110 3 126 0 111 3 126 0 112 3 126 0 113 3 126 0 114 3 126 0 115 3 126 0 116 3 126 0 117 3 126 0 118 3 126 0 120 4 85 0 231 4 89 0 233 4 93 0 235 3 126 1 36] 
#[0 6 197 0 6] 
#[0 3 130 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 3 249 0 1 1 99 0 3 4 1 0 5 3 134 0 6 4 5 0 7 4 9 0 8 3 134 0 9 4 13 0 10 4 17 0 11 4 21 0 12 3 134 0 13 3 134 0 14 4 25 0 15 4 29 0 16 4 33 0 17 3 134 0 18 4 41 0 19 4 45 0 20 3 134 0 21 3 134 0 22 4 49 0 23 3 134 0 24 1 103 0 27 4 57 0 28 4 61 0 30 3 134 0 32 3 134 0 33 3 134 0 45 3 134 0 47 3 134 0 48 3 134 0 51 3 134 0 52 3 134 0 53 3 134 0 54 4 65 0 55 3 134 0 57 3 134 0 58 3 134 0 60 3 134 0 61 3 134 0 62 3 134 0 63 3 134 0 64 4 69 0 67 3 134 0 68 4 73 0 70 3 134 0 72 3 134 0 74 3 134 0 75 3 134 0 77 3 134 0 78 4 77 0 80 3 134 0 83 3 134 0 85 3 134 0 86 3 134 0 87 3 134 0 88 3 134 0 90 3 134 0 91 3 134 0 93 3 134 0 95 3 134 0 96 3 134 0 97 3 134 0 101 3 134 0 102 3 134 0 103 4 81 0 104 3 134 0 105 3 134 0 110 3 134 0 111 3 134 0 112 3 134 0 113 3 134 0 114 3 134 0 115 3 134 0 116 3 134 0 117 3 134 0 118 3 134 0 120 4 85 0 231 4 89 0 233 4 93 0 235 3 134 1 36] 
#[1 3 249 0 1 1 107 0 3 4 1 0 5 3 138 0 6 4 5 0 7 4 9 0 8 3 138 0 9 4 13 0 10 4 17 0 11 4 21 0 12 3 138 0 13 3 138 0 14 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 3 138 0 21 3 138 0 22 4 49 0 23 3 138 0 24 1 111 0 27 4 57 0 28 4 61 0 30 3 138 0 32 3 138 0 33 3 138 0 45 3 138 0 47 3 138 0 48 3 138 0 51 3 138 0 52 3 138 0 53 3 138 0 54 4 65 0 55 3 138 0 57 3 138 0 58 3 138 0 60 3 138 0 61 3 138 0 62 3 138 0 63 3 138 0 64 4 69 0 67 3 138 0 68 4 73 0 70 3 138 0 72 3 138 0 74 3 138 0 75 3 138 0 77 3 138 0 78 4 77 0 80 3 138 0 83 3 138 0 85 3 138 0 86 3 138 0 87 3 138 0 88 3 138 0 90 3 138 0 91 3 138 0 93 3 138 0 95 3 138 0 96 3 138 0 97 3 138 0 101 3 138 0 102 3 138 0 103 4 81 0 104 3 138 0 105 3 138 0 110 3 138 0 111 3 138 0 112 3 138 0 113 3 138 0 114 3 138 0 115 3 138 0 116 3 138 0 117 3 138 0 118 3 138 0 120 4 85 0 231 4 89 0 233 4 93 0 235 3 138 1 36] 
#[1 3 249 0 1 1 115 0 3 4 1 0 5 3 142 0 6 4 5 0 7 4 9 0 8 3 142 0 9 4 13 0 10 4 17 0 11 4 21 0 12 3 142 0 13 3 142 0 14 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 3 142 0 21 3 142 0 22 4 49 0 23 3 142 0 24 1 119 0 27 4 57 0 28 4 61 0 30 3 142 0 32 3 142 0 33 3 142 0 45 3 142 0 47 3 142 0 48 3 142 0 51 3 142 0 52 3 142 0 53 3 142 0 54 4 65 0 55 3 142 0 57 3 142 0 58 3 142 0 60 3 142 0 61 3 142 0 62 3 142 0 63 3 142 0 64 4 69 0 67 3 142 0 68 4 73 0 70 3 142 0 72 3 142 0 74 3 142 0 75 3 142 0 77 3 142 0 78 4 77 0 80 3 142 0 83 3 142 0 85 3 142 0 86 3 142 0 87 3 142 0 88 3 142 0 90 3 142 0 91 3 142 0 93 3 142 0 95 3 142 0 96 3 142 0 97 3 142 0 101 3 142 0 102 3 142 0 103 4 81 0 104 3 142 0 105 3 142 0 110 3 142 0 111 3 142 0 112 3 142 0 113 3 142 0 114 3 142 0 115 3 142 0 116 3 142 0 117 3 142 0 118 3 142 0 120 4 85 0 231 4 89 0 233 4 93 0 235 3 142 1 36] 
#[1 3 249 0 1 1 123 0 3 4 1 0 5 3 146 0 6 4 5 0 7 4 9 0 8 3 146 0 9 4 13 0 10 4 17 0 11 4 21 0 12 3 146 0 13 3 146 0 14 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 3 146 0 21 3 146 0 22 4 49 0 23 3 146 0 24 1 127 0 27 4 57 0 28 4 61 0 30 3 146 0 32 3 146 0 33 3 146 0 45 3 146 0 47 3 146 0 48 3 146 0 51 3 146 0 52 3 146 0 53 3 146 0 54 4 65 0 55 3 146 0 57 3 146 0 58 3 146 0 60 3 146 0 61 3 146 0 62 3 146 0 63 3 146 0 64 4 69 0 67 3 146 0 68 4 73 0 70 3 146 0 72 3 146 0 74 3 146 0 75 3 146 0 77 3 146 0 78 4 77 0 80 3 146 0 83 3 146 0 85 3 146 0 86 3 146 0 87 3 146 0 88 3 146 0 90 3 146 0 91 3 146 0 93 3 146 0 95 3 146 0 96 3 146 0 97 3 146 0 101 3 146 0 102 3 146 0 103 4 81 0 104 3 146 0 105 3 146 0 110 3 146 0 111 3 146 0 112 3 146 0 113 3 146 0 114 3 146 0 115 3 146 0 116 3 146 0 117 3 146 0 118 3 146 0 120 4 85 0 231 4 89 0 233 4 93 0 235 3 146 1 36] 
#[0 3 150 0 11 0 117 0 118 0 120] 
#[0 3 154 0 53 0 120] 
#[1 1 45 0 115 6 201 0 133] 
#[1 1 45 0 115 6 205 0 133] 
#[0 3 158 0 5 0 8 0 9 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 49 0 11 6 209 0 35 6 209 0 37 6 209 0 40 6 209 0 44 6 209 0 49 6 209 0 66 6 209 0 71 6 209 0 76 6 209 0 89 6 209 0 92 5 201 0 99 0 53 0 117 0 57 0 118 5 205 0 138 5 205 0 139 5 205 0 140 5 205 0 141 5 205 0 142 6 209 0 159 6 209 0 161 6 209 0 162] 
#[0 3 162 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 166 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 170 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 174 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 178 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 182 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 186 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 190 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 194 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 198 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 202 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 3 206 0 5 3 206 0 6 3 206 0 7 3 206 0 8 3 206 0 9 3 206 0 10 0 129 0 11 3 206 0 18 3 206 0 21 3 206 0 22 3 206 0 24 3 206 0 32 3 206 0 45 3 206 0 47 3 206 0 48 3 206 0 51 3 206 0 52 3 206 0 53 3 206 0 54 3 206 0 57 3 206 0 58 3 206 0 60 3 206 0 61 3 206 0 62 3 206 0 63 3 206 0 64 3 206 0 68 3 206 0 72 3 206 0 74 3 206 0 75 3 206 0 77 3 206 0 83 3 206 0 85 3 206 0 86 3 206 0 87 3 206 0 88 3 206 0 90 3 206 0 93 3 206 0 97 3 206 0 101 3 206 0 102 3 206 0 103 3 206 0 105 3 206 0 110 3 206 0 111 3 206 0 112 3 206 0 113 3 206 0 114 3 206 0 115 3 206 0 116 3 206 0 117 3 206 0 118 3 206 0 120 3 206 1 36] 
#[0 3 210 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 3 214 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 6 213 0 5 3 218 0 6 3 218 0 7 3 218 0 8 3 218 0 9 3 218 0 10 3 218 0 11 3 218 0 18 3 218 0 21 3 218 0 22 3 218 0 24 3 218 0 32 3 218 0 45 3 218 0 47 3 218 0 48 3 218 0 51 3 218 0 52 3 218 0 53 3 218 0 54 3 218 0 57 3 218 0 58 3 218 0 60 3 218 0 61 3 218 0 62 3 218 0 63 3 218 0 64 3 218 0 68 3 218 0 72 3 218 0 74 3 218 0 75 3 218 0 77 3 218 0 83 3 218 0 85 3 218 0 86 3 218 0 87 3 218 0 88 3 218 0 90 3 218 0 93 3 218 0 97 3 218 0 101 3 218 0 102 3 218 0 103 3 218 0 105 3 218 0 110 3 218 0 111 3 218 0 112 3 218 0 113 3 218 0 114 3 218 0 115 3 218 0 116 3 218 0 117 3 218 0 118 3 218 0 120 3 218 1 36] 
#[1 0 49 0 11 3 17 0 25 0 53 0 117 0 57 0 118 3 21 0 138 3 21 0 139 3 21 0 140 3 21 0 141 3 21 0 142 6 217 0 197] 
#[0 3 222 0 5 0 8 0 9 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 6 221 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 6 0 72 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 6 225 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 6 229 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 3 226 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 233 0 72] 
#[1 6 237 0 72 0 101 0 112 0 137 0 120 6 241 0 128] 
#[1 0 49 0 11 6 245 0 53 0 53 0 117 0 57 0 118 0 137 0 120 6 249 0 138 6 249 0 139 6 249 0 140 6 249 0 141 6 249 0 142 6 253 0 177] 
#[0 3 230 0 11 0 53 0 117 0 118 0 120] 
#[0 3 234 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 31 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 49 0 11 5 9 0 36 7 9 0 38 7 1 0 81 0 53 0 117 0 57 0 118 7 5 0 138 7 5 0 139 7 5 0 140 7 5 0 141 7 5 0 142 7 9 0 178] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 7 13 0 138 7 13 0 139 7 13 0 140 7 13 0 141 7 13 0 142] 
#[1 3 238 0 6 3 238 0 9 0 129 0 11 7 17 0 18 4 133 0 31 7 21 0 163 7 21 0 166 7 21 0 167 7 25 0 183 7 29 0 184] 
#[1 0 49 0 11 7 33 0 81 0 53 0 117 0 57 0 118 7 37 0 138 7 37 0 139 7 37 0 140 7 37 0 141 7 37 0 142] 
#[1 3 242 0 6 3 242 0 9 7 41 0 181] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 7 45 0 127 7 45 0 128 7 45 0 129 7 45 0 130 7 45 0 131 7 45 0 132 7 45 0 133 7 45 0 134 7 45 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 7 45 0 206 7 45 0 207 7 45 0 208 7 45 0 212 7 45 0 213 7 45 0 214 7 45 0 215 7 45 0 216 7 45 0 223 7 45 0 224 7 45 0 225 7 45 0 226 7 45 0 227 7 45 0 228 7 45 0 229 7 45 0 230 7 45 0 232 7 45 0 234 7 45 0 236 7 45 0 237 7 45 0 238 7 45 0 239 7 45 0 240 7 45 0 241 7 45 0 242 7 45 1 30 7 45 1 31 7 45 1 32 7 45 1 33 7 45 1 34 7 45 1 35] 
#[1 3 249 0 1 1 99 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 3 134 0 18 4 41 0 19 4 45 0 20 4 49 0 23 1 103 0 27 4 57 0 28 4 61 0 30 4 65 0 55 4 69 0 67 4 73 0 70 4 77 0 80 7 49 0 96 4 81 0 104 4 85 0 231 4 89 0 233 4 93 0 235] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 7 53 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 7 57 0 126] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 7 61 0 127 7 61 0 128 7 61 0 129 7 61 0 130 7 61 0 131 7 61 0 132 7 61 0 133 7 61 0 134 7 61 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 7 61 0 206 7 61 0 207 7 61 0 208 7 61 0 212 7 61 0 213 7 61 0 214 7 61 0 215 7 61 0 216 7 61 0 223 7 61 0 224 7 61 0 225 7 61 0 226 7 61 0 227 7 61 0 228 7 61 0 229 7 61 0 230 7 61 0 232 7 61 0 234 7 61 0 236 7 61 0 237 7 61 0 238 7 61 0 239 7 61 0 240 7 61 0 241 7 61 0 242 7 61 1 30 7 61 1 31 7 61 1 32 7 61 1 33 7 61 1 34 7 61 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 6 0 51 0 6 0 52 0 6 0 53 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 7 65 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 7 69 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 1 131 0 1 1 135 0 3 1 139 0 5 3 246 0 6 1 143 0 7 1 147 0 8 3 246 0 9 1 151 0 10 1 155 0 11 1 159 0 12 3 246 0 13 3 246 0 14 1 163 0 15 1 167 0 16 1 171 0 17 1 175 0 18 1 179 0 19 1 183 0 20 3 246 0 21 3 246 0 22 1 187 0 23 3 246 0 24 1 191 0 27 1 195 0 28 1 199 0 30 3 246 0 32 3 246 0 33 3 246 0 45 3 246 0 47 3 246 0 48 3 246 0 51 3 246 0 52 3 246 0 53 3 246 0 54 1 203 0 55 3 246 0 57 3 246 0 58 3 246 0 60 3 246 0 61 3 246 0 62 3 246 0 63 3 246 0 64 1 207 0 67 3 246 0 68 1 211 0 70 3 246 0 72 3 246 0 74 3 246 0 75 3 246 0 77 3 246 0 78 1 215 0 80 3 246 0 83 3 246 0 85 3 246 0 86 3 246 0 87 3 246 0 88 3 246 0 90 3 246 0 91 3 246 0 93 3 246 0 95 3 246 0 96 3 246 0 97 3 246 0 101 3 246 0 102 3 246 0 103 1 219 0 104 3 246 0 105 3 246 0 110 3 246 0 111 3 246 0 112 3 246 0 113 3 246 0 114 3 246 0 115 3 246 0 116 3 246 0 117 3 246 0 118 3 246 0 120 4 85 0 231 4 89 0 233 4 93 0 235 3 246 1 36] 
#[0 3 250 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 7 73 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 0 49 0 11 7 77 0 53 0 53 0 117 0 57 0 118 0 137 0 120 7 81 0 138 7 81 0 139 7 81 0 140 7 81 0 141 7 81 0 142 7 85 0 172] 
#[0 3 254 0 11 0 53 0 117 0 118 0 120] 
#[1 7 89 0 101 0 101 0 112 0 137 0 120 7 93 0 128] 
#[1 0 6 0 101 0 6 0 112 0 6 0 120 7 97 0 126] 
#[1 7 101 0 53 0 101 0 112 0 137 0 120 7 105 0 128] 
#[1 0 6 0 53 0 6 0 112 0 6 0 120 7 109 0 126] 
#[0 4 2 0 10 0 107 0 109] 
#[1 7 113 0 10 7 117 0 109] 
#[0 4 6 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 4 10 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 7 121 0 88] 
#[1 3 249 0 1 1 223 0 3 4 1 0 5 4 14 0 6 4 5 0 7 4 9 0 8 4 14 0 9 4 13 0 10 4 17 0 11 4 21 0 12 4 14 0 13 4 14 0 14 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 14 0 21 4 14 0 22 4 49 0 23 4 14 0 24 1 227 0 27 4 57 0 28 4 61 0 30 4 14 0 32 4 14 0 33 4 14 0 45 4 14 0 47 4 14 0 48 4 14 0 51 4 14 0 52 4 14 0 53 4 14 0 54 4 65 0 55 4 14 0 57 4 14 0 58 4 14 0 60 4 14 0 61 4 14 0 62 4 14 0 63 4 14 0 64 4 69 0 67 4 14 0 68 4 73 0 70 4 14 0 72 4 14 0 74 4 14 0 75 4 14 0 77 4 14 0 78 4 77 0 80 4 14 0 83 4 14 0 85 4 14 0 86 4 14 0 87 4 14 0 88 4 14 0 90 4 14 0 91 4 14 0 93 4 14 0 95 4 14 0 96 4 14 0 97 4 14 0 101 4 14 0 102 4 14 0 103 4 81 0 104 4 14 0 105 4 14 0 110 4 14 0 111 4 14 0 112 4 14 0 113 4 14 0 114 4 14 0 115 4 14 0 116 4 14 0 117 4 14 0 118 4 14 0 120 4 85 0 231 4 89 0 233 4 93 0 235 4 14 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 7 125 0 127 7 125 0 128 7 125 0 129 7 125 0 130 7 125 0 131 7 125 0 132 7 125 0 133 7 125 0 134 7 125 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 7 125 0 206 7 125 0 207 7 125 0 208 7 125 0 212 7 125 0 213 7 125 0 214 7 125 0 215 7 125 0 216 7 125 0 223 7 125 0 224 7 125 0 225 7 125 0 226 7 125 0 227 7 125 0 228 7 125 0 229 7 125 0 230 7 125 0 232 7 125 0 234 7 125 0 236 7 125 0 237 7 125 0 238 7 125 0 239 7 125 0 240 7 125 0 241 7 125 0 242 7 125 1 30 7 125 1 31 7 125 1 32 7 125 1 33 7 125 1 34 7 125 1 35] 
#[1 3 249 0 1 1 231 0 3 4 1 0 5 4 18 0 6 4 5 0 7 4 9 0 8 4 18 0 9 4 13 0 10 4 17 0 11 4 21 0 12 4 18 0 13 4 18 0 14 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 18 0 21 4 18 0 22 4 49 0 23 4 18 0 24 1 235 0 27 4 57 0 28 4 61 0 30 4 18 0 32 4 18 0 33 4 18 0 45 4 18 0 47 4 18 0 48 4 18 0 51 4 18 0 52 4 18 0 53 4 18 0 54 4 65 0 55 4 18 0 57 4 18 0 58 4 18 0 60 4 18 0 61 4 18 0 62 4 18 0 63 4 18 0 64 4 69 0 67 4 18 0 68 4 73 0 70 4 18 0 72 4 18 0 74 4 18 0 75 4 18 0 77 4 18 0 78 4 77 0 80 4 18 0 83 4 18 0 85 4 18 0 86 4 18 0 87 4 18 0 88 4 18 0 90 4 18 0 91 4 18 0 93 4 18 0 95 4 18 0 96 4 18 0 97 4 18 0 101 4 18 0 102 4 18 0 103 4 81 0 104 4 18 0 105 4 18 0 110 4 18 0 111 4 18 0 112 4 18 0 113 4 18 0 114 4 18 0 115 4 18 0 116 4 18 0 117 4 18 0 118 4 18 0 120 4 85 0 231 4 89 0 233 4 93 0 235 4 18 1 36] 
#[0 4 22 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 4 26 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 36 0 38 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 81 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 4 30 0 1 4 30 0 3 4 30 0 5 4 30 0 6 4 30 0 7 4 30 0 8 6 129 0 9 4 30 0 10 4 30 0 11 4 30 0 12 4 30 0 13 1 239 0 14 4 30 0 15 4 30 0 16 4 30 0 17 4 30 0 18 4 30 0 19 4 30 0 20 4 30 0 21 4 30 0 22 4 30 0 23 4 30 0 24 4 30 0 27 4 30 0 28 4 30 0 30 4 30 0 32 4 30 0 33 4 30 0 45 4 30 0 47 4 30 0 48 4 30 0 51 4 30 0 52 4 30 0 53 4 30 0 54 4 30 0 55 4 30 0 57 4 30 0 58 4 30 0 60 4 30 0 61 4 30 0 62 4 30 0 63 4 30 0 64 4 30 0 67 4 30 0 68 4 30 0 70 4 30 0 72 4 30 0 74 4 30 0 75 4 30 0 77 4 30 0 78 4 30 0 80 4 30 0 83 4 30 0 85 4 30 0 86 4 30 0 87 4 30 0 88 4 30 0 90 4 30 0 91 4 30 0 93 4 30 0 95 4 30 0 96 4 30 0 97 4 30 0 101 4 30 0 102 4 30 0 103 4 30 0 104 4 30 0 105 4 30 0 110 4 30 0 111 4 30 0 112 4 30 0 113 4 30 0 114 4 30 0 115 4 30 0 116 4 30 0 117 4 30 0 118 4 30 0 120 6 137 0 221 4 30 1 36] 
#[1 4 34 0 1 4 34 0 3 0 169 0 5 4 34 0 6 4 34 0 7 0 173 0 8 4 34 0 9 0 177 0 10 0 49 0 11 4 34 0 12 4 34 0 13 4 34 0 14 4 34 0 15 4 34 0 16 4 34 0 17 4 34 0 18 4 34 0 19 4 34 0 20 1 243 0 21 1 247 0 22 4 34 0 23 1 251 0 24 4 34 0 27 4 34 0 28 4 34 0 30 4 34 0 32 4 34 0 33 5 9 0 36 5 21 0 38 4 34 0 45 4 34 0 47 4 34 0 48 4 34 0 51 4 34 0 52 4 34 0 53 4 34 0 54 4 34 0 55 4 34 0 57 1 255 0 58 4 34 0 60 4 34 0 61 4 34 0 62 4 34 0 63 4 34 0 64 4 34 0 67 2 3 0 68 4 34 0 70 4 34 0 72 4 34 0 74 2 7 0 75 4 34 0 77 4 34 0 78 4 34 0 80 5 17 0 81 4 34 0 83 4 34 0 85 4 34 0 86 4 34 0 87 4 34 0 88 4 34 0 90 4 34 0 91 4 34 0 93 4 34 0 95 4 34 0 96 4 34 0 97 4 34 0 101 4 34 0 102 4 34 0 103 4 34 0 104 2 11 0 105 2 15 0 110 2 19 0 111 2 23 0 112 2 27 0 113 2 31 0 114 2 35 0 115 2 39 0 116 2 43 0 117 2 47 0 118 4 34 0 120 5 25 0 127 5 25 0 128 5 25 0 129 5 25 0 130 5 25 0 131 5 25 0 132 5 25 0 133 5 25 0 134 5 25 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 5 21 0 178 5 25 0 206 5 25 0 207 5 25 0 208 5 25 0 212 5 25 0 213 5 25 0 214 5 25 0 215 5 25 0 216 7 129 0 217 5 25 0 223 5 25 0 224 5 25 0 225 5 25 0 226 5 25 0 227 5 25 0 228 5 25 0 229 5 25 0 230 5 25 0 232 5 25 0 234 5 25 0 236 5 25 0 237 5 25 0 238 5 25 0 239 5 25 0 240 5 25 0 241 5 25 0 242 5 25 1 30 5 25 1 31 5 25 1 32 5 25 1 33 5 25 1 34 5 25 1 35 4 34 1 36] 
#[1 4 38 0 1 4 38 0 3 0 169 0 5 4 38 0 6 4 38 0 7 0 173 0 8 4 38 0 9 0 177 0 10 0 49 0 11 4 38 0 12 4 38 0 13 4 38 0 14 4 38 0 15 4 38 0 16 4 38 0 17 4 38 0 18 4 38 0 19 4 38 0 20 2 51 0 21 2 55 0 22 4 38 0 23 2 59 0 24 4 38 0 27 4 38 0 28 4 38 0 30 4 38 0 32 4 38 0 33 5 9 0 36 5 21 0 38 4 38 0 45 4 38 0 47 4 38 0 48 4 38 0 51 4 38 0 52 4 38 0 53 4 38 0 54 4 38 0 55 4 38 0 57 2 63 0 58 4 38 0 60 4 38 0 61 4 38 0 62 4 38 0 63 4 38 0 64 4 38 0 67 2 67 0 68 4 38 0 70 4 38 0 72 4 38 0 74 2 71 0 75 4 38 0 77 4 38 0 78 4 38 0 80 5 17 0 81 4 38 0 83 4 38 0 85 4 38 0 86 4 38 0 87 4 38 0 88 4 38 0 90 4 38 0 91 4 38 0 93 4 38 0 95 4 38 0 96 4 38 0 97 4 38 0 101 4 38 0 102 4 38 0 103 4 38 0 104 2 75 0 105 2 79 0 110 2 83 0 111 2 87 0 112 2 91 0 113 2 95 0 114 2 99 0 115 2 103 0 116 2 107 0 117 2 111 0 118 4 38 0 120 5 25 0 127 5 25 0 128 5 25 0 129 5 25 0 130 5 25 0 131 5 25 0 132 5 25 0 133 5 25 0 134 5 25 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 5 21 0 178 5 25 0 206 5 25 0 207 5 25 0 208 5 25 0 212 5 25 0 213 5 25 0 214 5 25 0 215 5 25 0 216 7 133 0 217 5 25 0 223 5 25 0 224 5 25 0 225 5 25 0 226 5 25 0 227 5 25 0 228 5 25 0 229 5 25 0 230 5 25 0 232 5 25 0 234 5 25 0 236 5 25 0 237 5 25 0 238 5 25 0 239 5 25 0 240 5 25 0 241 5 25 0 242 5 25 1 30 5 25 1 31 5 25 1 32 5 25 1 33 5 25 1 34 5 25 1 35 4 38 1 36] 
#[0 4 42 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 4 46 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 4 50 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 75 0 77 0 83 0 85 0 86 0 87 0 90 0 93 0 97 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 7 137 0 127 7 137 0 128 7 137 0 129 7 137 0 130 7 137 0 131 7 137 0 132 7 137 0 133 7 137 0 134 7 137 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 7 137 0 206 7 137 0 207 7 137 0 208 7 137 0 212 7 137 0 213 7 137 0 214 7 137 0 215 7 137 0 216 7 137 0 223 7 137 0 224 7 137 0 225 7 137 0 226 7 137 0 227 7 137 0 228 7 137 0 229 7 137 0 230 7 137 0 232 7 137 0 234 7 137 0 236 7 137 0 237 7 137 0 238 7 137 0 239 7 137 0 240 7 137 0 241 7 137 0 242 7 137 1 30 7 137 1 31 7 137 1 32 7 137 1 33 7 137 1 34 7 137 1 35] 
#[1 0 129 0 11 7 141 0 69] 
#[1 0 129 0 11 7 145 0 69] 
#[1 0 6 0 11 0 6 0 53 0 6 0 117 0 6 0 118 0 6 0 120 7 149 0 126 5 253 0 175] 
#[0 4 54 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 4 133 0 31 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 7 153 0 126 7 157 0 163 7 157 0 166 7 157 0 167] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 7 161 0 126] 
#[1 0 6 0 11 0 6 0 53 0 6 0 117 0 6 0 118 0 6 0 120 7 165 0 126 6 65 0 170] 
#[1 4 173 0 5 0 129 0 11 7 169 0 179] 
#[1 4 173 0 5 0 129 0 11 7 173 0 179] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 4 133 0 31 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 7 177 0 126 7 181 0 163 7 181 0 166 7 181 0 167] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 7 185 0 126] 
#[0 4 58 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 4 173 0 5 7 189 0 29 7 193 0 179] 
#[1 4 173 0 5 7 197 0 29 7 201 0 179] 
#[1 7 205 0 5 4 62 0 6 4 62 0 7 4 62 0 8 4 62 0 9 4 62 0 10 4 62 0 11 4 62 0 18 4 62 0 21 4 62 0 22 4 62 0 24 4 62 0 32 4 62 0 45 4 62 0 47 4 62 0 48 4 62 0 51 4 62 0 52 4 62 0 53 4 62 0 54 4 62 0 57 4 62 0 58 4 62 0 60 4 62 0 61 4 62 0 62 4 62 0 63 4 62 0 64 4 62 0 68 4 62 0 72 4 62 0 74 4 62 0 75 4 62 0 77 4 62 0 83 4 62 0 85 4 62 0 86 4 62 0 87 4 62 0 88 4 62 0 90 4 62 0 93 4 62 0 97 4 62 0 101 4 62 0 102 4 62 0 103 4 62 0 105 4 62 0 110 4 62 0 111 4 62 0 112 4 62 0 113 4 62 0 114 4 62 0 115 4 62 0 116 4 62 0 117 4 62 0 118 4 62 0 120 4 62 1 36] 
#[1 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 7 209 0 127 7 209 0 128 7 209 0 129 7 209 0 130 7 209 0 131 7 209 0 132 7 209 0 133 7 209 0 134 7 209 0 135] 
#[0 4 66 0 5 0 8 0 9 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 6 0 72 0 6 0 112 0 6 0 120 7 213 0 126] 
#[1 7 217 0 72 0 101 0 112 0 137 0 120 7 221 0 128] 
#[1 0 6 0 72 0 6 0 112 0 6 0 120 7 225 0 126] 
#[0 4 70 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 4 74 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 7 229 0 72] 
#[0 7 233 0 54] 
#[1 0 129 0 11 7 237 0 18 4 78 0 53 4 78 0 117 4 78 0 118 4 78 0 120] 
#[0 4 82 0 11 0 53 0 117 0 118 0 120] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 7 241 0 138 7 241 0 139 7 241 0 140 7 241 0 141 7 241 0 142] 
#[1 3 238 0 6 3 238 0 9 0 129 0 11 7 17 0 18 4 133 0 31 7 245 0 163 7 245 0 166 7 245 0 167 7 25 0 183 7 249 0 184] 
#[1 0 49 0 11 7 253 0 81 0 53 0 117 0 57 0 118 8 1 0 138 8 1 0 139 8 1 0 140 8 1 0 141 8 1 0 142] 
#[1 3 238 0 6 3 238 0 9 0 129 0 11 7 17 0 18 4 133 0 31 8 5 0 163 8 5 0 166 8 5 0 167 7 25 0 183 8 9 0 184] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 8 13 0 127 8 13 0 128 8 13 0 129 8 13 0 130 8 13 0 131 8 13 0 132 8 13 0 133 8 13 0 134 8 13 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 8 13 0 206 8 13 0 207 8 13 0 208 8 13 0 212 8 13 0 213 8 13 0 214 8 13 0 215 8 13 0 216 8 13 0 223 8 13 0 224 8 13 0 225 8 13 0 226 8 13 0 227 8 13 0 228 8 13 0 229 8 13 0 230 8 13 0 232 8 13 0 234 8 13 0 236 8 13 0 237 8 13 0 238 8 13 0 239 8 13 0 240 8 13 0 241 8 13 0 242 8 13 1 30 8 13 1 31 8 13 1 32 8 13 1 33 8 13 1 34 8 13 1 35] 
#[1 3 238 0 6 3 238 0 9 7 17 0 18 7 25 0 183 8 17 0 184] 
#[0 4 86 0 6 0 9] 
#[0 4 90 0 6 0 9] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 8 21 0 138 8 21 0 139 8 21 0 140 8 21 0 141 8 21 0 142] 
#[1 3 238 0 6 3 238 0 9 0 129 0 11 7 17 0 18 4 133 0 31 8 25 0 163 8 25 0 166 8 25 0 167 7 25 0 183 8 29 0 184] 
#[1 8 33 0 6 8 37 0 9 8 41 0 180] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 0 6 0 21 0 6 0 22 4 49 0 23 0 6 0 24 4 53 0 27 4 57 0 28 4 61 0 30 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 4 65 0 55 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 4 69 0 67 0 6 0 68 4 73 0 70 0 6 0 74 0 6 0 75 0 6 0 77 4 77 0 80 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 4 81 0 104 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 8 45 0 126 4 85 0 231 4 89 0 233 4 93 0 235] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 8 49 0 127 8 49 0 128 8 49 0 129 8 49 0 130 8 49 0 131 8 49 0 132 8 49 0 133 8 49 0 134 8 49 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 8 49 0 206 8 49 0 207 8 49 0 208 8 49 0 212 8 49 0 213 8 49 0 214 8 49 0 215 8 49 0 216 8 49 0 223 8 49 0 224 8 49 0 225 8 49 0 226 8 49 0 227 8 49 0 228 8 49 0 229 8 49 0 230 8 49 0 232 8 49 0 234 8 49 0 236 8 49 0 237 8 49 0 238 8 49 0 239 8 49 0 240 8 49 0 241 8 49 0 242 8 49 1 30 8 49 1 31 8 49 1 32 8 49 1 33 8 49 1 34 8 49 1 35] 
#[0 8 53 0 53] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 8 57 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 94 0 21 4 94 0 22 4 49 0 23 4 94 0 24 4 53 0 27 4 57 0 28 4 61 0 30 4 94 0 32 4 94 0 45 4 94 0 47 4 94 0 48 4 94 0 51 4 94 0 52 4 94 0 53 4 94 0 54 4 65 0 55 4 94 0 57 4 94 0 58 4 94 0 60 4 94 0 61 4 94 0 62 4 94 0 63 4 94 0 64 4 69 0 67 4 94 0 68 4 73 0 70 4 94 0 72 4 94 0 74 4 94 0 75 4 94 0 77 4 77 0 80 4 94 0 83 4 94 0 85 4 94 0 86 4 94 0 87 4 94 0 88 4 94 0 90 4 94 0 93 4 94 0 97 4 94 0 101 4 94 0 102 4 94 0 103 4 81 0 104 4 94 0 105 4 94 0 110 4 94 0 111 4 94 0 112 4 94 0 113 4 94 0 114 4 94 0 115 4 94 0 116 4 94 0 117 4 94 0 118 4 94 0 120 4 85 0 231 4 89 0 233 4 93 0 235 4 94 1 36] 
#[1 8 61 0 51 8 65 0 52 8 69 0 53 0 101 0 112 0 137 0 120 8 73 0 128 8 77 1 3 8 81 1 4 8 77 1 5 8 77 1 6 8 77 1 7] 
#[1 0 6 0 51 0 6 0 52 0 6 0 53 0 6 0 112 0 6 0 120 8 97 0 126] 
#[0 8 101 0 53] 
#[0 8 105 0 97] 
#[1 0 129 0 11 4 133 0 31 8 109 0 163 8 109 0 166 8 109 0 167] 
#[0 4 98 0 11 0 53 0 117 0 118 0 120] 
#[0 4 102 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 8 113 0 101] 
#[1 8 117 0 101 0 101 0 112 0 137 0 120 8 121 0 128] 
#[0 8 125 0 103] 
#[0 8 129 0 53] 
#[1 8 133 0 53 0 101 0 112 0 137 0 120 8 137 0 128] 
#[1 6 85 0 109 8 141 0 137] 
#[0 4 106 0 10 0 107 0 109] 
#[0 4 110 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 3 249 0 1 2 115 0 3 4 1 0 5 4 114 0 6 4 5 0 7 4 9 0 8 4 114 0 9 4 13 0 10 4 17 0 11 4 21 0 12 4 114 0 13 4 114 0 14 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 114 0 21 4 114 0 22 4 49 0 23 4 114 0 24 2 119 0 27 4 57 0 28 4 61 0 30 4 114 0 32 4 114 0 33 4 114 0 45 4 114 0 47 4 114 0 48 4 114 0 51 4 114 0 52 4 114 0 53 4 114 0 54 4 65 0 55 4 114 0 57 4 114 0 58 4 114 0 60 4 114 0 61 4 114 0 62 4 114 0 63 4 114 0 64 4 69 0 67 4 114 0 68 4 73 0 70 4 114 0 72 4 114 0 74 4 114 0 75 4 114 0 77 4 114 0 78 4 77 0 80 4 114 0 83 4 114 0 85 4 114 0 86 4 114 0 87 4 114 0 88 4 114 0 90 4 114 0 91 4 114 0 93 4 114 0 95 4 114 0 96 4 114 0 97 4 114 0 101 4 114 0 102 4 114 0 103 4 81 0 104 4 114 0 105 4 114 0 110 4 114 0 111 4 114 0 112 4 114 0 113 4 114 0 114 4 114 0 115 4 114 0 116 4 114 0 117 4 114 0 118 4 114 0 120 4 85 0 231 4 89 0 233 4 93 0 235 4 114 1 36] 
#[0 4 118 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 4 122 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 126 0 21 4 126 0 22 4 49 0 23 4 126 0 24 4 53 0 27 4 57 0 28 4 61 0 30 4 126 0 32 4 126 0 45 4 126 0 47 4 126 0 48 4 126 0 51 4 126 0 52 4 126 0 53 4 126 0 54 4 65 0 55 4 126 0 57 4 126 0 58 4 126 0 60 4 126 0 61 4 126 0 62 4 126 0 63 4 126 0 64 4 69 0 67 4 126 0 68 4 73 0 70 4 126 0 72 4 126 0 74 4 126 0 75 4 126 0 77 4 77 0 80 4 126 0 83 4 126 0 85 4 126 0 86 4 126 0 87 4 126 0 88 4 126 0 90 4 126 0 93 4 126 0 97 4 126 0 101 4 126 0 102 4 126 0 103 4 81 0 104 4 126 0 105 4 126 0 110 4 126 0 111 4 126 0 112 4 126 0 113 4 126 0 114 4 126 0 115 4 126 0 116 4 126 0 117 4 126 0 118 4 126 0 120 4 85 0 231 4 89 0 233 4 93 0 235 4 126 1 36] 
#[1 1 45 0 115 8 145 0 133] 
#[1 1 45 0 115 8 149 0 133] 
#[1 0 49 0 11 8 153 0 53 0 53 0 117 0 57 0 118 0 137 0 120 6 249 0 138 6 249 0 139 6 249 0 140 6 249 0 141 6 249 0 142 6 253 0 177] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 8 157 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 8 161 0 126] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 8 165 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 0 49 0 11 8 169 0 53 0 53 0 117 0 57 0 118 0 137 0 120 7 81 0 138 7 81 0 139 7 81 0 140 7 81 0 141 7 81 0 142 7 85 0 172] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 4 133 0 31 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 8 173 0 126 8 177 0 163 8 177 0 166 8 177 0 167] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 8 181 0 126] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 8 185 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 8 189 0 126] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 8 193 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 1 45 0 115 8 197 0 133] 
#[1 4 133 0 31 8 201 0 163 8 201 0 166 8 201 0 167] 
#[1 1 45 0 115 8 205 0 133] 
#[0 4 130 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 8 209 0 127 8 209 0 128 8 209 0 129 8 209 0 130 8 209 0 131 8 209 0 132 8 209 0 133 8 209 0 134 8 209 0 135] 
#[1 4 134 0 6 4 134 0 9 8 213 0 165] 
#[1 8 217 0 72 0 101 0 112 0 137 0 120 8 221 0 128] 
#[0 4 138 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 8 225 0 72] 
#[1 8 229 0 72 0 101 0 112 0 137 0 120 8 233 0 128] 
#[0 4 142 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 4 146 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 8 237 0 127 8 237 0 128 8 237 0 129 8 237 0 130 8 237 0 131 8 237 0 132 8 237 0 133 8 237 0 134 8 237 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 8 237 0 206 8 237 0 207 8 237 0 208 8 237 0 212 8 237 0 213 8 237 0 214 8 237 0 215 8 237 0 216 8 237 0 223 8 237 0 224 8 237 0 225 8 237 0 226 8 237 0 227 8 237 0 228 8 237 0 229 8 237 0 230 8 237 0 232 8 237 0 234 8 237 0 236 8 237 0 237 8 237 0 238 8 237 0 239 8 237 0 240 8 237 0 241 8 237 0 242 8 237 1 30 8 237 1 31 8 237 1 32 8 237 1 33 8 237 1 34 8 237 1 35] 
#[1 3 238 0 6 3 238 0 9 0 129 0 11 7 17 0 18 4 133 0 31 8 241 0 163 8 241 0 166 8 241 0 167 7 25 0 183 8 245 0 184] 
#[1 3 238 0 6 3 238 0 9 7 17 0 18 7 25 0 183 8 249 0 184] 
#[0 4 150 0 6 0 9] 
#[1 0 49 0 11 0 53 0 117 0 57 0 118 8 253 0 138 8 253 0 139 8 253 0 140 8 253 0 141 8 253 0 142] 
#[1 3 238 0 6 3 238 0 9 0 129 0 11 7 17 0 18 4 133 0 31 9 1 0 163 9 1 0 166 9 1 0 167 7 25 0 183 9 5 0 184] 
#[1 3 238 0 6 3 238 0 9 7 17 0 18 7 25 0 183 9 9 0 184] 
#[0 4 154 0 6 0 9] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 158 0 6 4 5 0 7 4 9 0 8 4 158 0 9 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 49 0 23 4 53 0 27 4 57 0 28 4 61 0 30 4 65 0 55 4 69 0 67 4 73 0 70 4 77 0 80 4 81 0 104 4 85 0 231 4 89 0 233 4 93 0 235] 
#[0 4 162 0 6 0 9] 
#[1 3 238 0 6 3 238 0 9 0 129 0 11 7 17 0 18 4 133 0 31 9 13 0 163 9 13 0 166 9 13 0 167 7 25 0 183 9 17 0 184] 
#[1 3 238 0 6 3 238 0 9 7 17 0 18 7 25 0 183 9 21 0 184] 
#[0 4 166 0 6 0 9] 
#[0 4 170 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 31 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 49 0 11 5 9 0 36 6 17 0 38 6 5 0 79 6 9 0 81 0 53 0 117 0 57 0 118 6 13 0 138 6 13 0 139 6 13 0 140 6 13 0 141 6 13 0 142 6 17 0 178 9 25 0 182] 
#[0 4 174 0 6 0 9] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 6 0 74 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 9 29 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 9 33 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 0 6 0 21 0 6 0 22 4 49 0 23 0 6 0 24 4 53 0 27 4 57 0 28 4 61 0 30 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 4 65 0 55 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 4 69 0 67 0 6 0 68 4 73 0 70 0 6 0 74 0 6 0 75 0 6 0 77 4 77 0 80 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 9 37 0 91 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 4 81 0 104 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 9 41 0 126 4 85 0 231 4 89 0 233 4 93 0 235] 
#[0 9 45 0 61] 
#[0 9 49 0 53] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 53 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 9 53 0 126] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 9 57 0 127 9 57 0 128 9 57 0 129 9 57 0 130 9 57 0 131 9 57 0 132 9 57 0 133 9 57 0 134 9 57 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 9 57 0 206 9 57 0 207 9 57 0 208 9 57 0 212 9 57 0 213 9 57 0 214 9 57 0 215 9 57 0 216 9 57 0 223 9 57 0 224 9 57 0 225 9 57 0 226 9 57 0 227 9 57 0 228 9 57 0 229 9 57 0 230 9 57 0 232 9 57 0 234 9 57 0 236 9 57 0 237 9 57 0 238 9 57 0 239 9 57 0 240 9 57 0 241 9 57 0 242 9 57 1 30 9 57 1 31 9 57 1 32 9 57 1 33 9 57 1 34 9 57 1 35] 
#[0 9 61 0 64] 
#[1 9 65 0 51 9 69 0 53] 
#[0 4 178 0 51 0 52] 
#[1 9 73 0 51 8 65 0 52 9 77 1 3 9 77 1 5 9 77 1 6 9 77 1 7] 
#[0 4 182 0 51 0 52] 
#[0 4 186 0 51 0 52] 
#[0 4 190 0 51 0 52] 
#[1 9 81 0 51 8 65 0 52 9 85 0 53 0 101 0 112 0 137 0 120 9 89 0 128 8 77 1 3 9 93 1 4 8 77 1 5 8 77 1 6 8 77 1 7] 
#[0 9 97 0 93] 
#[0 4 194 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 9 101 0 7 4 198 0 11 4 198 0 53 4 198 0 117 4 198 0 118 4 198 0 120] 
#[0 4 202 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 4 206 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 9 105 0 101] 
#[0 4 210 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 9 109 0 103] 
#[0 9 113 0 103] 
#[0 9 117 0 53] 
#[1 9 121 0 10 7 117 0 109] 
#[1 4 173 0 5 9 125 0 29 9 129 0 179] 
#[1 4 173 0 5 9 133 0 29 9 137 0 179] 
#[0 9 141 0 54] 
#[0 9 145 0 53] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 9 149 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 9 153 0 53] 
#[0 9 157 0 97] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 9 161 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 9 165 0 126] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 9 169 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 9 173 0 53] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 9 177 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 9 181 0 53] 
#[1 4 173 0 5 9 185 0 179] 
#[0 4 214 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 4 173 0 5 9 189 0 179] 
#[1 4 134 0 6 4 134 0 9 9 193 0 165] 
#[1 9 197 0 6 9 201 0 9 9 205 0 164] 
#[0 4 218 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 9 209 0 72] 
#[0 4 222 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 4 226 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 9 213 0 72] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 49 0 23 4 53 0 27 4 57 0 28 4 61 0 30 4 230 0 53 4 65 0 55 4 69 0 67 4 73 0 70 4 77 0 80 4 81 0 104 4 230 0 117 4 230 0 118 4 230 0 120 4 85 0 231 4 89 0 233 4 93 0 235] 
#[1 3 238 0 6 3 238 0 9 7 17 0 18 7 25 0 183 9 217 0 184] 
#[0 4 234 0 6 0 9] 
#[0 4 238 0 6 0 9] 
#[1 3 238 0 6 3 238 0 9 0 129 0 11 7 17 0 18 4 133 0 31 9 221 0 163 9 221 0 166 9 221 0 167 7 25 0 183 9 225 0 184] 
#[1 3 238 0 6 3 238 0 9 7 17 0 18 7 25 0 183 9 229 0 184] 
#[0 4 242 0 6 0 9] 
#[0 4 246 0 6 0 9] 
#[1 3 238 0 6 3 238 0 9 7 17 0 18 7 25 0 183 9 233 0 184] 
#[0 4 250 0 6 0 9] 
#[0 4 254 0 6 0 9] 
#[0 5 2 0 6 0 9] 
#[1 9 237 0 74 0 101 0 112 0 137 0 120 9 241 0 128] 
#[1 0 6 0 74 0 6 0 112 0 6 0 120 9 245 0 126] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 9 249 0 127 9 249 0 128 9 249 0 129 9 249 0 130 9 249 0 131 9 249 0 132 9 249 0 133 9 249 0 134 9 249 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 9 249 0 206 9 249 0 207 9 249 0 208 9 249 0 212 9 249 0 213 9 249 0 214 9 249 0 215 9 249 0 216 9 249 0 223 9 249 0 224 9 249 0 225 9 249 0 226 9 249 0 227 9 249 0 228 9 249 0 229 9 249 0 230 9 249 0 232 9 249 0 234 9 249 0 236 9 249 0 237 9 249 0 238 9 249 0 239 9 249 0 240 9 249 0 241 9 249 0 242 9 249 1 30 9 249 1 31 9 249 1 32 9 249 1 33 9 249 1 34 9 249 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 6 0 74 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 9 253 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 10 1 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 5 6 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 10 5 0 61] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 6 0 53 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 10 9 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 10 13 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 49 0 23 4 53 0 27 4 57 0 28 4 61 0 30 4 65 0 55 4 69 0 67 4 73 0 70 4 77 0 80 10 17 0 95 4 81 0 104 4 85 0 231 4 89 0 233 4 93 0 235] 
#[0 5 10 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 53 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 10 21 0 126] 
#[0 10 25 0 64] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 53 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 10 29 0 126] 
#[0 5 14 0 51 0 52] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 53 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 10 33 0 126] 
#[0 10 37 0 64] 
#[1 10 41 0 51 10 45 0 53] 
#[1 10 49 0 51 8 65 0 52 9 77 1 3 9 77 1 5 9 77 1 6 9 77 1 7] 
#[0 5 18 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 101 0 112 10 53 0 128] 
#[0 5 22 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 26 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 30 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 10 57 0 103] 
#[1 6 85 0 109 10 61 0 137] 
#[1 1 45 0 115 10 65 0 133] 
#[1 4 133 0 31 10 69 0 163 10 69 0 166 10 69 0 167] 
#[1 1 45 0 115 10 73 0 133] 
#[0 5 34 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 38 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 10 77 0 61] 
#[0 10 81 0 53] 
#[0 10 85 0 93] 
#[0 5 42 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 10 89 0 53] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 137 0 120 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 10 93 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 10 97 0 53] 
#[0 10 101 0 61] 
#[0 10 105 0 53] 
#[0 10 109 0 93] 
#[1 4 133 0 31 10 113 0 163 10 113 0 166 10 113 0 167] 
#[0 5 46 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 10 117 0 6 9 201 0 9 9 205 0 164] 
#[0 5 50 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 10 121 0 127 10 121 0 128 10 121 0 129 10 121 0 130 10 121 0 131 10 121 0 132 10 121 0 133 10 121 0 134 10 121 0 135] 
#[0 5 54 0 6 0 9] 
#[0 5 58 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 62 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 66 0 6 0 9] 
#[1 3 238 0 6 3 238 0 9 7 17 0 18 7 25 0 183 10 125 0 184] 
#[0 5 70 0 6 0 9] 
#[0 5 74 0 6 0 9] 
#[0 5 78 0 6 0 9] 
#[1 5 82 0 5 5 82 0 8 5 82 0 10 0 49 0 11 5 82 0 21 5 82 0 22 5 82 0 24 5 82 0 32 5 82 0 45 5 82 0 47 5 82 0 48 5 82 0 51 5 82 0 52 5 82 0 53 5 82 0 54 5 82 0 57 5 82 0 58 5 82 0 60 5 82 0 61 5 82 0 62 5 82 0 63 5 82 0 64 5 82 0 68 5 82 0 72 5 82 0 74 5 82 0 75 5 82 0 77 5 82 0 83 5 82 0 85 5 82 0 86 5 82 0 87 5 82 0 88 5 82 0 90 5 82 0 93 5 82 0 97 5 82 0 101 5 82 0 102 5 82 0 103 5 82 0 105 5 82 0 110 5 82 0 111 5 82 0 112 5 82 0 113 5 82 0 114 5 82 0 115 5 82 0 116 2 123 0 117 2 127 0 118 5 82 0 120 10 129 0 138 10 129 0 139 10 129 0 140 10 129 0 141 10 129 0 142 5 82 1 36] 
#[0 10 133 0 74] 
#[1 10 137 0 74 0 101 0 112 0 137 0 120 10 141 0 128] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 0 6 0 21 0 6 0 22 4 49 0 23 0 6 0 24 4 53 0 27 4 57 0 28 4 61 0 30 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 54 4 65 0 55 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 4 69 0 67 0 6 0 68 4 73 0 70 0 6 0 74 0 6 0 75 0 6 0 77 4 77 0 80 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 4 81 0 104 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 10 145 0 126 4 85 0 231 4 89 0 233 4 93 0 235] 
#[1 10 149 0 74 0 101 0 112 0 137 0 120 10 153 0 128] 
#[1 0 6 0 74 0 6 0 112 0 6 0 120 10 157 0 126] 
#[0 5 86 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 10 161 0 53 0 101 0 112 0 137 0 120 10 165 0 128] 
#[1 0 6 0 53 0 6 0 112 0 6 0 120 10 169 0 126] 
#[1 2 131 0 5 2 131 0 8 2 131 0 10 2 131 0 11 5 90 0 13 2 131 0 21 2 131 0 22 2 131 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 2 131 0 51 2 131 0 52 0 6 0 54 0 6 0 57 2 131 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 2 131 0 68 2 131 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 2 131 0 105 2 131 0 110 2 131 0 111 2 131 0 112 2 131 0 113 2 131 0 114 2 131 0 115 2 131 0 116 2 131 0 117 2 131 0 118 0 6 0 120 10 173 0 126 10 177 1 9] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 6 0 53 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 10 181 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 10 185 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 5 94 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 6 0 53 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 10 189 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 10 193 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 6 0 53 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 10 197 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 10 201 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 5 98 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 53 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 10 205 0 126] 
#[0 10 209 0 64] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 32 0 6 0 45 0 6 0 47 0 6 0 48 0 6 0 53 0 6 0 54 0 6 0 57 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 68 0 6 0 75 0 6 0 77 0 6 0 83 0 6 0 85 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 93 0 6 0 97 0 6 0 102 0 6 0 103 0 6 0 105 0 6 0 110 0 6 0 111 0 6 0 112 0 6 0 113 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 120 10 213 0 126] 
#[0 5 102 0 11 0 53 0 117 0 118 0 120] 
#[0 5 106 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 10 217 0 10 7 117 0 109] 
#[1 4 173 0 5 10 221 0 179] 
#[0 5 110 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 4 173 0 5 10 225 0 179] 
#[0 5 114 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 10 229 0 61] 
#[0 5 118 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 10 233 0 61] 
#[0 10 237 0 53] 
#[0 10 241 0 93] 
#[0 5 122 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 10 245 0 61] 
#[0 5 126 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 130 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 134 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 18 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 138 0 6 0 9] 
#[0 5 142 0 6 0 9] 
#[1 5 146 0 5 5 146 0 8 5 146 0 10 0 129 0 11 5 146 0 21 5 146 0 22 5 146 0 24 5 146 0 32 5 146 0 45 5 146 0 47 5 146 0 48 5 146 0 51 5 146 0 52 5 146 0 53 5 146 0 54 5 146 0 57 5 146 0 58 5 146 0 60 5 146 0 61 5 146 0 62 5 146 0 63 5 146 0 64 5 146 0 68 5 146 0 72 5 146 0 74 5 146 0 75 5 146 0 77 5 146 0 83 5 146 0 85 5 146 0 86 5 146 0 87 5 146 0 88 5 146 0 90 5 146 0 93 5 146 0 97 5 146 0 101 5 146 0 102 5 146 0 103 5 146 0 105 5 146 0 110 5 146 0 111 5 146 0 112 5 146 0 113 5 146 0 114 5 146 0 115 5 146 0 116 5 146 0 117 5 146 0 118 5 146 0 120 5 146 1 36] 
#[1 5 150 0 5 5 150 0 8 5 150 0 10 0 49 0 11 5 150 0 21 5 150 0 22 5 150 0 24 5 150 0 32 5 150 0 45 5 150 0 47 5 150 0 48 5 150 0 51 5 150 0 52 5 150 0 53 5 150 0 54 5 150 0 57 5 150 0 58 5 150 0 60 5 150 0 61 5 150 0 62 5 150 0 63 5 150 0 64 5 150 0 68 5 150 0 72 5 150 0 74 5 150 0 75 5 150 0 77 5 150 0 83 5 150 0 85 5 150 0 86 5 150 0 87 5 150 0 88 5 150 0 90 5 150 0 93 5 150 0 97 5 150 0 101 5 150 0 102 5 150 0 103 5 150 0 105 5 150 0 110 5 150 0 111 5 150 0 112 5 150 0 113 5 150 0 114 5 150 0 115 5 150 0 116 2 135 0 117 2 139 0 118 5 150 0 120 10 249 0 138 10 249 0 139 10 249 0 140 10 249 0 141 10 249 0 142 5 150 1 36] 
#[1 5 154 0 5 5 154 0 8 5 154 0 10 0 49 0 11 5 154 0 21 5 154 0 22 5 154 0 24 5 154 0 32 5 154 0 45 5 154 0 47 5 154 0 48 5 154 0 51 5 154 0 52 5 154 0 53 5 154 0 54 5 154 0 57 5 154 0 58 5 154 0 60 5 154 0 61 5 154 0 62 5 154 0 63 5 154 0 64 5 154 0 68 5 154 0 72 5 154 0 74 5 154 0 75 5 154 0 77 5 154 0 83 5 154 0 85 5 154 0 86 5 154 0 87 5 154 0 88 5 154 0 90 5 154 0 93 5 154 0 97 5 154 0 101 5 154 0 102 5 154 0 103 5 154 0 105 5 154 0 110 5 154 0 111 5 154 0 112 5 154 0 113 5 154 0 114 5 154 0 115 5 154 0 116 2 143 0 117 2 147 0 118 5 154 0 120 10 253 0 138 10 253 0 139 10 253 0 140 10 253 0 141 10 253 0 142 5 154 1 36] 
#[0 11 1 0 74] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 6 0 74 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 11 5 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 11 9 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 5 158 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 11 13 0 74] 
#[1 11 17 0 74 0 101 0 112 0 137 0 120 11 21 0 128] 
#[0 11 25 0 64] 
#[0 11 29 0 53] 
#[1 11 33 0 53 0 101 0 112 0 137 0 120 11 37 0 128] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 6 0 51 0 6 0 52 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 11 41 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 11 45 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 11 49 0 13 0 181 0 21 0 185 0 22 0 189 0 24 5 162 0 51 5 162 0 52 0 213 0 58 0 237 0 68 0 241 0 75 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 11 53 0 127 11 53 0 128 11 53 0 129 11 53 0 130 11 53 0 131 11 53 0 132 11 53 0 133 11 53 0 134 11 53 0 135 2 217 0 138 2 217 0 139 2 217 0 140 2 217 0 141 2 217 0 142 11 53 0 206 11 53 0 207 11 53 0 208 11 53 0 212 11 53 0 213 11 53 0 214 11 53 0 215 11 53 0 216 11 53 0 223 11 53 0 224 11 53 0 225 11 53 0 226 11 53 0 227 11 53 0 228 11 53 0 229 11 53 0 230 11 53 0 232 11 53 0 234 11 53 0 236 11 53 0 237 11 53 0 238 11 53 0 239 11 53 0 240 11 53 0 241 11 53 0 242 11 57 1 8 11 53 1 30 11 53 1 31 11 53 1 32 11 53 1 33 11 53 1 34 11 53 1 35] 
#[1 11 61 0 53 0 101 0 112 0 137 0 120 11 65 0 128] 
#[1 0 6 0 53 0 6 0 112 0 6 0 120 11 69 0 126] 
#[1 11 73 0 53 0 137 0 120] 
#[1 0 6 0 53 0 6 0 120 11 77 0 126] 
#[1 11 81 0 53 0 101 0 112 0 137 0 120 11 85 0 128] 
#[1 0 6 0 53 0 6 0 112 0 6 0 120 11 89 0 126] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 6 0 53 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 67 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 11 93 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 11 97 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[0 5 166 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 0 169 0 5 0 173 0 8 0 177 0 10 0 49 0 11 0 181 0 21 0 185 0 22 0 189 0 24 0 9 0 32 0 193 0 45 0 197 0 47 0 201 0 48 0 6 0 53 0 205 0 54 0 209 0 57 0 213 0 58 0 217 0 60 0 221 0 61 0 225 0 62 0 229 0 63 0 233 0 64 0 237 0 68 0 241 0 75 0 245 0 77 1 117 0 83 0 253 0 85 1 1 0 86 1 5 0 87 1 9 0 90 1 13 0 93 1 17 0 97 1 21 0 102 1 25 0 103 1 29 0 105 1 33 0 110 1 37 0 111 0 101 0 112 0 109 0 113 1 41 0 114 1 45 0 115 1 49 0 116 0 53 0 117 0 57 0 118 0 71 0 120 11 101 0 126 1 209 0 127 1 209 0 128 1 209 0 129 1 209 0 130 1 209 0 131 1 209 0 132 1 209 0 133 1 209 0 134 1 209 0 135 1 97 0 138 1 97 0 139 1 97 0 140 1 97 0 141 1 97 0 142 1 105 0 146 1 105 0 152 11 105 0 153 1 117 0 160 1 105 0 168 1 105 0 169 1 105 0 173 1 105 0 174 1 105 0 185 1 105 0 186 1 105 0 187 1 149 0 188 1 105 0 189 1 105 0 190 1 105 0 191 1 105 0 192 1 105 0 193 1 105 0 194 1 105 0 195 1 105 0 196 1 105 0 198 1 105 0 199 1 105 0 200 1 105 0 201 1 105 0 205 1 209 0 206 1 209 0 207 1 209 0 208 1 209 0 212 1 209 0 213 1 209 0 214 1 209 0 215 1 209 0 216 1 209 0 223 1 209 0 224 1 209 0 225 1 209 0 226 1 209 0 227 1 209 0 228 1 209 0 229 1 209 0 230 1 209 0 232 1 209 0 234 1 209 0 236 1 209 0 237 1 209 0 238 1 209 0 239 1 209 0 240 1 209 0 241 1 209 0 242 1 105 0 243 1 105 0 244 1 105 0 245 1 105 0 246 1 105 0 247 1 105 0 248 1 105 0 249 1 105 0 250 1 105 0 251 1 105 0 252 1 105 0 253 1 105 0 254 1 105 0 255 1 105 1 0 1 105 1 1 1 105 1 2 1 105 1 10 2 117 1 11 1 105 1 12 1 105 1 13 1 105 1 14 1 105 1 15 1 105 1 16 1 105 1 17 1 105 1 18 1 105 1 19 1 105 1 20 1 105 1 21 1 105 1 22 1 105 1 23 1 105 1 24 1 105 1 25 1 105 1 26 1 105 1 27 1 105 1 29 2 189 1 30 2 189 1 31 2 189 1 32 2 189 1 33 2 189 1 34 2 189 1 35] 
#[1 6 85 0 109 11 109 0 137] 
#[1 4 133 0 31 11 113 0 163 11 113 0 166 11 113 0 167] 
#[0 5 170 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 174 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 178 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 11 117 0 61] 
#[0 5 182 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 186 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 5 190 0 5 5 190 0 8 5 190 0 10 0 129 0 11 5 190 0 21 5 190 0 22 5 190 0 24 5 190 0 32 5 190 0 45 5 190 0 47 5 190 0 48 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 57 5 190 0 58 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 68 5 190 0 72 5 190 0 74 5 190 0 75 5 190 0 77 5 190 0 83 5 190 0 85 5 190 0 86 5 190 0 87 5 190 0 88 5 190 0 90 5 190 0 93 5 190 0 97 5 190 0 101 5 190 0 102 5 190 0 103 5 190 0 105 5 190 0 110 5 190 0 111 5 190 0 112 5 190 0 113 5 190 0 114 5 190 0 115 5 190 0 116 5 190 0 117 5 190 0 118 5 190 0 120 5 190 1 36] 
#[1 5 194 0 5 5 194 0 8 5 194 0 10 0 129 0 11 5 194 0 21 5 194 0 22 5 194 0 24 5 194 0 32 5 194 0 45 5 194 0 47 5 194 0 48 5 194 0 51 5 194 0 52 5 194 0 53 5 194 0 54 5 194 0 57 5 194 0 58 5 194 0 60 5 194 0 61 5 194 0 62 5 194 0 63 5 194 0 64 5 194 0 68 5 194 0 72 5 194 0 74 5 194 0 75 5 194 0 77 5 194 0 83 5 194 0 85 5 194 0 86 5 194 0 87 5 194 0 88 5 194 0 90 5 194 0 93 5 194 0 97 5 194 0 101 5 194 0 102 5 194 0 103 5 194 0 105 5 194 0 110 5 194 0 111 5 194 0 112 5 194 0 113 5 194 0 114 5 194 0 115 5 194 0 116 5 194 0 117 5 194 0 118 5 194 0 120 5 194 1 36] 
#[1 5 198 0 5 5 198 0 8 5 198 0 10 0 49 0 11 5 198 0 21 5 198 0 22 5 198 0 24 5 198 0 32 5 198 0 45 5 198 0 47 5 198 0 48 5 198 0 51 5 198 0 52 5 198 0 53 5 198 0 54 5 198 0 57 5 198 0 58 5 198 0 60 5 198 0 61 5 198 0 62 5 198 0 63 5 198 0 64 5 198 0 68 5 198 0 72 5 198 0 74 5 198 0 75 5 198 0 77 5 198 0 83 5 198 0 85 5 198 0 86 5 198 0 87 5 198 0 88 5 198 0 90 5 198 0 93 5 198 0 97 5 198 0 101 5 198 0 102 5 198 0 103 5 198 0 105 5 198 0 110 5 198 0 111 5 198 0 112 5 198 0 113 5 198 0 114 5 198 0 115 5 198 0 116 2 151 0 117 2 155 0 118 5 198 0 120 11 121 0 138 11 121 0 139 11 121 0 140 11 121 0 141 11 121 0 142 5 198 1 36] 
#[1 11 125 0 74 0 101 0 112 0 137 0 120 11 129 0 128] 
#[1 0 6 0 74 0 6 0 112 0 6 0 120 11 133 0 126] 
#[0 5 202 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 206 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 11 137 0 74] 
#[0 5 210 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 11 141 0 64] 
#[0 11 145 0 64] 
#[0 11 149 0 53] 
#[1 5 214 0 51 5 214 0 52 0 137 0 120] 
#[1 0 6 0 51 0 6 0 52 0 6 0 120 11 153 0 126] 
#[0 5 218 0 5 0 8 0 10 0 11 0 13 0 21 0 22 0 24 0 51 0 52 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[1 3 249 0 1 3 253 0 3 4 1 0 5 4 5 0 7 4 9 0 8 4 13 0 10 4 17 0 11 4 21 0 12 11 157 0 13 4 25 0 15 4 29 0 16 4 33 0 17 4 37 0 18 4 41 0 19 4 45 0 20 4 49 0 23 4 53 0 27 4 57 0 28 4 61 0 30 4 65 0 55 4 69 0 67 4 73 0 70 4 77 0 80 4 81 0 104 4 85 0 231 4 89 0 233 4 93 0 235] 
#[0 5 222 0 5 0 8 0 10 0 11 0 13 0 21 0 22 0 24 0 51 0 52 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 11 161 0 64] 
#[0 11 165 0 53] 
#[1 11 169 0 53 0 101 0 112 0 137 0 120 11 173 0 128] 
#[0 11 177 0 64] 
#[1 11 181 0 53 0 137 0 120] 
#[0 11 185 0 64] 
#[0 11 189 0 53] 
#[1 11 193 0 53 0 101 0 112 0 137 0 120 11 197 0 128] 
#[1 11 201 0 53 0 101 0 112 0 137 0 120 11 205 0 128] 
#[1 0 6 0 53 0 6 0 112 0 6 0 120 11 209 0 126] 
#[1 11 213 0 53 0 137 0 120] 
#[1 0 6 0 53 0 6 0 120 11 217 0 126] 
#[1 11 221 0 107 7 117 0 109] 
#[0 5 226 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 230 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[1 5 234 0 5 5 234 0 8 5 234 0 10 0 129 0 11 5 234 0 21 5 234 0 22 5 234 0 24 5 234 0 32 5 234 0 45 5 234 0 47 5 234 0 48 5 234 0 51 5 234 0 52 5 234 0 53 5 234 0 54 5 234 0 57 5 234 0 58 5 234 0 60 5 234 0 61 5 234 0 62 5 234 0 63 5 234 0 64 5 234 0 68 5 234 0 72 5 234 0 74 5 234 0 75 5 234 0 77 5 234 0 83 5 234 0 85 5 234 0 86 5 234 0 87 5 234 0 88 5 234 0 90 5 234 0 93 5 234 0 97 5 234 0 101 5 234 0 102 5 234 0 103 5 234 0 105 5 234 0 110 5 234 0 111 5 234 0 112 5 234 0 113 5 234 0 114 5 234 0 115 5 234 0 116 5 234 0 117 5 234 0 118 5 234 0 120 5 234 1 36] 
#[0 5 238 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 11 225 0 74] 
#[1 11 229 0 74 0 101 0 112 0 137 0 120 11 233 0 128] 
#[0 5 242 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 246 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 5 250 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 11 237 0 64] 
#[1 5 254 0 51 5 254 0 52 0 137 0 120] 
#[0 6 2 0 5 0 8 0 10 0 11 0 13 0 21 0 22 0 24 0 51 0 52 0 58 0 68 0 75 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118] 
#[0 6 6 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 11 241 0 64] 
#[0 11 245 0 64] 
#[0 11 249 0 53] 
#[0 6 10 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 11 253 0 64] 
#[0 6 14 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 12 1 0 64] 
#[0 12 5 0 64] 
#[0 12 9 0 53] 
#[0 12 13 0 64] 
#[0 12 17 0 53] 
#[1 12 21 0 53 0 101 0 112 0 137 0 120 12 25 0 128] 
#[0 12 29 0 64] 
#[1 12 33 0 53 0 137 0 120] 
#[0 6 18 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 27 0 28 0 30 0 32 0 33 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 67 0 68 0 70 0 72 0 74 0 75 0 77 0 78 0 80 0 83 0 85 0 86 0 87 0 88 0 90 0 91 0 93 0 95 0 96 0 97 0 101 0 102 0 103 0 104 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 22 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 26 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 12 37 0 74] 
#[0 6 30 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 34 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 38 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 12 41 0 64] 
#[0 6 42 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 46 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 50 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 12 45 0 64] 
#[0 6 54 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 12 49 0 64] 
#[0 12 53 0 64] 
#[0 12 57 0 53] 
#[0 6 58 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 12 61 0 64] 
#[0 6 62 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 66 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 70 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 74 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 78 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 12 65 0 64] 
#[0 6 82 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36] 
#[0 6 86 0 5 0 8 0 10 0 11 0 21 0 22 0 24 0 32 0 45 0 47 0 48 0 51 0 52 0 53 0 54 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 68 0 72 0 74 0 75 0 77 0 83 0 85 0 86 0 87 0 88 0 90 0 93 0 97 0 101 0 102 0 103 0 105 0 110 0 111 0 112 0 113 0 114 0 115 0 116 0 117 0 118 0 120 1 36]
	).
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAddressOfClause1: nodes [
	| result |
	result := VBAddressOfClauseNode new.
	result addressOfToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument1: nodes [
	| result |
	result := VBArgumentNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument2: nodes [
	| result |
	result := VBArgumentNode new.
	result paramarrayToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument3: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument4: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result arguments.
	result addTokens: ((nodes at: 2) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addNode: (nodes at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result timesToken: ((nodes at: 2) at: 1).
	result plusToken: ((nodes at: 2) at: 2).
	result minusToken: ((nodes at: 2) at: 3).
	result divideToken: ((nodes at: 2) at: 4).
	result upArrowToken: ((nodes at: 2) at: 5).
	result _Token: ((nodes at: 2) at: 6).
	result modToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator4: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator6: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator7: nodes [
	| result |
	result := Array new: 7.
	result at: 7 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignementOrEquals1: nodes [
	| result |
	result := VBAssignementOrEqualsNode new.
	result left: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBModuleAttributeNode new.
	result attributeToken: (nodes at: 1).
	result setting: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBaseType11: nodes [
	| result |
	result := VBBaseTypeNode new.
	result variantToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addObject: (nodes at: 1) to: result statements.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addObjects: ((nodes at: 2) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBody1: nodes [
	| result |
	result := VBBodyNode new.
	result addNode: (nodes at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanBinaryOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result andToken: ((nodes at: 2) at: 1).
	result orToken: ((nodes at: 2) at: 2).
	result xorToken: ((nodes at: 2) at: 3).
	result eqvToken: ((nodes at: 2) at: 4).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanLiteral1: nodes [
	| result |
	result := VBBooleanLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForColorLiteral1: nodes [
	| result |
	result := VBColorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperation1: nodes [
	| result |
	result := VBComparisonOperationNode new.
	result left: (nodes at: 1).
	result greaterThanToken: ((nodes at: 2) at: 1).
	result lessThanToken: ((nodes at: 2) at: 2).
	result lessThanGreaterThanToken: ((nodes at: 2) at: 3).
	result lessThanEqualToken: ((nodes at: 2) at: 4).
	result greaterThanEqualToken: ((nodes at: 2) at: 5).
	result isToken: ((nodes at: 2) at: 6).
	result likeToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator5: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType1: nodes [
	| result |
	result := VBComplexTypeNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConcatenationOperation1: nodes [
	| result |
	result := VBConcatenationOperationNode new.
	result left: (nodes at: 1).
	result andToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConfiguration1: nodes [
	| result |
	result := VBConfigurationNode new.
	result beginToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result settings.
	result addNodes: ((nodes at: 4) at: 1) to: result settings.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDateLiteral1: nodes [
	| result |
	result := VBDateLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction1: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction2: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction3: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction4: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	result type: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub1: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub2: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub3: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub4: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum1: nodes [
	| result |
	result := VBDefineEnumNode new.
	result addToken: (nodes at: 1) to: result enumTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum2: nodes [
	| result |
	result := VBDefineEnumNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction1: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction2: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction3: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction4: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction5: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction6: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction7: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction8: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub1: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub2: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub3: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub4: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result subTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType1: nodes [
	| result |
	result := VBDefineTypeNode new.
	result addToken: (nodes at: 1) to: result typeTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType2: nodes [
	| result |
	result := VBDefineTypeNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result typeTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariable1: nodes [
	| result |
	result := VBDimVariableNode new.
	result dimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariables1: nodes [
	| result |
	result := VBDimMultipleVariablesNode new.
	result dimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess1: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result receiver: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfBlock1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfBlock2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result ifMatch: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfColon1: nodes [
	| result |
	result := VBElseIfColonNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result colonTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result ifMatches.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry1: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry2: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent1: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent2: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result eventToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitDo1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result doToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFor1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result forToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFunction1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitProperty1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result propertyToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitSub1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement1: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result letToken: (nodes at: 1).
	result left: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result right: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitCall1: nodes [
	| result |
	result := VBExplicitCallNode new.
	result callToken: (nodes at: 1).
	result call: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFloatLiteral1: nodes [
	| result |
	result := VBFloatLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach1: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach2: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	result addNode: (nodes at: 9) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach3: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach4: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	result addNode: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach5: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach6: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	result addNode: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach7: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach8: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	result addNode: (nodes at: 11) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext1: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext2: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext3: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext4: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext1: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext2: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext3: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext4: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endLineNumber: (nodes at: 12).
	result nextToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLabel1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result gosubToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLine1: nodes [
	| result |
	result := VBGoSubLineNode new.
	result gosubToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result gotoToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLine1: nodes [
	| result |
	result := VBGoToLineNode new.
	result gotoToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGuidLiteral1: nodes [
	| result |
	result := VBGuidLiteralNode new.
	result leftBraceToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 3) to: result minusTokens.
	result addTokens: (nodes at: 4) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 5) to: result minusTokens.
	result addTokens: (nodes at: 6) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 7) to: result minusTokens.
	result addTokens: (nodes at: 8) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 9) to: result minusTokens.
	result addTokens: (nodes at: 10) to: result hEX_INTEGERTokens.
	result rightBraceToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHashIdentifier1: nodes [
	| result |
	result := VBHashIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHeadlessIdentifier1: nodes [
	| result |
	result := VBHeadlessIdentifierNode new.
	result periodToken: (nodes at: 1).
	result token: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen1: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen2: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen3: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen4: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenColon1: nodes [
	| result |
	result := VBIfThenColonNode new.
	result ifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result colonToken: (nodes at: 4).
	result
		ifTrue: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse10: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse11: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse12: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse13: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse14: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse15: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result
		ifFalse: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse16: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result
		ifFalse: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endLineNumber: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result
		ifFalse: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result
		ifFalse: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse5: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse6: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse7: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse8: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse9: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse1: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse2: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result otherwise: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse3: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse4: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result otherwise: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall1: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result identifier: (nodes at: 1).
	result arguments: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop1: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result loopToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop2: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result endLineNumber: (nodes at: 4).
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop3: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop4: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral1: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result returnToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub2: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result returnToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub3: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result block: (nodes at: 3).
	result returnToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub4: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result block: (nodes at: 3).
	result endLineNumber: (nodes at: 4).
	result returnToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess1: nodes [
	| result |
	result := VBMemberAccessNode new.
	result receiver: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModifier1: nodes [
	| result |
	result := VBModifierNode new.
	result staticToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant1: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: (nodes at: 2).
	result constant: (nodes at: 3).
	result equalToken: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperties1: nodes [
	| result |
	result := VBModuleMultiplePropertiesNode new.
	result visibility: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperty1: nodes [
	| result |
	result := VBModulePropertyNode new.
	result visibility: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNegatedOperation1: nodes [
	| result |
	result := VBNegatedOperationNode new.
	result minusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNewClause1: nodes [
	| result |
	result := VBNewClauseNode new.
	result nEWToken: (nodes at: 1).
	result typeName: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation1: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNull1: nodes [
	| result |
	result := VBNullNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorGoTo1: nodes [
	| result |
	result := VBOnErrorGoToNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorResumeNext1: nodes [
	| result |
	result := VBOnErrorResumeNextNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result resumeToken: (nodes at: 3).
	result nextToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnExpressionGo1: nodes [
	| result |
	result := VBOnExpressionGoNode new.
	result onToken: (nodes at: 1).
	result integerExpression: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption1: nodes [
	| result |
	result := VBOptionValueNode new.
	result optionToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption2: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result databaseToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption3: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result binaryToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption4: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result compare: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption5: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result optionToken: (nodes at: 1).
	result explicitToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption6: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result optionToken: (nodes at: 1).
	result privateToken: (nodes at: 2).
	result moduleToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter10: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter11: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter12: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter13: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter14: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter15: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter16: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result type: (nodes at: 5).
	result equalToken: ((nodes at: 6) at: 1).
	result default: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result equalToken: ((nodes at: 2) at: 1).
	result default: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter9: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList1: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result rightParenToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList2: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result parameters.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterPassingStrategy2: nodes [
	| result |
	result := VBParameterPassingStrategyNode new.
	result byrefToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression1: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPositiveOperation1: nodes [
	| result |
	result := VBPositiveOperationNode new.
	result plusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess1: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result receiver: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForQualifiedIdentifier1: nodes [
	| result |
	result := VBQualifiedIdentifierNode new.
	result token: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable1: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable2: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables1: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables2: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeLabel1: nodes [
	| result |
	result := VBResumeLabelNode new.
	result resumeToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeNext1: nodes [
	| result |
	result := VBResumeNextNode new.
	result resumeToken: (nodes at: 1).
	result nextToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSetUpAssignation1: nodes [
	| result |
	result := VBSetUpAssignationNode new.
	result identifier: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleIdentifier1: nodes [
	| result |
	result := VBSimpleIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariable1: nodes [
	| result |
	result := VBStaticVariableNode new.
	result staticToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariables1: nodes [
	| result |
	result := VBStaticMultipleVariablesNode new.
	result staticToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStringLiteral1: nodes [
	| result |
	result := VBStringLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry1: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry2: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing1: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing2: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParenToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result sizes.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing1: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing2: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	result leftParenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result sizes.
	result addTokens: ((nodes at: 5) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue1: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue2: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable1: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable2: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariableList1: nodes [
	| result |
	result := VBVariableListNode new.
	result addNode: (nodes at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result variables.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVisibility2: nodes [
	| result |
	result := VBVisibilityNode new.
	result publicToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue1: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue2: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue3: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue4: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend1: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result wendToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend2: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend3: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend4: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result wendToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith1: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith2: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith3: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith4: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________2: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_HEX_INTEGER___1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___Expression__ifMatch__________1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___Expression__ifMatch__________2: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Expression__default___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Expression__default___2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___Statement__statement_____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader1: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader2: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	result classToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule1: nodes [
	| result |
	result := VBModuleNode new.
	result addNode: (nodes at: 1) to: result elements.
	result addNodes: ((nodes at: 2) at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 2) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule2: nodes [
	| result |
	result := VBModuleNode new.
	result addNode: (nodes at: 1) to: result elements.
	result addNodes: ((nodes at: 2) at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule3: nodes [
	| result |
	result := VBModuleNode new.
	result header: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result elements.
	result addNodes: ((nodes at: 4) at: 1) to: result elements.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule4: nodes [
	| result |
	result := VBModuleNode new.
	result header: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result elements.
	result addNodes: ((nodes at: 4) at: 1) to: result elements.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result body: (nodes at: 5).
	^ result
]
