Class {
	#name : #VBParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_VB6Parser'
}

{ #category : #generated }
VBParser class >> ambiguousTransitions [
^#(
#[ 0 6 0 9] 
#[ 0 6 3 37] 
#[ 0 118 3 137] 
#[ 0 53 0 118] 
#[ 0 57 0 118] 
#[ 0 186 0 190 0 194] 
#[ 0 129 0 186 0 190 0 194] 
#[ 0 186 0 190 3 189] 
#[ 0 186 0 190] 
#[ 1 50 1 54] 
#[ 1 214 1 218] 
#[ 0 186 0 190 0 194 3 189] 
#[ 2 70 4 13] 
#[ 2 70 4 61] 
#[ 2 70 4 65] 
#[ 2 70 4 77] 
#[ 2 70 4 81] 
#[ 2 70 4 85] 
#[ 2 70 4 93] 
#[ 2 74 4 13] 
#[ 2 74 4 61] 
#[ 2 74 4 65] 
#[ 2 74 4 77] 
#[ 2 74 4 81] 
#[ 2 74 4 85] 
#[ 2 74 4 93] 
#[ 1 78 2 82] 
#[ 2 90 2 94] 
#[ 0 6 0 101] 
#[ 0 6 0 137] 
#[ 2 142 4 13] 
#[ 2 142 4 61] 
#[ 2 142 4 65] 
#[ 2 142 4 77] 
#[ 2 142 4 81] 
#[ 2 142 4 85] 
#[ 2 142 4 93] 
#[ 2 94 2 146] 
#[ 2 94 2 162] 
#[ 0 6 1 50] 
#[ 0 177 2 186] 
#[ 0 181 2 186] 
#[ 0 185 2 186] 
#[ 0 9 2 186] 
#[ 0 189 2 186] 
#[ 0 193 2 186] 
#[ 0 197 2 186] 
#[ 0 201 2 186] 
#[ 0 205 2 186] 
#[ 0 209 2 186] 
#[ 0 213 2 186] 
#[ 0 217 2 186] 
#[ 0 221 2 186] 
#[ 0 225 2 186] 
#[ 0 229 2 186] 
#[ 0 233 2 186] 
#[ 0 237 2 186] 
#[ 0 241 2 186] 
#[ 0 245 2 186] 
#[ 0 249 2 186] 
#[ 0 253 2 186] 
#[ 1 1 2 186] 
#[ 2 186 5 5] 
#[ 1 5 2 186] 
#[ 1 9 2 186] 
#[ 1 13 2 186] 
#[ 1 17 2 186] 
#[ 1 21 2 186] 
#[ 1 25 2 186] 
#[ 1 29 2 186] 
#[ 1 33 2 186] 
#[ 0 101 2 186] 
#[ 0 109 2 186] 
#[ 1 37 2 186] 
#[ 1 41 2 186] 
#[ 1 45 2 186] 
#[ 0 53 2 186] 
#[ 0 57 2 186] 
#[ 2 194 5 25] 
#[ 0 177 2 194] 
#[ 0 181 2 194] 
#[ 0 185 2 194] 
#[ 0 233 2 194] 
#[ 0 237 2 194] 
#[ 1 25 2 194] 
#[ 1 29 2 194] 
#[ 1 33 2 194] 
#[ 0 101 2 194] 
#[ 0 109 2 194] 
#[ 1 37 2 194] 
#[ 1 41 2 194] 
#[ 1 45 2 194] 
#[ 0 53 2 194] 
#[ 0 57 2 194] 
#[ 0 6 2 198] 
#[ 2 94 2 202] 
#[ 3 66 4 13] 
#[ 3 66 4 61] 
#[ 3 66 4 65] 
#[ 3 66 4 77] 
#[ 3 66 4 81] 
#[ 3 66 4 85] 
#[ 3 66 4 93] 
#[ 2 94 3 82] 
#[ 0 186 0 190 0 194 3 98] 
#[ 0 186 0 190 3 98] 
#[ 0 129 0 186 0 190 0 194 3 98] 
#[ 0 186 0 190 3 98 3 189] 
#[ 1 50 3 102] 
#[ 3 122 4 13] 
#[ 3 122 4 61] 
#[ 3 122 4 65] 
#[ 3 122 4 77] 
#[ 3 122 4 81] 
#[ 3 122 4 85] 
#[ 3 122 4 93] 
#[ 2 194 6 133] 
#[ 3 130 6 145] 
#[ 1 50 3 142] 
#[ 3 150 4 13] 
#[ 3 150 4 61] 
#[ 3 150 4 65] 
#[ 3 150 4 77] 
#[ 3 150 4 81] 
#[ 3 150 4 85] 
#[ 3 150 4 93] 
#[ 3 158 4 13] 
#[ 3 158 4 61] 
#[ 3 158 4 65] 
#[ 3 158 4 77] 
#[ 3 158 4 81] 
#[ 3 158 4 85] 
#[ 3 158 4 93] 
#[ 3 162 4 13] 
#[ 3 162 4 61] 
#[ 3 162 4 65] 
#[ 3 162 4 77] 
#[ 3 162 4 81] 
#[ 3 162 4 85] 
#[ 3 162 4 93] 
#[ 3 166 4 13] 
#[ 3 166 4 61] 
#[ 3 166 4 65] 
#[ 3 166 4 77] 
#[ 3 166 4 81] 
#[ 3 166 4 85] 
#[ 3 166 4 93] 
#[ 1 50 4 10] 
#[ 4 13 4 34] 
#[ 4 34 4 61] 
#[ 4 34 4 65] 
#[ 4 34 4 77] 
#[ 4 34 4 81] 
#[ 4 34 4 85] 
#[ 4 34 4 93] 
#[ 4 13 4 38] 
#[ 4 38 4 61] 
#[ 4 38 4 65] 
#[ 4 38 4 77] 
#[ 4 38 4 81] 
#[ 4 38 4 85] 
#[ 4 38 4 93] 
#[ 4 50 6 145] 
#[ 0 177 4 54] 
#[ 0 181 4 54] 
#[ 0 185 4 54] 
#[ 0 233 4 54] 
#[ 0 237 4 54] 
#[ 1 25 4 54] 
#[ 1 29 4 54] 
#[ 1 33 4 54] 
#[ 0 101 4 54] 
#[ 0 109 4 54] 
#[ 1 37 4 54] 
#[ 1 41 4 54] 
#[ 1 45 4 54] 
#[ 0 53 4 54] 
#[ 0 57 4 54] 
#[ 0 177 4 58] 
#[ 0 181 4 58] 
#[ 0 185 4 58] 
#[ 0 233 4 58] 
#[ 0 237 4 58] 
#[ 1 25 4 58] 
#[ 1 29 4 58] 
#[ 1 33 4 58] 
#[ 0 101 4 58] 
#[ 0 109 4 58] 
#[ 1 37 4 58] 
#[ 1 41 4 58] 
#[ 1 45 4 58] 
#[ 0 53 4 58] 
#[ 0 57 4 58] 
#[ 4 13 4 126] 
#[ 4 61 4 126] 
#[ 4 65 4 126] 
#[ 4 77 4 126] 
#[ 4 81 4 126] 
#[ 4 85 4 126] 
#[ 4 93 4 126] 
#[ 0 53 5 86] 
#[ 0 57 5 86] 
#[ 0 53 5 146] 
#[ 0 57 5 146] 
#[ 0 53 5 150] 
#[ 0 57 5 150] 
#[ 0 53 5 186] 
#[ 0 57 5 186]
	).
]

{ #category : #'generated-accessing' }
VBParser class >> cacheId [
	^'2020-08-24T19:02:04.6952+02:00'
]

{ #category : #generated }
VBParser class >> definitionComment [
"%glr;
%ignorecase;
%annotate_tokens;
%left "")""  ;
#expression operators -- lowest precedence are first.
%left  ""="";
%left "","";
%right "":"";
%left ""||"" ""or"";
%left ""&&"" ""and"";
%left ""=="" ""!="" ""<>"";
%left ""<"" ""<="" "">"" "">="";
%left ""+"" ""-"";
%left ""*"" ""/"" ""%"";
%right ""^"";
%left ""++"" ""--""; 
%right ""delete"" ""!"" ""~"";
%right ""["" ""("";
%left ""."" ;
%prefix VB;
%root Program;
%suffix Node;
%start module;




<DECIMAL_INTEGER>
	: 0 | [1-9] [0-9]*	
	;
<HEX_INTEGER>
	: 0[xX][0-9a-fA-F]+	
	;
<OCTAL_INTEGER>
	: 0[0-7]+	
	;
<EXPONENT>
	: [eE] [\-\+]? [0-9]+ 	
	;
<FLOAT_TYPE>
	: [fFdD]	
	;

<DATE_LITERAL>
   : ""#"" ([^\#\r\n])*  ""#""
   ;
<COLOR_LITERAL>
   : \&H <HEX_INTEGER>+ ""&""?
   ;

<INTEGER_LITERAL>
	: (<DECIMAL_INTEGER> | <HEX_INTEGER> | <OCTAL_INTEGER>) [lL]?	
	;
<FLOATING_POINT_LITERAL>
	: [0-9]+ \. [0-9]* <EXPONENT>? <FLOAT_TYPE>? 
	| \. [0-9]+ <EXPONENT>? <FLOAT_TYPE>? 
	| [0-9]+ <EXPONENT> <FLOAT_TYPE>? 
	| [0-9]+ <FLOAT_TYPE>	
	| <HEX_INTEGER> \. [0-9a-fA-F]+ [pP] [\-\+]? [0-9]+ <FLOAT_TYPE>?
	;
<BOOLEAN_LITERAL>
	: true
	| false
	;
<STRING_LITERAL>
   : \"" ([^\""\r\n] | \""\"")* \""
   ;
<NULL_LITERAL>
	: Nothing	
	;

<IDENTIFIER>
	: (<isLetter> | [a-zA-Z_$]) (<isLetter>|\w|$)*	
	;
<HASH_IDENTIFIER>
	: ( \#) (<isLetter>|\w|$)*
	;
	
<whitespace>
	: \s+
	;

<line_continuation>
   : \  _ \r? \n 
   ;
<eol>
   :  (\r? \n | "":"" \ ) 
   ;

<comment>
   :  (\' | :?  REM  \ ) (<line_continuation> | [^\n\r])* 
   ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Basic module
########## ########## ########## ########## ########## ########## ########## ########## 

module: (header 'header' <eol>*)? ModuleStatement 'element'  (<eol>* ModuleStatement 'element' )*  (Body 'body')?   {{Module}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Literals
########## ########## ########## ########## ########## ########## ########## ########## 
literal 
	: IntegerLiteral
	| ColorLiteral
	| DateLiteral
	| FloatLiteral
	| BooleanLiteral
	| StringLiteral
	| Null
	| GuidLiteral
;
IntegerLiteral :  <INTEGER_LITERAL> 'token' {{IntegerLiteral}};
ColorLiteral: <COLOR_LITERAL> 'token' {{ColorLiteral}} ; 
DateLiteral:  <DATE_LITERAL> 'token' {{DateLiteral}};
FloatLiteral: <FLOATING_POINT_LITERAL> 'token' {{FloatLiteral}};
BooleanLiteral: <BOOLEAN_LITERAL> 'token' {{BooleanLiteral}};
StringLiteral:  <STRING_LITERAL> 'token' {{StringLiteral}};
Null: <NULL_LITERAL> 'token' {{Null}};
GuidLiteral: ""{""<HEX_INTEGER> + ""-""<HEX_INTEGER>+""-"" <HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""}"" {{GuidLiteral}};

Identifier : 
	   SimpleIdentifier 
	| HashIdentifier
	| QualifiedIdentifier | HeadlessIdentifier;

HashIdentifier :  <HASH_IDENTIFIER> 'token'   {{HashIdentifier}};
SimpleIdentifier : <IDENTIFIER> 'token'  {{SimpleIdentifier}};
HeadlessIdentifier  : "".""  Identifier 'token'  {{HeadlessIdentifier}};
QualifiedIdentifier : Identifier 'token'  "".""  <IDENTIFIER> 'member' {{QualifiedIdentifier}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Module header and configuration
########## ########## ########## ########## ########## ########## ########## ########## 

header: ""version""   FloatLiteral  'version'  (""class"")?  {{}};
Option
   :   ""option"" IntegerLiteral 'value' {{OptionValue}}
   |   ""option"" ""compare"" ""database"" {{OptionCompareDatabase}}
   |   ""option"" ""compare""  (""binary""| ""text"" 'compare') {{OptionCompare}}
   |   ""option"" ""explicit"" {{OptionExplicit}}
   |  ""option"" ""private"" ""module""{{OptionPrivateModule}}
   ;

SetUpAssignation :  
	Identifier  'identifier' ""="" Operand 'value' {{SetUpAssignation}} 
	;
Attribute
 : ""attribute"" SetUpAssignation 'setting' {{ModuleAttribute}}
 ;
Configuration 
:	""begin""  <eol>* SetUpAssignation 'setting' ( <eol>+ SetUpAssignation 'setting')* ""end"" {{Configuration}};

ModuleStatement :  
	Option  | Configuration | Attribute

	;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Body statements
########## ########## ########## ########## ########## ########## ########## ########## 

	
PossibleStatement : DeclareExternal | BehaviourDefinition | VariableDefinition | Attribute | ValueStatement | ControlFlowStatement | Types ;
NormalStatement:  PossibleStatement 'statement'  {{NormalStatement}} ; 
NumberedStatement: IntegerLiteral 'lineNumber' PossibleStatement 'statement' {{NumberedStatement}} ;
Statement:  PossibleStatement | NumberedStatement;
Block: Statement 'statement' (<eol>* Statement 'statement'  )* {{Block}};
Body: BodyElement 'element' (<eol>* BodyElement 'element'  )* {{Body}};

BaseType: ""boolean"" | ""byte"" | ""collection"" | ""date"" | ""double"" | ""integer"" | ""long"" | ""object"" | ""single"" | ""string"" | ""variant"" {{BaseType}};
Visibility: ""private"" | ""public""{{Visibility}}; 

ComplexType: Identifier 'name' {{ComplexType}};
Type: BaseType | ComplexType ;

TypedThing: ""as""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsType}}; 
TypedAndInstantiatedThing: ""as"" ""new""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsTypeAndNew}}; 

AsType: TypedThing | TypedAndInstantiatedThing;

BodyElement: 
	Block
;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Types
########## ########## ########## ########## ########## ########## ########## ########## 
Types : DefineEnum | DefineType | Event ;

DefineType :
	 (Visibility 'visibility')? ""type"" Identifier 'name' ( <eol>* TypeEntry 'field' )* <eol>* ""end"" ""type"" {{DefineType}}
   ;
TypeEntry
   : Identifier 'name' AsType 'type' (""*"" IntegerLiteral 'size' )? {{TypeEntry}} 
   ;
Event
   : (Visibility 'visibility')?  ""event"" Identifier 'selector' ParameterList 'parameters' {{Event}}
;
   
DefineEnum
   :  (Visibility 'visibility')?  ""enum"" Identifier 'name'  ( <eol>* EnumEntry 'field')* <eol>*  ""end"" ""enum"" {{DefineEnum}}
   ;

EnumEntry
   : Identifier 'name'  ( ""=""  Operand 'value')? {{EnumEntry}}
   ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Parameters
########## ########## ########## ########## ########## ########## ########## ########## 
ParameterPassingStrategy :  ""byval"" | ""byref"" {{ParameterPassingStrategy}};
ParameterList:  ""("" (Parameter 'parameter' ( "","" Parameter 'parameter')* )? "")"" {{ParameterList}};
Parameter: ""optional"" ? (ParameterPassingStrategy 'strategy')? ""paramarray""? Identifier 'name'  (AsType 'type')? (""="" Operand 'default')? {{Parameter}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## External declaration
########## ########## ########## ########## ########## ########## ########## ########## 
DeclareSub: (Visibility 'visibility')? ""declare""  ""sub"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  {{ExternalSub}};
DeclareFunction: (Visibility 'visibility')? ""declare""  ""function"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  AsType 'type' {{ExternalFunction}};
DeclareExternal: DeclareSub|DeclareFunction; 

########## ########## ########## ########## ########## ########## ########## ########## 
########## Function / Sub Definition 
########## ########## ########## ########## ########## ########## ########## ########## 

Modifier: ""static"" {{Modifier}};
DefineFunction: (Visibility 'visibility')? (Modifier 'modifier')? ""function"" Identifier 'selector' ParameterList 'parameters' (AsType 'type')? <eol>* Block 'block' ""end"" ""function"" {{FunctionDefinition}};
DefineSub:  (Visibility 'visibility')? (Modifier 'modifier')? ""sub"" Identifier 'selector' ParameterList 'parameters' <eol>* Block 'block' ""end"" ""sub"" {{SubDefinition}};
BehaviourDefinition:  DefineFunction | DefineSub;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Variable / And Multiple Variables
########## ########## ########## ########## ########## ########## ########## ########## 

ModuleProperty : Visibility 'visibility' Variable 'variable' {{ModuleProperty}};
ModuleConstant : (Visibility 'visibility') ""const"" Identifier 'constant' ""="" Operand 'value'  {{ModuleConstant}};
DefineVariable : ""dim"" Variable 'variable' {{DimVariable}};
ReDefineVariable : ""redim"" ""preserve""? Variable 'variable' {{ReDimVariable}};
StaticVariable : ""static"" Variable 'variable' {{StaticVariable}};
Variable : ""WithEvents"" ? Identifier 'name' (AsType 'type') {{Variable}};

ModuleProperties : Visibility 'visibility' VariableList 'variables' {{ModuleMultipleProperties}};
DefineVariables : ""dim"" VariableList 'variables' {{DimMultipleVariables}};
ReDefineVariables : ""redim""  ""preserve""?  VariableList 'variables' {{ReDimMultipleVariables}};
StaticVariables : ""static"" VariableList 'variables' {{StaticMultipleVariables}};
VariableList : Variable 'variable' ("",""  Variable 'variable' )* {{VariableList}};

VariableDefinition : ModuleProperties | ModuleProperty | ModuleConstant | DefineVariable | ReDefineVariable |  DefineVariables |  ReDefineVariables | StaticVariable | StaticVariables ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Value Statements
########## ########## ########## ########## ########## ########## ########## ########## 
ValueStatement :  Operation | ValueClause | ImplicitCall | StateAccess | ExplicitCall ;

ValueStatementList : ValueStatement 'value' ("","" ValueStatement 'value' ) * {{ValueStatementList}} ; 
### Ops
Operation : UnaryOperation | BinaryOperation ;
Operand :  ValueStatement|  Identifier | literal  ; 


DictionaryAccess :   Operand 'receiver' ""!"" Identifier 'member' {{DictionaryAccess}} ;
MemberAccess : Operand 'receiver' ""."" Identifier 'member' {{MemberAccess}} ;
ImplicitParenthesesLessCall : Identifier 'identifier' ArgumentList 'arguments' {{ImplicitParenthesesLessCall}} ;
ProcedureCallOrArrayAccess :  Operand 'receiver' ""("" ArgumentList 'arguments' "")"" {{ProcedureCallOrArrayAccess}} ;

Argument : (ParameterPassingStrategy 'strategy')?  ""paramarray""?  Operand 'value' {{Argument}};
ArgumentList : (Argument 'argument' ? ("","" | "";"" ))* Argument 'argument'? ( ("","" | "";"" )Argument 'argument' ?)* {{ArgumentList}};

ImplicitCall : Identifier | ProcedureCallOrArrayAccess | ImplicitParenthesesLessCall ;
StateAccess : DictionaryAccess | MemberAccess ;

ExplicitCall : ""Call""  ImplicitCall 'call'  {{ExplicitCall}}; 


### Unary Ops 
UnaryOperation:  NegatedOperation | PositiveOperation |  NotOperation ; 

NegatedOperation : ""-""  Operand 'value' {{NegatedOperation}} ;
PositiveOperation : ""+"" Operand 'value' {{PositiveOperation}} ;
NotOperation : ""not"" ""(""? Operand 'value' "")""? {{NotOperation}};

### Binary Ops 
BinaryOperation: ComparisonOperation  
				| ArithmeticOperation | BooleanBinaryOperation 
				| Assignement | AssignementOrEquals | ComparisonEqualsOperation | ConcatenationOperation ;

ComparisonOperator : "">"" | ""<""  |  ""<>"" | ""<="" | "">="" | ""is"" | ""like""  ;
ComparisonOperation : Operand 'left' ComparisonOperator Operand 'right' {{ComparisonOperation}};
ArithmeticOperator : ""*"" | ""+"" | ""-"" | ""/"" | ""^"" | ""\"" | ""Mod"";
ArithmeticOperation : Operand 'left' ArithmeticOperator Operand 'right' {{ArithmeticOperation}};
BooleanOperator : ""and"" | ""or"" | ""xor"" | ""eqv"";
BooleanBinaryOperation : Operand 'left' BooleanOperator Operand 'right' {{ArithmeticOperation}};
ConcatenationOperation : Operand 'left' ""&"" Operand 'right' {{ConcatenationOperation}}; 
ComparisonEqualsOperation :  ValueStatement 'left' ""="" ValueStatement 'right' {{ComparisonEqualsOperation}};
AssignementOrEquals : Identifier 'left' ""="" Identifier  'right' {{AssignementOrEquals}}; 
Assignement : ""let""? Identifier 'left' ""="" ValueStatement  'right' {{Assignement}}; 

### Value Clause 
ValueClause: AddressOfClause | NewClause ;
AddressOfClause : ""AddressOf"" Identifier 'name'  {{AddressOfClause}}; 
NewClause : ""New"" Identifier 'typeName' {{NewClause}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Control flow statements
########## ########## ########## ########## ########## ########## ########## ########## 


ControlFlowStatement: Loops | If  | On | Resume| Go | To | Label | With | Exits; 

#### Loops
Loops : DoLoop | WhileWend | ForLoop ;

########## Do
DoLoop : InfinityLoop | WhileTrue | UntilTrue ; 
InfinityLoop : 
	""do""  
		<eol>* (Block 'body')? <eol>* 
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{InfinityLoop}} ;

WhileTrue :  
	""do"" ""while"" ValueStatement 'condition' 
		<eol>* ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{WhileTrue}}; 
UntilTrue : 
	""do"" ""until"" ValueStatement 'condition'
		 <eol>*  Block 'body' <eol>* 
	(IntegerLiteral 'endLineNumber')?""loop"" 
 {{UntilTrue}}; 

########## WhileWend
WhileWend: 
	""while"" ValueStatement 'condition'
		 <eol>* ( Block 'body')? <eol>*  (IntegerLiteral 'endLineNumber')? 
	""wend""  {{WhileWend}}; 

########## For 
ForLoop : ForEach | ForNext | ForStepNext;

ForEach :  
	""for"" ""each"" Identifier 'element' ""in"" Operand 'group' 
		 <eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next"" (Identifier 'element' )? 
{{ForEach}} ;
 
ForNext :   
	""for"" Operand 'counter' ""="" Operand  'initialValue'  ""to"" Operand  'limit'   
		<eol>*  ( Block 'body')? <eol>* 
	 (IntegerLiteral 'endLineNumber')? 	""next"" 
{{ForNext}} ;
ForStepNext:   
	""for"" Operand 'counter' ""="" Operand  'initialValue'  ""to"" Operand  'limit' ""step"" Operand 'step'   
		<eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next""
 {{ForStepNext}} ;

########## If

If : IfThen | IfThenElse | IfThenElseIfElse ; 

IfThen : 
	""if"" Operand 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>* 
	""end"" ""if"" 
{{IfThen}};
IfThenElse : 
	""if"" Operand 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>* 
	""else"" 
		 <eol>* (Block 'ifFalse')? <eol>* 
	""end"" ""if"" 
{{IfThenElse}};
IfThenElseIfElse  : 
""if"" Operand 'condition' ""then"" 
	<eol>* (Block 'ifTrue')? <eol>* 
(ElseIf 'case') + 
""else""  
	<eol>* (Block 'otherwise')? <eol>*
 ""end"" ""if""
{{IfThenElseIfElse}};
ElseIf :  (""elseif"" Operand 'condition' ""then"" 
	<eol>* (Block 'ifMatch')? <eol>* ) {{ElseIf}};


###### Label / LabelSub
To : Label | LabelSub ;
Label : Identifier 'label' "":""  {{GoToLabel}}; 
LabelSub : Identifier 'label' "":"" (Block 'block' )? ""return"" {{GoSubLabel}}; 

###### Resume
	Resume : ResumeLabel | ResumeNext | ResumeEmpty ;
	
	ResumeLabel : ""resume"" Identifier 'label' {{ResumeLabel}} ; 
	ResumeNext : ""resume"" ""next"" {{ResumeNext}} ; 
	ResumeEmpty : ""resume"" ; 
	
###### GoTo / GoSub 
Go: GoTo | GoSub ;

GoTo :  GoToLabel | GoToLine ;
GoToLabel : ""goto"" Identifier 'label' {{GoToLabel}}  ;
GoToLine :  ""goto"" IntegerLiteral 'lineNumber' {{GoToLine}}  ;

GoSub: GoSubLabel | GoSubLine ;
GoSubLabel :  ""gosub"" Identifier 'label'  {{GoSubLabel}} ;
GoSubLine :  ""gosub""  IntegerLiteral 'lineNumber'{{GoSubLine}} ;

########## On 

On: OnErrorGoTo | OnErrorResumeNext |  OnExpressionGo  ; 

OnErrorGoTo : ""on"" ""error"" GoTo 'to' {{OnErrorGoTo}}  ;
OnErrorResumeNext : ""on"" ""error"" ""resume""  ""next"" {{OnErrorResumeNext }} ;
OnExpressionGo : ""on"" Operand 'integerExpression' Go 'to' {{OnExpressionGo}} ;

########## Error
Error: ""error"" Operand 'errorCode' {{Error}} ;

########## With
With : ""with"" Identifier 'with' <eol>* (Block 'block' )? <eol>*  (IntegerLiteral 'endLineNumber')?""end"" ""with"" {{With}} ;

########## Exits

Exits : ExitFunction | ExitSub | ExitProperty | ExitDo |ExitFor ; 
ExitFunction : ""exit"" ""function"" {{ExitFunction}} ; 
ExitSub : ""exit"" ""sub"" {{ExitSub}} ; 
ExitDo : ""exit"" ""do"" {{ExitDo}} ; 
ExitFor : ""exit"" ""for"" {{ExitFor}} ; 
ExitProperty : ""exit"" ""property"" {{ExitProperty}} ;"
]

{ #category : #generated }
VBParser class >> reduceTable [
^#(
	#(130 0 #reduceActionFor_eol__1: 1725441 false ) 
	#(155 1 #liftFirstValue: 3984385 false ) 
	#(155 1 #liftFirstValue: 3984387 false ) 
	#(155 1 #liftFirstValue: 3984386 false ) 
	#(129 0 #reduceActionFor__eol___ModuleStatement__element____1: 1724417 false ) 
	#(144 1 #reduceActionForSimpleIdentifier1: 2844673 false ) 
	#(143 1 #reduceActionForHashIdentifier1: 2777089 false ) 
	#(142 1 #liftFirstValue: 2674690 false ) 
	#(142 1 #liftFirstValue: 2674689 false ) 
	#(142 1 #liftFirstValue: 2674692 false ) 
	#(142 1 #liftFirstValue: 2674691 false ) 
	#(150 2 #reduceActionForAttribute1: 3780609 false ) 
	#(148 2 #reduceActionForOption5: 3371013 false ) 
	#(132 1 #reduceActionForIntegerLiteral1: 2134017 false ) 
	#(148 2 #reduceActionForOption1: 3371009 false ) 
	#(135 1 #reduceActionForFloatLiteral1: 2314241 false ) 
	#(147 2 #reduceActionForheader1: 3306497 false ) 
	#(127 2 #reduceActionFormodule1: 1661953 false ) 
	#(145 2 #reduceActionForHeadlessIdentifier1: 2909185 false ) 
	#(130 2 #reduceActionFor_eol__2: 1725442 false ) 
	#(153 0 #reduceActionFor__eol___ModuleStatement__element____1: 3918849 false ) 
	#(148 3 #reduceActionForOption3: 3371011 false ) 
	#(148 3 #reduceActionForOption2: 3371010 false ) 
	#(148 3 #reduceActionForOption4: 3371012 false ) 
	#(148 3 #reduceActionForOption6: 3371014 false ) 
	#(147 3 #reduceActionForheader2: 3306498 false ) 
	#(167 1 #liftFirstValue: 4932609 false ) 
	#(167 1 #reduceActionForVisibility2: 4932610 false ) 
	#(275 1 #liftFirstValue: 15026177 false ) 
	#(196 1 #reduceActionForModifier1: 7619585 false ) 
	#(134 1 #reduceActionForDateLiteral1: 2258945 false ) 
	#(133 1 #reduceActionForColorLiteral1: 2199553 false ) 
	#(136 1 #reduceActionForBooleanLiteral1: 2380801 false ) 
	#(137 1 #reduceActionForStringLiteral1: 2444289 false ) 
	#(138 1 #reduceActionForNull1: 2505729 false ) 
	#(129 2 #reduceActionFor__eol___ModuleStatement__element____2: 1724418 false ) 
	#(219 1 #liftFirstValue: 9899011 false ) 
	#(131 1 #liftFirstValue: 1996801 false ) 
	#(131 1 #liftFirstValue: 1996802 false ) 
	#(131 1 #liftFirstValue: 1996803 false ) 
	#(131 1 #liftFirstValue: 1996804 false ) 
	#(131 1 #liftFirstValue: 1996805 false ) 
	#(131 1 #liftFirstValue: 1996806 false ) 
	#(131 1 #liftFirstValue: 1996807 false ) 
	#(131 1 #liftFirstValue: 1996808 false ) 
	#(230 1 #liftFirstValue: 10590209 false ) 
	#(227 0 #reduceActionFor_Argument__argument__________________1: 10471425 false ) 
	#(219 1 #liftFirstValue: 9899010 false ) 
	#(156 1 #liftFirstValue: 4260868 false ) 
	#(159 1 #liftFirstValue: 4582401 false ) 
	#(159 1 #liftFirstValue: 4582402 false ) 
	#(162 0 #reduceActionFor__eol___ModuleStatement__element____1: 4664321 false ) 
	#(175 1 #liftFirstValue: 5332993 false ) 
	#(127 3 #reduceActionFormodule2: 1661954 false ) 
	#(165 0 #reduceActionFor__eol___ModuleStatement__element____1: 4739073 false ) 
	#(156 1 #liftFirstValue: 4260871 false ) 
	#(176 1 #liftFirstValue: 5557250 false ) 
	#(176 1 #liftFirstValue: 5557251 false ) 
	#(176 1 #liftFirstValue: 5557249 false ) 
	#(195 1 #liftFirstValue: 7349249 false ) 
	#(195 1 #liftFirstValue: 7349250 false ) 
	#(156 1 #liftFirstValue: 4260865 false ) 
	#(199 1 #liftFirstValue: 8036353 false ) 
	#(199 1 #liftFirstValue: 8036354 false ) 
	#(156 1 #liftFirstValue: 4260866 false ) 
	#(213 1 #liftFirstValue: 9245698 false ) 
	#(213 1 #liftFirstValue: 9245699 false ) 
	#(213 1 #liftFirstValue: 9245700 false ) 
	#(213 1 #liftFirstValue: 9245701 false ) 
	#(213 1 #liftFirstValue: 9245704 false ) 
	#(213 1 #liftFirstValue: 9245697 false ) 
	#(213 1 #liftFirstValue: 9245702 false ) 
	#(213 1 #liftFirstValue: 9245703 false ) 
	#(213 1 #liftFirstValue: 9245705 false ) 
	#(156 1 #liftFirstValue: 4260867 false ) 
	#(219 1 #liftFirstValue: 9899009 false ) 
	#(156 1 #liftFirstValue: 4260869 false ) 
	#(214 1 #liftFirstValue: 9647105 false ) 
	#(231 1 #liftFirstValue: 10679297 false ) 
	#(231 1 #liftFirstValue: 10679298 false ) 
	#(230 1 #liftFirstValue: 10590211 false ) 
	#(230 1 #liftFirstValue: 10590210 false ) 
	#(214 1 #liftFirstValue: 9647107 false ) 
	#(214 1 #liftFirstValue: 9647108 false ) 
	#(214 1 #liftFirstValue: 9647109 false ) 
	#(218 1 #liftFirstValue: 9850881 false ) 
	#(233 1 #liftFirstValue: 10811393 false ) 
	#(233 1 #liftFirstValue: 10811394 false ) 
	#(233 1 #liftFirstValue: 10811395 false ) 
	#(218 1 #liftFirstValue: 9850882 false ) 
	#(237 1 #liftFirstValue: 11101185 false ) 
	#(237 1 #liftFirstValue: 11101186 false ) 
	#(237 1 #liftFirstValue: 11101187 false ) 
	#(237 1 #liftFirstValue: 11101191 false ) 
	#(237 1 #liftFirstValue: 11101190 false ) 
	#(237 1 #liftFirstValue: 11101189 false ) 
	#(237 1 #liftFirstValue: 11101188 false ) 
	#(214 1 #liftFirstValue: 9647106 false ) 
	#(248 1 #liftFirstValue: 12181505 false ) 
	#(248 1 #liftFirstValue: 12181506 false ) 
	#(156 1 #liftFirstValue: 4260870 false ) 
	#(251 1 #liftFirstValue: 12575745 false ) 
	#(252 1 #liftFirstValue: 12672001 false ) 
	#(253 1 #liftFirstValue: 12727297 false ) 
	#(253 1 #liftFirstValue: 12727298 false ) 
	#(253 1 #liftFirstValue: 12727299 false ) 
	#(252 1 #liftFirstValue: 12672002 false ) 
	#(252 1 #liftFirstValue: 12672003 false ) 
	#(258 1 #liftFirstValue: 13390849 false ) 
	#(258 1 #liftFirstValue: 13390850 false ) 
	#(258 1 #liftFirstValue: 13390851 false ) 
	#(251 1 #liftFirstValue: 12575746 false ) 
	#(262 1 #liftFirstValue: 14056449 false ) 
	#(262 1 #liftFirstValue: 14056450 false ) 
	#(262 1 #liftFirstValue: 14056451 false ) 
	#(251 1 #liftFirstValue: 12575750 false ) 
	#(269 1 #liftFirstValue: 14689281 false ) 
	#(251 1 #liftFirstValue: 12575751 false ) 
	#(269 1 #liftFirstValue: 14689282 false ) 
	#(251 1 #liftFirstValue: 12575748 false ) 
	#(272 1 #liftFirstValue: 14859265 false ) 
	#(272 1 #liftFirstValue: 14859266 false ) 
	#(272 1 #liftFirstValue: 14859267 false ) 
	#(251 1 #liftFirstValue: 12575749 false ) 
	#(276 1 #liftFirstValue: 15076353 false ) 
	#(277 1 #liftFirstValue: 15096833 false ) 
	#(277 1 #liftFirstValue: 15096834 false ) 
	#(276 1 #liftFirstValue: 15076354 false ) 
	#(280 1 #liftFirstValue: 15250433 false ) 
	#(280 1 #liftFirstValue: 15250434 false ) 
	#(251 1 #liftFirstValue: 12575747 false ) 
	#(283 1 #liftFirstValue: 15427585 false ) 
	#(283 1 #liftFirstValue: 15427586 false ) 
	#(283 1 #liftFirstValue: 15427587 false ) 
	#(251 1 #liftFirstValue: 12575752 false ) 
	#(251 1 #liftFirstValue: 12575753 false ) 
	#(289 1 #liftFirstValue: 15931393 false ) 
	#(289 1 #liftFirstValue: 15931394 false ) 
	#(289 1 #liftFirstValue: 15931396 false ) 
	#(289 1 #liftFirstValue: 15931397 false ) 
	#(289 1 #liftFirstValue: 15931395 false ) 
	#(146 3 #reduceActionForQualifiedIdentifier1: 2981889 false ) 
	#(149 3 #reduceActionForSetUpAssignation1: 3686401 false ) 
	#(127 4 #reduceActionFormodule3: 1661955 false ) 
	#(235 2 #reduceActionForPositiveOperation1: 10951681 false ) 
	#(234 2 #reduceActionForNegatedOperation1: 10887169 false ) 
	#(249 2 #reduceActionForAddressOfClause1: 12225537 false ) 
	#(232 2 #reduceActionForExplicitCall1: 10729473 false ) 
	#(250 2 #reduceActionForNewClause1: 12298241 false ) 
	#(202 2 #reduceActionForDefineVariable1: 8517633 false ) 
	#(212 0 #reduceActionFor__eol___ModuleStatement__element____1: 9196545 false ) 
	#(207 2 #reduceActionForDefineVariables1: 8903681 false ) 
	#(184 0 #reduceActionFor__eol___ModuleStatement__element____1: 6028289 false ) 
	#(292 2 #reduceActionForExitDo1: 16093185 false ) 
	#(293 2 #reduceActionForExitFor1: 16129025 false ) 
	#(290 2 #reduceActionForExitFunction1: 16000001 false ) 
	#(294 2 #reduceActionForExitProperty1: 16167937 false ) 
	#(291 2 #reduceActionForExitSub1: 16054273 false ) 
	#(282 2 #reduceActionForGoSubLine1: 15343617 false ) 
	#(281 2 #reduceActionForGoSubLabel1: 15283201 false ) 
	#(279 2 #reduceActionForGoToLine1: 15184897 false ) 
	#(278 2 #reduceActionForGoToLabel1: 15128577 false ) 
	#(236 2 #reduceActionForNotOperation1: 11017217 false ) 
	#(203 2 #reduceActionForReDefineVariable1: 8579073 false ) 
	#(208 2 #reduceActionForReDefineVariables1: 8980481 false ) 
	#(274 2 #reduceActionForResumeNext1: 14977025 false ) 
	#(273 2 #reduceActionForResumeLabel1: 14913537 false ) 
	#(204 2 #reduceActionForStaticVariable1: 8658945 false ) 
	#(209 2 #reduceActionForStaticVariables1: 9077761 false ) 
	#(179 0 #reduceActionFor__eol___ModuleStatement__element____1: 5669889 false ) 
	#(140 1 #reduceActionFor_HEX_INTEGER___1: 2562049 false ) 
	#(128 2 #reduceActionFor__eol___ModuleStatement__element___1: 1724417 false ) 
	#(158 2 #reduceActionForNumberedStatement1: 4478977 false ) 
	#(270 2 #reduceActionForLabel1: 14713857 false ) 
	#(222 2 #reduceActionForImplicitParenthesesLessCall1: 10123265 false ) 
	#(229 0 #reduceActionFor_Argument__argument__________________1: 10531841 false ) 
	#(160 2 #reduceActionForBlock1: 4634625 false ) 
	#(200 2 #reduceActionForModuleProperty1: 8317953 false ) 
	#(206 2 #reduceActionForModuleProperties1: 8803329 false ) 
	#(163 2 #reduceActionForBody1: 4710401 false ) 
	#(240 1 #reduceActionForArithmeticOperator1: 11466753 false ) 
	#(240 1 #reduceActionForArithmeticOperator2: 11466754 false ) 
	#(240 1 #reduceActionForArithmeticOperator3: 11466755 false ) 
	#(240 1 #reduceActionForArithmeticOperator4: 11466756 false ) 
	#(238 1 #reduceActionForArithmeticOperator2: 11292674 false ) 
	#(238 1 #reduceActionForArithmeticOperator4: 11292676 false ) 
	#(238 1 #reduceActionForArithmeticOperator3: 11292675 false ) 
	#(238 1 #reduceActionForArithmeticOperator1: 11292673 false ) 
	#(238 1 #reduceActionForComparisonOperator5: 11292677 false ) 
	#(240 1 #reduceActionForArithmeticOperator7: 11466759 false ) 
	#(240 1 #reduceActionForArithmeticOperator6: 11466758 false ) 
	#(240 1 #reduceActionForComparisonOperator5: 11466757 false ) 
	#(242 1 #reduceActionForBooleanOperator1: 11631617 false ) 
	#(242 1 #reduceActionForBooleanOperator4: 11631620 false ) 
	#(238 1 #reduceActionForArithmeticOperator6: 11292678 false ) 
	#(238 1 #reduceActionForArithmeticOperator7: 11292679 false ) 
	#(242 1 #reduceActionForBooleanOperator2: 11631618 false ) 
	#(242 1 #reduceActionForBooleanOperator3: 11631619 false ) 
	#(151 5 #reduceActionForConfiguration1: 3857409 false ) 
	#(154 1 #reduceActionFor_HEX_INTEGER___1: 3920897 false ) 
	#(153 2 #reduceActionFor__eol___ModuleStatement__element____2: 3918850 false ) 
	#(127 5 #reduceActionFormodule4: 1661956 false ) 
	#(174 1 #liftFirstValue: 5282817 false ) 
	#(174 1 #liftFirstValue: 5282818 false ) 
	#(205 2 #reduceActionForVariable1: 8726529 false ) 
	#(210 2 #reduceActionForVariableList1: 9160705 false ) 
	#(181 3 #reduceActionForEvent1: 5840897 false ) 
	#(236 3 #reduceActionForNotOperation3: 11017219 false ) 
	#(236 3 #reduceActionForNotOperation2: 11017218 false ) 
	#(284 3 #reduceActionForOnErrorGoTo1: 15488001 false ) 
	#(286 3 #reduceActionForOnExpressionGo1: 15622145 false ) 
	#(203 3 #reduceActionForReDefineVariable2: 8579074 false ) 
	#(208 3 #reduceActionForReDefineVariables2: 8980482 false ) 
	#(140 2 #reduceActionFor_eol__2: 2562050 false ) 
	#(271 3 #reduceActionForLabelSub1: 14763009 false ) 
	#(246 3 #reduceActionForAssignementOrEquals1: 11982849 false ) 
	#(247 3 #reduceActionForAssignement1: 12075009 false ) 
	#(226 1 #reduceActionFor_Argument__argument_________________1: 10471425 false ) 
	#(226 1 #reduceActionFor_Argument__argument_________________2: 10471426 false ) 
	#(186 1 #reduceActionForParameterPassingStrategy2: 6386690 false ) 
	#(186 1 #liftFirstValue: 6386689 false ) 
	#(224 1 #reduceActionForArgument1: 10357761 false ) 
	#(227 2 #reduceActionFor_Argument__argument__________________2: 10471426 false ) 
	#(225 2 #reduceActionForArgumentList1: 10456065 false ) 
	#(162 2 #reduceActionFor__eol___Statement__statement_____2: 4664322 false ) 
	#(165 2 #reduceActionFor__eol___Statement__statement_____2: 4739074 false ) 
	#(245 3 #reduceActionForComparisonEqualsOperation1: 11871233 false ) 
	#(220 3 #reduceActionForDictionaryAccess1: 9955329 false ) 
	#(244 3 #reduceActionForConcatenationOperation1: 11780097 false ) 
	#(221 3 #reduceActionForMemberAccess1: 10044417 false ) 
	#(239 3 #reduceActionForComparisonOperation1: 11367425 false ) 
	#(241 3 #reduceActionForArithmeticOperation1: 11532289 false ) 
	#(243 3 #reduceActionForBooleanBinaryOperation1: 11680769 false ) 
	#(154 2 #reduceActionFor_eol__2: 3920898 false ) 
	#(152 2 #reduceActionFor__eol___ModuleStatement__element___1: 3918849 false ) 
	#(205 3 #reduceActionForVariable2: 8726530 false ) 
	#(166 1 #liftFirstValue: 4785153 false ) 
	#(166 1 #liftFirstValue: 4785154 false ) 
	#(166 1 #liftFirstValue: 4785155 false ) 
	#(166 1 #liftFirstValue: 4785156 false ) 
	#(166 1 #liftFirstValue: 4785157 false ) 
	#(166 1 #liftFirstValue: 4785158 false ) 
	#(166 1 #liftFirstValue: 4785159 false ) 
	#(166 1 #liftFirstValue: 4785160 false ) 
	#(166 1 #liftFirstValue: 4785161 false ) 
	#(166 1 #liftFirstValue: 4785162 false ) 
	#(166 1 #reduceActionForBaseType11: 4785163 false ) 
	#(168 1 #reduceActionForComplexType1: 4983809 false ) 
	#(169 1 #liftFirstValue: 5032961 false ) 
	#(169 1 #liftFirstValue: 5032962 false ) 
	#(170 2 #reduceActionForTypedThing1: 5065729 false ) 
	#(212 2 #reduceActionFor______Variable__variable____2: 9196546 false ) 
	#(254 4 #reduceActionForInfinityLoop1: 12777473 false ) 
	#(184 2 #reduceActionFor__eol___Statement__statement_____2: 6028290 false ) 
	#(187 2 #reduceActionForParameterList1: 6464513 false ) 
	#(192 0 #reduceActionFor_____Operand__default___1: 6681601 false ) 
	#(189 0 #reduceActionFor__eol___ModuleStatement__element____1: 6508545 false ) 
	#(247 4 #reduceActionForAssignement2: 12075010 false ) 
	#(236 4 #reduceActionForNotOperation4: 11017220 false ) 
	#(285 4 #reduceActionForOnErrorResumeNext1: 15545345 false ) 
	#(179 2 #reduceActionFor__eol___Statement__statement_____2: 5669890 false ) 
	#(141 1 #reduceActionFor_HEX_INTEGER___1: 2581505 false ) 
	#(271 4 #reduceActionForLabelSub2: 14763010 false ) 
	#(224 2 #reduceActionForArgument2: 10357762 false ) 
	#(224 2 #reduceActionForArgument3: 10357763 false ) 
	#(226 2 #reduceActionFor_Argument__argument_________________3: 10471427 false ) 
	#(226 2 #reduceActionFor_Argument__argument_________________4: 10471428 false ) 
	#(225 3 #reduceActionForArgumentList2: 10456066 false ) 
	#(228 1 #reduceActionFor_Argument__argument_________________1: 10531841 false ) 
	#(228 1 #reduceActionFor______________Argument__argument____3: 10531843 false ) 
	#(229 2 #reduceActionFor_Argument__argument__________________2: 10531842 false ) 
	#(161 2 #reduceActionFor__eol___ModuleStatement__element___1: 4664321 false ) 
	#(181 4 #reduceActionForEvent2: 5840898 false ) 
	#(164 2 #reduceActionFor__eol___ModuleStatement__element___1: 4739073 false ) 
	#(223 4 #reduceActionForProcedureCallOrArrayAccess1: 10238977 false ) 
	#(173 3 #reduceActionForTypedAndInstantiatedThing1: 5159937 false ) 
	#(211 2 #reduceActionFor______Variable__variable___1: 9196545 false ) 
	#(254 5 #reduceActionForInfinityLoop2: 12777474 false ) 
	#(254 5 #reduceActionForInfinityLoop3: 12777475 false ) 
	#(185 1 #reduceActionForEnumEntry1: 6100993 false ) 
	#(183 2 #reduceActionFor__eol___ModuleStatement__element___1: 6028289 false ) 
	#(192 1 #reduceActionFor_____Operand__default___2: 6681602 false ) 
	#(190 2 #reduceActionForParameter1: 6565889 false ) 
	#(178 2 #reduceActionFor__eol___ModuleStatement__element___1: 5669889 false ) 
	#(257 5 #reduceActionForWhileWend1: 13227009 false ) 
	#(141 2 #reduceActionFor_eol__2: 2581506 false ) 
	#(224 3 #reduceActionForArgument4: 10357764 false ) 
	#(228 2 #reduceActionFor______________Argument__argument____2: 10531842 false ) 
	#(228 2 #reduceActionFor_Argument__argument_________________4: 10531844 false ) 
	#(201 5 #reduceActionForModuleConstant1: 8400897 false ) 
	#(193 6 #reduceActionForDeclareSub1: 6938625 false ) 
	#(172 0 #reduceActionFor__eol___ModuleStatement__element____1: 5116929 false ) 
	#(255 6 #reduceActionForWhileTrue1: 12901377 false ) 
	#(254 6 #reduceActionForInfinityLoop4: 12777476 false ) 
	#(182 6 #reduceActionForDefineEnum1: 5955585 false ) 
	#(190 3 #reduceActionForParameter9: 6565897 false ) 
	#(190 3 #reduceActionForParameter3: 6565891 false ) 
	#(191 2 #reduceActionFor______Variable__variable___1: 6681601 false ) 
	#(190 3 #reduceActionForParameter2: 6565890 false ) 
	#(190 3 #reduceActionForParameter5: 6565893 false ) 
	#(187 4 #reduceActionForParameterList2: 6464514 false ) 
	#(189 2 #reduceActionFor______Variable__variable____2: 6508546 false ) 
	#(267 1 #reduceActionFor_HEX_INTEGER___1: 14464001 false ) 
	#(266 1 #liftFirstValue: 14464001 false ) 
	#(177 6 #reduceActionForDefineType1: 5601281 false ) 
	#(180 2 #reduceActionForTypeEntry1: 5741569 false ) 
	#(257 6 #reduceActionForWhileWend2: 13227010 false ) 
	#(257 6 #reduceActionForWhileWend3: 13227011 false ) 
	#(288 6 #reduceActionForWith1: 15787009 false ) 
	#(194 7 #reduceActionForDeclareFunction1: 7129089 false ) 
	#(256 7 #reduceActionForUntilTrue1: 13056001 false ) 
	#(255 7 #reduceActionForWhileTrue2: 12901378 false ) 
	#(255 7 #reduceActionForWhileTrue3: 12901379 false ) 
	#(185 3 #reduceActionForEnumEntry2: 6100994 false ) 
	#(190 4 #reduceActionForParameter11: 6565899 false ) 
	#(190 4 #reduceActionForParameter10: 6565898 false ) 
	#(190 4 #reduceActionForParameter13: 6565901 false ) 
	#(190 4 #reduceActionForParameter4: 6565892 false ) 
	#(190 4 #reduceActionForParameter7: 6565895 false ) 
	#(190 4 #reduceActionForParameter6: 6565894 false ) 
	#(188 2 #reduceActionFor______Variable__variable___1: 6508545 false ) 
	#(197 7 #reduceActionForDefineFunction1: 7653377 false ) 
	#(263 7 #reduceActionForIfThen1: 14105601 false ) 
	#(267 2 #reduceActionFor_eol__2: 14464002 false ) 
	#(198 7 #reduceActionForDefineSub1: 7863297 false ) 
	#(257 7 #reduceActionForWhileWend4: 13227012 false ) 
	#(288 7 #reduceActionForWith2: 15787010 false ) 
	#(288 7 #reduceActionForWith3: 15787011 false ) 
	#(193 7 #reduceActionForDeclareSub3: 6938627 false ) 
	#(182 7 #reduceActionForDefineEnum2: 5955586 false ) 
	#(177 7 #reduceActionForDefineType2: 5601282 false ) 
	#(193 8 #reduceActionForDeclareSub2: 6938626 false ) 
	#(170 6 #reduceActionForTypedThing2: 5065730 false ) 
	#(172 2 #reduceActionFor______Variable__variable____2: 5116930 false ) 
	#(256 8 #reduceActionForUntilTrue2: 13056002 false ) 
	#(255 8 #reduceActionForWhileTrue4: 12901380 false ) 
	#(190 5 #reduceActionForParameter12: 6565900 false ) 
	#(190 5 #reduceActionForParameter15: 6565903 false ) 
	#(190 5 #reduceActionForParameter14: 6565902 false ) 
	#(190 5 #reduceActionForParameter8: 6565896 false ) 
	#(259 8 #reduceActionForForEach1: 13435905 false ) 
	#(197 8 #reduceActionForDefineFunction2: 7653378 false ) 
	#(263 8 #reduceActionForIfThen2: 14105602 false ) 
	#(180 4 #reduceActionForTypeEntry2: 5741570 false ) 
	#(288 8 #reduceActionForWith4: 15787012 false ) 
	#(194 8 #reduceActionForDeclareFunction3: 7129091 false ) 
	#(197 8 #reduceActionForDefineFunction5: 7653381 false ) 
	#(198 8 #reduceActionForDefineSub3: 7863299 false ) 
	#(197 8 #reduceActionForDefineFunction3: 7653379 false ) 
	#(198 8 #reduceActionForDefineSub2: 7863298 false ) 
	#(194 9 #reduceActionForDeclareFunction2: 7129090 false ) 
	#(173 7 #reduceActionForTypedAndInstantiatedThing2: 5159938 false ) 
	#(171 2 #reduceActionFor______Variable__variable___1: 5116929 false ) 
	#(190 6 #reduceActionForParameter16: 6565904 false ) 
	#(259 9 #reduceActionForForEach2: 13435906 false ) 
	#(259 9 #reduceActionForForEach3: 13435907 false ) 
	#(259 9 #reduceActionForForEach5: 13435909 false ) 
	#(260 9 #reduceActionForForNext1: 13630465 false ) 
	#(193 9 #reduceActionForDeclareSub4: 6938628 false ) 
	#(197 9 #reduceActionForDefineFunction6: 7653382 false ) 
	#(197 9 #reduceActionForDefineFunction7: 7653383 false ) 
	#(198 9 #reduceActionForDefineSub4: 7863300 false ) 
	#(197 9 #reduceActionForDefineFunction4: 7653380 false ) 
	#(259 10 #reduceActionForForEach4: 13435908 false ) 
	#(259 10 #reduceActionForForEach6: 13435910 false ) 
	#(259 10 #reduceActionForForEach7: 13435911 false ) 
	#(260 10 #reduceActionForForNext2: 13630466 false ) 
	#(260 10 #reduceActionForForNext3: 13630467 false ) 
	#(264 10 #reduceActionForIfThenElse1: 14212097 false ) 
	#(268 5 #reduceActionForElseIf1: 14564353 false ) 
	#(194 10 #reduceActionForDeclareFunction4: 7129092 false ) 
	#(197 10 #reduceActionForDefineFunction8: 7653384 false ) 
	#(259 11 #reduceActionForForEach8: 13435912 false ) 
	#(261 11 #reduceActionForForStepNext1: 13820929 false ) 
	#(260 11 #reduceActionForForNext4: 13630468 false ) 
	#(264 11 #reduceActionForIfThenElse2: 14212098 false ) 
	#(268 6 #reduceActionForElseIf2: 14564354 false ) 
	#(265 11 #reduceActionForIfThenElseIfElse1: 14373889 false ) 
	#(264 11 #reduceActionForIfThenElse3: 14212099 false ) 
	#(139 11 #reduceActionForGuidLiteral1: 2545665 false ) 
	#(261 12 #reduceActionForForStepNext2: 13820930 false ) 
	#(261 12 #reduceActionForForStepNext3: 13820931 false ) 
	#(265 12 #reduceActionForIfThenElseIfElse2: 14373890 false ) 
	#(264 12 #reduceActionForIfThenElse4: 14212100 false ) 
	#(265 12 #reduceActionForIfThenElseIfElse3: 14373891 false ) 
	#(261 13 #reduceActionForForStepNext4: 13820932 false ) 
	#(265 13 #reduceActionForIfThenElseIfElse4: 14373892 false )
	).
]

{ #category : #'generated-accessing' }
VBParser class >> scannerClass [
	^VBScanner
]

{ #category : #generated }
VBParser class >> startingStateFormodule [
	^ 1
]

{ #category : #generated }
VBParser class >> symbolNames [
	^ #('"!"' '"!="' '"%"' '"&"' '"&&"' '"("' '")"' '"*"' '"+"' '"++"' '","' '"-"' '"--"' '"."' '"/"' '":"' '";"' '"<"' '"<="' '"<>"' '"="' '"=="' '">"' '">="' '"AddressOf"' '"Call"' '"Mod"' '"NEW"' '"WithEvents"' '"["' '"\"' '"^"' '"alias"' '"and"' '"as"' '"attribute"' '"begin"' '"binary"' '"boolean"' '"byref"' '"byte"' '"byval"' '"class"' '"collection"' '"compare"' '"const"' '"database"' '"date"' '"declare"' '"delete"' '"dim"' '"do"' '"double"' '"each"' '"else"' '"elseif"' '"end"' '"enum"' '"eqv"' '"error"' '"event"' '"exit"' '"explicit"' '"for"' '"function"' '"gosub"' '"goto"' '"if"' '"in"' '"integer"' '"is"' '"let"' '"lib"' '"like"' '"long"' '"loop"' '"module"' '"next"' '"not"' '"object"' '"on"' '"option"' '"optional"' '"or"' '"paramarray"' '"preserve"' '"private"' '"property"' '"public"' '"redim"' '"resume"' '"return"' '"single"' '"static"' '"step"' '"string"' '"sub"' '"text"' '"then"' '"to"' '"type"' '"until"' '"variant"' '"version"' '"wend"' '"while"' '"with"' '"xor"' '"{"' '"||"' '"}"' '"~"' '<HEX_INTEGER>' '<DATE_LITERAL>' '<COLOR_LITERAL>' '<INTEGER_LITERAL>' '<FLOATING_POINT_LITERAL>' '<BOOLEAN_LITERAL>' '<STRING_LITERAL>' '<NULL_LITERAL>' '<IDENTIFIER>' '<HASH_IDENTIFIER>' '<whitespace>' '<eol>' '<comment>' 'B e g i n' 'module' '(<eol>* ModuleStatement ''element'' )' '(<eol>* ModuleStatement ''element'' )*' '<eol>*' 'literal' 'IntegerLiteral' 'ColorLiteral' 'DateLiteral' 'FloatLiteral' 'BooleanLiteral' 'StringLiteral' 'Null' 'GuidLiteral' '<HEX_INTEGER> +' '<HEX_INTEGER>+' 'Identifier' 'HashIdentifier' 'SimpleIdentifier' 'HeadlessIdentifier' 'QualifiedIdentifier' 'header' 'Option' 'SetUpAssignation' 'Attribute' 'Configuration' '( <eol>+ SetUpAssignation ''setting'')' '( <eol>+ SetUpAssignation ''setting'')*' '<eol>+' 'ModuleStatement' 'PossibleStatement' 'NormalStatement' 'NumberedStatement' 'Statement' 'Block' '(<eol>* Statement ''statement''  )' '(<eol>* Statement ''statement''  )*' 'Body' '(<eol>* BodyElement ''element''  )' '(<eol>* BodyElement ''element''  )*' 'BaseType' 'Visibility' 'ComplexType' 'Type' 'TypedThing' '( "," literal ''size'')' '( "," literal ''size'')*' 'TypedAndInstantiatedThing' 'AsType' 'BodyElement' 'Types' 'DefineType' '( <eol>* TypeEntry ''field'' )' '( <eol>* TypeEntry ''field'' )*' 'TypeEntry' 'Event' 'DefineEnum' '( <eol>* EnumEntry ''field'')' '( <eol>* EnumEntry ''field'')*' 'EnumEntry' 'ParameterPassingStrategy' 'ParameterList' '( "," Parameter ''parameter'')' '( "," Parameter ''parameter'')*' 'Parameter' '("=" Operand ''default'')' '("=" Operand ''default'')?' 'DeclareSub' 'DeclareFunction' 'DeclareExternal' 'Modifier' 'DefineFunction' 'DefineSub' 'BehaviourDefinition' 'ModuleProperty' 'ModuleConstant' 'DefineVariable' 'ReDefineVariable' 'StaticVariable' 'Variable' 'ModuleProperties' 'DefineVariables' 'ReDefineVariables' 'StaticVariables' 'VariableList' '(","  Variable ''variable'' )' '(","  Variable ''variable'' )*' 'VariableDefinition' 'ValueStatement' 'ValueStatementList' '("," ValueStatement ''value'' )' '("," ValueStatement ''value'' ) *' 'Operation' 'Operand' 'DictionaryAccess' 'MemberAccess' 'ImplicitParenthesesLessCall' 'ProcedureCallOrArrayAccess' 'Argument' 'ArgumentList' '(Argument ''argument'' ? ("," | ";" ))' '(Argument ''argument'' ? ("," | ";" ))*' '( ("," | ";" )Argument ''argument'' ?)' '( ("," | ";" )Argument ''argument'' ?)*' 'ImplicitCall' 'StateAccess' 'ExplicitCall' 'UnaryOperation' 'NegatedOperation' 'PositiveOperation' 'NotOperation' 'BinaryOperation' 'ComparisonOperator' 'ComparisonOperation' 'ArithmeticOperator' 'ArithmeticOperation' 'BooleanOperator' 'BooleanBinaryOperation' 'ConcatenationOperation' 'ComparisonEqualsOperation' 'AssignementOrEquals' 'Assignement' 'ValueClause' 'AddressOfClause' 'NewClause' 'ControlFlowStatement' 'Loops' 'DoLoop' 'InfinityLoop' 'WhileTrue' 'UntilTrue' 'WhileWend' 'ForLoop' 'ForEach' 'ForNext' 'ForStepNext' 'If' 'IfThen' 'IfThenElse' 'IfThenElseIfElse' '(ElseIf ''case'')' '(ElseIf ''case'') +' 'ElseIf' 'To' 'Label' 'LabelSub' 'Resume' 'ResumeLabel' 'ResumeNext' 'ResumeEmpty' 'Go' 'GoTo' 'GoToLabel' 'GoToLine' 'GoSub' 'GoSubLabel' 'GoSubLine' 'On' 'OnErrorGoTo' 'OnErrorResumeNext' 'OnExpressionGo' 'Error' 'With' 'Exits' 'ExitFunction' 'ExitSub' 'ExitDo' 'ExitFor' 'ExitProperty' 'E O F' 'error')
]

{ #category : #generated }
VBParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBModuleNode #VBModuleNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBIntegerLiteralNode #VBColorLiteralNode #VBDateLiteralNode #VBFloatLiteralNode #VBBooleanLiteralNode #VBStringLiteralNode #VBNullNode #VBGuidLiteralNode #OrderedCollection #OrderedCollection #VBProgramNode #VBHashIdentifierNode #VBSimpleIdentifierNode #VBHeadlessIdentifierNode #VBQualifiedIdentifierNode #VBHeaderNode #VBProgramNode #VBSetUpAssignationNode #VBModuleAttributeNode #VBConfigurationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #Object #VBNormalStatementNode #VBNumberedStatementNode #Object #VBBlockNode #OrderedCollection #OrderedCollection #VBBodyNode #OrderedCollection #OrderedCollection #Object #Object #VBComplexTypeNode #Object #VBAsTypeNode #OrderedCollection #OrderedCollection #VBAsTypeAndNewNode #VBProgramNode #VBBlockNode #VBProgramNode #VBDefineTypeNode #OrderedCollection #OrderedCollection #VBTypeEntryNode #VBEventNode #VBDefineEnumNode #OrderedCollection #OrderedCollection #VBEnumEntryNode #Object #VBParameterListNode #OrderedCollection #OrderedCollection #VBParameterNode #OrderedCollection #OrderedCollection #VBExternalSubNode #VBExternalFunctionNode #VBProgramNode #VBModifierNode #VBFunctionDefinitionNode #VBSubDefinitionNode #VBProgramNode #VBModulePropertyNode #VBModuleConstantNode #VBDimVariableNode #VBReDimVariableNode #VBStaticVariableNode #VBVariableNode #VBModuleMultiplePropertiesNode #VBDimMultipleVariablesNode #VBReDimMultipleVariablesNode #VBStaticMultipleVariablesNode #VBVariableListNode #OrderedCollection #OrderedCollection #VBProgramNode #VBProgramNode #VBValueStatementListNode #OrderedCollection #OrderedCollection #VBProgramNode #VBProgramNode #VBDictionaryAccessNode #VBMemberAccessNode #VBImplicitParenthesesLessCallNode #VBProcedureCallOrArrayAccessNode #VBArgumentNode #VBArgumentListNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBProgramNode #VBExplicitCallNode #VBProgramNode #VBNegatedOperationNode #VBPositiveOperationNode #VBNotOperationNode #VBProgramNode #OrderedCollection #VBComparisonOperationNode #OrderedCollection #VBArithmeticOperationNode #OrderedCollection #VBArithmeticOperationNode #VBConcatenationOperationNode #VBComparisonEqualsOperationNode #VBAssignementOrEqualsNode #VBAssignementNode #VBProgramNode #VBAddressOfClauseNode #VBNewClauseNode #Object #VBProgramNode #VBProgramNode #VBInfinityLoopNode #VBWhileTrueNode #VBUntilTrueNode #VBWhileWendNode #VBProgramNode #VBForEachNode #VBForNextNode #VBForStepNextNode #VBProgramNode #VBIfThenNode #VBIfThenElseNode #VBIfThenElseIfElseNode #VBElseIfNode #OrderedCollection #VBElseIfNode #VBProgramNode #VBGoToLabelNode #VBGoSubLabelNode #Object #VBResumeLabelNode #VBResumeNextNode #SmaCCToken #VBProgramNode #VBProgramNode #VBGoToLabelNode #VBGoToLineNode #VBProgramNode #VBGoSubLabelNode #VBGoSubLineNode #VBProgramNode #VBOnErrorGoToNode #VBOnErrorResumeNextNode #VBOnExpressionGoNode #VBErrorNode #VBWithNode #VBProgramNode #VBExitFunctionNode #VBExitSubNode #VBExitDoNode #VBExitForNode #VBExitPropertyNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBParser class >> transitionTable [
^#(
#[1 0 9 0 36 0 13 0 37 0 17 0 82 0 21 0 104 0 25 0 127 0 29 0 147 0 45 0 148 0 45 0 150 0 45 0 151 0 45 0 155] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 0 61 0 142 0 61 0 143 0 61 0 144 0 61 0 145 0 61 0 146 0 81 0 149] 
#[1 0 6 0 14 0 6 0 121 0 6 0 122 0 6 0 124 0 85 0 130] 
#[1 0 89 0 45 0 93 0 63 0 97 0 87 0 101 0 116 0 105 0 132] 
#[1 0 109 0 117 0 113 0 135] 
#[0 0 0 1 39] 
#[1 0 6 0 36 0 6 0 37 0 6 0 82 0 6 0 124 0 117 0 130] 
#[0 0 10 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 14 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 18 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 22 0 9 0 22 0 12 0 22 0 14 0 22 0 25 0 22 0 26 0 22 0 28 0 22 0 36 0 22 0 37 0 22 0 49 0 22 0 51 0 22 0 52 0 22 0 58 0 22 0 61 0 22 0 62 0 22 0 64 0 22 0 65 0 22 0 66 0 22 0 67 0 22 0 68 0 22 0 72 0 22 0 79 0 22 0 81 0 22 0 82 0 22 0 87 0 22 0 89 0 22 0 90 0 22 0 91 0 22 0 94 0 22 0 97 0 22 0 101 0 22 0 106 0 22 0 107 0 22 0 109 0 22 0 114 0 22 0 115 0 22 0 116 0 22 0 117 0 22 0 118 0 22 0 119 0 22 0 120 0 22 0 121 0 22 0 122 0 22 0 124 0 121 0 129 0 22 1 39] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 0 125 0 142 0 125 0 143 0 125 0 144 0 125 0 145 0 125 0 146] 
#[0 0 26 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 35 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 30 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 35 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 129 0 14 0 133 0 21] 
#[0 0 34 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 35 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 38 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 35 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 42 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 35 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 46 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 35 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 50 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 0 137 0 124 0 61 0 142 0 61 0 143 0 61 0 144 0 61 0 145 0 61 0 146 0 141 0 149] 
#[1 0 145 0 38 0 149 0 47 0 153 0 98] 
#[0 0 54 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 157 0 77] 
#[0 0 58 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 62 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 66 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 43 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 70 0 36 0 70 0 37 0 161 0 43 0 70 0 82 0 70 0 124] 
#[1 0 9 0 36 0 13 0 37 0 17 0 82 0 137 0 124 0 165 0 148 0 165 0 150 0 165 0 151 0 165 0 155] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 7 0 36 0 6 0 37 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 0 6 0 82 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 6 0 124 1 49 0 128 1 53 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 1 125 0 160 1 117 0 163 1 121 0 167 1 125 0 175 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38 0 74 1 39] 
#[0 0 78 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 35 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 217 0 121] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 2 233 0 131 2 233 0 132 2 233 0 133 2 233 0 134 2 233 0 135 2 233 0 136 2 233 0 137 2 233 0 138 2 233 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 2 233 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[0 0 82 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124] 
#[1 0 86 0 57 0 86 0 124 2 237 0 153] 
#[0 0 90 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 94 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 98 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 102 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 106 0 36 0 37 0 82 0 124] 
#[1 0 22 0 9 0 22 0 12 0 22 0 14 0 22 0 25 0 22 0 26 0 22 0 28 0 22 0 36 0 22 0 37 0 22 0 49 0 22 0 51 0 22 0 52 0 22 0 58 0 22 0 61 0 22 0 62 0 22 0 64 0 22 0 65 0 22 0 66 0 22 0 67 0 22 0 68 0 22 0 72 0 22 0 79 0 22 0 81 0 22 0 82 0 22 0 87 0 22 0 89 0 22 0 90 0 22 0 91 0 22 0 94 0 22 0 97 0 22 0 101 0 22 0 106 0 22 0 107 0 22 0 109 0 22 0 114 0 22 0 115 0 22 0 116 0 22 0 117 0 22 0 118 0 22 0 119 0 22 0 120 0 22 0 121 0 22 0 122 0 22 0 124 2 241 0 129 0 22 1 39] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 2 245 0 131 2 245 0 132 2 245 0 133 2 245 0 134 2 245 0 135 2 245 0 136 2 245 0 137 2 245 0 138 2 245 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 2 245 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 2 249 0 131 2 249 0 132 2 249 0 133 2 249 0 134 2 249 0 135 2 249 0 136 2 249 0 137 2 249 0 138 2 249 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 2 249 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 2 253 0 142 2 253 0 143 2 253 0 144 2 253 0 145 2 253 0 146] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 1 221 0 131 1 221 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 1 221 0 219 2 229 0 220 2 229 0 221 3 1 0 222 3 1 0 223 3 1 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 3 5 0 142 3 5 0 143 3 5 0 144 3 5 0 145 3 5 0 146] 
#[1 3 9 0 65 3 13 0 97] 
#[1 0 49 0 14 3 17 0 29 0 53 0 121 0 57 0 122 3 21 0 142 3 21 0 143 3 21 0 144 3 21 0 145 3 21 0 146 3 25 0 205 3 29 0 210] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 76 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 3 33 0 102 0 11 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 3 41 0 130] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 3 45 0 142 3 45 0 143 3 45 0 144 3 45 0 145 3 45 0 146] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 3 49 0 142 3 49 0 143 3 49 0 144 3 49 0 145 3 49 0 146] 
#[1 3 53 0 52 3 57 0 64 3 61 0 65 3 65 0 88 3 69 0 97] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 3 73 0 54 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 3 77 0 131 3 77 0 132 3 77 0 133 3 77 0 134 3 77 0 135 3 77 0 136 3 77 0 137 3 77 0 138 3 77 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 3 77 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 3 81 0 142 3 81 0 143 3 81 0 144 3 81 0 145 3 81 0 146] 
#[1 0 49 0 14 0 101 0 116 0 53 0 121 0 57 0 122 3 85 0 132 3 89 0 142 3 89 0 143 3 89 0 144 3 89 0 145 3 89 0 146] 
#[1 0 49 0 14 0 101 0 116 0 53 0 121 0 57 0 122 3 93 0 132 3 97 0 142 3 97 0 143 3 97 0 144 3 97 0 145 3 97 0 146] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 3 101 0 131 3 101 0 132 3 101 0 133 3 101 0 134 3 101 0 135 3 101 0 136 3 101 0 137 3 101 0 138 3 101 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 3 101 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 3 105 0 142 3 105 0 143 3 105 0 144 3 105 0 145 3 105 0 146] 
#[1 3 109 0 6 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 3 113 0 131 3 113 0 132 3 113 0 133 3 113 0 134 3 113 0 135 3 113 0 136 3 113 0 137 3 113 0 138 3 113 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 3 113 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 3 117 0 60 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 3 121 0 131 3 121 0 132 3 121 0 133 3 121 0 134 3 121 0 135 3 121 0 136 3 121 0 137 3 121 0 138 3 121 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 3 121 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[0 0 110 0 14 0 29 0 46 0 49 0 58 0 61 0 65 0 94 0 97 0 101 0 121 0 122] 
#[0 0 114 0 14 0 29 0 46 0 49 0 58 0 61 0 65 0 94 0 97 0 101 0 121 0 122] 
#[1 0 49 0 14 3 17 0 29 3 125 0 86 0 53 0 121 0 57 0 122 3 21 0 142 3 21 0 143 3 21 0 144 3 21 0 145 3 21 0 146 3 129 0 205 3 133 0 210] 
#[1 0 118 0 9 0 118 0 12 0 49 0 14 0 118 0 25 0 118 0 26 0 118 0 28 0 118 0 36 0 118 0 49 0 118 0 51 0 118 0 52 0 118 0 55 0 118 0 56 0 118 0 57 0 118 0 58 0 118 0 61 0 118 0 62 0 118 0 64 0 118 0 65 0 118 0 66 0 118 0 67 0 118 0 68 0 118 0 72 0 118 0 76 0 15 0 78 0 118 0 79 0 118 0 81 0 118 0 87 0 118 0 89 0 118 0 90 0 118 0 91 0 118 0 92 0 118 0 94 0 118 0 97 0 118 0 101 0 118 0 105 0 118 0 106 0 118 0 107 0 118 0 109 0 118 0 114 0 118 0 115 0 118 0 116 0 118 0 117 0 118 0 118 0 118 0 119 0 118 0 120 0 19 0 121 0 23 0 122 0 118 0 124 3 141 0 142 3 141 0 143 3 141 0 144 3 141 0 145 3 141 0 146 0 118 1 39] 
#[1 0 49 0 14 3 17 0 29 0 122 0 65 0 122 0 97 0 53 0 121 0 57 0 122 3 21 0 142 3 21 0 143 3 21 0 144 3 21 0 145 3 21 0 146 3 145 0 205 3 149 0 210] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 3 153 0 142 3 153 0 143 3 153 0 144 3 153 0 145 3 153 0 146] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 3 157 0 142 3 157 0 143 3 157 0 144 3 157 0 145 3 157 0 146] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 1 221 0 131 1 221 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 3 161 0 214 3 161 0 218 1 221 0 219 3 161 0 220 3 161 0 221 3 161 0 222 3 161 0 223 3 161 0 230 3 161 0 231 3 161 0 232 3 161 0 233 3 161 0 234 3 161 0 235 3 161 0 236 3 161 0 237 3 161 0 239 3 161 0 241 3 161 0 243 3 161 0 244 3 161 0 245 3 161 0 246 3 161 0 247 3 161 0 248 3 161 0 249 3 161 0 250] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 3 165 0 142 3 165 0 143 3 165 0 144 3 165 0 145 3 165 0 146] 
#[1 3 169 0 113 3 173 0 140] 
#[0 0 126 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 130 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 134 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 138 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 142 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 146 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 9 0 36 0 13 0 37 0 17 0 82 0 137 0 124 3 177 0 148 3 177 0 150 3 177 0 151 3 177 0 155] 
#[0 0 150 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 154 0 1 0 154 0 4 0 154 0 6 0 154 0 8 0 169 0 9 0 173 0 12 0 49 0 14 0 154 0 15 0 154 0 18 0 154 0 19 0 154 0 20 0 154 0 23 0 154 0 24 0 177 0 25 0 181 0 26 0 154 0 27 0 185 0 28 0 154 0 31 0 154 0 32 0 154 0 34 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 154 0 59 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 154 0 71 0 233 0 72 0 154 0 74 0 237 0 79 0 241 0 81 0 154 0 84 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 0 154 0 108 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 1 221 0 131 1 221 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 3 181 0 150 3 181 0 156 1 121 0 167 3 181 0 176 3 181 0 177 3 181 0 181 3 181 0 182 3 181 0 193 3 181 0 194 3 181 0 195 1 157 0 196 3 181 0 197 3 181 0 198 3 181 0 199 3 181 0 200 3 181 0 201 3 181 0 202 3 181 0 203 3 181 0 204 3 181 0 206 3 181 0 207 3 181 0 208 3 181 0 209 3 181 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 3 181 0 251 3 181 0 252 3 181 0 253 3 181 0 254 3 181 0 255 3 181 1 0 3 181 1 1 3 181 1 2 3 181 1 3 3 181 1 4 3 181 1 5 3 181 1 6 3 181 1 7 3 181 1 8 3 181 1 9 3 181 1 13 2 121 1 14 3 181 1 15 3 181 1 16 3 181 1 17 3 181 1 18 3 181 1 19 3 181 1 20 3 181 1 21 3 181 1 22 3 181 1 23 3 181 1 24 3 181 1 25 3 181 1 26 3 181 1 27 3 181 1 28 3 181 1 29 3 181 1 30 3 181 1 32 3 181 1 33 3 181 1 34 3 181 1 35 3 181 1 36 3 181 1 37 3 181 1 38] 
#[0 0 158 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 162 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 166 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 170 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 174 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 178 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 182 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 27 0 1 0 27 0 4 0 27 0 6 0 27 0 8 0 27 0 9 0 190 0 11 0 27 0 12 0 31 0 14 0 27 0 15 3 185 0 16 0 190 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 35 0 21 0 27 0 23 0 27 0 24 0 39 0 25 0 39 0 26 0 27 0 27 0 39 0 28 0 27 0 31 0 27 0 32 0 27 0 34 0 39 0 36 0 190 0 40 0 190 0 42 0 39 0 49 0 39 0 51 0 39 0 52 0 39 0 55 0 39 0 56 0 39 0 57 0 39 0 58 0 27 0 59 0 39 0 61 0 39 0 62 0 39 0 64 0 39 0 65 0 39 0 66 0 39 0 67 0 39 0 68 0 27 0 71 0 39 0 72 0 27 0 74 0 39 0 76 0 39 0 78 0 39 0 79 0 39 0 81 0 27 0 84 0 190 0 85 0 39 0 87 0 39 0 89 0 39 0 90 0 39 0 91 0 39 0 92 0 39 0 94 0 39 0 97 0 39 0 101 0 39 0 105 0 39 0 106 0 39 0 107 0 27 0 108 0 39 0 109 0 39 0 114 0 39 0 115 0 39 0 116 0 39 0 117 0 39 0 118 0 39 0 119 0 39 0 120 0 39 0 121 0 39 0 122 0 39 0 124 3 193 0 225 3 197 0 227 0 39 1 39] 
#[0 0 198 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 202 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 206 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 210 0 9 0 210 0 12 0 210 0 14 0 210 0 25 0 210 0 26 0 210 0 28 0 210 0 36 0 210 0 49 0 210 0 51 0 210 0 52 0 210 0 55 0 210 0 56 0 210 0 57 0 210 0 58 0 210 0 61 0 210 0 62 0 210 0 64 0 210 0 65 0 210 0 66 0 210 0 67 0 210 0 68 0 210 0 72 0 210 0 76 0 210 0 78 0 210 0 79 0 210 0 81 0 210 0 87 0 210 0 89 0 210 0 90 0 210 0 91 0 210 0 92 0 210 0 94 0 210 0 97 0 210 0 101 0 210 0 105 0 210 0 106 0 210 0 107 0 210 0 109 0 210 0 114 0 210 0 115 0 210 0 116 0 210 0 117 0 210 0 118 0 210 0 119 0 210 0 120 0 210 0 121 0 210 0 122 0 210 0 124 3 201 0 162 0 210 1 39] 
#[0 0 214 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 218 1 39] 
#[1 0 49 0 14 3 17 0 29 3 205 0 46 3 209 0 49 3 213 0 58 3 217 0 61 3 221 0 65 3 225 0 94 3 229 0 97 3 233 0 101 0 53 0 121 0 57 0 122 3 21 0 142 3 21 0 143 3 21 0 144 3 21 0 145 3 21 0 146 3 237 0 196 3 241 0 205 3 245 0 210] 
#[1 0 222 0 9 0 222 0 12 0 222 0 14 0 222 0 25 0 222 0 26 0 222 0 28 0 222 0 36 0 222 0 49 0 222 0 51 0 222 0 52 0 222 0 58 0 222 0 61 0 222 0 62 0 222 0 64 0 222 0 65 0 222 0 66 0 222 0 67 0 222 0 68 0 222 0 72 0 222 0 79 0 222 0 81 0 222 0 87 0 222 0 89 0 222 0 90 0 222 0 91 0 222 0 94 0 222 0 97 0 222 0 101 0 222 0 106 0 222 0 107 0 222 0 109 0 222 0 114 0 222 0 115 0 222 0 116 0 222 0 117 0 222 0 118 0 222 0 119 0 222 0 120 0 222 0 121 0 222 0 122 0 222 0 124 3 249 0 165 0 222 1 39] 
#[0 0 226 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 230 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 234 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 238 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 242 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 246 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 250 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 3 253 0 65 4 1 0 97] 
#[0 0 254 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 2 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 6 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 10 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 14 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 18 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 22 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 26 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 30 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 34 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 38 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 42 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 46 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 1 50 0 1 1 50 0 4 1 50 0 6 1 50 0 8 0 43 0 9 0 43 0 12 0 43 0 14 1 50 0 15 1 50 0 18 1 50 0 19 1 50 0 20 4 5 0 21 1 50 0 23 1 50 0 24 1 54 0 25 1 54 0 26 1 50 0 27 1 54 0 28 1 50 0 31 1 50 0 32 1 50 0 34 1 54 0 36 1 54 0 49 1 54 0 51 1 54 0 52 1 54 0 55 1 54 0 56 1 54 0 57 1 54 0 58 1 50 0 59 1 54 0 61 1 54 0 62 1 54 0 64 1 54 0 65 1 54 0 66 1 54 0 67 1 54 0 68 1 50 0 71 1 54 0 72 1 50 0 74 1 54 0 76 1 54 0 78 1 54 0 79 1 54 0 81 1 50 0 84 1 54 0 87 1 54 0 89 1 54 0 90 1 54 0 91 1 54 0 92 1 54 0 94 1 54 0 97 1 54 0 101 1 54 0 105 1 54 0 106 1 54 0 107 1 50 0 108 1 54 0 109 1 54 0 114 1 54 0 115 1 54 0 116 1 54 0 117 1 54 0 118 1 54 0 119 1 54 0 120 1 54 0 121 1 54 0 122 1 54 0 124 1 54 1 39] 
#[0 1 58 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 4 61 0 27 4 65 0 31 4 69 0 32 4 73 0 34 4 77 0 59 4 81 0 71 4 85 0 74 4 89 0 84 4 93 0 108 4 97 0 238 4 101 0 240 4 105 0 242] 
#[0 1 62 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 66 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 70 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 74 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 78 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 82 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 86 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 90 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 94 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 98 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 102 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 106 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 110 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 114 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 118 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 122 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 126 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 130 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 134 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 138 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 142 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 146 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 150 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 154 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 158 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 162 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 166 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 170 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 174 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 178 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 182 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 186 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 190 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 194 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 198 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 202 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 206 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 210 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 47 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 222 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 226 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 230 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 234 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 238 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 242 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 246 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 250 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 1 254 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 2 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 6 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 10 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 14 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 18 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 22 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 26 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 30 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 34 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 38 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 42 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 46 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 50 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 54 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 58 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 35 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 0 154 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 27 0 1 0 27 0 4 0 27 0 6 0 27 0 7 0 27 0 8 0 27 0 9 0 27 0 11 0 27 0 12 0 31 0 14 0 27 0 15 0 27 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 51 0 21 0 27 0 23 0 27 0 24 0 27 0 25 0 27 0 26 0 27 0 27 0 27 0 28 0 27 0 31 0 27 0 32 0 27 0 34 0 27 0 36 0 27 0 37 0 190 0 40 0 190 0 42 0 27 0 49 0 27 0 51 0 27 0 52 0 27 0 55 0 27 0 56 0 27 0 57 0 27 0 58 0 27 0 59 0 27 0 61 0 27 0 62 0 27 0 64 0 27 0 65 0 27 0 66 0 27 0 67 0 27 0 68 0 27 0 71 0 27 0 72 0 27 0 74 0 27 0 76 0 27 0 78 0 27 0 79 0 27 0 81 0 27 0 82 0 27 0 84 0 190 0 85 0 27 0 87 0 27 0 89 0 27 0 90 0 27 0 91 0 27 0 92 0 27 0 94 0 27 0 95 0 27 0 97 0 27 0 99 0 27 0 100 0 27 0 101 0 27 0 105 0 27 0 106 0 27 0 107 0 27 0 108 0 27 0 109 0 27 0 114 0 27 0 115 0 27 0 116 0 27 0 117 0 27 0 118 0 27 0 119 0 27 0 120 0 27 0 121 0 27 0 122 0 27 0 124 3 193 0 225 3 197 0 227 0 27 1 39] 
#[1 1 50 0 1 1 50 0 4 1 50 0 6 1 50 0 7 1 50 0 8 1 50 0 9 1 50 0 11 1 50 0 12 1 50 0 14 1 50 0 15 1 50 0 17 1 50 0 18 1 50 0 19 1 50 0 20 4 5 0 21 1 50 0 23 1 50 0 24 1 50 0 25 1 50 0 26 1 50 0 27 1 50 0 28 1 50 0 31 1 50 0 32 1 50 0 34 1 50 0 36 1 50 0 37 1 50 0 49 1 50 0 51 1 50 0 52 1 50 0 55 1 50 0 56 1 50 0 57 1 50 0 58 1 50 0 59 1 50 0 61 1 50 0 62 1 50 0 64 1 50 0 65 1 50 0 66 1 50 0 67 1 50 0 68 1 50 0 71 1 50 0 72 1 50 0 74 1 50 0 76 1 50 0 78 1 50 0 79 1 50 0 81 1 50 0 82 1 50 0 84 1 50 0 87 1 50 0 89 1 50 0 90 1 50 0 91 1 50 0 92 1 50 0 94 1 50 0 95 1 50 0 97 1 50 0 99 1 50 0 100 1 50 0 101 1 50 0 105 1 50 0 106 1 50 0 107 1 50 0 108 1 50 0 109 1 50 0 114 1 50 0 115 1 50 0 116 1 50 0 117 1 50 0 118 1 50 0 119 1 50 0 120 1 50 0 121 1 50 0 122 1 50 0 124 1 50 1 39] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 2 62 0 25 2 62 0 26 4 61 0 27 2 62 0 28 4 65 0 31 4 69 0 32 4 73 0 34 2 62 0 36 2 62 0 37 2 62 0 49 2 62 0 51 2 62 0 52 2 62 0 55 2 62 0 56 2 62 0 57 2 62 0 58 4 77 0 59 2 62 0 61 2 62 0 62 2 62 0 64 2 62 0 65 2 62 0 66 2 62 0 67 2 62 0 68 4 81 0 71 2 62 0 72 4 85 0 74 2 62 0 76 2 62 0 78 2 62 0 79 2 62 0 81 2 62 0 82 4 89 0 84 2 62 0 87 2 62 0 89 2 62 0 90 2 62 0 91 2 62 0 92 2 62 0 94 2 62 0 97 2 62 0 101 2 62 0 105 2 62 0 106 2 62 0 107 4 93 0 108 2 62 0 109 2 62 0 114 2 62 0 115 2 62 0 116 2 62 0 117 2 62 0 118 2 62 0 119 2 62 0 120 2 62 0 121 2 62 0 122 2 62 0 124 4 97 0 238 4 101 0 240 4 105 0 242 2 62 1 39] 
#[1 4 109 0 57 4 113 0 124 4 117 0 152 4 121 0 154] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 7 0 36 0 6 0 37 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 0 6 0 82 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 6 0 124 1 49 0 128 1 53 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 1 125 0 160 4 125 0 163 1 121 0 167 1 125 0 175 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38 2 66 1 39] 
#[1 4 9 0 1 0 55 0 4 4 17 0 6 2 70 0 7 4 21 0 8 2 70 0 9 2 70 0 11 2 70 0 12 4 33 0 14 4 37 0 15 2 70 0 17 2 70 0 18 2 70 0 19 2 70 0 20 2 70 0 21 2 70 0 23 2 70 0 24 2 70 0 25 2 70 0 26 0 59 0 27 2 70 0 28 0 63 0 31 4 69 0 32 2 70 0 34 2 70 0 36 2 70 0 37 2 70 0 49 2 70 0 51 2 70 0 52 2 70 0 55 2 70 0 56 2 70 0 57 2 70 0 58 0 67 0 59 2 70 0 61 2 70 0 62 2 70 0 64 2 70 0 65 2 70 0 66 2 70 0 67 2 70 0 68 0 71 0 71 2 70 0 72 0 75 0 74 2 70 0 76 2 70 0 78 2 70 0 79 2 70 0 81 2 70 0 82 2 70 0 84 2 70 0 87 2 70 0 89 2 70 0 90 2 70 0 91 2 70 0 92 2 70 0 94 2 70 0 95 2 70 0 97 2 70 0 99 2 70 0 100 2 70 0 101 2 70 0 105 2 70 0 106 2 70 0 107 0 79 0 108 2 70 0 109 2 70 0 114 2 70 0 115 2 70 0 116 2 70 0 117 2 70 0 118 2 70 0 119 2 70 0 120 2 70 0 121 2 70 0 122 2 70 0 124 4 97 0 238 4 101 0 240 4 105 0 242 2 70 1 39] 
#[1 4 9 0 1 0 83 0 4 4 17 0 6 2 74 0 7 4 21 0 8 2 74 0 9 2 74 0 11 2 74 0 12 4 33 0 14 4 37 0 15 2 74 0 17 2 74 0 18 2 74 0 19 2 74 0 20 2 74 0 21 2 74 0 23 2 74 0 24 2 74 0 25 2 74 0 26 0 87 0 27 2 74 0 28 0 91 0 31 4 69 0 32 2 74 0 34 2 74 0 36 2 74 0 37 2 74 0 49 2 74 0 51 2 74 0 52 2 74 0 55 2 74 0 56 2 74 0 57 2 74 0 58 0 95 0 59 2 74 0 61 2 74 0 62 2 74 0 64 2 74 0 65 2 74 0 66 2 74 0 67 2 74 0 68 0 99 0 71 2 74 0 72 0 103 0 74 2 74 0 76 2 74 0 78 2 74 0 79 2 74 0 81 2 74 0 82 2 74 0 84 2 74 0 87 2 74 0 89 2 74 0 90 2 74 0 91 2 74 0 92 2 74 0 94 2 74 0 95 2 74 0 97 2 74 0 99 2 74 0 100 2 74 0 101 2 74 0 105 2 74 0 106 2 74 0 107 0 107 0 108 2 74 0 109 2 74 0 114 2 74 0 115 2 74 0 116 2 74 0 117 2 74 0 118 2 74 0 119 2 74 0 120 2 74 0 121 2 74 0 122 2 74 0 124 4 97 0 238 4 101 0 240 4 105 0 242 2 74 1 39] 
#[1 2 78 0 1 2 78 0 4 2 78 0 6 2 78 0 7 2 78 0 8 2 78 0 9 2 78 0 11 2 78 0 12 0 129 0 14 2 78 0 15 2 78 0 17 2 78 0 18 2 78 0 19 2 78 0 20 2 78 0 21 2 78 0 23 2 78 0 24 2 78 0 25 2 78 0 26 2 78 0 27 2 78 0 28 2 78 0 31 2 78 0 32 2 78 0 34 2 78 0 36 2 78 0 37 2 78 0 49 2 78 0 51 2 78 0 52 2 78 0 55 2 78 0 56 2 78 0 57 2 78 0 58 2 78 0 59 2 78 0 61 2 78 0 62 2 78 0 64 2 78 0 65 2 78 0 66 2 78 0 67 2 78 0 68 2 78 0 71 2 78 0 72 2 78 0 74 2 78 0 76 2 78 0 78 2 78 0 79 2 78 0 81 2 78 0 82 2 78 0 84 2 78 0 87 2 78 0 89 2 78 0 90 2 78 0 91 2 78 0 92 2 78 0 94 2 78 0 95 2 78 0 97 2 78 0 99 2 78 0 100 2 78 0 101 2 78 0 105 2 78 0 106 2 78 0 107 2 78 0 108 2 78 0 109 2 78 0 114 2 78 0 115 2 78 0 116 2 78 0 117 2 78 0 118 2 78 0 119 2 78 0 120 2 78 0 121 2 78 0 122 2 78 0 124 2 78 1 39] 
#[1 0 111 0 1 0 111 0 4 0 111 0 6 2 82 0 7 0 111 0 8 0 111 0 9 2 82 0 11 0 111 0 12 0 111 0 14 0 111 0 15 2 82 0 17 0 111 0 18 0 111 0 19 0 111 0 20 0 111 0 21 0 111 0 23 0 111 0 24 2 82 0 25 2 82 0 26 0 111 0 27 2 82 0 28 0 111 0 31 0 111 0 32 0 111 0 34 2 82 0 36 2 82 0 37 2 82 0 49 2 82 0 51 2 82 0 52 2 82 0 55 2 82 0 56 2 82 0 57 2 82 0 58 0 111 0 59 2 82 0 61 2 82 0 62 2 82 0 64 2 82 0 65 2 82 0 66 2 82 0 67 2 82 0 68 0 111 0 71 2 82 0 72 0 111 0 74 2 82 0 76 2 82 0 78 2 82 0 79 2 82 0 81 2 82 0 82 0 111 0 84 2 82 0 87 2 82 0 89 2 82 0 90 2 82 0 91 2 82 0 92 2 82 0 94 2 82 0 95 2 82 0 97 2 82 0 99 2 82 0 100 2 82 0 101 2 82 0 105 2 82 0 106 2 82 0 107 0 111 0 108 2 82 0 109 2 82 0 114 2 82 0 115 2 82 0 116 2 82 0 117 2 82 0 118 2 82 0 119 2 82 0 120 2 82 0 121 2 82 0 122 2 82 0 124 2 82 1 39] 
#[1 2 86 0 1 2 86 0 4 2 86 0 6 2 86 0 7 2 86 0 8 2 86 0 9 2 86 0 11 2 86 0 12 0 129 0 14 2 86 0 15 2 86 0 17 2 86 0 18 2 86 0 19 2 86 0 20 2 86 0 21 2 86 0 23 2 86 0 24 2 86 0 25 2 86 0 26 2 86 0 27 2 86 0 28 2 86 0 31 2 86 0 32 2 86 0 34 2 86 0 36 2 86 0 37 2 86 0 49 2 86 0 51 2 86 0 52 2 86 0 55 2 86 0 56 2 86 0 57 2 86 0 58 2 86 0 59 2 86 0 61 2 86 0 62 2 86 0 64 2 86 0 65 2 86 0 66 2 86 0 67 2 86 0 68 2 86 0 71 2 86 0 72 2 86 0 74 2 86 0 76 2 86 0 78 2 86 0 79 2 86 0 81 2 86 0 82 2 86 0 84 2 86 0 87 2 86 0 89 2 86 0 90 2 86 0 91 2 86 0 92 2 86 0 94 2 86 0 95 2 86 0 97 2 86 0 99 2 86 0 100 2 86 0 101 2 86 0 105 2 86 0 106 2 86 0 107 2 86 0 108 2 86 0 109 2 86 0 114 2 86 0 115 2 86 0 116 2 86 0 117 2 86 0 118 2 86 0 119 2 86 0 120 2 86 0 121 2 86 0 122 2 86 0 124 2 86 1 39] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 4 129 0 142 4 129 0 143 4 129 0 144 4 129 0 145 4 129 0 146] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 4 133 0 142 4 133 0 143 4 133 0 144 4 133 0 145 4 133 0 146] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 4 137 0 142 4 137 0 143 4 137 0 144 4 137 0 145 4 137 0 146] 
#[1 0 129 0 14 4 141 0 35 4 153 0 170 4 153 0 173 4 153 0 174] 
#[1 0 115 0 9 2 94 0 11 0 115 0 12 0 115 0 14 0 115 0 25 0 115 0 26 0 115 0 28 0 115 0 36 0 115 0 49 0 115 0 51 0 115 0 52 0 115 0 55 0 115 0 56 0 115 0 57 0 115 0 58 0 115 0 61 0 115 0 62 0 115 0 64 0 115 0 65 0 115 0 66 0 115 0 67 0 115 0 68 0 115 0 72 0 115 0 76 0 115 0 78 0 115 0 79 0 115 0 81 0 115 0 87 0 115 0 89 0 115 0 90 0 115 0 91 0 115 0 92 0 115 0 94 0 115 0 97 0 115 0 101 0 115 0 105 0 115 0 106 0 115 0 107 0 115 0 109 0 115 0 114 0 115 0 115 0 115 0 116 0 115 0 117 0 115 0 118 0 115 0 119 0 115 0 120 0 115 0 121 0 115 0 122 0 115 0 124 4 157 0 212 0 115 1 39] 
#[0 2 98 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 1 221 0 131 1 221 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 4 161 0 214 4 161 0 218 1 221 0 219 4 161 0 220 4 161 0 221 4 161 0 222 4 161 0 223 4 161 0 230 4 161 0 231 4 161 0 232 4 161 0 233 4 161 0 234 4 161 0 235 4 161 0 236 4 161 0 237 4 161 0 239 4 161 0 241 4 161 0 243 4 161 0 244 4 161 0 245 4 161 0 246 4 161 0 247 4 161 0 248 4 161 0 249 4 161 0 250] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 1 221 0 131 1 221 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 4 165 0 214 4 165 0 218 1 221 0 219 4 165 0 220 4 165 0 221 4 165 0 222 4 165 0 223 4 165 0 230 4 165 0 231 4 165 0 232 4 165 0 233 4 165 0 234 4 165 0 235 4 165 0 236 4 165 0 237 4 165 0 239 4 165 0 241 4 165 0 243 4 165 0 244 4 165 0 245 4 165 0 246 4 165 0 247 4 165 0 248 4 165 0 249 4 165 0 250] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 6 0 76 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 119 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 4 169 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 4 173 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 0 129 0 14 2 102 0 57 2 102 0 121 2 102 0 122 2 102 0 124 4 177 0 184] 
#[1 4 181 0 6 0 129 0 14 4 185 0 187] 
#[0 2 106 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 110 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 114 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 118 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 122 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 4 189 0 142 4 189 0 143 4 189 0 144 4 189 0 145 4 189 0 146] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 193 0 21 4 53 0 23 4 57 0 24 4 61 0 27 4 65 0 31 4 69 0 32 4 73 0 34 4 77 0 59 4 81 0 71 4 85 0 74 4 89 0 84 4 93 0 108 4 97 0 238 4 101 0 240 4 105 0 242] 
#[1 4 181 0 6 0 129 0 14 4 197 0 187] 
#[0 2 126 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 2 130 0 9 2 130 0 12 0 129 0 14 2 130 0 25 2 130 0 26 2 130 0 28 2 130 0 36 2 130 0 49 2 130 0 51 2 130 0 52 2 130 0 55 2 130 0 56 2 130 0 57 2 130 0 58 2 130 0 61 2 130 0 62 2 130 0 64 2 130 0 65 2 130 0 66 2 130 0 67 2 130 0 68 2 130 0 72 2 130 0 76 2 130 0 78 2 130 0 79 2 130 0 81 2 130 0 87 2 130 0 89 2 130 0 90 2 130 0 91 2 130 0 92 2 130 0 94 2 130 0 97 2 130 0 101 2 130 0 105 2 130 0 106 2 130 0 107 2 130 0 109 2 130 0 114 2 130 0 115 2 130 0 116 2 130 0 117 2 130 0 118 2 130 0 119 2 130 0 120 2 130 0 121 2 130 0 122 2 130 0 124 2 130 1 39] 
#[0 2 134 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 2 138 0 9 2 138 0 12 0 129 0 14 2 138 0 25 2 138 0 26 2 138 0 28 2 138 0 36 2 138 0 49 2 138 0 51 2 138 0 52 2 138 0 55 2 138 0 56 2 138 0 57 2 138 0 58 2 138 0 61 2 138 0 62 2 138 0 64 2 138 0 65 2 138 0 66 2 138 0 67 2 138 0 68 2 138 0 72 2 138 0 76 2 138 0 78 2 138 0 79 2 138 0 81 2 138 0 87 2 138 0 89 2 138 0 90 2 138 0 91 2 138 0 92 2 138 0 94 2 138 0 97 2 138 0 101 2 138 0 105 2 138 0 106 2 138 0 107 2 138 0 109 2 138 0 114 2 138 0 115 2 138 0 116 2 138 0 117 2 138 0 118 2 138 0 119 2 138 0 120 2 138 0 121 2 138 0 122 2 138 0 124 2 138 1 39] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 4 61 0 27 4 65 0 31 4 69 0 32 4 73 0 34 4 77 0 59 4 81 0 71 4 85 0 74 4 89 0 84 4 201 0 99 4 93 0 108 4 97 0 238 4 101 0 240 4 105 0 242] 
#[1 0 129 0 14 4 205 0 21] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 4 209 0 131 4 209 0 132 4 209 0 133 4 209 0 134 4 209 0 135 4 209 0 136 4 209 0 137 4 209 0 138 4 209 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 4 209 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 4 9 0 1 0 127 0 4 4 17 0 6 4 213 0 7 4 21 0 8 4 25 0 9 2 142 0 11 4 29 0 12 4 33 0 14 4 37 0 15 2 142 0 17 4 41 0 18 4 45 0 19 4 49 0 20 2 142 0 21 4 53 0 23 4 57 0 24 2 142 0 25 2 142 0 26 0 131 0 27 2 142 0 28 0 135 0 31 4 69 0 32 4 73 0 34 2 142 0 36 2 142 0 37 2 142 0 49 2 142 0 51 2 142 0 52 2 142 0 55 2 142 0 56 2 142 0 57 2 142 0 58 0 139 0 59 2 142 0 61 2 142 0 62 2 142 0 64 2 142 0 65 2 142 0 66 2 142 0 67 2 142 0 68 0 143 0 71 2 142 0 72 0 147 0 74 2 142 0 76 2 142 0 78 2 142 0 79 2 142 0 81 2 142 0 82 4 89 0 84 2 142 0 87 2 142 0 89 2 142 0 90 2 142 0 91 2 142 0 92 2 142 0 94 2 142 0 95 2 142 0 97 2 142 0 99 2 142 0 100 2 142 0 101 2 142 0 105 2 142 0 106 2 142 0 107 0 151 0 108 2 142 0 109 2 142 0 114 2 142 0 115 2 142 0 116 2 142 0 117 2 142 0 118 2 142 0 119 2 142 0 120 2 142 0 121 2 142 0 122 2 142 0 124 4 97 0 238 4 101 0 240 4 105 0 242 2 142 1 39] 
#[1 0 225 0 67 4 217 0 91 4 221 1 21 4 221 1 22 4 221 1 23] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 4 61 0 27 4 65 0 31 4 69 0 32 4 73 0 34 4 77 0 59 0 221 0 66 0 225 0 67 4 81 0 71 4 85 0 74 4 89 0 84 4 93 0 108 4 97 0 238 4 101 0 240 4 105 0 242 4 225 1 20 4 225 1 21 4 225 1 22 4 225 1 23 4 225 1 24 4 225 1 25 4 225 1 26] 
#[1 0 49 0 14 3 17 0 29 0 53 0 121 0 57 0 122 3 21 0 142 3 21 0 143 3 21 0 144 3 21 0 145 3 21 0 146 4 229 0 205 4 233 0 210] 
#[1 0 155 0 9 2 94 0 11 0 155 0 12 0 155 0 14 0 155 0 25 0 155 0 26 0 155 0 28 0 155 0 36 0 155 0 49 0 155 0 51 0 155 0 52 0 155 0 55 0 155 0 56 0 155 0 57 0 155 0 58 0 155 0 61 0 155 0 62 0 155 0 64 0 155 0 65 0 155 0 66 0 155 0 67 0 155 0 68 0 155 0 72 0 155 0 76 0 155 0 78 0 155 0 79 0 155 0 81 0 155 0 87 0 155 0 89 0 155 0 90 0 155 0 91 0 155 0 92 0 155 0 94 0 155 0 97 0 155 0 101 0 155 0 105 0 155 0 106 0 155 0 107 0 155 0 109 0 155 0 114 0 155 0 115 0 155 0 116 0 155 0 117 0 155 0 118 0 155 0 119 0 155 0 120 0 155 0 121 0 155 0 122 0 155 0 124 4 157 0 212 0 155 1 39] 
#[0 2 150 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 154 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 2 158 0 9 2 158 0 12 0 129 0 14 2 158 0 25 2 158 0 26 2 158 0 28 2 158 0 36 2 158 0 49 2 158 0 51 2 158 0 52 2 158 0 55 2 158 0 56 2 158 0 57 2 158 0 58 2 158 0 61 2 158 0 62 2 158 0 64 2 158 0 65 2 158 0 66 2 158 0 67 2 158 0 68 2 158 0 72 2 158 0 76 2 158 0 78 2 158 0 79 2 158 0 81 2 158 0 87 2 158 0 89 2 158 0 90 2 158 0 91 2 158 0 92 2 158 0 94 2 158 0 97 2 158 0 101 2 158 0 105 2 158 0 106 2 158 0 107 2 158 0 109 2 158 0 114 2 158 0 115 2 158 0 116 2 158 0 117 2 158 0 118 2 158 0 119 2 158 0 120 2 158 0 121 2 158 0 122 2 158 0 124 2 158 1 39] 
#[1 0 159 0 9 2 94 0 11 0 159 0 12 0 159 0 14 0 159 0 25 0 159 0 26 0 159 0 28 0 159 0 36 0 159 0 49 0 159 0 51 0 159 0 52 0 159 0 55 0 159 0 56 0 159 0 57 0 159 0 58 0 159 0 61 0 159 0 62 0 159 0 64 0 159 0 65 0 159 0 66 0 159 0 67 0 159 0 68 0 159 0 72 0 159 0 76 0 159 0 78 0 159 0 79 0 159 0 81 0 159 0 87 0 159 0 89 0 159 0 90 0 159 0 91 0 159 0 92 0 159 0 94 0 159 0 97 0 159 0 101 0 159 0 105 0 159 0 106 0 159 0 107 0 159 0 109 0 159 0 114 0 159 0 115 0 159 0 116 0 159 0 117 0 159 0 118 0 159 0 119 0 159 0 120 0 159 0 121 0 159 0 122 0 159 0 124 4 157 0 212 0 159 1 39] 
#[0 2 166 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 4 181 0 6 0 129 0 14 4 237 0 187] 
#[1 0 129 0 14 2 170 0 57 2 170 0 121 2 170 0 122 2 170 0 124 4 241 0 179] 
#[1 1 50 0 1 1 50 0 4 1 50 0 6 1 50 0 8 0 163 0 9 0 163 0 12 0 163 0 14 1 50 0 15 1 50 0 18 1 50 0 19 1 50 0 20 4 5 0 21 1 50 0 23 1 50 0 24 0 6 0 25 0 6 0 26 1 50 0 27 0 6 0 28 1 50 0 31 1 50 0 32 1 50 0 34 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 1 50 0 59 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 1 50 0 71 0 6 0 72 1 50 0 74 0 6 0 79 0 6 0 81 1 50 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 105 0 6 0 106 0 6 0 107 1 50 0 108 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 4 245 0 130] 
#[1 0 6 0 9 0 6 0 12 0 129 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 57 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 4 249 0 130] 
#[0 2 174 0 12 0 113] 
#[1 4 253 0 12 5 1 0 113] 
#[0 2 178 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 2 182 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 167 0 25 0 171 0 26 0 175 0 28 0 179 0 36 0 183 0 49 0 187 0 51 0 191 0 52 2 186 0 55 2 186 0 56 2 186 0 57 0 195 0 58 0 199 0 61 0 203 0 62 0 207 0 64 0 211 0 65 0 215 0 66 0 219 0 67 0 223 0 68 0 227 0 72 2 186 0 76 2 186 0 78 0 231 0 79 0 235 0 81 0 239 0 87 0 243 0 89 0 247 0 90 0 251 0 91 0 255 0 92 1 3 0 94 1 7 0 97 1 11 0 101 2 186 0 105 1 15 0 106 1 19 0 107 1 23 0 109 1 27 0 114 1 31 0 115 1 35 0 116 1 39 0 117 1 43 0 118 1 47 0 119 1 51 0 120 1 55 0 121 1 59 0 122 2 186 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 5 9 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38 2 186 1 39] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 1 221 0 131 1 221 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 5 13 0 142 5 13 0 143 5 13 0 144 5 13 0 145 5 13 0 146 5 17 0 214 5 17 0 218 1 221 0 219 5 17 0 220 5 17 0 221 5 17 0 222 5 17 0 223 5 17 0 230 5 17 0 231 5 17 0 232 5 17 0 233 5 17 0 234 5 17 0 235 5 17 0 236 5 17 0 237 5 17 0 239 5 17 0 241 5 17 0 243 5 17 0 244 5 17 0 245 5 17 0 246 5 17 0 247 5 17 0 248 5 17 0 249 5 17 0 250] 
#[0 2 190 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 2 194 0 1 2 194 0 4 2 194 0 6 2 194 0 7 2 194 0 8 0 169 0 9 5 21 0 11 0 173 0 12 0 49 0 14 2 194 0 15 1 63 0 17 2 194 0 18 2 194 0 19 2 194 0 20 2 194 0 21 2 194 0 23 2 194 0 24 1 67 0 25 1 71 0 26 2 194 0 27 1 75 0 28 2 194 0 31 2 194 0 32 2 194 0 34 2 194 0 36 2 194 0 37 5 29 0 40 5 41 0 42 2 194 0 49 2 194 0 51 2 194 0 52 2 194 0 55 2 194 0 56 2 194 0 57 2 194 0 58 2 194 0 59 2 194 0 61 2 194 0 62 2 194 0 64 2 194 0 65 2 194 0 66 2 194 0 67 2 194 0 68 2 194 0 71 1 79 0 72 2 194 0 74 2 194 0 76 2 194 0 78 1 83 0 79 2 194 0 81 2 194 0 82 2 194 0 84 5 37 0 85 2 194 0 87 2 194 0 89 2 194 0 90 2 194 0 91 2 194 0 92 2 194 0 94 2 194 0 95 2 194 0 97 2 194 0 99 2 194 0 100 2 194 0 101 2 194 0 105 2 194 0 106 2 194 0 107 2 194 0 108 1 87 0 109 1 91 0 114 1 95 0 115 1 99 0 116 1 103 0 117 1 107 0 118 1 111 0 119 1 115 0 120 1 119 0 121 1 123 0 122 2 194 0 124 5 45 0 131 5 45 0 132 5 45 0 133 5 45 0 134 5 45 0 135 5 45 0 136 5 45 0 137 5 45 0 138 5 45 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 5 41 0 186 2 229 0 214 2 229 0 218 5 45 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 5 49 0 224 5 53 0 226 5 57 0 229 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250 2 194 1 39] 
#[1 1 127 0 9 1 127 0 12 1 127 0 14 1 127 0 25 1 127 0 26 1 127 0 28 1 127 0 36 1 127 0 49 1 127 0 51 1 127 0 52 2 198 0 55 2 198 0 56 2 198 0 57 1 127 0 58 1 127 0 61 1 127 0 62 1 127 0 64 1 127 0 65 1 127 0 66 1 127 0 67 1 127 0 68 1 127 0 72 2 198 0 76 2 198 0 78 1 127 0 79 1 127 0 81 1 127 0 87 1 127 0 89 1 127 0 90 1 127 0 91 2 198 0 92 1 127 0 94 1 127 0 97 1 127 0 101 2 198 0 105 1 127 0 106 1 127 0 107 1 127 0 109 1 127 0 114 1 127 0 115 1 127 0 116 1 127 0 117 1 127 0 118 1 127 0 119 1 127 0 120 1 127 0 121 1 127 0 122 1 127 0 124 5 61 0 130 5 65 0 161 2 198 1 39] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 5 69 0 142 5 69 0 143 5 69 0 144 5 69 0 145 5 69 0 146] 
#[1 5 73 0 65 5 77 0 97] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 5 81 0 142 5 81 0 143 5 81 0 144 5 81 0 145 5 81 0 146] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 5 85 0 142 5 85 0 143 5 85 0 144 5 85 0 145 5 85 0 146] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 5 89 0 142 5 89 0 143 5 89 0 144 5 89 0 145 5 89 0 146] 
#[0 0 122 0 65 0 97] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 5 93 0 142 5 93 0 143 5 93 0 144 5 93 0 145 5 93 0 146] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 5 97 0 142 5 97 0 143 5 97 0 144 5 97 0 145 5 97 0 146] 
#[1 5 101 0 65 5 105 0 97] 
#[1 1 131 0 9 2 94 0 11 1 131 0 12 1 131 0 14 1 131 0 25 1 131 0 26 1 131 0 28 1 131 0 36 1 131 0 49 1 131 0 51 1 131 0 52 1 131 0 55 1 131 0 56 1 131 0 57 1 131 0 58 1 131 0 61 1 131 0 62 1 131 0 64 1 131 0 65 1 131 0 66 1 131 0 67 1 131 0 68 1 131 0 72 1 131 0 76 1 131 0 78 1 131 0 79 1 131 0 81 1 131 0 87 1 131 0 89 1 131 0 90 1 131 0 91 1 131 0 92 1 131 0 94 1 131 0 97 1 131 0 101 1 131 0 105 1 131 0 106 1 131 0 107 1 131 0 109 1 131 0 114 1 131 0 115 1 131 0 116 1 131 0 117 1 131 0 118 1 131 0 119 1 131 0 120 1 131 0 121 1 131 0 122 1 131 0 124 4 157 0 212 1 131 1 39] 
#[0 2 206 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 5 109 0 130 5 113 0 164 2 210 1 39] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 5 117 0 142 5 117 0 143 5 117 0 144 5 117 0 145 5 117 0 146] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 5 121 0 142 5 121 0 143 5 121 0 144 5 121 0 145 5 121 0 146] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 1 221 0 131 1 221 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 5 125 0 214 5 125 0 218 1 221 0 219 5 125 0 220 5 125 0 221 5 125 0 222 5 125 0 223 5 125 0 230 5 125 0 231 5 125 0 232 5 125 0 233 5 125 0 234 5 125 0 235 5 125 0 236 5 125 0 237 5 125 0 239 5 125 0 241 5 125 0 243 5 125 0 244 5 125 0 245 5 125 0 246 5 125 0 247 5 125 0 248 5 125 0 249 5 125 0 250] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 5 129 0 142 5 129 0 143 5 129 0 144 5 129 0 145 5 129 0 146] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 5 133 0 131 5 133 0 132 5 133 0 133 5 133 0 134 5 133 0 135 5 133 0 136 5 133 0 137 5 133 0 138 5 133 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 5 133 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 190 0 7 0 190 0 9 0 190 0 11 0 190 0 12 0 190 0 14 0 190 0 17 0 190 0 25 0 190 0 26 0 190 0 28 0 190 0 40 0 190 0 42 0 190 0 72 0 190 0 79 0 190 0 85 0 190 0 109 0 190 0 114 0 190 0 115 0 190 0 116 0 190 0 117 0 190 0 118 0 190 0 119 0 190 0 120 0 190 0 121 0 190 0 122 5 137 0 225 3 197 0 227] 
#[0 2 214 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 2 218 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 2 222 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 5 141 0 142 5 141 0 143 5 141 0 144 5 141 0 145 5 141 0 146] 
#[0 2 226 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 2 230 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 2 234 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 2 238 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 2 242 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 2 246 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 2 250 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 2 254 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 3 2 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 3 6 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 3 10 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 3 14 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 3 18 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 3 22 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 3 26 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 5 145 0 131 5 145 0 132 5 145 0 133 5 145 0 134 5 145 0 135 5 145 0 136 5 145 0 137 5 145 0 138 5 145 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 5 145 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 5 149 0 131 5 149 0 132 5 149 0 133 5 149 0 134 5 149 0 135 5 149 0 136 5 149 0 137 5 149 0 138 5 149 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 5 149 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 5 153 0 131 5 153 0 132 5 153 0 133 5 153 0 134 5 153 0 135 5 153 0 136 5 153 0 137 5 153 0 138 5 153 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 5 153 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[0 3 30 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 37 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 82 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 34 0 14 0 121 0 122 0 124] 
#[0 3 38 0 57 0 124] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 5 157 0 124 0 61 0 142 0 61 0 143 0 61 0 144 0 61 0 145 0 61 0 146 5 161 0 149] 
#[0 3 42 1 39] 
#[1 0 129 0 14 5 165 0 73] 
#[1 0 129 0 14 5 169 0 73] 
#[1 0 129 0 14 4 141 0 35 5 173 0 170 5 173 0 173 5 173 0 174] 
#[1 0 49 0 14 5 177 0 28 5 237 0 39 5 237 0 41 5 237 0 44 5 237 0 48 5 237 0 53 5 237 0 70 5 237 0 75 5 237 0 80 5 237 0 93 5 237 0 96 5 221 0 103 0 53 0 121 0 57 0 122 5 225 0 142 5 225 0 143 5 225 0 144 5 225 0 145 5 225 0 146 5 237 0 166 5 237 0 168 5 237 0 169] 
#[0 3 46 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 50 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 54 0 9 0 11 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 3 58 0 9 5 241 0 11 3 58 0 12 3 58 0 14 3 58 0 25 3 58 0 26 3 58 0 28 3 58 0 36 3 58 0 49 3 58 0 51 3 58 0 52 3 58 0 55 3 58 0 56 3 58 0 57 3 58 0 58 3 58 0 61 3 58 0 62 3 58 0 64 3 58 0 65 3 58 0 66 3 58 0 67 3 58 0 68 3 58 0 72 3 58 0 76 3 58 0 78 3 58 0 79 3 58 0 81 3 58 0 87 3 58 0 89 3 58 0 90 3 58 0 91 3 58 0 92 3 58 0 94 3 58 0 97 3 58 0 101 3 58 0 105 3 58 0 106 3 58 0 107 3 58 0 109 3 58 0 114 3 58 0 115 3 58 0 116 3 58 0 117 3 58 0 118 3 58 0 119 3 58 0 120 3 58 0 121 3 58 0 122 3 58 0 124 5 245 0 211 3 58 1 39] 
#[1 1 50 0 1 1 50 0 4 1 50 0 6 1 50 0 8 0 163 0 9 0 163 0 12 0 163 0 14 1 50 0 15 1 50 0 18 1 50 0 19 1 50 0 20 4 5 0 21 1 50 0 23 1 50 0 24 0 6 0 25 0 6 0 26 1 50 0 27 0 6 0 28 1 50 0 31 1 50 0 32 1 50 0 34 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 1 50 0 59 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 1 50 0 71 0 6 0 72 1 50 0 74 0 6 0 79 0 6 0 81 1 50 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 1 50 0 108 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 5 249 0 130] 
#[1 1 50 0 1 1 50 0 4 1 50 0 6 1 50 0 8 0 163 0 9 0 163 0 12 0 163 0 14 1 50 0 15 1 50 0 18 1 50 0 19 1 50 0 20 4 5 0 21 1 50 0 23 1 50 0 24 0 6 0 25 0 6 0 26 1 50 0 27 0 6 0 28 1 50 0 31 1 50 0 32 1 50 0 34 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 1 50 0 59 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 1 50 0 71 0 6 0 72 1 50 0 74 0 6 0 76 0 6 0 79 0 6 0 81 1 50 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 1 50 0 108 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 5 253 0 130] 
#[1 6 1 0 76 0 101 0 116 0 137 0 124 6 5 0 132] 
#[1 0 6 0 76 0 6 0 116 0 6 0 124 6 9 0 130] 
#[1 0 6 0 14 0 6 0 57 0 6 0 121 0 6 0 122 0 6 0 124 6 13 0 130 6 17 0 183] 
#[1 6 21 0 7 0 49 0 14 5 29 0 40 6 37 0 42 6 25 0 83 6 29 0 85 0 53 0 121 0 57 0 122 6 33 0 142 6 33 0 143 6 33 0 144 6 33 0 145 6 33 0 146 6 37 0 186 6 41 0 190] 
#[0 3 62 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 129 0 14 6 45 0 69] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 6 49 0 131 6 49 0 132 6 49 0 133 6 49 0 134 6 49 0 135 6 49 0 136 6 49 0 137 6 49 0 138 6 49 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 6 49 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 4 141 0 35 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 6 53 0 130 6 57 0 170 6 57 0 173 6 57 0 174] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 55 0 6 0 56 0 6 0 57 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 6 61 0 130] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 1 221 0 131 1 221 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 6 65 0 214 6 65 0 218 1 221 0 219 6 65 0 220 6 65 0 221 6 65 0 222 6 65 0 223 6 65 0 230 6 65 0 231 6 65 0 232 6 65 0 233 6 65 0 234 6 65 0 235 6 65 0 236 6 65 0 237 6 65 0 239 6 65 0 241 6 65 0 243 6 65 0 244 6 65 0 245 6 65 0 246 6 65 0 247 6 65 0 248 6 65 0 249 6 65 0 250] 
#[1 3 66 0 1 1 135 0 4 4 17 0 6 3 66 0 7 3 66 0 8 3 66 0 9 3 66 0 11 3 66 0 12 4 33 0 14 3 66 0 15 3 66 0 17 3 66 0 18 3 66 0 19 3 66 0 20 3 66 0 21 3 66 0 23 3 66 0 24 3 66 0 25 3 66 0 26 1 139 0 27 3 66 0 28 1 143 0 31 3 66 0 32 3 66 0 34 3 66 0 36 3 66 0 37 3 66 0 49 3 66 0 51 3 66 0 52 3 66 0 55 3 66 0 56 3 66 0 57 3 66 0 58 1 147 0 59 3 66 0 61 3 66 0 62 3 66 0 64 3 66 0 65 3 66 0 66 3 66 0 67 3 66 0 68 1 151 0 71 3 66 0 72 1 155 0 74 3 66 0 76 3 66 0 78 3 66 0 79 3 66 0 81 3 66 0 82 3 66 0 84 3 66 0 87 3 66 0 89 3 66 0 90 3 66 0 91 3 66 0 92 3 66 0 94 3 66 0 95 3 66 0 97 3 66 0 99 3 66 0 100 3 66 0 101 3 66 0 105 3 66 0 106 3 66 0 107 1 159 0 108 3 66 0 109 3 66 0 114 3 66 0 115 3 66 0 116 3 66 0 117 3 66 0 118 3 66 0 119 3 66 0 120 3 66 0 121 3 66 0 122 3 66 0 124 4 97 0 238 4 101 0 240 4 105 0 242 3 66 1 39] 
#[0 3 70 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 6 73 0 78] 
#[0 3 74 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 78 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 1 163 0 9 2 94 0 11 1 163 0 12 1 163 0 14 1 163 0 25 1 163 0 26 1 163 0 28 1 163 0 36 1 163 0 49 1 163 0 51 1 163 0 52 1 163 0 55 1 163 0 56 1 163 0 57 1 163 0 58 1 163 0 61 1 163 0 62 1 163 0 64 1 163 0 65 1 163 0 66 1 163 0 67 1 163 0 68 1 163 0 72 1 163 0 76 1 163 0 78 1 163 0 79 1 163 0 81 1 163 0 87 1 163 0 89 1 163 0 90 1 163 0 91 1 163 0 92 1 163 0 94 1 163 0 97 1 163 0 101 1 163 0 105 1 163 0 106 1 163 0 107 1 163 0 109 1 163 0 114 1 163 0 115 1 163 0 116 1 163 0 117 1 163 0 118 1 163 0 119 1 163 0 120 1 163 0 121 1 163 0 122 1 163 0 124 4 157 0 212 1 163 1 39] 
#[0 3 86 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 6 77 0 130] 
#[1 0 6 0 14 0 6 0 57 0 6 0 121 0 6 0 122 0 6 0 124 6 81 0 130 6 85 0 178] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 0 6 0 105 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 119 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 6 89 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 6 93 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 6 0 57 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 119 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 6 97 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 6 101 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 6 105 0 113 6 109 0 141] 
#[0 3 90 0 12 0 113] 
#[0 3 94 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 6 113 0 92] 
#[1 1 167 0 1 1 167 0 4 1 167 0 6 1 171 0 7 1 167 0 8 1 167 0 9 1 171 0 11 1 167 0 12 1 175 0 14 1 167 0 15 1 171 0 17 1 167 0 18 1 167 0 19 1 167 0 20 1 179 0 21 1 167 0 23 1 167 0 24 1 171 0 25 1 171 0 26 1 167 0 27 1 171 0 28 1 167 0 31 1 167 0 32 1 167 0 34 1 171 0 36 1 171 0 37 0 190 0 40 0 190 0 42 1 171 0 49 1 171 0 51 1 171 0 52 1 171 0 55 1 171 0 56 1 171 0 57 1 171 0 58 1 167 0 59 1 171 0 61 1 171 0 62 1 171 0 64 1 171 0 65 1 171 0 66 1 171 0 67 1 171 0 68 1 167 0 71 1 171 0 72 1 167 0 74 1 171 0 76 1 171 0 78 1 171 0 79 1 171 0 81 1 171 0 82 1 167 0 84 0 190 0 85 1 171 0 87 1 171 0 89 1 171 0 90 1 171 0 91 1 171 0 92 1 171 0 94 1 171 0 95 1 171 0 97 1 171 0 99 1 171 0 100 1 171 0 101 1 171 0 105 1 171 0 106 1 171 0 107 1 167 0 108 1 171 0 109 1 171 0 114 1 171 0 115 1 171 0 116 1 171 0 117 1 171 0 118 1 171 0 119 1 171 0 120 1 171 0 121 1 171 0 122 1 171 0 124 3 193 0 225 3 197 0 227 1 171 1 39] 
#[1 1 183 0 1 1 183 0 4 1 183 0 6 3 102 0 7 1 183 0 8 1 183 0 9 3 102 0 11 1 183 0 12 1 183 0 14 1 183 0 15 3 102 0 17 1 183 0 18 1 183 0 19 1 183 0 20 3 102 0 21 1 183 0 23 1 183 0 24 3 102 0 25 3 102 0 26 1 183 0 27 3 102 0 28 1 183 0 31 1 183 0 32 1 183 0 34 3 102 0 36 3 102 0 37 3 102 0 49 3 102 0 51 3 102 0 52 3 102 0 55 3 102 0 56 3 102 0 57 3 102 0 58 1 183 0 59 3 102 0 61 3 102 0 62 3 102 0 64 3 102 0 65 3 102 0 66 3 102 0 67 3 102 0 68 1 183 0 71 3 102 0 72 1 183 0 74 3 102 0 76 3 102 0 78 3 102 0 79 3 102 0 81 3 102 0 82 1 183 0 84 3 102 0 87 3 102 0 89 3 102 0 90 3 102 0 91 3 102 0 92 3 102 0 94 3 102 0 95 3 102 0 97 3 102 0 99 3 102 0 100 3 102 0 101 3 102 0 105 3 102 0 106 3 102 0 107 1 183 0 108 3 102 0 109 3 102 0 114 3 102 0 115 3 102 0 116 3 102 0 117 3 102 0 118 3 102 0 119 3 102 0 120 3 102 0 121 3 102 0 122 3 102 0 124 3 102 1 39] 
#[0 3 106 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 110 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 114 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 85 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[0 3 118 0 9 0 12 0 14 0 25 0 26 0 28 0 72 0 79 0 85 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 6 117 0 131 6 117 0 132 6 117 0 133 6 117 0 134 6 117 0 135 6 117 0 136 6 117 0 137 6 117 0 138 6 117 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 6 117 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 6 121 0 85 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 6 125 0 131 6 125 0 132 6 125 0 133 6 125 0 134 6 125 0 135 6 125 0 136 6 125 0 137 6 125 0 138 6 125 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 6 125 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 4 9 0 1 1 187 0 4 4 17 0 6 3 122 0 7 4 21 0 8 4 25 0 9 3 122 0 11 4 29 0 12 4 33 0 14 4 37 0 15 3 122 0 17 4 41 0 18 4 45 0 19 4 49 0 20 3 122 0 21 4 53 0 23 4 57 0 24 3 122 0 25 3 122 0 26 1 191 0 27 3 122 0 28 1 195 0 31 4 69 0 32 4 73 0 34 3 122 0 36 3 122 0 37 3 122 0 49 3 122 0 51 3 122 0 52 3 122 0 55 3 122 0 56 3 122 0 57 3 122 0 58 1 199 0 59 3 122 0 61 3 122 0 62 3 122 0 64 3 122 0 65 3 122 0 66 3 122 0 67 3 122 0 68 1 203 0 71 3 122 0 72 1 207 0 74 3 122 0 76 3 122 0 78 3 122 0 79 3 122 0 81 3 122 0 82 4 89 0 84 3 122 0 87 3 122 0 89 3 122 0 90 3 122 0 91 3 122 0 92 3 122 0 94 3 122 0 95 3 122 0 97 3 122 0 99 3 122 0 100 3 122 0 101 3 122 0 105 3 122 0 106 3 122 0 107 1 211 0 108 3 122 0 109 3 122 0 114 3 122 0 115 3 122 0 116 3 122 0 117 3 122 0 118 3 122 0 119 3 122 0 120 3 122 0 121 3 122 0 122 3 122 0 124 4 97 0 238 4 101 0 240 4 105 0 242 3 122 1 39] 
#[1 2 194 0 1 2 194 0 4 2 194 0 6 2 194 0 7 2 194 0 8 2 194 0 9 6 129 0 11 2 194 0 12 2 194 0 14 2 194 0 15 1 215 0 17 2 194 0 18 2 194 0 19 2 194 0 20 2 194 0 21 2 194 0 23 2 194 0 24 2 194 0 25 2 194 0 26 2 194 0 27 2 194 0 28 2 194 0 31 2 194 0 32 2 194 0 34 2 194 0 36 2 194 0 37 2 194 0 49 2 194 0 51 2 194 0 52 2 194 0 55 2 194 0 56 2 194 0 57 2 194 0 58 2 194 0 59 2 194 0 61 2 194 0 62 2 194 0 64 2 194 0 65 2 194 0 66 2 194 0 67 2 194 0 68 2 194 0 71 2 194 0 72 2 194 0 74 2 194 0 76 2 194 0 78 2 194 0 79 2 194 0 81 2 194 0 82 2 194 0 84 2 194 0 87 2 194 0 89 2 194 0 90 2 194 0 91 2 194 0 92 2 194 0 94 2 194 0 95 2 194 0 97 2 194 0 99 2 194 0 100 2 194 0 101 2 194 0 105 2 194 0 106 2 194 0 107 2 194 0 108 2 194 0 109 2 194 0 114 2 194 0 115 2 194 0 116 2 194 0 117 2 194 0 118 2 194 0 119 2 194 0 120 2 194 0 121 2 194 0 122 2 194 0 124 6 137 0 229 2 194 1 39] 
#[0 3 126 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 3 130 0 1 3 130 0 4 3 130 0 6 3 130 0 7 3 130 0 8 3 130 0 9 6 141 0 11 3 130 0 12 3 130 0 14 3 130 0 15 1 219 0 17 3 130 0 18 3 130 0 19 3 130 0 20 3 130 0 21 3 130 0 23 3 130 0 24 3 130 0 25 3 130 0 26 3 130 0 27 3 130 0 28 3 130 0 31 3 130 0 32 3 130 0 34 3 130 0 36 3 130 0 37 3 130 0 49 3 130 0 51 3 130 0 52 3 130 0 55 3 130 0 56 3 130 0 57 3 130 0 58 3 130 0 59 3 130 0 61 3 130 0 62 3 130 0 64 3 130 0 65 3 130 0 66 3 130 0 67 3 130 0 68 3 130 0 71 3 130 0 72 3 130 0 74 3 130 0 76 3 130 0 78 3 130 0 79 3 130 0 81 3 130 0 82 3 130 0 84 3 130 0 87 3 130 0 89 3 130 0 90 3 130 0 91 3 130 0 92 3 130 0 94 3 130 0 95 3 130 0 97 3 130 0 99 3 130 0 100 3 130 0 101 3 130 0 105 3 130 0 106 3 130 0 107 3 130 0 108 3 130 0 109 3 130 0 114 3 130 0 115 3 130 0 116 3 130 0 117 3 130 0 118 3 130 0 119 3 130 0 120 3 130 0 121 3 130 0 122 3 130 0 124 6 149 0 228 3 130 1 39] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 6 153 0 150 6 153 0 156 6 153 0 158 6 153 0 159 1 121 0 167 6 153 0 176 6 153 0 177 6 153 0 181 6 153 0 182 6 153 0 193 6 153 0 194 6 153 0 195 1 157 0 196 6 153 0 197 6 153 0 198 6 153 0 199 6 153 0 200 6 153 0 201 6 153 0 202 6 153 0 203 6 153 0 204 6 153 0 206 6 153 0 207 6 153 0 208 6 153 0 209 6 153 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 6 153 0 251 6 153 0 252 6 153 0 253 6 153 0 254 6 153 0 255 6 153 1 0 6 153 1 1 6 153 1 2 6 153 1 3 6 153 1 4 6 153 1 5 6 153 1 6 6 153 1 7 6 153 1 8 6 153 1 9 6 153 1 13 2 121 1 14 6 153 1 15 6 153 1 16 6 153 1 17 6 153 1 18 6 153 1 19 6 153 1 20 6 153 1 21 6 153 1 22 6 153 1 23 6 153 1 24 6 153 1 25 6 153 1 26 6 153 1 27 6 153 1 28 6 153 1 29 6 153 1 30 6 153 1 32 6 153 1 33 6 153 1 34 6 153 1 35 6 153 1 36 6 153 1 37 6 153 1 38] 
#[0 3 134 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 129 0 14 6 157 0 21] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 6 161 0 142 6 161 0 143 6 161 0 144 6 161 0 145 6 161 0 146] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 6 165 0 142 6 165 0 143 6 165 0 144 6 165 0 145 6 165 0 146] 
#[1 0 129 0 14 2 102 0 57 2 102 0 121 2 102 0 122 2 102 0 124 6 169 0 184] 
#[1 4 181 0 6 0 129 0 14 6 173 0 187] 
#[1 4 181 0 6 0 129 0 14 6 177 0 187] 
#[1 4 181 0 6 0 129 0 14 6 181 0 187] 
#[1 0 129 0 14 2 170 0 57 2 170 0 121 2 170 0 122 2 170 0 124 6 185 0 179] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 6 189 0 142 6 189 0 143 6 189 0 144 6 189 0 145 6 189 0 146] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 6 193 0 142 6 193 0 143 6 193 0 144 6 193 0 145 6 193 0 146] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 6 197 0 160 1 121 0 167 6 197 0 175 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[0 3 138 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 4 181 0 6 0 129 0 14 6 201 0 187] 
#[1 4 181 0 6 0 129 0 14 6 205 0 187] 
#[1 1 223 0 1 1 223 0 4 1 223 0 6 3 142 0 7 1 223 0 8 1 223 0 9 3 142 0 11 1 223 0 12 1 223 0 14 1 223 0 15 3 142 0 17 1 223 0 18 1 223 0 19 1 223 0 20 3 142 0 21 1 223 0 23 1 223 0 24 3 142 0 25 3 142 0 26 1 223 0 27 3 142 0 28 1 223 0 31 1 223 0 32 1 223 0 34 3 142 0 36 3 142 0 37 3 142 0 49 3 142 0 51 3 142 0 52 3 142 0 55 3 142 0 56 3 142 0 57 3 142 0 58 1 223 0 59 3 142 0 61 3 142 0 62 3 142 0 64 3 142 0 65 3 142 0 66 3 142 0 67 3 142 0 68 1 223 0 71 3 142 0 72 1 223 0 74 3 142 0 76 3 142 0 78 3 142 0 79 3 142 0 81 3 142 0 82 1 223 0 84 3 142 0 87 3 142 0 89 3 142 0 90 3 142 0 91 3 142 0 92 3 142 0 94 3 142 0 95 3 142 0 97 3 142 0 99 3 142 0 100 3 142 0 101 3 142 0 105 3 142 0 106 3 142 0 107 1 223 0 108 3 142 0 109 3 142 0 114 3 142 0 115 3 142 0 116 3 142 0 117 3 142 0 118 3 142 0 119 3 142 0 120 3 142 0 121 3 142 0 122 3 142 0 124 3 142 1 39] 
#[1 3 146 0 1 3 146 0 4 3 146 0 6 3 146 0 7 3 146 0 8 3 146 0 9 3 146 0 11 3 146 0 12 0 129 0 14 3 146 0 15 3 146 0 17 3 146 0 18 3 146 0 19 3 146 0 20 3 146 0 21 3 146 0 23 3 146 0 24 3 146 0 25 3 146 0 26 3 146 0 27 3 146 0 28 3 146 0 31 3 146 0 32 3 146 0 34 3 146 0 36 3 146 0 37 3 146 0 49 3 146 0 51 3 146 0 52 3 146 0 55 3 146 0 56 3 146 0 57 3 146 0 58 3 146 0 59 3 146 0 61 3 146 0 62 3 146 0 64 3 146 0 65 3 146 0 66 3 146 0 67 3 146 0 68 3 146 0 71 3 146 0 72 3 146 0 74 3 146 0 76 3 146 0 78 3 146 0 79 3 146 0 81 3 146 0 82 3 146 0 84 3 146 0 87 3 146 0 89 3 146 0 90 3 146 0 91 3 146 0 92 3 146 0 94 3 146 0 95 3 146 0 97 3 146 0 99 3 146 0 100 3 146 0 101 3 146 0 105 3 146 0 106 3 146 0 107 3 146 0 108 3 146 0 109 3 146 0 114 3 146 0 115 3 146 0 116 3 146 0 117 3 146 0 118 3 146 0 119 3 146 0 120 3 146 0 121 3 146 0 122 3 146 0 124 3 146 1 39] 
#[1 4 9 0 1 1 227 0 4 4 17 0 6 3 150 0 7 4 21 0 8 4 25 0 9 3 150 0 11 4 29 0 12 4 33 0 14 4 37 0 15 3 150 0 17 4 41 0 18 4 45 0 19 4 49 0 20 3 150 0 21 4 53 0 23 4 57 0 24 3 150 0 25 3 150 0 26 1 231 0 27 3 150 0 28 1 235 0 31 4 69 0 32 4 73 0 34 3 150 0 36 3 150 0 37 3 150 0 49 3 150 0 51 3 150 0 52 3 150 0 55 3 150 0 56 3 150 0 57 3 150 0 58 1 239 0 59 3 150 0 61 3 150 0 62 3 150 0 64 3 150 0 65 3 150 0 66 3 150 0 67 3 150 0 68 1 243 0 71 3 150 0 72 1 247 0 74 3 150 0 76 3 150 0 78 3 150 0 79 3 150 0 81 3 150 0 82 4 89 0 84 3 150 0 87 3 150 0 89 3 150 0 90 3 150 0 91 3 150 0 92 3 150 0 94 3 150 0 95 3 150 0 97 3 150 0 99 3 150 0 100 3 150 0 101 3 150 0 105 3 150 0 106 3 150 0 107 1 251 0 108 3 150 0 109 3 150 0 114 3 150 0 115 3 150 0 116 3 150 0 117 3 150 0 118 3 150 0 119 3 150 0 120 3 150 0 121 3 150 0 122 3 150 0 124 4 97 0 238 4 101 0 240 4 105 0 242 3 150 1 39] 
#[0 6 209 0 7] 
#[0 3 154 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 4 9 0 1 1 255 0 4 4 17 0 6 3 158 0 7 4 21 0 8 4 25 0 9 3 158 0 11 4 29 0 12 4 33 0 14 4 37 0 15 3 158 0 17 4 41 0 18 4 45 0 19 4 49 0 20 3 158 0 21 4 53 0 23 4 57 0 24 3 158 0 25 3 158 0 26 2 3 0 27 3 158 0 28 2 7 0 31 4 69 0 32 4 73 0 34 3 158 0 36 3 158 0 37 3 158 0 49 3 158 0 51 3 158 0 52 3 158 0 55 3 158 0 56 3 158 0 57 3 158 0 58 2 11 0 59 3 158 0 61 3 158 0 62 3 158 0 64 3 158 0 65 3 158 0 66 3 158 0 67 3 158 0 68 2 15 0 71 3 158 0 72 2 19 0 74 3 158 0 76 3 158 0 78 3 158 0 79 3 158 0 81 3 158 0 82 4 89 0 84 3 158 0 87 3 158 0 89 3 158 0 90 3 158 0 91 3 158 0 92 3 158 0 94 3 158 0 95 3 158 0 97 3 158 0 99 3 158 0 100 3 158 0 101 3 158 0 105 3 158 0 106 3 158 0 107 2 23 0 108 3 158 0 109 3 158 0 114 3 158 0 115 3 158 0 116 3 158 0 117 3 158 0 118 3 158 0 119 3 158 0 120 3 158 0 121 3 158 0 122 3 158 0 124 4 97 0 238 4 101 0 240 4 105 0 242 3 158 1 39] 
#[1 4 9 0 1 2 27 0 4 4 17 0 6 3 162 0 7 4 21 0 8 4 25 0 9 3 162 0 11 4 29 0 12 4 33 0 14 4 37 0 15 3 162 0 17 4 41 0 18 4 45 0 19 4 49 0 20 3 162 0 21 4 53 0 23 4 57 0 24 3 162 0 25 3 162 0 26 2 31 0 27 3 162 0 28 2 35 0 31 4 69 0 32 4 73 0 34 3 162 0 36 3 162 0 37 3 162 0 49 3 162 0 51 3 162 0 52 3 162 0 55 3 162 0 56 3 162 0 57 3 162 0 58 2 39 0 59 3 162 0 61 3 162 0 62 3 162 0 64 3 162 0 65 3 162 0 66 3 162 0 67 3 162 0 68 2 43 0 71 3 162 0 72 2 47 0 74 3 162 0 76 3 162 0 78 3 162 0 79 3 162 0 81 3 162 0 82 4 89 0 84 3 162 0 87 3 162 0 89 3 162 0 90 3 162 0 91 3 162 0 92 3 162 0 94 3 162 0 95 3 162 0 97 3 162 0 99 3 162 0 100 3 162 0 101 3 162 0 105 3 162 0 106 3 162 0 107 2 51 0 108 3 162 0 109 3 162 0 114 3 162 0 115 3 162 0 116 3 162 0 117 3 162 0 118 3 162 0 119 3 162 0 120 3 162 0 121 3 162 0 122 3 162 0 124 4 97 0 238 4 101 0 240 4 105 0 242 3 162 1 39] 
#[1 4 9 0 1 2 55 0 4 4 17 0 6 3 166 0 7 4 21 0 8 4 25 0 9 3 166 0 11 4 29 0 12 4 33 0 14 4 37 0 15 3 166 0 17 4 41 0 18 4 45 0 19 4 49 0 20 3 166 0 21 4 53 0 23 4 57 0 24 3 166 0 25 3 166 0 26 2 59 0 27 3 166 0 28 2 63 0 31 4 69 0 32 4 73 0 34 3 166 0 36 3 166 0 37 3 166 0 49 3 166 0 51 3 166 0 52 3 166 0 55 3 166 0 56 3 166 0 57 3 166 0 58 2 67 0 59 3 166 0 61 3 166 0 62 3 166 0 64 3 166 0 65 3 166 0 66 3 166 0 67 3 166 0 68 2 71 0 71 3 166 0 72 2 75 0 74 3 166 0 76 3 166 0 78 3 166 0 79 3 166 0 81 3 166 0 82 4 89 0 84 3 166 0 87 3 166 0 89 3 166 0 90 3 166 0 91 3 166 0 92 3 166 0 94 3 166 0 95 3 166 0 97 3 166 0 99 3 166 0 100 3 166 0 101 3 166 0 105 3 166 0 106 3 166 0 107 2 79 0 108 3 166 0 109 3 166 0 114 3 166 0 115 3 166 0 116 3 166 0 117 3 166 0 118 3 166 0 119 3 166 0 120 3 166 0 121 3 166 0 122 3 166 0 124 4 97 0 238 4 101 0 240 4 105 0 242 3 166 1 39] 
#[0 3 170 0 14 0 121 0 122 0 124] 
#[0 3 174 0 57 0 124] 
#[1 1 41 0 119 6 213 0 137] 
#[1 1 41 0 119 6 217 0 137] 
#[0 3 178 0 9 0 11 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 49 0 14 6 221 0 39 6 221 0 41 6 221 0 44 6 221 0 48 6 221 0 53 6 221 0 70 6 221 0 75 6 221 0 80 6 221 0 93 6 221 0 96 5 221 0 103 0 53 0 121 0 57 0 122 5 225 0 142 5 225 0 143 5 225 0 144 5 225 0 145 5 225 0 146 6 221 0 166 6 221 0 168 6 221 0 169] 
#[0 3 182 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 186 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 190 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 194 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 198 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 202 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 206 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 210 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 214 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 218 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 222 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 3 226 0 6 3 226 0 7 3 226 0 8 3 226 0 9 3 226 0 11 3 226 0 12 0 129 0 14 3 226 0 21 3 226 0 25 3 226 0 26 3 226 0 28 3 226 0 36 3 226 0 49 3 226 0 51 3 226 0 52 3 226 0 55 3 226 0 56 3 226 0 57 3 226 0 58 3 226 0 61 3 226 0 62 3 226 0 64 3 226 0 65 3 226 0 66 3 226 0 67 3 226 0 68 3 226 0 72 3 226 0 76 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 87 3 226 0 89 3 226 0 90 3 226 0 91 3 226 0 92 3 226 0 94 3 226 0 97 3 226 0 101 3 226 0 105 3 226 0 106 3 226 0 107 3 226 0 109 3 226 0 114 3 226 0 115 3 226 0 116 3 226 0 117 3 226 0 118 3 226 0 119 3 226 0 120 3 226 0 121 3 226 0 122 3 226 0 124 3 226 1 39] 
#[0 3 230 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 3 234 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 6 225 0 6 3 238 0 7 3 238 0 8 3 238 0 9 3 238 0 11 3 238 0 12 3 238 0 14 3 238 0 21 3 238 0 25 3 238 0 26 3 238 0 28 3 238 0 36 3 238 0 49 3 238 0 51 3 238 0 52 3 238 0 55 3 238 0 56 3 238 0 57 3 238 0 58 3 238 0 61 3 238 0 62 3 238 0 64 3 238 0 65 3 238 0 66 3 238 0 67 3 238 0 68 3 238 0 72 3 238 0 76 3 238 0 78 3 238 0 79 3 238 0 81 3 238 0 87 3 238 0 89 3 238 0 90 3 238 0 91 3 238 0 92 3 238 0 94 3 238 0 97 3 238 0 101 3 238 0 105 3 238 0 106 3 238 0 107 3 238 0 109 3 238 0 114 3 238 0 115 3 238 0 116 3 238 0 117 3 238 0 118 3 238 0 119 3 238 0 120 3 238 0 121 3 238 0 122 3 238 0 124 3 238 1 39] 
#[1 0 49 0 14 3 17 0 29 0 53 0 121 0 57 0 122 3 21 0 142 3 21 0 143 3 21 0 144 3 21 0 145 3 21 0 146 6 229 0 205] 
#[0 3 242 0 9 0 11 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 6 233 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 6 0 76 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 119 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 6 237 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 6 241 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[0 3 246 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 6 245 0 76] 
#[1 6 249 0 76 0 101 0 116 0 137 0 124 6 253 0 132] 
#[1 0 49 0 14 7 1 0 57 0 53 0 121 0 57 0 122 0 137 0 124 7 5 0 142 7 5 0 143 7 5 0 144 7 5 0 145 7 5 0 146 7 9 0 185] 
#[0 3 250 0 14 0 57 0 121 0 122 0 124] 
#[0 3 254 0 9 0 12 0 14 0 25 0 26 0 28 0 35 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 49 0 14 5 29 0 40 7 21 0 42 7 13 0 85 0 53 0 121 0 57 0 122 7 17 0 142 7 17 0 143 7 17 0 144 7 17 0 145 7 17 0 146 7 21 0 186] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 7 25 0 142 7 25 0 143 7 25 0 144 7 25 0 145 7 25 0 146] 
#[1 4 2 0 7 4 2 0 11 0 129 0 14 7 29 0 21 4 141 0 35 7 33 0 170 7 33 0 173 7 33 0 174 7 37 0 191 7 41 0 192] 
#[1 0 49 0 14 7 45 0 85 0 53 0 121 0 57 0 122 7 49 0 142 7 49 0 143 7 49 0 144 7 49 0 145 7 49 0 146] 
#[1 4 6 0 7 4 6 0 11 7 53 0 189] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 7 57 0 131 7 57 0 132 7 57 0 133 7 57 0 134 7 57 0 135 7 57 0 136 7 57 0 137 7 57 0 138 7 57 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 7 57 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 4 61 0 27 4 65 0 31 4 69 0 32 4 73 0 34 4 77 0 59 4 81 0 71 4 85 0 74 4 89 0 84 7 61 0 100 4 93 0 108 4 97 0 238 4 101 0 240 4 105 0 242] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 7 65 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 7 69 0 130] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 6 0 55 0 6 0 56 0 6 0 57 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 7 73 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 7 77 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 2 83 0 1 2 83 0 4 2 83 0 6 4 10 0 7 2 83 0 8 2 83 0 9 4 10 0 11 2 83 0 12 2 83 0 14 2 83 0 15 4 10 0 17 2 83 0 18 2 83 0 19 2 83 0 20 4 10 0 21 2 83 0 23 2 83 0 24 4 10 0 25 4 10 0 26 2 83 0 27 4 10 0 28 2 83 0 31 2 83 0 32 2 83 0 34 4 10 0 36 4 10 0 37 4 10 0 49 4 10 0 51 4 10 0 52 4 10 0 55 4 10 0 56 4 10 0 57 4 10 0 58 2 83 0 59 4 10 0 61 4 10 0 62 4 10 0 64 4 10 0 65 4 10 0 66 4 10 0 67 4 10 0 68 2 83 0 71 4 10 0 72 2 83 0 74 4 10 0 76 4 10 0 78 4 10 0 79 4 10 0 81 4 10 0 82 2 83 0 84 4 10 0 87 4 10 0 89 4 10 0 90 4 10 0 91 4 10 0 92 4 10 0 94 4 10 0 95 4 10 0 97 4 10 0 99 4 10 0 100 4 10 0 101 4 10 0 105 4 10 0 106 4 10 0 107 2 83 0 108 4 10 0 109 4 10 0 114 4 10 0 115 4 10 0 116 4 10 0 117 4 10 0 118 4 10 0 119 4 10 0 120 4 10 0 121 4 10 0 122 4 10 0 124 4 10 1 39] 
#[0 4 14 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 4 18 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 7 81 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 0 49 0 14 7 85 0 57 0 53 0 121 0 57 0 122 0 137 0 124 7 89 0 142 7 89 0 143 7 89 0 144 7 89 0 145 7 89 0 146 7 93 0 180] 
#[0 4 22 0 14 0 57 0 121 0 122 0 124] 
#[1 7 97 0 105 0 101 0 116 0 137 0 124 7 101 0 132] 
#[1 0 6 0 105 0 6 0 116 0 6 0 124 7 105 0 130] 
#[1 7 109 0 57 0 101 0 116 0 137 0 124 7 113 0 132] 
#[1 0 6 0 57 0 6 0 116 0 6 0 124 7 117 0 130] 
#[0 4 26 0 12 0 111 0 113] 
#[1 7 121 0 12 7 125 0 113] 
#[0 4 30 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 4 9 0 1 2 87 0 4 4 17 0 6 4 34 0 7 4 21 0 8 4 25 0 9 4 34 0 11 4 29 0 12 4 33 0 14 4 37 0 15 4 34 0 17 4 41 0 18 4 45 0 19 4 49 0 20 4 34 0 21 4 53 0 23 4 57 0 24 4 34 0 25 4 34 0 26 2 91 0 27 4 34 0 28 2 95 0 31 4 69 0 32 4 73 0 34 4 34 0 36 4 34 0 37 4 34 0 49 4 34 0 51 4 34 0 52 4 34 0 55 4 34 0 56 4 34 0 57 4 34 0 58 2 99 0 59 4 34 0 61 4 34 0 62 4 34 0 64 4 34 0 65 4 34 0 66 4 34 0 67 4 34 0 68 2 103 0 71 4 34 0 72 2 107 0 74 4 34 0 76 4 34 0 78 4 34 0 79 4 34 0 81 4 34 0 82 4 89 0 84 4 34 0 87 4 34 0 89 4 34 0 90 4 34 0 91 4 34 0 92 4 34 0 94 4 34 0 95 4 34 0 97 4 34 0 99 4 34 0 100 4 34 0 101 4 34 0 105 4 34 0 106 4 34 0 107 2 111 0 108 4 34 0 109 4 34 0 114 4 34 0 115 4 34 0 116 4 34 0 117 4 34 0 118 4 34 0 119 4 34 0 120 4 34 0 121 4 34 0 122 4 34 0 124 4 97 0 238 4 101 0 240 4 105 0 242 4 34 1 39] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 7 129 0 131 7 129 0 132 7 129 0 133 7 129 0 134 7 129 0 135 7 129 0 136 7 129 0 137 7 129 0 138 7 129 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 7 129 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 4 9 0 1 2 115 0 4 4 17 0 6 4 38 0 7 4 21 0 8 4 25 0 9 4 38 0 11 4 29 0 12 4 33 0 14 4 37 0 15 4 38 0 17 4 41 0 18 4 45 0 19 4 49 0 20 4 38 0 21 4 53 0 23 4 57 0 24 4 38 0 25 4 38 0 26 2 119 0 27 4 38 0 28 2 123 0 31 4 69 0 32 4 73 0 34 4 38 0 36 4 38 0 37 4 38 0 49 4 38 0 51 4 38 0 52 4 38 0 55 4 38 0 56 4 38 0 57 4 38 0 58 2 127 0 59 4 38 0 61 4 38 0 62 4 38 0 64 4 38 0 65 4 38 0 66 4 38 0 67 4 38 0 68 2 131 0 71 4 38 0 72 2 135 0 74 4 38 0 76 4 38 0 78 4 38 0 79 4 38 0 81 4 38 0 82 4 89 0 84 4 38 0 87 4 38 0 89 4 38 0 90 4 38 0 91 4 38 0 92 4 38 0 94 4 38 0 95 4 38 0 97 4 38 0 99 4 38 0 100 4 38 0 101 4 38 0 105 4 38 0 106 4 38 0 107 2 139 0 108 4 38 0 109 4 38 0 114 4 38 0 115 4 38 0 116 4 38 0 117 4 38 0 118 4 38 0 119 4 38 0 120 4 38 0 121 4 38 0 122 4 38 0 124 4 97 0 238 4 101 0 240 4 105 0 242 4 38 1 39] 
#[0 4 42 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 4 46 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 40 0 42 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 85 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 4 50 0 1 4 50 0 4 4 50 0 6 4 50 0 7 4 50 0 8 4 50 0 9 6 141 0 11 4 50 0 12 4 50 0 14 4 50 0 15 2 143 0 17 4 50 0 18 4 50 0 19 4 50 0 20 4 50 0 21 4 50 0 23 4 50 0 24 4 50 0 25 4 50 0 26 4 50 0 27 4 50 0 28 4 50 0 31 4 50 0 32 4 50 0 34 4 50 0 36 4 50 0 37 4 50 0 49 4 50 0 51 4 50 0 52 4 50 0 55 4 50 0 56 4 50 0 57 4 50 0 58 4 50 0 59 4 50 0 61 4 50 0 62 4 50 0 64 4 50 0 65 4 50 0 66 4 50 0 67 4 50 0 68 4 50 0 71 4 50 0 72 4 50 0 74 4 50 0 76 4 50 0 78 4 50 0 79 4 50 0 81 4 50 0 82 4 50 0 84 4 50 0 87 4 50 0 89 4 50 0 90 4 50 0 91 4 50 0 92 4 50 0 94 4 50 0 95 4 50 0 97 4 50 0 99 4 50 0 100 4 50 0 101 4 50 0 105 4 50 0 106 4 50 0 107 4 50 0 108 4 50 0 109 4 50 0 114 4 50 0 115 4 50 0 116 4 50 0 117 4 50 0 118 4 50 0 119 4 50 0 120 4 50 0 121 4 50 0 122 4 50 0 124 6 149 0 228 4 50 1 39] 
#[1 4 54 0 1 4 54 0 4 4 54 0 6 4 54 0 7 4 54 0 8 0 169 0 9 4 54 0 11 0 173 0 12 0 49 0 14 4 54 0 15 4 54 0 17 4 54 0 18 4 54 0 19 4 54 0 20 4 54 0 21 4 54 0 23 4 54 0 24 2 147 0 25 2 151 0 26 4 54 0 27 2 155 0 28 4 54 0 31 4 54 0 32 4 54 0 34 4 54 0 36 4 54 0 37 5 29 0 40 5 41 0 42 4 54 0 49 4 54 0 51 4 54 0 52 4 54 0 55 4 54 0 56 4 54 0 57 4 54 0 58 4 54 0 59 4 54 0 61 4 54 0 62 4 54 0 64 4 54 0 65 4 54 0 66 4 54 0 67 4 54 0 68 4 54 0 71 2 159 0 72 4 54 0 74 4 54 0 76 4 54 0 78 2 163 0 79 4 54 0 81 4 54 0 82 4 54 0 84 5 37 0 85 4 54 0 87 4 54 0 89 4 54 0 90 4 54 0 91 4 54 0 92 4 54 0 94 4 54 0 95 4 54 0 97 4 54 0 99 4 54 0 100 4 54 0 101 4 54 0 105 4 54 0 106 4 54 0 107 4 54 0 108 2 167 0 109 2 171 0 114 2 175 0 115 2 179 0 116 2 183 0 117 2 187 0 118 2 191 0 119 2 195 0 120 2 199 0 121 2 203 0 122 4 54 0 124 5 45 0 131 5 45 0 132 5 45 0 133 5 45 0 134 5 45 0 135 5 45 0 136 5 45 0 137 5 45 0 138 5 45 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 5 41 0 186 2 229 0 214 2 229 0 218 5 45 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 7 133 0 224 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250 4 54 1 39] 
#[1 4 58 0 1 4 58 0 4 4 58 0 6 4 58 0 7 4 58 0 8 0 169 0 9 4 58 0 11 0 173 0 12 0 49 0 14 4 58 0 15 4 58 0 17 4 58 0 18 4 58 0 19 4 58 0 20 4 58 0 21 4 58 0 23 4 58 0 24 2 207 0 25 2 211 0 26 4 58 0 27 2 215 0 28 4 58 0 31 4 58 0 32 4 58 0 34 4 58 0 36 4 58 0 37 5 29 0 40 5 41 0 42 4 58 0 49 4 58 0 51 4 58 0 52 4 58 0 55 4 58 0 56 4 58 0 57 4 58 0 58 4 58 0 59 4 58 0 61 4 58 0 62 4 58 0 64 4 58 0 65 4 58 0 66 4 58 0 67 4 58 0 68 4 58 0 71 2 219 0 72 4 58 0 74 4 58 0 76 4 58 0 78 2 223 0 79 4 58 0 81 4 58 0 82 4 58 0 84 5 37 0 85 4 58 0 87 4 58 0 89 4 58 0 90 4 58 0 91 4 58 0 92 4 58 0 94 4 58 0 95 4 58 0 97 4 58 0 99 4 58 0 100 4 58 0 101 4 58 0 105 4 58 0 106 4 58 0 107 4 58 0 108 2 227 0 109 2 231 0 114 2 235 0 115 2 239 0 116 2 243 0 117 2 247 0 118 2 251 0 119 2 255 0 120 3 3 0 121 3 7 0 122 4 58 0 124 5 45 0 131 5 45 0 132 5 45 0 133 5 45 0 134 5 45 0 135 5 45 0 136 5 45 0 137 5 45 0 138 5 45 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 5 41 0 186 2 229 0 214 2 229 0 218 5 45 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 7 137 0 224 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250 4 58 1 39] 
#[0 4 62 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 4 66 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 7 141 0 131 7 141 0 132 7 141 0 133 7 141 0 134 7 141 0 135 7 141 0 136 7 141 0 137 7 141 0 138 7 141 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 7 141 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 129 0 14 7 145 0 73] 
#[1 0 129 0 14 7 149 0 73] 
#[1 0 6 0 14 0 6 0 57 0 6 0 121 0 6 0 122 0 6 0 124 7 153 0 130 6 17 0 183] 
#[0 4 70 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 4 141 0 35 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 7 157 0 130 7 161 0 170 7 161 0 173 7 161 0 174] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 7 165 0 130] 
#[1 0 6 0 14 0 6 0 57 0 6 0 121 0 6 0 122 0 6 0 124 7 169 0 130 6 85 0 178] 
#[1 4 181 0 6 0 129 0 14 7 173 0 187] 
#[1 4 181 0 6 0 129 0 14 7 177 0 187] 
#[0 4 74 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 79 0 81 0 87 0 89 0 90 0 91 0 94 0 97 0 101 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 4 141 0 35 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 7 181 0 130 7 185 0 170 7 185 0 173 7 185 0 174] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 7 189 0 130] 
#[0 4 78 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 4 181 0 6 7 193 0 33 7 197 0 187] 
#[1 4 181 0 6 7 201 0 33 7 205 0 187] 
#[1 7 209 0 6 4 82 0 7 4 82 0 8 4 82 0 9 4 82 0 11 4 82 0 12 4 82 0 14 4 82 0 21 4 82 0 25 4 82 0 26 4 82 0 28 4 82 0 36 4 82 0 49 4 82 0 51 4 82 0 52 4 82 0 55 4 82 0 56 4 82 0 57 4 82 0 58 4 82 0 61 4 82 0 62 4 82 0 64 4 82 0 65 4 82 0 66 4 82 0 67 4 82 0 68 4 82 0 72 4 82 0 76 4 82 0 78 4 82 0 79 4 82 0 81 4 82 0 87 4 82 0 89 4 82 0 90 4 82 0 91 4 82 0 92 4 82 0 94 4 82 0 97 4 82 0 101 4 82 0 105 4 82 0 106 4 82 0 107 4 82 0 109 4 82 0 114 4 82 0 115 4 82 0 116 4 82 0 117 4 82 0 118 4 82 0 119 4 82 0 120 4 82 0 121 4 82 0 122 4 82 0 124 4 82 1 39] 
#[1 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 7 213 0 131 7 213 0 132 7 213 0 133 7 213 0 134 7 213 0 135 7 213 0 136 7 213 0 137 7 213 0 138 7 213 0 139] 
#[0 4 86 0 9 0 11 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 6 0 76 0 6 0 116 0 6 0 124 7 217 0 130] 
#[1 7 221 0 76 0 101 0 116 0 137 0 124 7 225 0 132] 
#[1 0 6 0 76 0 6 0 116 0 6 0 124 7 229 0 130] 
#[0 4 90 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 4 94 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 7 233 0 76] 
#[0 7 237 0 58] 
#[1 0 129 0 14 7 241 0 21 4 98 0 57 4 98 0 121 4 98 0 122 4 98 0 124] 
#[0 4 102 0 14 0 57 0 121 0 122 0 124] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 7 245 0 142 7 245 0 143 7 245 0 144 7 245 0 145 7 245 0 146] 
#[1 4 2 0 7 4 2 0 11 0 129 0 14 7 29 0 21 4 141 0 35 7 249 0 170 7 249 0 173 7 249 0 174 7 37 0 191 7 253 0 192] 
#[1 0 49 0 14 8 1 0 85 0 53 0 121 0 57 0 122 8 5 0 142 8 5 0 143 8 5 0 144 8 5 0 145 8 5 0 146] 
#[1 4 2 0 7 4 2 0 11 0 129 0 14 7 29 0 21 4 141 0 35 8 9 0 170 8 9 0 173 8 9 0 174 7 37 0 191 8 13 0 192] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 8 17 0 131 8 17 0 132 8 17 0 133 8 17 0 134 8 17 0 135 8 17 0 136 8 17 0 137 8 17 0 138 8 17 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 8 17 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 4 2 0 7 4 2 0 11 7 29 0 21 7 37 0 191 8 21 0 192] 
#[0 4 106 0 7 0 11] 
#[0 4 110 0 7 0 11] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 8 25 0 142 8 25 0 143 8 25 0 144 8 25 0 145 8 25 0 146] 
#[1 4 2 0 7 4 2 0 11 0 129 0 14 7 29 0 21 4 141 0 35 8 29 0 170 8 29 0 173 8 29 0 174 7 37 0 191 8 33 0 192] 
#[1 8 37 0 7 8 41 0 11 8 45 0 188] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 0 6 0 25 0 6 0 26 4 61 0 27 0 6 0 28 4 65 0 31 4 69 0 32 4 73 0 34 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 4 77 0 59 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 4 81 0 71 0 6 0 72 4 85 0 74 0 6 0 78 0 6 0 79 0 6 0 81 4 89 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 4 93 0 108 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 8 49 0 130 4 97 0 238 4 101 0 240 4 105 0 242] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 8 53 0 131 8 53 0 132 8 53 0 133 8 53 0 134 8 53 0 135 8 53 0 136 8 53 0 137 8 53 0 138 8 53 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 8 53 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[0 8 57 0 57] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 8 61 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 8 65 0 55 8 69 0 56 8 73 0 57 0 137 0 124 8 77 1 10 8 81 1 11 8 77 1 12] 
#[1 0 6 0 55 0 6 0 56 0 6 0 57 0 6 0 124 8 89 0 130] 
#[0 8 93 0 57] 
#[0 8 97 0 101] 
#[1 0 129 0 14 4 141 0 35 8 101 0 170 8 101 0 173 8 101 0 174] 
#[0 4 114 0 14 0 57 0 121 0 122 0 124] 
#[0 4 118 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 8 105 0 105] 
#[1 8 109 0 105 0 101 0 116 0 137 0 124 8 113 0 132] 
#[0 8 117 0 107] 
#[0 8 121 0 57] 
#[1 8 125 0 57 0 101 0 116 0 137 0 124 8 129 0 132] 
#[1 6 105 0 113 8 133 0 141] 
#[0 4 122 0 12 0 111 0 113] 
#[1 4 9 0 1 3 11 0 4 4 17 0 6 4 126 0 7 4 21 0 8 4 25 0 9 4 126 0 11 4 29 0 12 4 33 0 14 4 37 0 15 4 126 0 17 4 41 0 18 4 45 0 19 4 49 0 20 4 126 0 21 4 53 0 23 4 57 0 24 4 126 0 25 4 126 0 26 3 15 0 27 4 126 0 28 3 19 0 31 4 69 0 32 4 73 0 34 4 126 0 36 4 126 0 37 4 126 0 49 4 126 0 51 4 126 0 52 4 126 0 55 4 126 0 56 4 126 0 57 4 126 0 58 3 23 0 59 4 126 0 61 4 126 0 62 4 126 0 64 4 126 0 65 4 126 0 66 4 126 0 67 4 126 0 68 3 27 0 71 4 126 0 72 3 31 0 74 4 126 0 76 4 126 0 78 4 126 0 79 4 126 0 81 4 126 0 82 4 89 0 84 4 126 0 87 4 126 0 89 4 126 0 90 4 126 0 91 4 126 0 92 4 126 0 94 4 126 0 95 4 126 0 97 4 126 0 99 4 126 0 100 4 126 0 101 4 126 0 105 4 126 0 106 4 126 0 107 3 35 0 108 4 126 0 109 4 126 0 114 4 126 0 115 4 126 0 116 4 126 0 117 4 126 0 118 4 126 0 119 4 126 0 120 4 126 0 121 4 126 0 122 4 126 0 124 4 97 0 238 4 101 0 240 4 105 0 242 4 126 1 39] 
#[0 4 130 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 4 134 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 4 138 0 25 4 138 0 26 4 61 0 27 4 138 0 28 4 65 0 31 4 69 0 32 4 73 0 34 4 138 0 36 4 138 0 49 4 138 0 51 4 138 0 52 4 138 0 55 4 138 0 56 4 138 0 57 4 138 0 58 4 77 0 59 4 138 0 61 4 138 0 62 4 138 0 64 4 138 0 65 4 138 0 66 4 138 0 67 4 138 0 68 4 81 0 71 4 138 0 72 4 85 0 74 4 138 0 76 4 138 0 78 4 138 0 79 4 138 0 81 4 89 0 84 4 138 0 87 4 138 0 89 4 138 0 90 4 138 0 91 4 138 0 92 4 138 0 94 4 138 0 97 4 138 0 101 4 138 0 105 4 138 0 106 4 138 0 107 4 93 0 108 4 138 0 109 4 138 0 114 4 138 0 115 4 138 0 116 4 138 0 117 4 138 0 118 4 138 0 119 4 138 0 120 4 138 0 121 4 138 0 122 4 138 0 124 4 97 0 238 4 101 0 240 4 105 0 242 4 138 1 39] 
#[1 1 41 0 119 8 137 0 137] 
#[1 1 41 0 119 8 141 0 137] 
#[1 0 49 0 14 8 145 0 57 0 53 0 121 0 57 0 122 0 137 0 124 7 5 0 142 7 5 0 143 7 5 0 144 7 5 0 145 7 5 0 146 7 9 0 185] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 8 149 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 8 153 0 130] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 8 157 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 0 49 0 14 8 161 0 57 0 53 0 121 0 57 0 122 0 137 0 124 7 89 0 142 7 89 0 143 7 89 0 144 7 89 0 145 7 89 0 146 7 93 0 180] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 4 141 0 35 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 8 165 0 130 8 169 0 170 8 169 0 173 8 169 0 174] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 8 173 0 130] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 8 177 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 8 181 0 130] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 8 185 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 1 41 0 119 8 189 0 137] 
#[1 4 141 0 35 8 193 0 170 8 193 0 173 8 193 0 174] 
#[1 1 41 0 119 8 197 0 137] 
#[0 4 142 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 8 201 0 131 8 201 0 132 8 201 0 133 8 201 0 134 8 201 0 135 8 201 0 136 8 201 0 137 8 201 0 138 8 201 0 139] 
#[1 4 146 0 7 4 146 0 11 8 205 0 172] 
#[1 8 209 0 76 0 101 0 116 0 137 0 124 8 213 0 132] 
#[0 4 150 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 8 217 0 76] 
#[1 8 221 0 76 0 101 0 116 0 137 0 124 8 225 0 132] 
#[0 4 154 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 4 158 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 8 229 0 131 8 229 0 132 8 229 0 133 8 229 0 134 8 229 0 135 8 229 0 136 8 229 0 137 8 229 0 138 8 229 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 8 229 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 4 2 0 7 4 2 0 11 0 129 0 14 7 29 0 21 4 141 0 35 8 233 0 170 8 233 0 173 8 233 0 174 7 37 0 191 8 237 0 192] 
#[1 4 2 0 7 4 2 0 11 7 29 0 21 7 37 0 191 8 241 0 192] 
#[0 4 162 0 7 0 11] 
#[1 0 49 0 14 0 53 0 121 0 57 0 122 8 245 0 142 8 245 0 143 8 245 0 144 8 245 0 145 8 245 0 146] 
#[1 4 2 0 7 4 2 0 11 0 129 0 14 7 29 0 21 4 141 0 35 8 249 0 170 8 249 0 173 8 249 0 174 7 37 0 191 8 253 0 192] 
#[1 4 2 0 7 4 2 0 11 7 29 0 21 7 37 0 191 9 1 0 192] 
#[0 4 166 0 7 0 11] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 170 0 7 4 21 0 8 4 25 0 9 4 170 0 11 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 4 61 0 27 4 65 0 31 4 69 0 32 4 73 0 34 4 77 0 59 4 81 0 71 4 85 0 74 4 89 0 84 4 93 0 108 4 97 0 238 4 101 0 240 4 105 0 242] 
#[0 4 174 0 7 0 11] 
#[1 4 2 0 7 4 2 0 11 0 129 0 14 7 29 0 21 4 141 0 35 9 5 0 170 9 5 0 173 9 5 0 174 7 37 0 191 9 9 0 192] 
#[1 4 2 0 7 4 2 0 11 7 29 0 21 7 37 0 191 9 13 0 192] 
#[0 4 178 0 7 0 11] 
#[0 4 182 0 9 0 12 0 14 0 25 0 26 0 28 0 35 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 49 0 14 5 29 0 40 6 37 0 42 6 25 0 83 6 29 0 85 0 53 0 121 0 57 0 122 6 33 0 142 6 33 0 143 6 33 0 144 6 33 0 145 6 33 0 146 6 37 0 186 9 17 0 190] 
#[0 4 186 0 7 0 11] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 6 0 78 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 119 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 9 21 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 9 25 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 0 6 0 25 0 6 0 26 4 61 0 27 0 6 0 28 4 65 0 31 4 69 0 32 4 73 0 34 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 4 77 0 59 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 4 81 0 71 0 6 0 72 4 85 0 74 0 6 0 78 0 6 0 79 0 6 0 81 4 89 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 9 29 0 95 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 4 93 0 108 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 9 33 0 130 4 97 0 238 4 101 0 240 4 105 0 242] 
#[0 9 37 0 65] 
#[0 9 41 0 57] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 57 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 9 45 0 130] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 9 49 0 131 9 49 0 132 9 49 0 133 9 49 0 134 9 49 0 135 9 49 0 136 9 49 0 137 9 49 0 138 9 49 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 9 49 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[0 9 53 0 68] 
#[0 4 190 0 55 0 56] 
#[1 9 57 0 55 8 69 0 56 9 61 1 10 9 61 1 12] 
#[0 4 194 0 55 0 56] 
#[1 9 65 0 55 8 69 0 56 9 69 0 57 0 137 0 124 8 77 1 10 9 73 1 11 8 77 1 12] 
#[0 9 77 0 97] 
#[0 4 198 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 9 81 0 8 4 202 0 14 4 202 0 57 4 202 0 121 4 202 0 122 4 202 0 124] 
#[0 4 206 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 4 210 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 9 85 0 105] 
#[0 4 214 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 9 89 0 107] 
#[0 9 93 0 107] 
#[0 9 97 0 57] 
#[1 9 101 0 12 7 125 0 113] 
#[1 4 181 0 6 9 105 0 33 9 109 0 187] 
#[1 4 181 0 6 9 113 0 33 9 117 0 187] 
#[0 9 121 0 58] 
#[0 9 125 0 57] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 9 129 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[0 9 133 0 57] 
#[0 9 137 0 101] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 9 141 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 9 145 0 130] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 9 149 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[0 9 153 0 57] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 9 157 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[0 9 161 0 57] 
#[1 4 181 0 6 9 165 0 187] 
#[0 4 218 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 4 181 0 6 9 169 0 187] 
#[1 4 146 0 7 4 146 0 11 9 173 0 172] 
#[1 9 177 0 7 9 181 0 11 9 185 0 171] 
#[0 4 222 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 9 189 0 76] 
#[0 4 226 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 4 230 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 9 193 0 76] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 4 61 0 27 4 65 0 31 4 69 0 32 4 73 0 34 4 234 0 57 4 77 0 59 4 81 0 71 4 85 0 74 4 89 0 84 4 93 0 108 4 234 0 121 4 234 0 122 4 234 0 124 4 97 0 238 4 101 0 240 4 105 0 242] 
#[1 4 2 0 7 4 2 0 11 7 29 0 21 7 37 0 191 9 197 0 192] 
#[0 4 238 0 7 0 11] 
#[0 4 242 0 7 0 11] 
#[1 4 2 0 7 4 2 0 11 0 129 0 14 7 29 0 21 4 141 0 35 9 201 0 170 9 201 0 173 9 201 0 174 7 37 0 191 9 205 0 192] 
#[1 4 2 0 7 4 2 0 11 7 29 0 21 7 37 0 191 9 209 0 192] 
#[0 4 246 0 7 0 11] 
#[0 4 250 0 7 0 11] 
#[1 4 2 0 7 4 2 0 11 7 29 0 21 7 37 0 191 9 213 0 192] 
#[0 4 254 0 7 0 11] 
#[0 5 2 0 7 0 11] 
#[0 5 6 0 7 0 11] 
#[1 9 217 0 78 0 101 0 116 0 137 0 124 9 221 0 132] 
#[1 0 6 0 78 0 6 0 116 0 6 0 124 9 225 0 130] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 233 0 72 0 237 0 79 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 9 229 0 131 9 229 0 132 9 229 0 133 9 229 0 134 9 229 0 135 9 229 0 136 9 229 0 137 9 229 0 138 9 229 0 139 2 225 0 142 2 225 0 143 2 225 0 144 2 225 0 145 2 225 0 146 2 229 0 214 2 229 0 218 9 229 0 219 2 229 0 220 2 229 0 221 2 229 0 222 2 229 0 223 2 229 0 230 2 229 0 231 2 229 0 232 2 229 0 233 2 229 0 234 2 229 0 235 2 229 0 236 2 229 0 237 2 229 0 239 2 229 0 241 2 229 0 243 2 229 0 244 2 229 0 245 2 229 0 246 2 229 0 247 2 229 0 248 2 229 0 249 2 229 0 250] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 6 0 78 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 119 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 9 233 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 9 237 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[0 5 10 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 9 241 0 65] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 6 0 57 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 9 245 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 9 249 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 4 61 0 27 4 65 0 31 4 69 0 32 4 73 0 34 4 77 0 59 4 81 0 71 4 85 0 74 4 89 0 84 9 253 0 99 4 93 0 108 4 97 0 238 4 101 0 240 4 105 0 242] 
#[0 5 14 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 57 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 10 1 0 130] 
#[0 5 18 0 55 0 56] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 57 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 10 5 0 130] 
#[0 10 9 0 68] 
#[1 10 13 0 55 8 69 0 56 9 61 1 10 9 61 1 12] 
#[0 5 22 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 101 0 116 10 17 0 132] 
#[0 5 26 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 30 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 34 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 10 21 0 107] 
#[1 6 105 0 113 10 25 0 141] 
#[1 1 41 0 119 10 29 0 137] 
#[1 4 141 0 35 10 33 0 170 10 33 0 173 10 33 0 174] 
#[1 1 41 0 119 10 37 0 137] 
#[0 5 38 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 42 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 10 41 0 65] 
#[0 10 45 0 57] 
#[0 10 49 0 97] 
#[0 5 46 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 10 53 0 57] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 137 0 124 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 10 57 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[0 10 61 0 57] 
#[0 10 65 0 65] 
#[0 10 69 0 57] 
#[0 10 73 0 97] 
#[1 4 141 0 35 10 77 0 170 10 77 0 173 10 77 0 174] 
#[0 5 50 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 10 81 0 7 9 181 0 11 9 185 0 171] 
#[0 5 54 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 10 85 0 131 10 85 0 132 10 85 0 133 10 85 0 134 10 85 0 135 10 85 0 136 10 85 0 137 10 85 0 138 10 85 0 139] 
#[0 5 58 0 7 0 11] 
#[0 5 62 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 66 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 70 0 7 0 11] 
#[1 4 2 0 7 4 2 0 11 7 29 0 21 7 37 0 191 10 89 0 192] 
#[0 5 74 0 7 0 11] 
#[0 5 78 0 7 0 11] 
#[0 5 82 0 7 0 11] 
#[1 5 86 0 9 5 86 0 12 0 49 0 14 5 86 0 25 5 86 0 26 5 86 0 28 5 86 0 36 5 86 0 49 5 86 0 51 5 86 0 52 5 86 0 55 5 86 0 56 5 86 0 57 5 86 0 58 5 86 0 61 5 86 0 62 5 86 0 64 5 86 0 65 5 86 0 66 5 86 0 67 5 86 0 68 5 86 0 72 5 86 0 76 5 86 0 78 5 86 0 79 5 86 0 81 5 86 0 87 5 86 0 89 5 86 0 90 5 86 0 91 5 86 0 92 5 86 0 94 5 86 0 97 5 86 0 101 5 86 0 105 5 86 0 106 5 86 0 107 5 86 0 109 5 86 0 114 5 86 0 115 5 86 0 116 5 86 0 117 5 86 0 118 5 86 0 119 5 86 0 120 3 39 0 121 3 43 0 122 5 86 0 124 10 93 0 142 10 93 0 143 10 93 0 144 10 93 0 145 10 93 0 146 5 86 1 39] 
#[0 10 97 0 78] 
#[1 10 101 0 78 0 101 0 116 0 137 0 124 10 105 0 132] 
#[1 4 9 0 1 4 13 0 4 4 17 0 6 4 21 0 8 4 25 0 9 4 29 0 12 4 33 0 14 4 37 0 15 4 41 0 18 4 45 0 19 4 49 0 20 4 53 0 23 4 57 0 24 0 6 0 25 0 6 0 26 4 61 0 27 0 6 0 28 4 65 0 31 4 69 0 32 4 73 0 34 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 58 4 77 0 59 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 4 81 0 71 0 6 0 72 4 85 0 74 0 6 0 78 0 6 0 79 0 6 0 81 4 89 0 84 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 4 93 0 108 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 10 109 0 130 4 97 0 238 4 101 0 240 4 105 0 242] 
#[1 10 113 0 78 0 101 0 116 0 137 0 124 10 117 0 132] 
#[1 0 6 0 78 0 6 0 116 0 6 0 124 10 121 0 130] 
#[0 5 90 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 10 125 0 57 0 137 0 124] 
#[1 0 6 0 57 0 6 0 124 10 129 0 130] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 10 133 0 130] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 6 0 57 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 10 137 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 10 141 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 6 0 57 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 10 145 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 10 149 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[0 5 94 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 0 6 0 9 0 6 0 12 0 6 0 14 0 6 0 25 0 6 0 26 0 6 0 28 0 6 0 36 0 6 0 49 0 6 0 51 0 6 0 52 0 6 0 57 0 6 0 58 0 6 0 61 0 6 0 62 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 72 0 6 0 79 0 6 0 81 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 97 0 6 0 101 0 6 0 106 0 6 0 107 0 6 0 109 0 6 0 114 0 6 0 115 0 6 0 116 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 124 10 153 0 130] 
#[0 5 98 0 14 0 57 0 121 0 122 0 124] 
#[0 5 102 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 10 157 0 12 7 125 0 113] 
#[1 4 181 0 6 10 161 0 187] 
#[0 5 106 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 4 181 0 6 10 165 0 187] 
#[0 5 110 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 10 169 0 65] 
#[0 5 114 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 10 173 0 65] 
#[0 10 177 0 57] 
#[0 10 181 0 97] 
#[0 5 118 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 10 185 0 65] 
#[0 5 122 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 126 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 130 0 7 0 8 0 9 0 11 0 12 0 14 0 21 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 134 0 7 0 11] 
#[0 5 138 0 7 0 11] 
#[1 5 142 0 9 5 142 0 12 0 129 0 14 5 142 0 25 5 142 0 26 5 142 0 28 5 142 0 36 5 142 0 49 5 142 0 51 5 142 0 52 5 142 0 55 5 142 0 56 5 142 0 57 5 142 0 58 5 142 0 61 5 142 0 62 5 142 0 64 5 142 0 65 5 142 0 66 5 142 0 67 5 142 0 68 5 142 0 72 5 142 0 76 5 142 0 78 5 142 0 79 5 142 0 81 5 142 0 87 5 142 0 89 5 142 0 90 5 142 0 91 5 142 0 92 5 142 0 94 5 142 0 97 5 142 0 101 5 142 0 105 5 142 0 106 5 142 0 107 5 142 0 109 5 142 0 114 5 142 0 115 5 142 0 116 5 142 0 117 5 142 0 118 5 142 0 119 5 142 0 120 5 142 0 121 5 142 0 122 5 142 0 124 5 142 1 39] 
#[1 5 146 0 9 5 146 0 12 0 49 0 14 5 146 0 25 5 146 0 26 5 146 0 28 5 146 0 36 5 146 0 49 5 146 0 51 5 146 0 52 5 146 0 55 5 146 0 56 5 146 0 57 5 146 0 58 5 146 0 61 5 146 0 62 5 146 0 64 5 146 0 65 5 146 0 66 5 146 0 67 5 146 0 68 5 146 0 72 5 146 0 76 5 146 0 78 5 146 0 79 5 146 0 81 5 146 0 87 5 146 0 89 5 146 0 90 5 146 0 91 5 146 0 92 5 146 0 94 5 146 0 97 5 146 0 101 5 146 0 105 5 146 0 106 5 146 0 107 5 146 0 109 5 146 0 114 5 146 0 115 5 146 0 116 5 146 0 117 5 146 0 118 5 146 0 119 5 146 0 120 3 47 0 121 3 51 0 122 5 146 0 124 10 189 0 142 10 189 0 143 10 189 0 144 10 189 0 145 10 189 0 146 5 146 1 39] 
#[1 5 150 0 9 5 150 0 12 0 49 0 14 5 150 0 25 5 150 0 26 5 150 0 28 5 150 0 36 5 150 0 49 5 150 0 51 5 150 0 52 5 150 0 55 5 150 0 56 5 150 0 57 5 150 0 58 5 150 0 61 5 150 0 62 5 150 0 64 5 150 0 65 5 150 0 66 5 150 0 67 5 150 0 68 5 150 0 72 5 150 0 76 5 150 0 78 5 150 0 79 5 150 0 81 5 150 0 87 5 150 0 89 5 150 0 90 5 150 0 91 5 150 0 92 5 150 0 94 5 150 0 97 5 150 0 101 5 150 0 105 5 150 0 106 5 150 0 107 5 150 0 109 5 150 0 114 5 150 0 115 5 150 0 116 5 150 0 117 5 150 0 118 5 150 0 119 5 150 0 120 3 55 0 121 3 59 0 122 5 150 0 124 10 193 0 142 10 193 0 143 10 193 0 144 10 193 0 145 10 193 0 146 5 150 1 39] 
#[0 10 197 0 78] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 6 0 78 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 119 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 10 201 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 10 205 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[0 5 154 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 10 209 0 78] 
#[1 10 213 0 78 0 101 0 116 0 137 0 124 10 217 0 132] 
#[0 10 221 0 68] 
#[1 10 225 0 57 0 137 0 124] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 6 0 55 0 6 0 56 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 10 229 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 10 233 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 10 237 0 57 0 137 0 124] 
#[1 0 6 0 57 0 6 0 124 10 241 0 130] 
#[1 10 245 0 57 0 137 0 124] 
#[1 0 6 0 57 0 6 0 124 10 249 0 130] 
#[1 0 169 0 9 0 173 0 12 0 49 0 14 0 177 0 25 0 181 0 26 0 185 0 28 0 9 0 36 0 189 0 49 0 193 0 51 0 197 0 52 0 6 0 57 0 201 0 58 0 205 0 61 0 209 0 62 0 213 0 64 0 217 0 65 0 221 0 66 0 225 0 67 0 229 0 68 0 233 0 72 0 237 0 79 0 241 0 81 1 121 0 87 0 249 0 89 0 253 0 90 1 1 0 91 1 5 0 94 1 9 0 97 1 13 0 101 1 17 0 106 1 21 0 107 1 25 0 109 1 29 0 114 1 33 0 115 0 101 0 116 0 109 0 117 1 37 0 118 1 41 0 119 1 45 0 120 0 53 0 121 0 57 0 122 0 123 0 124 10 253 0 130 1 221 0 131 1 61 0 132 1 221 0 133 1 221 0 134 1 221 0 135 1 221 0 136 1 221 0 137 1 221 0 138 1 221 0 139 1 93 0 142 1 93 0 143 1 93 0 144 1 93 0 145 1 93 0 146 1 109 0 150 1 109 0 156 1 109 0 158 1 109 0 159 11 1 0 160 1 121 0 167 1 109 0 176 1 109 0 177 1 109 0 181 1 109 0 182 1 109 0 193 1 109 0 194 1 109 0 195 1 157 0 196 1 109 0 197 1 109 0 198 1 109 0 199 1 109 0 200 1 109 0 201 1 109 0 202 1 109 0 203 1 109 0 204 1 109 0 206 1 109 0 207 1 109 0 208 1 109 0 209 1 109 0 213 1 213 0 214 1 213 0 218 1 221 0 219 1 213 0 220 1 213 0 221 1 213 0 222 1 213 0 223 1 213 0 230 1 213 0 231 1 213 0 232 1 213 0 233 1 213 0 234 1 213 0 235 1 213 0 236 1 213 0 237 1 213 0 239 1 213 0 241 1 213 0 243 1 213 0 244 1 213 0 245 1 213 0 246 1 213 0 247 1 213 0 248 1 213 0 249 1 213 0 250 1 109 0 251 1 109 0 252 1 109 0 253 1 109 0 254 1 109 0 255 1 109 1 0 1 109 1 1 1 109 1 2 1 109 1 3 1 109 1 4 1 109 1 5 1 109 1 6 1 109 1 7 1 109 1 8 1 109 1 9 1 109 1 13 2 121 1 14 1 109 1 15 1 109 1 16 1 109 1 17 1 109 1 18 1 109 1 19 1 109 1 20 1 109 1 21 1 109 1 22 1 109 1 23 1 109 1 24 1 109 1 25 1 109 1 26 1 109 1 27 1 109 1 28 1 109 1 29 1 109 1 30 1 109 1 32 1 109 1 33 1 109 1 34 1 109 1 35 1 109 1 36 1 109 1 37 1 109 1 38] 
#[1 6 105 0 113 11 5 0 141] 
#[1 4 141 0 35 11 9 0 170 11 9 0 173 11 9 0 174] 
#[0 5 158 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 162 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 166 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 11 13 0 65] 
#[0 5 170 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 174 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 5 178 0 9 5 178 0 12 0 129 0 14 5 178 0 25 5 178 0 26 5 178 0 28 5 178 0 36 5 178 0 49 5 178 0 51 5 178 0 52 5 178 0 55 5 178 0 56 5 178 0 57 5 178 0 58 5 178 0 61 5 178 0 62 5 178 0 64 5 178 0 65 5 178 0 66 5 178 0 67 5 178 0 68 5 178 0 72 5 178 0 76 5 178 0 78 5 178 0 79 5 178 0 81 5 178 0 87 5 178 0 89 5 178 0 90 5 178 0 91 5 178 0 92 5 178 0 94 5 178 0 97 5 178 0 101 5 178 0 105 5 178 0 106 5 178 0 107 5 178 0 109 5 178 0 114 5 178 0 115 5 178 0 116 5 178 0 117 5 178 0 118 5 178 0 119 5 178 0 120 5 178 0 121 5 178 0 122 5 178 0 124 5 178 1 39] 
#[1 5 182 0 9 5 182 0 12 0 129 0 14 5 182 0 25 5 182 0 26 5 182 0 28 5 182 0 36 5 182 0 49 5 182 0 51 5 182 0 52 5 182 0 55 5 182 0 56 5 182 0 57 5 182 0 58 5 182 0 61 5 182 0 62 5 182 0 64 5 182 0 65 5 182 0 66 5 182 0 67 5 182 0 68 5 182 0 72 5 182 0 76 5 182 0 78 5 182 0 79 5 182 0 81 5 182 0 87 5 182 0 89 5 182 0 90 5 182 0 91 5 182 0 92 5 182 0 94 5 182 0 97 5 182 0 101 5 182 0 105 5 182 0 106 5 182 0 107 5 182 0 109 5 182 0 114 5 182 0 115 5 182 0 116 5 182 0 117 5 182 0 118 5 182 0 119 5 182 0 120 5 182 0 121 5 182 0 122 5 182 0 124 5 182 1 39] 
#[1 5 186 0 9 5 186 0 12 0 49 0 14 5 186 0 25 5 186 0 26 5 186 0 28 5 186 0 36 5 186 0 49 5 186 0 51 5 186 0 52 5 186 0 55 5 186 0 56 5 186 0 57 5 186 0 58 5 186 0 61 5 186 0 62 5 186 0 64 5 186 0 65 5 186 0 66 5 186 0 67 5 186 0 68 5 186 0 72 5 186 0 76 5 186 0 78 5 186 0 79 5 186 0 81 5 186 0 87 5 186 0 89 5 186 0 90 5 186 0 91 5 186 0 92 5 186 0 94 5 186 0 97 5 186 0 101 5 186 0 105 5 186 0 106 5 186 0 107 5 186 0 109 5 186 0 114 5 186 0 115 5 186 0 116 5 186 0 117 5 186 0 118 5 186 0 119 5 186 0 120 3 63 0 121 3 67 0 122 5 186 0 124 11 17 0 142 11 17 0 143 11 17 0 144 11 17 0 145 11 17 0 146 5 186 1 39] 
#[1 11 21 0 78 0 101 0 116 0 137 0 124 11 25 0 132] 
#[1 0 6 0 78 0 6 0 116 0 6 0 124 11 29 0 130] 
#[0 5 190 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 194 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 11 33 0 78] 
#[0 5 198 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 11 37 0 68] 
#[1 5 202 0 55 5 202 0 56 0 137 0 124] 
#[1 0 6 0 55 0 6 0 56 0 6 0 124 11 41 0 130] 
#[0 11 45 0 68] 
#[1 11 49 0 57 0 137 0 124] 
#[0 11 53 0 68] 
#[1 11 57 0 57 0 137 0 124] 
#[1 11 61 0 57 0 137 0 124] 
#[1 0 6 0 57 0 6 0 124 11 65 0 130] 
#[1 11 69 0 111 7 125 0 113] 
#[0 5 206 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 210 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 5 214 0 9 5 214 0 12 0 129 0 14 5 214 0 25 5 214 0 26 5 214 0 28 5 214 0 36 5 214 0 49 5 214 0 51 5 214 0 52 5 214 0 55 5 214 0 56 5 214 0 57 5 214 0 58 5 214 0 61 5 214 0 62 5 214 0 64 5 214 0 65 5 214 0 66 5 214 0 67 5 214 0 68 5 214 0 72 5 214 0 76 5 214 0 78 5 214 0 79 5 214 0 81 5 214 0 87 5 214 0 89 5 214 0 90 5 214 0 91 5 214 0 92 5 214 0 94 5 214 0 97 5 214 0 101 5 214 0 105 5 214 0 106 5 214 0 107 5 214 0 109 5 214 0 114 5 214 0 115 5 214 0 116 5 214 0 117 5 214 0 118 5 214 0 119 5 214 0 120 5 214 0 121 5 214 0 122 5 214 0 124 5 214 1 39] 
#[0 5 218 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 11 73 0 78] 
#[1 11 77 0 78 0 101 0 116 0 137 0 124 11 81 0 132] 
#[0 5 222 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 226 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[1 5 230 0 55 5 230 0 56 0 137 0 124] 
#[0 5 234 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 11 85 0 68] 
#[0 5 238 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 11 89 0 68] 
#[0 11 93 0 68] 
#[1 11 97 0 57 0 137 0 124] 
#[0 5 242 0 1 0 4 0 6 0 7 0 8 0 9 0 11 0 12 0 14 0 15 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 31 0 32 0 34 0 36 0 37 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 59 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 71 0 72 0 74 0 76 0 78 0 79 0 81 0 82 0 84 0 87 0 89 0 90 0 91 0 92 0 94 0 95 0 97 0 99 0 100 0 101 0 105 0 106 0 107 0 108 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 246 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 5 250 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 11 101 0 78] 
#[0 5 254 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 6 2 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 6 6 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 11 105 0 68] 
#[0 6 10 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39] 
#[0 6 14 0 9 0 12 0 14 0 25 0 26 0 28 0 36 0 49 0 51 0 52 0 55 0 56 0 57 0 58 0 61 0 62 0 64 0 65 0 66 0 67 0 68 0 72 0 76 0 78 0 79 0 81 0 87 0 89 0 90 0 91 0 92 0 94 0 97 0 101 0 105 0 106 0 107 0 109 0 114 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 1 39]
	).
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAddressOfClause1: nodes [
	| result |
	result := VBAddressOfClauseNode new.
	result addressOfToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument1: nodes [
	| result |
	result := VBArgumentNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument2: nodes [
	| result |
	result := VBArgumentNode new.
	result paramarrayToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument3: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument4: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result arguments.
	result addTokens: ((nodes at: 2) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addNode: (nodes at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result timesToken: ((nodes at: 2) at: 1).
	result plusToken: ((nodes at: 2) at: 2).
	result minusToken: ((nodes at: 2) at: 3).
	result divideToken: ((nodes at: 2) at: 4).
	result upArrowToken: ((nodes at: 2) at: 5).
	result _Token: ((nodes at: 2) at: 6).
	result modToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator4: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator6: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator7: nodes [
	| result |
	result := Array new: 7.
	result at: 7 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignement1: nodes [
	| result |
	result := VBAssignementNode new.
	result left: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignement2: nodes [
	| result |
	result := VBAssignementNode new.
	result letToken: (nodes at: 1).
	result left: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result right: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignementOrEquals1: nodes [
	| result |
	result := VBAssignementOrEqualsNode new.
	result left: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBModuleAttributeNode new.
	result attributeToken: (nodes at: 1).
	result setting: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBaseType11: nodes [
	| result |
	result := VBBaseTypeNode new.
	result variantToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addObject: (nodes at: 1) to: result statements.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addObjects: ((nodes at: 2) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBody1: nodes [
	| result |
	result := VBBodyNode new.
	result addNode: (nodes at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanBinaryOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result andToken: ((nodes at: 2) at: 1).
	result orToken: ((nodes at: 2) at: 2).
	result xorToken: ((nodes at: 2) at: 3).
	result eqvToken: ((nodes at: 2) at: 4).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanLiteral1: nodes [
	| result |
	result := VBBooleanLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForColorLiteral1: nodes [
	| result |
	result := VBColorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonEqualsOperation1: nodes [
	| result |
	result := VBComparisonEqualsOperationNode new.
	result left: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperation1: nodes [
	| result |
	result := VBComparisonOperationNode new.
	result left: (nodes at: 1).
	result greaterThanToken: ((nodes at: 2) at: 1).
	result lessThanToken: ((nodes at: 2) at: 2).
	result lessThanGreaterThanToken: ((nodes at: 2) at: 3).
	result lessThanEqualToken: ((nodes at: 2) at: 4).
	result greaterThanEqualToken: ((nodes at: 2) at: 5).
	result isToken: ((nodes at: 2) at: 6).
	result likeToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator5: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType1: nodes [
	| result |
	result := VBComplexTypeNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConcatenationOperation1: nodes [
	| result |
	result := VBConcatenationOperationNode new.
	result left: (nodes at: 1).
	result andToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConfiguration1: nodes [
	| result |
	result := VBConfigurationNode new.
	result beginToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result settings.
	result addNodes: ((nodes at: 4) at: 1) to: result settings.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDateLiteral1: nodes [
	| result |
	result := VBDateLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction1: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction2: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction3: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction4: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	result type: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub1: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub2: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub3: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub4: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum1: nodes [
	| result |
	result := VBDefineEnumNode new.
	result addToken: (nodes at: 1) to: result enumTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum2: nodes [
	| result |
	result := VBDefineEnumNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction1: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction2: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction3: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction4: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction5: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction6: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction7: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction8: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub1: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub2: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub3: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub4: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result subTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType1: nodes [
	| result |
	result := VBDefineTypeNode new.
	result addToken: (nodes at: 1) to: result typeTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType2: nodes [
	| result |
	result := VBDefineTypeNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result typeTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariable1: nodes [
	| result |
	result := VBDimVariableNode new.
	result dimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariables1: nodes [
	| result |
	result := VBDimMultipleVariablesNode new.
	result dimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess1: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result receiver: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf1: nodes [
	| result |
	result := VBElseIfNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf2: nodes [
	| result |
	result := VBElseIfNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result ifMatch: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry1: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry2: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent1: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent2: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result eventToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitDo1: nodes [
	| result |
	result := VBExitDoNode new.
	result exitToken: (nodes at: 1).
	result doToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFor1: nodes [
	| result |
	result := VBExitForNode new.
	result exitToken: (nodes at: 1).
	result forToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFunction1: nodes [
	| result |
	result := VBExitFunctionNode new.
	result exitToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitProperty1: nodes [
	| result |
	result := VBExitPropertyNode new.
	result exitToken: (nodes at: 1).
	result propertyToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitSub1: nodes [
	| result |
	result := VBExitSubNode new.
	result exitToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitCall1: nodes [
	| result |
	result := VBExplicitCallNode new.
	result callToken: (nodes at: 1).
	result call: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFloatLiteral1: nodes [
	| result |
	result := VBFloatLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach1: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach2: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	result addNode: (nodes at: 9) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach3: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach4: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	result addNode: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach5: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach6: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	result addNode: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach7: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach8: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	result addNode: (nodes at: 11) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext1: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext2: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext3: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext4: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext1: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext2: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext3: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext4: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endLineNumber: (nodes at: 12).
	result nextToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLabel1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result gosubToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLine1: nodes [
	| result |
	result := VBGoSubLineNode new.
	result gosubToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result gotoToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLine1: nodes [
	| result |
	result := VBGoToLineNode new.
	result gotoToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGuidLiteral1: nodes [
	| result |
	result := VBGuidLiteralNode new.
	result leftBraceToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 3) to: result minusTokens.
	result addTokens: (nodes at: 4) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 5) to: result minusTokens.
	result addTokens: (nodes at: 6) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 7) to: result minusTokens.
	result addTokens: (nodes at: 8) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 9) to: result minusTokens.
	result addTokens: (nodes at: 10) to: result hEX_INTEGERTokens.
	result rightBraceToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHashIdentifier1: nodes [
	| result |
	result := VBHashIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHeadlessIdentifier1: nodes [
	| result |
	result := VBHeadlessIdentifierNode new.
	result periodToken: (nodes at: 1).
	result token: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen1: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen2: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result
		ifFalse: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse1: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse2: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result otherwise: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse3: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse4: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result otherwise: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall1: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result identifier: (nodes at: 1).
	result arguments: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop1: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result loopToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop2: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result endLineNumber: (nodes at: 4).
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop3: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop4: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral1: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result returnToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub2: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result block: (nodes at: 3).
	result returnToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess1: nodes [
	| result |
	result := VBMemberAccessNode new.
	result receiver: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModifier1: nodes [
	| result |
	result := VBModifierNode new.
	result staticToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant1: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: (nodes at: 2).
	result constant: (nodes at: 3).
	result equalToken: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperties1: nodes [
	| result |
	result := VBModuleMultiplePropertiesNode new.
	result visibility: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperty1: nodes [
	| result |
	result := VBModulePropertyNode new.
	result visibility: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNegatedOperation1: nodes [
	| result |
	result := VBNegatedOperationNode new.
	result minusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNewClause1: nodes [
	| result |
	result := VBNewClauseNode new.
	result nEWToken: (nodes at: 1).
	result typeName: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation1: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation2: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result value: (nodes at: 2).
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation3: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation4: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result value: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNull1: nodes [
	| result |
	result := VBNullNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNumberedStatement1: nodes [
	| result |
	result := VBNumberedStatementNode new.
	result lineNumber: (nodes at: 1).
	result statement: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorGoTo1: nodes [
	| result |
	result := VBOnErrorGoToNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorResumeNext1: nodes [
	| result |
	result := VBOnErrorResumeNextNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result resumeToken: (nodes at: 3).
	result nextToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnExpressionGo1: nodes [
	| result |
	result := VBOnExpressionGoNode new.
	result onToken: (nodes at: 1).
	result integerExpression: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption1: nodes [
	| result |
	result := VBOptionValueNode new.
	result optionToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption2: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result databaseToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption3: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result binaryToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption4: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result compare: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption5: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result optionToken: (nodes at: 1).
	result explicitToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption6: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result optionToken: (nodes at: 1).
	result privateToken: (nodes at: 2).
	result moduleToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter10: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter11: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter12: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter13: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter14: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter15: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter16: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result type: (nodes at: 5).
	result equalToken: ((nodes at: 6) at: 1).
	result default: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result equalToken: ((nodes at: 2) at: 1).
	result default: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter9: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList1: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result rightParenToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList2: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result parameters.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterPassingStrategy2: nodes [
	| result |
	result := VBParameterPassingStrategyNode new.
	result byrefToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPositiveOperation1: nodes [
	| result |
	result := VBPositiveOperationNode new.
	result plusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess1: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result receiver: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForQualifiedIdentifier1: nodes [
	| result |
	result := VBQualifiedIdentifierNode new.
	result token: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable1: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable2: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables1: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables2: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeLabel1: nodes [
	| result |
	result := VBResumeLabelNode new.
	result resumeToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeNext1: nodes [
	| result |
	result := VBResumeNextNode new.
	result resumeToken: (nodes at: 1).
	result nextToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSetUpAssignation1: nodes [
	| result |
	result := VBSetUpAssignationNode new.
	result identifier: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleIdentifier1: nodes [
	| result |
	result := VBSimpleIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariable1: nodes [
	| result |
	result := VBStaticVariableNode new.
	result staticToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariables1: nodes [
	| result |
	result := VBStaticMultipleVariablesNode new.
	result staticToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStringLiteral1: nodes [
	| result |
	result := VBStringLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry1: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry2: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing1: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing2: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParenToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result sizes.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing1: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing2: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	result leftParenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result sizes.
	result addTokens: ((nodes at: 5) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue1: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue2: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable1: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable2: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariableList1: nodes [
	| result |
	result := VBVariableListNode new.
	result addNode: (nodes at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result variables.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVisibility2: nodes [
	| result |
	result := VBVisibilityNode new.
	result publicToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue1: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue2: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue3: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue4: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend1: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result wendToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend2: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend3: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend4: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result wendToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith1: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith2: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith3: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith4: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________2: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_HEX_INTEGER___1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Operand__default___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Operand__default___2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___Statement__statement_____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader1: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader2: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	result classToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule1: nodes [
	| result |
	result := VBModuleNode new.
	result addNode: (nodes at: 1) to: result elements.
	result addNodes: ((nodes at: 2) at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 2) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule2: nodes [
	| result |
	result := VBModuleNode new.
	result addNode: (nodes at: 1) to: result elements.
	result addNodes: ((nodes at: 2) at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule3: nodes [
	| result |
	result := VBModuleNode new.
	result header: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result elements.
	result addNodes: ((nodes at: 4) at: 1) to: result elements.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule4: nodes [
	| result |
	result := VBModuleNode new.
	result header: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result elements.
	result addNodes: ((nodes at: 4) at: 1) to: result elements.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result body: (nodes at: 5).
	^ result
]
