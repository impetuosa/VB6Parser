Class {
	#name : #VBParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_VB6Parser'
}

{ #category : #generated }
VBParser class >> ambiguousTransitions [
^#(
#[ 0 174 0 178] 
#[ 0 178 0 202] 
#[ 0 178 0 210] 
#[ 0 178 0 230] 
#[ 0 178 1 34] 
#[ 1 118 1 122 1 126] 
#[ 1 118 1 122 1 126 1 169] 
#[ 0 6 6 157] 
#[ 2 94 6 201] 
#[ 0 209 2 94] 
#[ 0 213 2 94] 
#[ 0 217 2 94] 
#[ 2 194 2 198] 
#[ 1 234 3 14] 
#[ 3 30 5 173] 
#[ 3 30 5 201] 
#[ 3 30 5 233] 
#[ 3 34 5 173] 
#[ 3 34 5 201] 
#[ 3 34 5 233] 
#[ 1 162 3 42] 
#[ 1 162 3 50] 
#[ 3 74 5 173] 
#[ 3 74 5 201] 
#[ 3 74 5 233] 
#[ 3 86 7 149] 
#[ 2 133 3 86] 
#[ 2 137 3 86] 
#[ 2 141 3 86] 
#[ 2 145 3 86] 
#[ 2 149 3 86] 
#[ 2 153 3 86] 
#[ 2 157 3 86] 
#[ 2 161 3 86] 
#[ 0 209 3 86] 
#[ 2 165 3 86] 
#[ 2 169 3 86] 
#[ 2 173 3 86] 
#[ 1 41 3 86] 
#[ 1 89 3 86] 
#[ 2 177 3 86] 
#[ 2 181 3 86] 
#[ 2 185 3 86] 
#[ 0 213 3 86] 
#[ 0 217 3 86] 
#[ 0 6 1 41] 
#[ 0 6 1 177] 
#[ 0 6 1 130] 
#[ 2 133 3 222] 
#[ 2 137 3 222] 
#[ 2 141 3 222] 
#[ 2 145 3 222] 
#[ 0 9 3 222] 
#[ 0 21 3 222] 
#[ 3 222 4 9] 
#[ 0 25 3 222] 
#[ 0 29 3 222] 
#[ 2 149 3 222] 
#[ 3 222 4 13] 
#[ 0 33 3 222] 
#[ 0 41 3 222] 
#[ 3 222 4 17] 
#[ 3 222 4 21] 
#[ 3 222 4 25] 
#[ 2 153 3 222] 
#[ 2 157 3 222] 
#[ 3 222 4 29] 
#[ 0 49 3 222] 
#[ 0 57 3 222] 
#[ 0 61 3 222] 
#[ 3 222 4 33] 
#[ 3 222 8 145] 
#[ 2 161 3 222] 
#[ 3 222 4 37] 
#[ 0 209 3 222] 
#[ 0 73 3 222] 
#[ 3 222 4 41] 
#[ 3 222 4 45] 
#[ 2 165 3 222] 
#[ 2 169 3 222] 
#[ 2 173 3 222] 
#[ 1 41 3 222] 
#[ 1 89 3 222] 
#[ 2 177 3 222] 
#[ 2 181 3 222] 
#[ 2 185 3 222] 
#[ 0 213 3 222] 
#[ 0 217 3 222] 
#[ 0 6 3 226] 
#[ 4 2 5 173] 
#[ 4 2 5 201] 
#[ 4 2 5 233] 
#[ 3 86 9 113] 
#[ 4 10 9 125] 
#[ 4 18 5 173] 
#[ 4 18 5 201] 
#[ 4 18 5 233] 
#[ 4 26 5 173] 
#[ 4 26 5 201] 
#[ 4 26 5 233] 
#[ 4 30 5 173] 
#[ 4 30 5 201] 
#[ 4 30 5 233] 
#[ 4 34 5 173] 
#[ 4 34 5 201] 
#[ 4 34 5 233] 
#[ 4 38 5 173] 
#[ 4 38 5 201] 
#[ 4 38 5 233] 
#[ 4 42 5 173] 
#[ 4 42 5 201] 
#[ 4 42 5 233] 
#[ 0 6 2 133] 
#[ 0 6 2 137] 
#[ 0 6 2 141] 
#[ 0 6 2 145] 
#[ 0 6 2 149] 
#[ 0 6 2 153] 
#[ 0 6 2 157] 
#[ 0 6 2 161] 
#[ 0 6 0 209] 
#[ 0 6 2 165] 
#[ 0 6 2 169] 
#[ 0 6 2 173] 
#[ 0 6 1 89] 
#[ 0 6 2 177] 
#[ 0 6 2 181] 
#[ 0 6 2 185] 
#[ 0 6 0 213] 
#[ 0 6 0 217] 
#[ 1 86 10 45] 
#[ 4 30 4 126 5 169] 
#[ 4 30 4 126 5 173] 
#[ 4 30 4 126 5 177] 
#[ 4 30 4 126 5 181] 
#[ 4 30 4 126 5 185] 
#[ 4 30 4 126 5 189] 
#[ 4 30 4 126 5 193] 
#[ 4 30 4 126 5 197] 
#[ 4 30 4 126 5 201] 
#[ 4 30 4 126 5 205] 
#[ 4 30 4 126 5 209] 
#[ 4 30 4 126 5 213] 
#[ 4 30 4 126 5 217] 
#[ 4 30 4 126 5 221] 
#[ 4 30 4 126 5 225] 
#[ 4 30 4 126 5 229] 
#[ 4 30 4 126 5 233] 
#[ 4 30 4 126 5 237] 
#[ 4 30 4 126 5 241] 
#[ 4 30 4 126 5 245] 
#[ 4 30 4 126 5 249] 
#[ 4 30 4 126 5 253] 
#[ 4 30 4 126 6 1] 
#[ 4 30 4 126 6 5] 
#[ 4 134 5 173] 
#[ 4 134 5 201] 
#[ 4 134 5 233] 
#[ 4 138 5 173] 
#[ 4 138 5 201] 
#[ 4 138 5 233] 
#[ 4 150 9 125] 
#[ 2 133 4 154] 
#[ 2 137 4 154] 
#[ 2 141 4 154] 
#[ 2 145 4 154] 
#[ 2 149 4 154] 
#[ 2 153 4 154] 
#[ 2 157 4 154] 
#[ 2 161 4 154] 
#[ 0 209 4 154] 
#[ 2 165 4 154] 
#[ 2 169 4 154] 
#[ 2 173 4 154] 
#[ 1 41 4 154] 
#[ 1 89 4 154] 
#[ 2 177 4 154] 
#[ 2 181 4 154] 
#[ 2 185 4 154] 
#[ 0 213 4 154] 
#[ 0 217 4 154] 
#[ 2 133 4 158] 
#[ 2 137 4 158] 
#[ 2 141 4 158] 
#[ 2 145 4 158] 
#[ 2 149 4 158] 
#[ 2 153 4 158] 
#[ 2 157 4 158] 
#[ 2 161 4 158] 
#[ 0 209 4 158] 
#[ 2 165 4 158] 
#[ 2 169 4 158] 
#[ 2 173 4 158] 
#[ 1 41 4 158] 
#[ 1 89 4 158] 
#[ 2 177 4 158] 
#[ 2 181 4 158] 
#[ 2 185 4 158] 
#[ 0 213 4 158] 
#[ 0 217 4 158] 
#[ 4 222 11 81] 
#[ 5 18 5 173] 
#[ 5 18 5 201] 
#[ 5 18 5 233] 
#[ 5 78 12 81] 
#[ 5 82 12 89] 
#[ 1 130 5 170] 
#[ 5 174 13 57] 
#[ 1 130 6 26] 
#[ 1 130 6 30] 
#[ 1 130 6 34] 
#[ 1 130 6 98] 
#[ 1 130 6 102] 
#[ 0 209 6 106] 
#[ 0 213 6 106] 
#[ 0 217 6 106] 
#[ 0 6 6 110] 
#[ 0 209 6 134] 
#[ 0 213 6 134] 
#[ 0 217 6 134] 
#[ 0 209 6 138] 
#[ 0 213 6 138] 
#[ 0 217 6 138] 
#[ 0 209 6 162] 
#[ 0 213 6 162] 
#[ 0 217 6 162]
	).
]

{ #category : #'generated-accessing' }
VBParser class >> cacheId [
	^'2020-08-27T17:12:33.9123+02:00'
]

{ #category : #generated }
VBParser class >> definitionComment [
"%glr;
%ignorecase;
%annotate_tokens;

#expression operators -- lowest precedence are first.
%left "")""  ;
%left  ""="";
%left "","";
%right "":"";
%left ""eqv"" ;
%left ""||"" ""or"" ""xor"";
%left ""&&"" ""and"";
%left ""is"" ""like"" ""!="" ""<>"";
%left ""<"" ""<="" "">"" "">="";
%left ""+"" ""-"";
%left ""*"" ""/"" ""Mod"";
%right ""^"";
%right ""delete"" ""~"";
%right ""["" ""("";
%left ""."" ""!"" ;
%prefix VB;
%root Program;
%suffix Node;
%start module;

<lineContinuation>
   :    [_ \r? \n ]
   ;
<DECIMAL_INTEGER>
	: 0 | [1-9] [0-9]*	
	;
<HEX_INTEGER>
	: 0[xX][0-9a-fA-F]+	
	;
<OCTAL_INTEGER>
	: 0[0-7]+	
	;
<EXPONENT>
	: [eE] [\-\+]? [0-9]+ 	
	;
<FLOAT_TYPE>
	: [fFdD]	
	;

<DATE_LITERAL>
   : ""#"" ([^\#\r\n])*  ""#""
   ;
<COLOR_LITERAL>
   : \&H <HEX_INTEGER>+ ""&""?
   ;

<INTEGER_LITERAL>
	: (<DECIMAL_INTEGER> | <HEX_INTEGER> | <OCTAL_INTEGER>) [lL]?	
	;
<FLOATING_POINT_LITERAL>
	: [0-9]+ \. [0-9]* <EXPONENT>? <FLOAT_TYPE>? 
	| \. [0-9]+ <EXPONENT>? <FLOAT_TYPE>? 
	| [0-9]+ <EXPONENT> <FLOAT_TYPE>? 
	| [0-9]+ <FLOAT_TYPE>	
	| <HEX_INTEGER> \. [0-9a-fA-F]+ [pP] [\-\+]? [0-9]+ <FLOAT_TYPE>?
	;
<BOOLEAN_LITERAL>
	: true
	| false
	;
<STRING_LITERAL>
   : \"" ([^\""\r\n] | \""\"")* \""
   ;
<NULL_LITERAL>
	: Nothing	
	;
<IDENTIFIER>
	: (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|$)* 
	;
<HASH_IDENTIFIER>
	: ( \#) (<isLetter>|\w|$)*
	;
<whitespace>
	: \s+ | \s 
	;
<eol>
   :  (\r? \n | : \ ) 
   ;

<comment>
   :  (\' | :?  REM  \ ) ( [^\n\r])* 
   ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Basic module
########## ########## ########## ########## ########## ########## ########## ########## 

module: (header 'header' <eol>*)? ModuleStatement 'element'  (<eol>* ModuleStatement 'element' )*   <eol>* {{Module}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Literals
########## ########## ########## ########## ########## ########## ########## ########## 
literal 
	: IntegerLiteral
	| ColorLiteral
	| DateLiteral
	| FloatLiteral
	| BooleanLiteral
	| StringLiteral
	| Null
	| GuidLiteral
;
IntegerLiteral :  <INTEGER_LITERAL> 'token' {{IntegerLiteral}};
ColorLiteral: <COLOR_LITERAL> 'token' {{ColorLiteral}} ; 
DateLiteral:  <DATE_LITERAL> 'token' {{DateLiteral}};
FloatLiteral: <FLOATING_POINT_LITERAL> 'token' {{FloatLiteral}};
BooleanLiteral: <BOOLEAN_LITERAL> 'token' {{BooleanLiteral}};
StringLiteral:  <STRING_LITERAL> 'token' {{StringLiteral}};
Null: <NULL_LITERAL> 'token' {{Null}};
GuidLiteral: ""{""<HEX_INTEGER> + ""-""<HEX_INTEGER>+""-"" <HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""}"" {{GuidLiteral}};

Identifier : 
	   SimpleIdentifier 
	| HashIdentifier
	| QualifiedIdentifier | HeadlessIdentifier;

HashIdentifier :  <HASH_IDENTIFIER> 'token'   {{HashIdentifier}};
SimpleIdentifier : <IDENTIFIER> | ""text""  'token'  {{SimpleIdentifier}};
HeadlessIdentifier  : "".""  Identifier 'token'  {{HeadlessIdentifier}};
QualifiedIdentifier : Identifier 'token'  "".""  <IDENTIFIER> 'member' {{QualifiedIdentifier}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Module header and configuration
########## ########## ########## ########## ########## ########## ########## ########## 

header: ""version""   FloatLiteral  'version'  (""class"")?  {{}};
Option
   :   ""option"" IntegerLiteral 'value' {{OptionValue}}
   |   ""option"" ""compare"" ""database"" {{OptionCompareDatabase}}
   |   ""option"" ""compare""  (""binary""| ""text"" 'compare') {{OptionCompare}}
   |   ""option"" ""explicit"" {{OptionExplicit}}
   |  ""option"" ""private"" ""module""{{OptionPrivateModule}}
   ;

SetUpAssignation :  
	Identifier  'identifier' ""="" Expression 'value' {{SetUpAssignation}} 
;
Attribute
 : ""attribute"" SetUpAssignation 'setting' {{ModuleAttribute}}
 ;
Configuration 
:	""begin""  <eol>* SetUpAssignation 'setting' ( <eol>+ SetUpAssignation 'setting')* ""end"" {{Configuration}};

ModuleStatement :  
	Option  | Configuration | Attribute | DeclareExternal | VariableDefinition | BehaviourDefinition | Types
 ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Body statements
########## ########## ########## ########## ########## ########## ########## ########## 



Statement :   VariableDefinition | Attribute | Expression | ControlFlowStatement | Types ;
Block: Statement 'statement' (<eol>* Statement 'statement'  )* {{Block}};

BaseType: ""boolean"" | ""byte"" | ""collection"" | ""date"" | ""double"" | ""integer"" | ""long"" | ""object"" | ""single"" | ""string"" | ""variant"" {{BaseType}};
Visibility: ""private"" | ""public"" | ""friend"" | ""global"" ; 

ComplexType: Identifier 'name' {{ComplexType}};
Type: BaseType | ComplexType ;

TypedThing: ""as""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsType}}; 
TypedAndInstantiatedThing: ""as"" ""new""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsTypeAndNew}}; 

AsType: TypedThing | TypedAndInstantiatedThing;



########## ########## ########## ########## ########## ########## ########## ########## 
########## Types
########## ########## ########## ########## ########## ########## ########## ########## 
Types : DefineEnum | DefineType | Event ;

DefineType : 	 (Visibility 'visibility')? ""type"" Identifier 'name' ( <eol>* TypeEntry 'field' )* <eol>* ""end"" ""type"" {{DefineType}}    ;
TypeEntry    : Identifier 'name' AsType 'type' (""*"" IntegerLiteral 'size' )? {{TypeEntry}}     ;
Event  : (Visibility 'visibility')?  ""event"" Identifier 'selector' ParameterList 'parameters' {{Event}} ;
DefineEnum    :  (Visibility 'visibility')?  ""enum"" Identifier 'name'  ( <eol>* EnumEntry 'field')* <eol>*  ""end"" ""enum"" {{DefineEnum}}    ;
EnumEntry    : Identifier 'name'  ( ""=""  Expression 'value')? {{EnumEntry}}    ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Parameters
########## ########## ########## ########## ########## ########## ########## ########## 
ParameterPassingStrategy :  ""byval"" | ""byref"" {{ParameterPassingStrategy}};
ParameterList:  ""("" (Parameter 'parameter' ( "","" Parameter 'parameter')* )? "")"" {{ParameterList}};
Parameter: ""optional"" ? (ParameterPassingStrategy 'strategy')? ""paramarray""? Identifier 'name'  (AsType 'type')? (""="" Expression 'default')? {{Parameter}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## External declaration
########## ########## ########## ########## ########## ########## ########## ########## 
DeclareSub: (Visibility 'visibility')? ""declare""  ""sub"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  {{ExternalSub}};
DeclareFunction: (Visibility 'visibility')? ""declare""  ""function"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  AsType 'type' {{ExternalFunction}};
DeclareExternal : DeclareSub|DeclareFunction; 

########## ########## ########## ########## ########## ########## ########## ########## 
########## Function / Sub Definition 
########## ########## ########## ########## ########## ########## ########## ########## 

Modifier: ""static"" ;
DefineFunction: (Visibility 'visibility')? (Modifier 'modifier')? ""function"" Identifier 'selector' ParameterList 'parameters' (AsType 'type')? <eol>* Block 'block' ""end"" ""function"" {{FunctionDefinition}};
DefineSub:  (Visibility 'visibility')? (Modifier 'modifier')? ""sub"" Identifier 'selector' (ParameterList 'parameters') ? <eol>* Block 'block' ""end"" ""sub"" {{SubDefinition}};


ModulePropertyGet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""get"" Identifier 'selector' (ParameterList 'parameters') ? (AsType 'type')? <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 
ModulePropertySet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""set"" Identifier 'selector'  (ParameterList 'parameters') ?   <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 
ModulePropertyLet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""let"" Identifier 'selector' (ParameterList 'parameters') ?    <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 


BehaviourDefinition:  DefineFunction | DefineSub | ModulePropertyGet | ModulePropertySet | ModulePropertyLet ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Variable / And Multiple Variables
########## ########## ########## ########## ########## ########## ########## ########## 

ModuleProperty : Visibility 'visibility' Variable 'variable' {{ModuleProperty}};
ModuleConstant : (Visibility 'visibility') ""const"" Identifier 'constant' (AsType 'type')?  ""="" Expression 'value'  {{ModuleConstant}};
DefineVariable : ""dim"" Variable 'variable' {{DimVariable}};
ReDefineVariable : ""redim"" ""preserve""? Variable 'variable' {{ReDimVariable}};
StaticVariable : ""static"" Variable 'variable' {{StaticVariable}};
Variable : ""WithEvents"" ? Identifier 'name' (AsType 'type') ? {{Variable}};

ModuleProperties : Visibility 'visibility' VariableList 'variables' {{ModuleMultipleProperties}};
DefineVariables : ""dim"" VariableList 'variables' {{DimMultipleVariables}};
ReDefineVariables : ""redim""  ""preserve""?  VariableList 'variables' {{ReDimMultipleVariables}};
StaticVariables : ""static"" VariableList 'variables' {{StaticMultipleVariables}};
VariableList : Variable 'variable' ("",""  Variable 'variable' )* {{VariableList}};

VariableDefinition : ModuleProperties | ModuleProperty | ModuleConstant | DefineVariable | ReDefineVariable |  DefineVariables |  ReDefineVariables | StaticVariable | StaticVariables ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Value Statements
########## ########## ########## ########## ########## ########## ########## ########## 

ValueStatement :  Operation | ValueClause | ImplicitCall | StateAccess | ExplicitCall | RaiseEvent  ;
Expression :  ValueStatement |  Identifier | literal  | ParentheseesExpression | Exits ; 
ParentheseesExpression : ""("" Expression 'expression' "")"" {{ParentheseesExpression}};
ValueStatementList : ValueStatement 'value' ("","" ValueStatement 'value' ) * {{ValueStatementList}} ; 

### Ops

Operation : UnaryOperation | BinaryOperation ;

DictionaryAccess :   Expression 'receiver' ""!"" Identifier 'member' {{DictionaryAccess}} ;
MemberAccess : Expression 'receiver' ""."" Identifier 'member' {{MemberAccess}} ;
ImplicitParenthesesLessCall : Identifier 'identifier' ArgumentList 'arguments' {{ImplicitParenthesesLessCall}} ;
ProcedureCallOrArrayAccess :  Expression 'receiver' ""("" ArgumentList 'arguments' "")"" {{ProcedureCallOrArrayAccess}} ;

Argument : (ParameterPassingStrategy 'strategy')?  ""paramarray""?  Expression 'value' {{Argument}};
ArgumentList : (Argument 'argument' ? ("","" | "";"" ))* Argument 'argument'? ( ("","" | "";"" )Argument 'argument' ?)* {{ArgumentList}};

ImplicitCall : Identifier | ProcedureCallOrArrayAccess | ImplicitParenthesesLessCall ;
StateAccess : DictionaryAccess | MemberAccess ;

ExplicitCall : ""Call""  ImplicitCall 'call'  {{ExplicitCall}}; 
RaiseEvent : ""RaiseEvent""  ImplicitCall 'call'  {{RaiseEvent}}; 

### Unary Ops 
UnaryOperation:  NegatedOperation | PositiveOperation |  NotOperation ; 

NegatedOperation : ""-""  Expression 'value' {{NegatedOperation}} ;
PositiveOperation : ""+"" Expression 'value' {{PositiveOperation}} ;
NotOperation : ""not""  Expression 'value'  {{NotOperation}};

### Binary Ops 
BinaryOperation: ComparisonOperation  
				| ArithmeticOperation | BooleanBinaryOperation 
				| ExplicitAssignement | AssignementOrEquals  | ConcatenationOperation ;

ComparisonOperator : "">"" | ""<""  |  ""<>"" | ""<="" | "">="" | ""is"" | ""like""  ;
ComparisonOperation : Expression 'left' ComparisonOperator Expression 'right' {{ComparisonOperation}};
ArithmeticOperator : ""*"" | ""+"" | ""-"" | ""/"" | ""^"" | ""\"" | ""Mod"";
ArithmeticOperation : Expression 'left' ArithmeticOperator Expression 'right' {{ArithmeticOperation}};
BooleanOperator : ""and"" | ""or"" | ""xor"" | ""eqv"";
BooleanBinaryOperation : Expression 'left' BooleanOperator Expression 'right' {{ArithmeticOperation}};
ConcatenationOperation : Expression 'left' ""&"" Expression 'right' {{ConcatenationOperation}}; 
AssignementOrEquals : Expression 'left' ""="" Expression  'right' {{AssignementOrEquals}}; 
ExplicitAssignement : ""let"" | ""set""  Expression 'left' ""=""  Expression 'right' {{ExplicitAssignement}}; 
ExplicitAssignement :  Expression 'left' "":=""  Expression 'right' {{ExplicitAssignement}}; 
### Value Clause 
ValueClause: AddressOfClause | NewClause ;
AddressOfClause : ""AddressOf"" Identifier 'name'  {{AddressOfClause}}; 
NewClause : ""New"" Identifier 'typeName' {{NewClause}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Control flow statements
########## ########## ########## ########## ########## ########## ########## ########## 


ControlFlowStatement : Exits| Loops | If  | On | Resume| Go | To | Label | With ; 

#### Loops
Loops : DoLoop | WhileWend | ForLoop ;

########## Do
DoLoop : InfinityLoop | WhileTrue | UntilTrue | DoWhileTrue | DoUntilTrue; 
InfinityLoop : 
	""do""  
		<eol>* (Block 'body')? <eol>* 
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{InfinityLoop}} ;

WhileTrue :  
	""do"" ""while"" ValueStatement 'condition' 
		<eol>* ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{WhileTrue}}; 
UntilTrue : 
	""do"" ""until"" ValueStatement 'condition'
		 <eol>*  Block 'body' <eol>* 
	(IntegerLiteral 'endLineNumber')?""loop"" 
 {{UntilTrue}}; 

DoWhileTrue :  
	""do""<eol>* ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')?  ""loop""  ""while"" ValueStatement 'condition' 
{{DoWhileTrue}}; 

DoUntilTrue : 
	""do"" <eol>*  Block 'body' <eol>* 
	(IntegerLiteral 'endLineNumber')? ""loop"" ""until"" ValueStatement 'condition'
 {{DoUntilTrue}}; 

########## WhileWend
WhileWend: 
	""while"" ValueStatement 'condition'
		 <eol>* ( Block 'body')? <eol>*  (IntegerLiteral 'endLineNumber')? 
	""wend""  {{WhileWend}}; 

########## For 
ForLoop : ForEach | ForNext | ForStepNext;

ForEach :  
	""for"" ""each"" Identifier 'element' ""in"" Expression 'group' 
		 <eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next"" (Identifier 'element' )? 
{{ForEach}} ;
 
ForNext :   
	""for"" Expression 'counter' ""="" Expression  'initialValue'  ""to"" Expression  'limit'   
		<eol>*  ( Block 'body')? <eol>* 
	 (IntegerLiteral 'endLineNumber')? 	""next"" 
{{ForNext}} ;
ForStepNext:   
	""for"" Expression 'counter' ""="" Expression  'initialValue'  ""to"" Expression  'limit' ""step"" Expression 'step'   
		<eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next""
 {{ForStepNext}} ;

########## If

If : IfThenColon | IfThen | IfThenElse | IfThenElseIfElse ; 

IfThenColon : ""if"" Expression 'condition' ""then"" Expression  'ifTrue' {{IfThenColon}} ;

IfThen : 
	""if"" Expression 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>*  
	(IntegerLiteral 'endLineNumber')?  ""end"" ""if"" 
{{IfThen}};

IfThenElse : 
	""if"" Expression 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>* 
	(IntegerLiteral 'elseLineNumber')? ""else"" 
		 <eol>* (Block 'ifFalse')? <eol>* 
	(IntegerLiteral 'endLineNumber')? ""end"" ""if"" 
{{IfThenElse}};

IfThenElseIfElse  : 
""if"" Expression 'condition' ""then"" 
	<eol>* (Block 'ifTrue')? <eol>* 
(ElseIf 'case') + 
""else""  
	<eol>* (Block 'otherwise')? <eol>*
 ""end"" ""if""
{{IfThenElseIfElse}};

ElseIf: ElseIfBlock | ElseIfColon ;

ElseIfBlock : ""elseif"" Expression 'condition' ""then"" 
	<eol>* (Block 'ifMatch')? <eol>*  {{ElseIfBlock}};
	
ElseIfColon : ""elseif"" Expression 'condition' ""then"" (  Expression 'ifMatch' ?  "":"" )* {{ElseIfColon}} ;

###### Label / LabelSub
	To : Label | LabelSub ;
	Label : Identifier 'label' "":""  {{GoToLabel}}; 
	LabelSub : Identifier 'label' "":"" (Block 'block' )? (IntegerLiteral 'endLineNumber')? ""return"" {{GoSubLabel}}; 

###### Resume
	Resume : ResumeLabel | ResumeNext | ResumeEmpty ;
	
	ResumeLabel : ""resume"" Identifier 'label' {{ResumeLabel}} ; 
	ResumeNext : ""resume"" ""next"" {{ResumeNext}} ; 
	ResumeEmpty : ""resume"" ; 

###### GoTo / GoSub 
Go: GoTo | GoSub ;

GoTo :  GoToLabel | GoToLine ;
GoToLabel : ""goto"" Identifier 'label' {{GoToLabel}}  ;
GoToLine :  ""goto"" IntegerLiteral 'lineNumber' {{GoToLine}}  ;

GoSub: GoSubLabel | GoSubLine ;
GoSubLabel :  ""gosub"" Identifier 'label'  {{GoSubLabel}} ;
GoSubLine :  ""gosub""  IntegerLiteral 'lineNumber'{{GoSubLine}} ;

########## On 
On: OnErrorGoTo | OnErrorResumeNext |  OnExpressionGo  ; 

OnErrorGoTo : ""on"" ""error"" GoTo 'to' {{OnErrorGoTo}}  ;
OnErrorResumeNext : ""on"" ""error"" ""resume""  ""next"" {{OnErrorResumeNext }} ;
OnExpressionGo : ""on"" Expression 'integerExpression' Go 'to' {{OnExpressionGo}} ;

########## Error
Error: ""error"" Expression 'errorCode' {{Error}} ;

########## With
With : ""with"" Identifier 'with' <eol>* (Block 'block' )? <eol>*  (IntegerLiteral 'endLineNumber')?""end"" ""with"" {{With}} ;

########## Exits

Exits : ExitFunction | ExitSub | ExitProperty | ExitDo |ExitFor ; 
ExitFunction : ""exit"" ""function"" {{Exits}} ; 
ExitSub : ""exit"" ""sub"" {{Exits}} ; 
ExitDo : ""exit"" ""do"" {{Exits}} ; 
ExitFor : ""exit"" ""for"" {{Exits}} ; 
ExitProperty : ""exit"" ""property"" {{Exits}} ;"
]

{ #category : #generated }
VBParser class >> reduceTable [
^#(
	#(133 0 #reduceActionFor_eol__1: 1715201 false ) 
	#(164 1 #liftFirstValue: 4640771 false ) 
	#(164 1 #liftFirstValue: 4640772 false ) 
	#(164 1 #liftFirstValue: 4640769 false ) 
	#(164 1 #liftFirstValue: 4640770 false ) 
	#(192 1 #liftFirstValue: 7314433 false ) 
	#(158 1 #liftFirstValue: 3977217 false ) 
	#(158 1 #liftFirstValue: 3977219 false ) 
	#(158 1 #liftFirstValue: 3977218 false ) 
	#(132 0 #reduceActionFor__eol___ModuleStatement__element____1: 1714177 false ) 
	#(158 1 #liftFirstValue: 3977223 false ) 
	#(172 1 #liftFirstValue: 5252098 false ) 
	#(172 1 #liftFirstValue: 5252099 false ) 
	#(172 1 #liftFirstValue: 5252097 false ) 
	#(191 1 #liftFirstValue: 7043073 false ) 
	#(191 1 #liftFirstValue: 7043074 false ) 
	#(158 1 #liftFirstValue: 3977220 false ) 
	#(198 1 #liftFirstValue: 8371201 false ) 
	#(198 1 #liftFirstValue: 8371202 false ) 
	#(198 1 #liftFirstValue: 8371203 false ) 
	#(198 1 #liftFirstValue: 8371204 false ) 
	#(198 1 #liftFirstValue: 8371205 false ) 
	#(158 1 #liftFirstValue: 3977222 false ) 
	#(212 1 #liftFirstValue: 9666562 false ) 
	#(212 1 #liftFirstValue: 9666563 false ) 
	#(212 1 #liftFirstValue: 9666564 false ) 
	#(212 1 #liftFirstValue: 9666565 false ) 
	#(212 1 #liftFirstValue: 9666568 false ) 
	#(212 1 #liftFirstValue: 9666561 false ) 
	#(212 1 #liftFirstValue: 9666566 false ) 
	#(212 1 #liftFirstValue: 9666567 false ) 
	#(212 1 #liftFirstValue: 9666569 false ) 
	#(158 1 #liftFirstValue: 3977221 false ) 
	#(147 1 #reduceActionForSimpleIdentifier2: 2825218 false ) 
	#(147 1 #liftFirstValue: 2825217 false ) 
	#(146 1 #reduceActionForHashIdentifier1: 2757633 false ) 
	#(145 1 #liftFirstValue: 2655234 false ) 
	#(145 1 #liftFirstValue: 2655233 false ) 
	#(145 1 #liftFirstValue: 2655236 false ) 
	#(145 1 #liftFirstValue: 2655235 false ) 
	#(153 2 #reduceActionForAttribute1: 3773441 false ) 
	#(204 1 #reduceActionForVariable1: 9145345 false ) 
	#(201 2 #reduceActionForDefineVariable1: 8936449 false ) 
	#(211 0 #reduceActionFor__eol___ModuleStatement__element____1: 9617409 false ) 
	#(206 2 #reduceActionForDefineVariables1: 9324545 false ) 
	#(180 0 #reduceActionFor__eol___ModuleStatement__element____1: 5716993 false ) 
	#(151 2 #reduceActionForOption5: 3361797 false ) 
	#(135 1 #reduceActionForIntegerLiteral1: 2114561 false ) 
	#(151 2 #reduceActionForOption1: 3361793 false ) 
	#(202 2 #reduceActionForReDefineVariable1: 8997889 false ) 
	#(207 2 #reduceActionForReDefineVariables1: 9401345 false ) 
	#(203 2 #reduceActionForStaticVariable1: 9077761 false ) 
	#(208 2 #reduceActionForStaticVariables1: 9498625 false ) 
	#(175 0 #reduceActionFor__eol___ModuleStatement__element____1: 5364737 false ) 
	#(138 1 #reduceActionForFloatLiteral1: 2294785 false ) 
	#(150 2 #reduceActionForheader1: 3297281 false ) 
	#(199 2 #reduceActionForModuleProperty1: 8715265 false ) 
	#(205 2 #reduceActionForModuleProperties1: 9224193 false ) 
	#(148 2 #reduceActionForHeadlessIdentifier1: 2899969 false ) 
	#(133 2 #reduceActionFor_eol__2: 1715202 false ) 
	#(156 0 #reduceActionFor__eol___ModuleStatement__element____1: 3911681 false ) 
	#(204 2 #reduceActionForVariable3: 9145347 false ) 
	#(171 1 #liftFirstValue: 5000193 false ) 
	#(171 1 #liftFirstValue: 5000194 false ) 
	#(204 2 #reduceActionForVariable2: 9145346 false ) 
	#(209 2 #reduceActionForVariableList1: 9581569 false ) 
	#(177 3 #reduceActionForEvent1: 5535745 false ) 
	#(151 3 #reduceActionForOption3: 3361795 false ) 
	#(151 3 #reduceActionForOption2: 3361794 false ) 
	#(151 3 #reduceActionForOption4: 3361796 false ) 
	#(151 3 #reduceActionForOption6: 3361798 false ) 
	#(202 3 #reduceActionForReDefineVariable2: 8997890 false ) 
	#(207 3 #reduceActionForReDefineVariables2: 9401346 false ) 
	#(150 3 #reduceActionForheader2: 3297282 false ) 
	#(132 2 #reduceActionFor__eol___ModuleStatement__element____2: 1714178 false ) 
	#(130 3 #reduceActionFormodule1: 1651713 false ) 
	#(149 3 #reduceActionForQualifiedIdentifier1: 2972673 false ) 
	#(247 1 #liftFirstValue: 12608513 false ) 
	#(137 1 #reduceActionForDateLiteral1: 2239489 false ) 
	#(136 1 #reduceActionForColorLiteral1: 2180097 false ) 
	#(139 1 #reduceActionForBooleanLiteral1: 2361345 false ) 
	#(140 1 #reduceActionForStringLiteral1: 2424833 false ) 
	#(141 1 #reduceActionForNull1: 2486273 false ) 
	#(214 1 #liftFirstValue: 10173443 false ) 
	#(134 1 #liftFirstValue: 1977345 false ) 
	#(134 1 #liftFirstValue: 1977346 false ) 
	#(134 1 #liftFirstValue: 1977347 false ) 
	#(134 1 #liftFirstValue: 1977348 false ) 
	#(134 1 #liftFirstValue: 1977349 false ) 
	#(134 1 #liftFirstValue: 1977350 false ) 
	#(134 1 #liftFirstValue: 1977351 false ) 
	#(134 1 #liftFirstValue: 1977352 false ) 
	#(230 1 #liftFirstValue: 11163649 false ) 
	#(227 0 #reduceActionFor_Argument__argument__________________1: 11044865 false ) 
	#(214 1 #liftFirstValue: 10173442 false ) 
	#(214 1 #liftFirstValue: 10173441 false ) 
	#(152 3 #reduceActionForSetUpAssignation1: 3677185 false ) 
	#(214 1 #liftFirstValue: 10173444 false ) 
	#(213 1 #liftFirstValue: 10068993 false ) 
	#(231 1 #liftFirstValue: 11252737 false ) 
	#(231 1 #liftFirstValue: 11252738 false ) 
	#(230 1 #liftFirstValue: 11163651 false ) 
	#(230 1 #liftFirstValue: 11163650 false ) 
	#(213 1 #liftFirstValue: 10068995 false ) 
	#(213 1 #liftFirstValue: 10068996 false ) 
	#(213 1 #liftFirstValue: 10068997 false ) 
	#(213 1 #liftFirstValue: 10068998 false ) 
	#(219 1 #liftFirstValue: 10467329 false ) 
	#(234 1 #liftFirstValue: 11450369 false ) 
	#(234 1 #liftFirstValue: 11450370 false ) 
	#(234 1 #liftFirstValue: 11450371 false ) 
	#(219 1 #liftFirstValue: 10467330 false ) 
	#(238 1 #liftFirstValue: 11741185 false ) 
	#(238 1 #liftFirstValue: 11741186 false ) 
	#(238 1 #liftFirstValue: 11741187 false ) 
	#(238 1 #liftFirstValue: 11741190 false ) 
	#(238 1 #liftFirstValue: 11741189 false ) 
	#(238 1 #liftFirstValue: 11741188 false ) 
	#(213 1 #liftFirstValue: 10068994 false ) 
	#(248 1 #liftFirstValue: 12828673 false ) 
	#(248 1 #liftFirstValue: 12828674 false ) 
	#(214 1 #liftFirstValue: 10173445 false ) 
	#(296 1 #liftFirstValue: 17362945 false ) 
	#(296 1 #liftFirstValue: 17362946 false ) 
	#(296 1 #liftFirstValue: 17362948 false ) 
	#(296 1 #liftFirstValue: 17362949 false ) 
	#(296 1 #liftFirstValue: 17362947 false ) 
	#(204 3 #reduceActionForVariable4: 9145348 false ) 
	#(163 1 #liftFirstValue: 4493313 false ) 
	#(163 1 #liftFirstValue: 4493314 false ) 
	#(163 1 #liftFirstValue: 4493315 false ) 
	#(163 1 #liftFirstValue: 4493316 false ) 
	#(163 1 #liftFirstValue: 4493317 false ) 
	#(163 1 #liftFirstValue: 4493318 false ) 
	#(163 1 #liftFirstValue: 4493319 false ) 
	#(163 1 #liftFirstValue: 4493320 false ) 
	#(163 1 #liftFirstValue: 4493321 false ) 
	#(163 1 #liftFirstValue: 4493322 false ) 
	#(163 1 #reduceActionForBaseType11: 4493323 false ) 
	#(165 1 #reduceActionForComplexType1: 4701185 false ) 
	#(166 1 #liftFirstValue: 4750337 false ) 
	#(166 1 #liftFirstValue: 4750338 false ) 
	#(167 2 #reduceActionForTypedThing1: 4783105 false ) 
	#(211 2 #reduceActionFor______Variable__variable____2: 9617410 false ) 
	#(180 2 #reduceActionFor___eol___EnumEntry__field___2: 5716994 false ) 
	#(183 2 #reduceActionForParameterList1: 6155265 false ) 
	#(182 1 #reduceActionForParameterPassingStrategy2: 6077442 false ) 
	#(182 1 #liftFirstValue: 6077441 false ) 
	#(188 0 #reduceActionFor_____Expression__default___1: 6372353 false ) 
	#(185 0 #reduceActionFor__eol___ModuleStatement__element____1: 6199297 false ) 
	#(282 1 #liftFirstValue: 16453633 false ) 
	#(159 1 #liftFirstValue: 4323330 false ) 
	#(162 0 #reduceActionFor__eol___ModuleStatement__element____1: 4446209 false ) 
	#(159 1 #liftFirstValue: 4323333 false ) 
	#(159 1 #liftFirstValue: 4323329 false ) 
	#(159 1 #liftFirstValue: 4323331 false ) 
	#(159 1 #liftFirstValue: 4323332 false ) 
	#(251 1 #liftFirstValue: 13222914 false ) 
	#(252 1 #liftFirstValue: 13320193 false ) 
	#(253 1 #liftFirstValue: 13375489 false ) 
	#(253 1 #liftFirstValue: 13375490 false ) 
	#(253 1 #liftFirstValue: 13375491 false ) 
	#(253 1 #liftFirstValue: 13375492 false ) 
	#(253 1 #liftFirstValue: 13375493 false ) 
	#(252 1 #liftFirstValue: 13320194 false ) 
	#(252 1 #liftFirstValue: 13320195 false ) 
	#(260 1 #liftFirstValue: 14373889 false ) 
	#(260 1 #liftFirstValue: 14373890 false ) 
	#(260 1 #liftFirstValue: 14373891 false ) 
	#(251 1 #liftFirstValue: 13222915 false ) 
	#(264 1 #liftFirstValue: 15064065 false ) 
	#(264 1 #liftFirstValue: 15064066 false ) 
	#(264 1 #liftFirstValue: 15064067 false ) 
	#(264 1 #liftFirstValue: 15064068 false ) 
	#(251 1 #liftFirstValue: 13222919 false ) 
	#(276 1 #liftFirstValue: 16079873 false ) 
	#(251 1 #liftFirstValue: 13222920 false ) 
	#(276 1 #liftFirstValue: 16079874 false ) 
	#(251 1 #liftFirstValue: 13222917 false ) 
	#(279 1 #liftFirstValue: 16286721 false ) 
	#(279 1 #liftFirstValue: 16286722 false ) 
	#(279 1 #liftFirstValue: 16286723 false ) 
	#(251 1 #liftFirstValue: 13222918 false ) 
	#(283 1 #liftFirstValue: 16502785 false ) 
	#(284 1 #liftFirstValue: 16523265 false ) 
	#(284 1 #liftFirstValue: 16523266 false ) 
	#(283 1 #liftFirstValue: 16502786 false ) 
	#(287 1 #liftFirstValue: 16676865 false ) 
	#(287 1 #liftFirstValue: 16676866 false ) 
	#(251 1 #liftFirstValue: 13222916 false ) 
	#(290 1 #liftFirstValue: 16852993 false ) 
	#(290 1 #liftFirstValue: 16852994 false ) 
	#(290 1 #liftFirstValue: 16852995 false ) 
	#(251 1 #liftFirstValue: 13222921 false ) 
	#(251 1 #liftFirstValue: 13222913 false ) 
	#(175 2 #reduceActionFor___eol___EnumEntry__field___2: 5364738 false ) 
	#(131 2 #reduceActionFor__eol___ModuleStatement__element___1: 1714177 false ) 
	#(177 4 #reduceActionForEvent2: 5535746 false ) 
	#(236 2 #reduceActionForPositiveOperation1: 11593729 false ) 
	#(235 2 #reduceActionForNegatedOperation1: 11526145 false ) 
	#(249 2 #reduceActionForAddressOfClause1: 12872705 false ) 
	#(232 2 #reduceActionForExplicitCall1: 11302913 false ) 
	#(250 2 #reduceActionForNewClause1: 12945409 false ) 
	#(233 2 #reduceActionForRaiseEvent1: 11367425 false ) 
	#(299 2 #reduceActionForExitDo1: 17515521 false ) 
	#(300 2 #reduceActionForExitFor1: 17550337 false ) 
	#(297 2 #reduceActionForExitFunction1: 17431553 false ) 
	#(301 2 #reduceActionForExitProperty1: 17587201 false ) 
	#(298 2 #reduceActionForExitSub1: 17478657 false ) 
	#(237 2 #reduceActionForNotOperation1: 11662337 false ) 
	#(143 1 #reduceActionFor_HEX_INTEGER___1: 2542593 false ) 
	#(222 2 #reduceActionForImplicitParenthesesLessCall1: 10690561 false ) 
	#(229 0 #reduceActionFor_Argument__argument__________________1: 11105281 false ) 
	#(241 1 #reduceActionForArithmeticOperator1: 12093441 false ) 
	#(241 1 #reduceActionForArithmeticOperator2: 12093442 false ) 
	#(241 1 #reduceActionForArithmeticOperator3: 12093443 false ) 
	#(241 1 #reduceActionForArithmeticOperator4: 12093444 false ) 
	#(239 1 #reduceActionForArithmeticOperator2: 11913218 false ) 
	#(239 1 #reduceActionForArithmeticOperator4: 11913220 false ) 
	#(239 1 #reduceActionForArithmeticOperator3: 11913219 false ) 
	#(239 1 #reduceActionForArithmeticOperator1: 11913217 false ) 
	#(239 1 #reduceActionForComparisonOperator5: 11913221 false ) 
	#(241 1 #reduceActionForArithmeticOperator7: 12093447 false ) 
	#(241 1 #reduceActionForArithmeticOperator6: 12093446 false ) 
	#(241 1 #reduceActionForComparisonOperator5: 12093445 false ) 
	#(243 1 #reduceActionForBooleanOperator1: 12264449 false ) 
	#(243 1 #reduceActionForBooleanOperator4: 12264452 false ) 
	#(239 1 #reduceActionForArithmeticOperator6: 11913222 false ) 
	#(239 1 #reduceActionForArithmeticOperator7: 11913223 false ) 
	#(243 1 #reduceActionForBooleanOperator2: 12264450 false ) 
	#(243 1 #reduceActionForBooleanOperator3: 12264451 false ) 
	#(154 5 #reduceActionForConfiguration1: 3850241 false ) 
	#(157 1 #reduceActionFor_HEX_INTEGER___1: 3913729 false ) 
	#(156 2 #reduceActionFor__eol___ModuleStatement__element____2: 3911682 false ) 
	#(170 3 #reduceActionForTypedAndInstantiatedThing1: 4877313 false ) 
	#(210 2 #reduceActionFor______Variable__variable___1: 9617409 false ) 
	#(181 1 #reduceActionForEnumEntry1: 5788673 false ) 
	#(179 2 #reduceActionFor__eol___ModuleStatement__element___1: 5716993 false ) 
	#(188 1 #reduceActionFor_____Expression__default___2: 6372354 false ) 
	#(186 2 #reduceActionForParameter1: 6256641 false ) 
	#(289 2 #reduceActionForGoSubLine1: 16770049 false ) 
	#(288 2 #reduceActionForGoSubLabel1: 16709633 false ) 
	#(286 2 #reduceActionForGoToLine1: 16611329 false ) 
	#(285 2 #reduceActionForGoToLabel1: 16555009 false ) 
	#(281 2 #reduceActionForResumeNext1: 16404481 false ) 
	#(280 2 #reduceActionForResumeLabel1: 16340993 false ) 
	#(277 2 #reduceActionForLabel1: 16105473 false ) 
	#(160 2 #reduceActionForBlock1: 4416513 false ) 
	#(174 2 #reduceActionFor__eol___ModuleStatement__element___1: 5364737 false ) 
	#(130 5 #reduceActionFormodule2: 1651714 false ) 
	#(200 5 #reduceActionForModuleConstant1: 8798209 false ) 
	#(215 3 #reduceActionForParentheseesExpression1: 10265601 false ) 
	#(143 2 #reduceActionFor_eol__2: 2542594 false ) 
	#(226 1 #reduceActionFor_Argument__argument_________________1: 11044865 false ) 
	#(226 1 #reduceActionFor_Argument__argument_________________2: 11044866 false ) 
	#(224 1 #reduceActionForArgument1: 10928129 false ) 
	#(227 2 #reduceActionFor_Argument__argument__________________2: 11044866 false ) 
	#(225 2 #reduceActionForArgumentList1: 11029505 false ) 
	#(220 3 #reduceActionForDictionaryAccess1: 10516481 false ) 
	#(245 3 #reduceActionForConcatenationOperation1: 12419073 false ) 
	#(221 3 #reduceActionForMemberAccess1: 10608641 false ) 
	#(247 3 #reduceActionForExplicitAssignement3: 12608515 false ) 
	#(246 3 #reduceActionForAssignementOrEquals1: 12516353 false ) 
	#(240 3 #reduceActionForComparisonOperation1: 11987969 false ) 
	#(242 3 #reduceActionForArithmeticOperation1: 12158977 false ) 
	#(244 3 #reduceActionForBooleanBinaryOperation1: 12313601 false ) 
	#(157 2 #reduceActionFor_eol__2: 3913730 false ) 
	#(155 2 #reduceActionFor__eol___ModuleStatement__element___1: 3911681 false ) 
	#(189 6 #reduceActionForDeclareSub1: 6632449 false ) 
	#(169 0 #reduceActionFor__eol___ModuleStatement__element____1: 4834305 false ) 
	#(178 6 #reduceActionForDefineEnum1: 5644289 false ) 
	#(186 3 #reduceActionForParameter9: 6256649 false ) 
	#(186 3 #reduceActionForParameter3: 6256643 false ) 
	#(187 2 #reduceActionFor______Variable__variable___1: 6372353 false ) 
	#(186 3 #reduceActionForParameter2: 6256642 false ) 
	#(186 3 #reduceActionForParameter5: 6256645 false ) 
	#(183 4 #reduceActionForParameterList2: 6155266 false ) 
	#(185 2 #reduceActionFor______Variable__variable____2: 6199298 false ) 
	#(291 3 #reduceActionForOnErrorGoTo1: 16913409 false ) 
	#(293 3 #reduceActionForOnExpressionGo1: 17047553 false ) 
	#(278 3 #reduceActionForLabelSub1: 16155649 false ) 
	#(162 2 #reduceActionFor___eol___EnumEntry__field___2: 4446210 false ) 
	#(194 6 #reduceActionForDefineSub1: 7545857 false ) 
	#(173 6 #reduceActionForDefineType1: 5296129 false ) 
	#(176 2 #reduceActionForTypeEntry1: 5436417 false ) 
	#(200 6 #reduceActionForModuleConstant2: 8798210 false ) 
	#(247 4 #reduceActionForExplicitAssignement2: 12608514 false ) 
	#(144 1 #reduceActionFor_HEX_INTEGER___1: 2562049 false ) 
	#(224 2 #reduceActionForArgument2: 10928130 false ) 
	#(224 2 #reduceActionForArgument3: 10928131 false ) 
	#(226 2 #reduceActionFor_Argument__argument_________________3: 11044867 false ) 
	#(226 2 #reduceActionFor_Argument__argument_________________4: 11044868 false ) 
	#(225 3 #reduceActionForArgumentList2: 11029506 false ) 
	#(228 1 #reduceActionFor_Argument__argument_________________1: 11105281 false ) 
	#(228 1 #reduceActionFor______________Argument__argument____3: 11105283 false ) 
	#(229 2 #reduceActionFor_Argument__argument__________________2: 11105282 false ) 
	#(223 4 #reduceActionForProcedureCallOrArrayAccess1: 10806273 false ) 
	#(190 7 #reduceActionForDeclareFunction1: 6822913 false ) 
	#(181 3 #reduceActionForEnumEntry2: 5788674 false ) 
	#(186 4 #reduceActionForParameter11: 6256651 false ) 
	#(186 4 #reduceActionForParameter10: 6256650 false ) 
	#(186 4 #reduceActionForParameter13: 6256653 false ) 
	#(186 4 #reduceActionForParameter4: 6256644 false ) 
	#(186 4 #reduceActionForParameter7: 6256647 false ) 
	#(186 4 #reduceActionForParameter6: 6256646 false ) 
	#(184 2 #reduceActionFor______Variable__variable___1: 6199297 false ) 
	#(193 7 #reduceActionForDefineFunction1: 7335937 false ) 
	#(195 7 #reduceActionForModulePropertyGet1: 7725057 false ) 
	#(197 7 #reduceActionForModulePropertyLet1: 8159233 false ) 
	#(196 7 #reduceActionForModulePropertySet1: 7949313 false ) 
	#(254 4 #reduceActionForInfinityLoop1: 13453313 false ) 
	#(265 4 #reduceActionForIfThenColon1: 15127553 false ) 
	#(292 4 #reduceActionForOnErrorResumeNext1: 16970753 false ) 
	#(278 4 #reduceActionForLabelSub2: 16155650 false ) 
	#(278 4 #reduceActionForLabelSub3: 16155651 false ) 
	#(161 2 #reduceActionFor__eol___ModuleStatement__element___1: 4446209 false ) 
	#(194 7 #reduceActionForDefineSub2: 7545858 false ) 
	#(189 7 #reduceActionForDeclareSub3: 6632451 false ) 
	#(178 7 #reduceActionForDefineEnum2: 5644290 false ) 
	#(194 7 #reduceActionForDefineSub5: 7545861 false ) 
	#(173 7 #reduceActionForDefineType2: 5296130 false ) 
	#(194 7 #reduceActionForDefineSub3: 7545859 false ) 
	#(144 2 #reduceActionFor_eol__2: 2562050 false ) 
	#(224 3 #reduceActionForArgument4: 10928132 false ) 
	#(228 2 #reduceActionFor______________Argument__argument____2: 11105282 false ) 
	#(228 2 #reduceActionFor_Argument__argument_________________4: 11105284 false ) 
	#(189 8 #reduceActionForDeclareSub2: 6632450 false ) 
	#(167 6 #reduceActionForTypedThing2: 4783106 false ) 
	#(169 2 #reduceActionFor______Variable__variable____2: 4834306 false ) 
	#(186 5 #reduceActionForParameter12: 6256652 false ) 
	#(186 5 #reduceActionForParameter15: 6256655 false ) 
	#(186 5 #reduceActionForParameter14: 6256654 false ) 
	#(186 5 #reduceActionForParameter8: 6256648 false ) 
	#(193 8 #reduceActionForDefineFunction2: 7335938 false ) 
	#(195 8 #reduceActionForModulePropertyGet2: 7725058 false ) 
	#(195 8 #reduceActionForModulePropertyGet3: 7725059 false ) 
	#(197 8 #reduceActionForModulePropertyLet2: 8159234 false ) 
	#(196 8 #reduceActionForModulePropertySet2: 7949314 false ) 
	#(254 5 #reduceActionForInfinityLoop2: 13453314 false ) 
	#(254 5 #reduceActionForInfinityLoop3: 13453315 false ) 
	#(259 5 #reduceActionForWhileWend1: 14210049 false ) 
	#(278 5 #reduceActionForLabelSub4: 16155652 false ) 
	#(176 4 #reduceActionForTypeEntry2: 5436418 false ) 
	#(190 8 #reduceActionForDeclareFunction3: 6822915 false ) 
	#(193 8 #reduceActionForDefineFunction5: 7335941 false ) 
	#(195 8 #reduceActionForModulePropertyGet9: 7725065 false ) 
	#(197 8 #reduceActionForModulePropertyLet5: 8159237 false ) 
	#(196 8 #reduceActionForModulePropertySet5: 7949317 false ) 
	#(194 8 #reduceActionForDefineSub6: 7545862 false ) 
	#(194 8 #reduceActionForDefineSub7: 7545863 false ) 
	#(193 8 #reduceActionForDefineFunction3: 7335939 false ) 
	#(195 8 #reduceActionForModulePropertyGet5: 7725061 false ) 
	#(197 8 #reduceActionForModulePropertyLet3: 8159235 false ) 
	#(196 8 #reduceActionForModulePropertySet3: 7949315 false ) 
	#(194 8 #reduceActionForDefineSub4: 7545860 false ) 
	#(190 9 #reduceActionForDeclareFunction2: 6822914 false ) 
	#(170 7 #reduceActionForTypedAndInstantiatedThing2: 4877314 false ) 
	#(168 2 #reduceActionFor______Variable__variable___1: 4834305 false ) 
	#(186 6 #reduceActionForParameter16: 6256656 false ) 
	#(195 9 #reduceActionForModulePropertyGet4: 7725060 false ) 
	#(255 6 #reduceActionForWhileTrue1: 13577217 false ) 
	#(257 6 #reduceActionForDoWhileTrue1: 13881345 false ) 
	#(254 6 #reduceActionForInfinityLoop4: 13453316 false ) 
	#(270 1 #reduceActionFor_HEX_INTEGER___1: 15695873 false ) 
	#(269 1 #liftFirstValue: 15695873 false ) 
	#(271 1 #liftFirstValue: 15797249 false ) 
	#(271 1 #liftFirstValue: 15797250 false ) 
	#(259 6 #reduceActionForWhileWend2: 14210050 false ) 
	#(259 6 #reduceActionForWhileWend3: 14210051 false ) 
	#(295 6 #reduceActionForWith1: 17218561 false ) 
	#(189 9 #reduceActionForDeclareSub4: 6632452 false ) 
	#(193 9 #reduceActionForDefineFunction6: 7335942 false ) 
	#(195 9 #reduceActionForModulePropertyGet10: 7725066 false ) 
	#(195 9 #reduceActionForModulePropertyGet11: 7725067 false ) 
	#(197 9 #reduceActionForModulePropertyLet6: 8159238 false ) 
	#(196 9 #reduceActionForModulePropertySet6: 7949318 false ) 
	#(193 9 #reduceActionForDefineFunction7: 7335943 false ) 
	#(195 9 #reduceActionForModulePropertyGet13: 7725069 false ) 
	#(197 9 #reduceActionForModulePropertyLet7: 8159239 false ) 
	#(196 9 #reduceActionForModulePropertySet7: 7949319 false ) 
	#(194 9 #reduceActionForDefineSub8: 7545864 false ) 
	#(193 9 #reduceActionForDefineFunction4: 7335940 false ) 
	#(195 9 #reduceActionForModulePropertyGet6: 7725062 false ) 
	#(195 9 #reduceActionForModulePropertyGet7: 7725063 false ) 
	#(197 9 #reduceActionForModulePropertyLet4: 8159236 false ) 
	#(196 9 #reduceActionForModulePropertySet4: 7949316 false ) 
	#(256 7 #reduceActionForUntilTrue1: 13731841 false ) 
	#(255 7 #reduceActionForWhileTrue2: 13577218 false ) 
	#(255 7 #reduceActionForWhileTrue3: 13577219 false ) 
	#(257 7 #reduceActionForDoWhileTrue2: 13881346 false ) 
	#(258 7 #reduceActionForDoUntilTrue1: 14038017 false ) 
	#(257 7 #reduceActionForDoWhileTrue3: 13881347 false ) 
	#(266 7 #reduceActionForIfThen1: 15218689 false ) 
	#(270 2 #reduceActionFor_eol__2: 15695874 false ) 
	#(259 7 #reduceActionForWhileWend4: 14210052 false ) 
	#(295 7 #reduceActionForWith2: 17218562 false ) 
	#(295 7 #reduceActionForWith3: 17218563 false ) 
	#(190 10 #reduceActionForDeclareFunction4: 6822916 false ) 
	#(195 10 #reduceActionForModulePropertyGet12: 7725068 false ) 
	#(193 10 #reduceActionForDefineFunction8: 7335944 false ) 
	#(195 10 #reduceActionForModulePropertyGet14: 7725070 false ) 
	#(195 10 #reduceActionForModulePropertyGet15: 7725071 false ) 
	#(197 10 #reduceActionForModulePropertyLet8: 8159240 false ) 
	#(196 10 #reduceActionForModulePropertySet8: 7949320 false ) 
	#(195 10 #reduceActionForModulePropertyGet8: 7725064 false ) 
	#(256 8 #reduceActionForUntilTrue2: 13731842 false ) 
	#(255 8 #reduceActionForWhileTrue4: 13577220 false ) 
	#(258 8 #reduceActionForDoUntilTrue2: 14038018 false ) 
	#(257 8 #reduceActionForDoWhileTrue4: 13881348 false ) 
	#(261 8 #reduceActionForForEach1: 14418945 false ) 
	#(275 0 #reduceActionFor__eol___ModuleStatement__element____1: 16000001 false ) 
	#(266 8 #reduceActionForIfThen2: 15218690 false ) 
	#(266 8 #reduceActionForIfThen3: 15218691 false ) 
	#(295 8 #reduceActionForWith4: 17218564 false ) 
	#(195 11 #reduceActionForModulePropertyGet16: 7725072 false ) 
	#(261 9 #reduceActionForForEach2: 14418946 false ) 
	#(261 9 #reduceActionForForEach3: 14418947 false ) 
	#(261 9 #reduceActionForForEach5: 14418949 false ) 
	#(262 9 #reduceActionForForNext1: 14616577 false ) 
	#(273 4 #reduceActionForElseIfColon1: 15945729 false ) 
	#(266 9 #reduceActionForIfThen4: 15218692 false ) 
	#(261 10 #reduceActionForForEach4: 14418948 false ) 
	#(261 10 #reduceActionForForEach6: 14418950 false ) 
	#(261 10 #reduceActionForForEach7: 14418951 false ) 
	#(262 10 #reduceActionForForNext2: 14616578 false ) 
	#(262 10 #reduceActionForForNext3: 14616579 false ) 
	#(267 10 #reduceActionForIfThenElse1: 15366145 false ) 
	#(272 5 #reduceActionForElseIfBlock1: 15835137 false ) 
	#(274 1 #reduceActionFor___Expression__ifMatch__________1: 16000001 false ) 
	#(275 2 #reduceActionFor______Variable__variable____2: 16000002 false ) 
	#(142 11 #reduceActionForGuidLiteral1: 2526209 false ) 
	#(261 11 #reduceActionForForEach8: 14418952 false ) 
	#(263 11 #reduceActionForForStepNext1: 14816257 false ) 
	#(262 11 #reduceActionForForNext4: 14616580 false ) 
	#(267 11 #reduceActionForIfThenElse2: 15366146 false ) 
	#(267 11 #reduceActionForIfThenElse3: 15366147 false ) 
	#(272 6 #reduceActionForElseIfBlock2: 15835138 false ) 
	#(274 2 #reduceActionFor___Expression__ifMatch__________2: 16000002 false ) 
	#(267 11 #reduceActionForIfThenElse5: 15366149 false ) 
	#(268 11 #reduceActionForIfThenElseIfElse1: 15602689 false ) 
	#(267 11 #reduceActionForIfThenElse9: 15366153 false ) 
	#(263 12 #reduceActionForForStepNext2: 14816258 false ) 
	#(263 12 #reduceActionForForStepNext3: 14816259 false ) 
	#(267 12 #reduceActionForIfThenElse4: 15366148 false ) 
	#(267 12 #reduceActionForIfThenElse6: 15366150 false ) 
	#(267 12 #reduceActionForIfThenElse7: 15366151 false ) 
	#(268 12 #reduceActionForIfThenElseIfElse2: 15602690 false ) 
	#(267 12 #reduceActionForIfThenElse10: 15366154 false ) 
	#(267 12 #reduceActionForIfThenElse11: 15366155 false ) 
	#(267 12 #reduceActionForIfThenElse13: 15366157 false ) 
	#(268 12 #reduceActionForIfThenElseIfElse3: 15602691 false ) 
	#(263 13 #reduceActionForForStepNext4: 14816260 false ) 
	#(267 13 #reduceActionForIfThenElse8: 15366152 false ) 
	#(267 13 #reduceActionForIfThenElse12: 15366156 false ) 
	#(267 13 #reduceActionForIfThenElse14: 15366158 false ) 
	#(267 13 #reduceActionForIfThenElse15: 15366159 false ) 
	#(268 13 #reduceActionForIfThenElseIfElse4: 15602692 false ) 
	#(267 14 #reduceActionForIfThenElse16: 15366160 false )
	).
]

{ #category : #'generated-accessing' }
VBParser class >> scannerClass [
	^VBScanner
]

{ #category : #generated }
VBParser class >> startingStateFormodule [
	^ 1
]

{ #category : #generated }
VBParser class >> symbolNames [
	^ #('"!"' '"!="' '"&"' '"&&"' '"("' '")"' '"*"' '"+"' '","' '"-"' '"."' '"/"' '":"' '":="' '";"' '"<"' '"<="' '"<>"' '"="' '">"' '">="' '"AddressOf"' '"Call"' '"Mod"' '"NEW"' '"RaiseEvent"' '"WithEvents"' '"["' '"\"' '"^"' '"alias"' '"and"' '"as"' '"attribute"' '"begin"' '"binary"' '"boolean"' '"byref"' '"byte"' '"byval"' '"class"' '"collection"' '"compare"' '"const"' '"database"' '"date"' '"declare"' '"delete"' '"dim"' '"do"' '"double"' '"each"' '"else"' '"elseif"' '"end"' '"enum"' '"eqv"' '"error"' '"event"' '"exit"' '"explicit"' '"for"' '"friend"' '"function"' '"get"' '"global"' '"gosub"' '"goto"' '"if"' '"in"' '"integer"' '"is"' '"let"' '"lib"' '"like"' '"long"' '"loop"' '"module"' '"next"' '"not"' '"object"' '"on"' '"option"' '"optional"' '"or"' '"paramarray"' '"preserve"' '"private"' '"property"' '"public"' '"redim"' '"resume"' '"return"' '"set"' '"single"' '"static"' '"step"' '"string"' '"sub"' '"text"' '"then"' '"to"' '"type"' '"until"' '"variant"' '"version"' '"wend"' '"while"' '"with"' '"xor"' '"{"' '"||"' '"}"' '"~"' '<lineContinuation>' '<HEX_INTEGER>' '<DATE_LITERAL>' '<COLOR_LITERAL>' '<INTEGER_LITERAL>' '<FLOATING_POINT_LITERAL>' '<BOOLEAN_LITERAL>' '<STRING_LITERAL>' '<NULL_LITERAL>' '<IDENTIFIER>' '<HASH_IDENTIFIER>' '<whitespace>' '<eol>' '<comment>' 'B e g i n' 'module' '(<eol>* ModuleStatement ''element'' )' '(<eol>* ModuleStatement ''element'' )*' '<eol>*' 'literal' 'IntegerLiteral' 'ColorLiteral' 'DateLiteral' 'FloatLiteral' 'BooleanLiteral' 'StringLiteral' 'Null' 'GuidLiteral' '<HEX_INTEGER> +' '<HEX_INTEGER>+' 'Identifier' 'HashIdentifier' 'SimpleIdentifier' 'HeadlessIdentifier' 'QualifiedIdentifier' 'header' 'Option' 'SetUpAssignation' 'Attribute' 'Configuration' '( <eol>+ SetUpAssignation ''setting'')' '( <eol>+ SetUpAssignation ''setting'')*' '<eol>+' 'ModuleStatement' 'Statement' 'Block' '(<eol>* Statement ''statement''  )' '(<eol>* Statement ''statement''  )*' 'BaseType' 'Visibility' 'ComplexType' 'Type' 'TypedThing' '( "," literal ''size'')' '( "," literal ''size'')*' 'TypedAndInstantiatedThing' 'AsType' 'Types' 'DefineType' '( <eol>* TypeEntry ''field'' )' '( <eol>* TypeEntry ''field'' )*' 'TypeEntry' 'Event' 'DefineEnum' '( <eol>* EnumEntry ''field'')' '( <eol>* EnumEntry ''field'')*' 'EnumEntry' 'ParameterPassingStrategy' 'ParameterList' '( "," Parameter ''parameter'')' '( "," Parameter ''parameter'')*' 'Parameter' '("=" Expression ''default'')' '("=" Expression ''default'')?' 'DeclareSub' 'DeclareFunction' 'DeclareExternal' 'Modifier' 'DefineFunction' 'DefineSub' 'ModulePropertyGet' 'ModulePropertySet' 'ModulePropertyLet' 'BehaviourDefinition' 'ModuleProperty' 'ModuleConstant' 'DefineVariable' 'ReDefineVariable' 'StaticVariable' 'Variable' 'ModuleProperties' 'DefineVariables' 'ReDefineVariables' 'StaticVariables' 'VariableList' '(","  Variable ''variable'' )' '(","  Variable ''variable'' )*' 'VariableDefinition' 'ValueStatement' 'Expression' 'ParentheseesExpression' 'ValueStatementList' '("," ValueStatement ''value'' )' '("," ValueStatement ''value'' ) *' 'Operation' 'DictionaryAccess' 'MemberAccess' 'ImplicitParenthesesLessCall' 'ProcedureCallOrArrayAccess' 'Argument' 'ArgumentList' '(Argument ''argument'' ? ("," | ";" ))' '(Argument ''argument'' ? ("," | ";" ))*' '( ("," | ";" )Argument ''argument'' ?)' '( ("," | ";" )Argument ''argument'' ?)*' 'ImplicitCall' 'StateAccess' 'ExplicitCall' 'RaiseEvent' 'UnaryOperation' 'NegatedOperation' 'PositiveOperation' 'NotOperation' 'BinaryOperation' 'ComparisonOperator' 'ComparisonOperation' 'ArithmeticOperator' 'ArithmeticOperation' 'BooleanOperator' 'BooleanBinaryOperation' 'ConcatenationOperation' 'AssignementOrEquals' 'ExplicitAssignement' 'ValueClause' 'AddressOfClause' 'NewClause' 'ControlFlowStatement' 'Loops' 'DoLoop' 'InfinityLoop' 'WhileTrue' 'UntilTrue' 'DoWhileTrue' 'DoUntilTrue' 'WhileWend' 'ForLoop' 'ForEach' 'ForNext' 'ForStepNext' 'If' 'IfThenColon' 'IfThen' 'IfThenElse' 'IfThenElseIfElse' '(ElseIf ''case'')' '(ElseIf ''case'') +' 'ElseIf' 'ElseIfBlock' 'ElseIfColon' '(  Expression ''ifMatch'' ?  ":" )' '(  Expression ''ifMatch'' ?  ":" )*' 'To' 'Label' 'LabelSub' 'Resume' 'ResumeLabel' 'ResumeNext' 'ResumeEmpty' 'Go' 'GoTo' 'GoToLabel' 'GoToLine' 'GoSub' 'GoSubLabel' 'GoSubLine' 'On' 'OnErrorGoTo' 'OnErrorResumeNext' 'OnExpressionGo' 'Error' 'With' 'Exits' 'ExitFunction' 'ExitSub' 'ExitDo' 'ExitFor' 'ExitProperty' 'E O F' 'error')
]

{ #category : #generated }
VBParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBModuleNode #VBModuleNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBIntegerLiteralNode #VBColorLiteralNode #VBDateLiteralNode #VBFloatLiteralNode #VBBooleanLiteralNode #VBStringLiteralNode #VBNullNode #VBGuidLiteralNode #OrderedCollection #OrderedCollection #Object #VBHashIdentifierNode #Object #VBHeadlessIdentifierNode #VBQualifiedIdentifierNode #VBHeaderNode #VBProgramNode #VBSetUpAssignationNode #VBModuleAttributeNode #VBConfigurationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #Object #VBBlockNode #OrderedCollection #OrderedCollection #Object #SmaCCToken #VBComplexTypeNode #Object #VBAsTypeNode #OrderedCollection #OrderedCollection #VBAsTypeAndNewNode #VBProgramNode #VBProgramNode #VBDefineTypeNode #OrderedCollection #OrderedCollection #VBTypeEntryNode #VBEventNode #VBDefineEnumNode #OrderedCollection #OrderedCollection #VBEnumEntryNode #Object #VBParameterListNode #OrderedCollection #OrderedCollection #VBParameterNode #OrderedCollection #OrderedCollection #VBExternalSubNode #VBExternalFunctionNode #VBProgramNode #SmaCCToken #VBFunctionDefinitionNode #VBSubDefinitionNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBProgramNode #VBModulePropertyNode #VBModuleConstantNode #VBDimVariableNode #VBReDimVariableNode #VBStaticVariableNode #VBVariableNode #VBModuleMultiplePropertiesNode #VBDimMultipleVariablesNode #VBReDimMultipleVariablesNode #VBStaticMultipleVariablesNode #VBVariableListNode #OrderedCollection #OrderedCollection #VBProgramNode #Object #Object #VBParentheseesExpressionNode #VBValueStatementListNode #OrderedCollection #OrderedCollection #Object #VBDictionaryAccessNode #VBMemberAccessNode #VBImplicitParenthesesLessCallNode #VBProcedureCallOrArrayAccessNode #VBArgumentNode #VBArgumentListNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #Object #VBProgramNode #VBExplicitCallNode #VBRaiseEventNode #VBProgramNode #VBNegatedOperationNode #VBPositiveOperationNode #VBNotOperationNode #Object #OrderedCollection #VBComparisonOperationNode #OrderedCollection #VBArithmeticOperationNode #OrderedCollection #VBArithmeticOperationNode #VBConcatenationOperationNode #VBAssignementOrEqualsNode #Object #VBProgramNode #VBAddressOfClauseNode #VBNewClauseNode #Object #VBProgramNode #VBProgramNode #VBInfinityLoopNode #VBWhileTrueNode #VBUntilTrueNode #VBDoWhileTrueNode #VBDoUntilTrueNode #VBWhileWendNode #VBProgramNode #VBForEachNode #VBForNextNode #VBForStepNextNode #VBProgramNode #VBIfThenColonNode #VBIfThenNode #VBIfThenElseNode #VBIfThenElseIfElseNode #VBProgramNode #OrderedCollection #VBProgramNode #VBElseIfBlockNode #VBElseIfColonNode #OrderedCollection #OrderedCollection #VBProgramNode #VBGoToLabelNode #VBGoSubLabelNode #Object #VBResumeLabelNode #VBResumeNextNode #SmaCCToken #VBProgramNode #VBProgramNode #VBGoToLabelNode #VBGoToLineNode #VBProgramNode #VBGoSubLabelNode #VBGoSubLineNode #VBProgramNode #VBOnErrorGoToNode #VBOnErrorResumeNextNode #VBOnExpressionGoNode #VBErrorNode #VBWithNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBParser class >> transitionTable [
^#(
#[1 0 9 0 34 0 13 0 35 0 17 0 47 0 21 0 49 0 25 0 56 0 29 0 59 0 105 0 63 0 37 0 64 0 105 0 66 0 45 0 83 0 105 0 88 0 53 0 89 0 105 0 90 0 61 0 91 0 65 0 96 0 69 0 99 0 73 0 103 0 77 0 106 0 81 0 130 0 85 0 150 0 101 0 151 0 101 0 153 0 101 0 154 0 101 0 158 0 105 0 164 0 101 0 172 0 101 0 173 0 101 0 177 0 101 0 178 0 101 0 189 0 101 0 190 0 101 0 191 0 137 0 192 0 101 0 193 0 101 0 194 0 101 0 195 0 101 0 196 0 101 0 197 0 101 0 198 0 101 0 199 0 101 0 200 0 101 0 201 0 101 0 202 0 101 0 203 0 101 0 205 0 101 0 206 0 101 0 207 0 101 0 208 0 101 0 212] 
#[1 0 205 0 11 0 209 0 100 0 221 0 124 0 217 0 125 0 221 0 145 0 221 0 146 0 221 0 147 0 221 0 148 0 221 0 149 0 241 0 152] 
#[1 0 6 0 11 0 6 0 100 0 6 0 124 0 6 0 125 0 6 0 127 0 245 0 133] 
#[1 0 249 0 64 0 253 0 99] 
#[1 0 205 0 11 1 1 0 27 0 209 0 100 1 5 0 124 0 217 0 125 1 5 0 145 1 5 0 146 1 5 0 147 1 5 0 148 1 5 0 149 1 9 0 204 1 13 0 209] 
#[1 0 205 0 11 0 209 0 100 1 17 0 124 0 217 0 125 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 149] 
#[1 0 205 0 11 0 209 0 100 1 21 0 124 0 217 0 125 1 21 0 145 1 21 0 146 1 21 0 147 1 21 0 148 1 21 0 149] 
#[0 0 10 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 100 0 103 0 124 0 125] 
#[1 0 205 0 11 0 209 0 100 1 25 0 124 0 217 0 125 1 25 0 145 1 25 0 146 1 25 0 147 1 25 0 148 1 25 0 149] 
#[0 0 14 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 100 0 103 0 124 0 125] 
#[1 1 29 0 43 1 33 0 61 1 37 0 88 1 41 0 119 1 45 0 135] 
#[0 0 18 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 100 0 103 0 124 0 125] 
#[1 1 49 0 65 1 53 0 73 1 57 0 94] 
#[0 0 22 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 100 0 103 0 124 0 125] 
#[1 0 205 0 11 1 1 0 27 1 61 0 87 0 209 0 100 1 5 0 124 0 217 0 125 1 5 0 145 1 5 0 146 1 5 0 147 1 5 0 148 1 5 0 149 1 65 0 204 1 69 0 209] 
#[1 0 205 0 11 1 1 0 27 0 26 0 64 0 26 0 89 0 26 0 99 0 209 0 100 1 5 0 124 0 217 0 125 1 5 0 145 1 5 0 146 1 5 0 147 1 5 0 148 1 5 0 149 1 73 0 204 1 77 0 209] 
#[1 0 205 0 11 0 209 0 100 1 81 0 124 0 217 0 125 1 81 0 145 1 81 0 146 1 81 0 147 1 81 0 148 1 81 0 149] 
#[1 0 205 0 11 0 209 0 100 1 85 0 124 0 217 0 125 1 85 0 145 1 85 0 146 1 85 0 147 1 85 0 148 1 85 0 149] 
#[1 1 89 0 120 1 93 0 138] 
#[0 0 0 1 46] 
#[1 0 6 0 34 0 6 0 35 0 6 0 47 0 6 0 49 0 6 0 56 0 6 0 59 0 6 0 63 0 6 0 64 0 6 0 66 0 6 0 83 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 96 0 6 0 99 0 6 0 103 0 6 0 127 1 97 0 133] 
#[0 0 30 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 34 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 38 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 0 42 0 34 0 42 0 35 0 42 0 47 0 42 0 49 0 42 0 56 0 42 0 59 0 42 0 63 0 42 0 64 0 42 0 66 0 42 0 83 0 42 0 88 0 42 0 89 0 42 0 90 0 42 0 91 0 42 0 96 0 42 0 99 0 42 0 103 0 42 0 127 1 101 0 132 0 42 1 46] 
#[1 0 205 0 11 1 1 0 27 1 105 0 44 1 109 0 47 1 113 0 56 1 117 0 59 1 121 0 64 1 125 0 89 1 141 0 96 1 133 0 99 0 209 0 100 1 137 0 103 1 5 0 124 0 217 0 125 1 5 0 145 1 5 0 146 1 5 0 147 1 5 0 148 1 5 0 149 1 141 0 192 1 145 0 204 1 149 0 209] 
#[0 0 46 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 50 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 54 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 58 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 62 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 66 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 70 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 1 153 0 64 1 157 0 89 1 161 0 99] 
#[0 0 74 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 78 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 82 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 86 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 90 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 94 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 0 98 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 106 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 118 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 122 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 126 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 130 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 134 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 0 205 0 11 0 209 0 100 1 165 0 124 0 217 0 125 1 165 0 145 1 165 0 146 1 165 0 147 1 165 0 148 1 165 0 149] 
#[0 0 138 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 142 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 146 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 169 0 11 1 173 0 19] 
#[0 0 150 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 154 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 158 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 162 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 166 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 205 0 11 0 209 0 100 0 221 0 124 0 217 0 125 1 177 0 127 0 221 0 145 0 221 0 146 0 221 0 147 0 221 0 148 0 221 0 149 1 181 0 152] 
#[1 0 205 0 11 0 209 0 100 1 185 0 124 0 217 0 125 1 185 0 145 1 185 0 146 1 185 0 147 1 185 0 148 1 185 0 149] 
#[1 0 205 0 11 0 209 0 100 1 189 0 124 0 217 0 125 1 189 0 145 1 189 0 146 1 189 0 147 1 189 0 148 1 189 0 149] 
#[1 0 205 0 11 0 209 0 100 1 193 0 124 0 217 0 125 1 193 0 145 1 193 0 146 1 193 0 147 1 193 0 148 1 193 0 149] 
#[1 0 170 0 5 0 170 0 8 0 170 0 9 0 170 0 10 1 169 0 11 0 170 0 22 0 170 0 23 0 170 0 25 0 170 0 26 1 197 0 33 0 170 0 34 0 170 0 35 0 170 0 47 0 170 0 49 0 170 0 50 0 170 0 53 0 170 0 54 0 170 0 55 0 170 0 56 0 170 0 59 0 170 0 60 0 170 0 62 0 170 0 63 0 170 0 64 0 170 0 66 0 170 0 67 0 170 0 68 0 170 0 69 0 170 0 73 0 170 0 77 0 170 0 79 0 170 0 80 0 170 0 82 0 170 0 83 0 170 0 88 0 170 0 89 0 170 0 90 0 170 0 91 0 170 0 92 0 170 0 93 0 170 0 94 0 170 0 96 0 170 0 99 0 170 0 100 0 170 0 103 0 170 0 107 0 170 0 108 0 170 0 109 0 170 0 111 0 170 0 117 0 170 0 118 0 170 0 119 0 170 0 120 0 170 0 121 0 170 0 122 0 170 0 123 0 170 0 124 0 170 0 125 0 170 0 127 1 209 0 167 1 209 0 170 1 209 0 171 0 170 1 46] 
#[1 0 7 0 5 0 7 0 8 0 178 0 9 0 7 0 10 0 7 0 11 0 7 0 22 0 7 0 23 0 7 0 25 0 7 0 26 0 7 0 34 0 7 0 35 0 7 0 47 0 7 0 49 0 7 0 50 0 7 0 53 0 7 0 54 0 7 0 55 0 7 0 56 0 7 0 59 0 7 0 60 0 7 0 62 0 7 0 63 0 7 0 64 0 7 0 66 0 7 0 67 0 7 0 68 0 7 0 69 0 7 0 73 0 7 0 77 0 7 0 79 0 7 0 80 0 7 0 82 0 7 0 83 0 7 0 88 0 7 0 89 0 7 0 90 0 7 0 91 0 7 0 92 0 7 0 93 0 7 0 94 0 7 0 96 0 7 0 99 0 7 0 100 0 7 0 103 0 7 0 107 0 7 0 108 0 7 0 109 0 7 0 111 0 7 0 117 0 7 0 118 0 7 0 119 0 7 0 120 0 7 0 121 0 7 0 122 0 7 0 123 0 7 0 124 0 7 0 125 0 7 0 127 1 213 0 211 0 7 1 46] 
#[0 0 182 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 169 0 11 0 186 0 55 0 186 0 100 0 186 0 124 0 186 0 125 0 186 0 127 1 217 0 180] 
#[1 1 221 0 5 1 169 0 11 1 225 0 183] 
#[1 1 221 0 5 1 169 0 11 1 229 0 183] 
#[1 1 233 0 36 1 237 0 45 1 241 0 100] 
#[0 0 190 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 1 245 0 78] 
#[0 0 194 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 0 198 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 0 205 0 11 0 209 0 100 1 249 0 124 0 217 0 125 1 249 0 145 1 249 0 146 1 249 0 147 1 249 0 148 1 249 0 149] 
#[1 0 205 0 11 0 209 0 100 1 253 0 124 0 217 0 125 1 253 0 145 1 253 0 146 1 253 0 147 1 253 0 148 1 253 0 149] 
#[1 0 205 0 11 0 209 0 100 2 1 0 124 0 217 0 125 2 1 0 145 2 1 0 146 2 1 0 147 2 1 0 148 2 1 0 149] 
#[1 0 205 0 11 1 1 0 27 0 209 0 100 1 5 0 124 0 217 0 125 1 5 0 145 1 5 0 146 1 5 0 147 1 5 0 148 1 5 0 149 2 5 0 204 2 9 0 209] 
#[1 0 11 0 5 0 11 0 8 0 178 0 9 0 11 0 10 0 11 0 11 0 11 0 22 0 11 0 23 0 11 0 25 0 11 0 26 0 11 0 34 0 11 0 35 0 11 0 47 0 11 0 49 0 11 0 50 0 11 0 53 0 11 0 54 0 11 0 55 0 11 0 56 0 11 0 59 0 11 0 60 0 11 0 62 0 11 0 63 0 11 0 64 0 11 0 66 0 11 0 67 0 11 0 68 0 11 0 69 0 11 0 73 0 11 0 77 0 11 0 79 0 11 0 80 0 11 0 82 0 11 0 83 0 11 0 88 0 11 0 89 0 11 0 90 0 11 0 91 0 11 0 92 0 11 0 93 0 11 0 94 0 11 0 96 0 11 0 99 0 11 0 100 0 11 0 103 0 11 0 107 0 11 0 108 0 11 0 109 0 11 0 111 0 11 0 117 0 11 0 118 0 11 0 119 0 11 0 120 0 11 0 121 0 11 0 122 0 11 0 123 0 11 0 124 0 11 0 125 0 11 0 127 1 213 0 211 0 11 1 46] 
#[0 0 206 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 15 0 5 0 15 0 8 0 178 0 9 0 15 0 10 0 15 0 11 0 15 0 22 0 15 0 23 0 15 0 25 0 15 0 26 0 15 0 34 0 15 0 35 0 15 0 47 0 15 0 49 0 15 0 50 0 15 0 53 0 15 0 54 0 15 0 55 0 15 0 56 0 15 0 59 0 15 0 60 0 15 0 62 0 15 0 63 0 15 0 64 0 15 0 66 0 15 0 67 0 15 0 68 0 15 0 69 0 15 0 73 0 15 0 77 0 15 0 79 0 15 0 80 0 15 0 82 0 15 0 83 0 15 0 88 0 15 0 89 0 15 0 90 0 15 0 91 0 15 0 92 0 15 0 93 0 15 0 94 0 15 0 96 0 15 0 99 0 15 0 100 0 15 0 103 0 15 0 107 0 15 0 108 0 15 0 109 0 15 0 111 0 15 0 117 0 15 0 118 0 15 0 119 0 15 0 120 0 15 0 121 0 15 0 122 0 15 0 123 0 15 0 124 0 15 0 125 0 15 0 127 1 213 0 211 0 15 1 46] 
#[0 0 214 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 2 13 0 133 2 17 0 183] 
#[1 1 169 0 11 0 218 0 55 0 218 0 100 0 218 0 124 0 218 0 125 0 218 0 127 2 21 0 175] 
#[0 0 222 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 41 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 226 0 34 0 226 0 35 2 25 0 41 0 226 0 47 0 226 0 49 0 226 0 56 0 226 0 59 0 226 0 63 0 226 0 64 0 226 0 66 0 226 0 83 0 226 0 88 0 226 0 89 0 226 0 90 0 226 0 91 0 226 0 96 0 226 0 99 0 226 0 103 0 226 0 127] 
#[1 0 9 0 34 0 13 0 35 0 17 0 47 0 21 0 49 0 25 0 56 0 29 0 59 0 105 0 63 0 37 0 64 0 105 0 66 0 45 0 83 0 105 0 88 0 53 0 89 0 105 0 90 0 61 0 91 0 65 0 96 0 69 0 99 0 73 0 103 1 177 0 127 2 29 0 151 2 29 0 153 2 29 0 154 2 29 0 158 0 105 0 164 2 29 0 172 2 29 0 173 2 29 0 177 2 29 0 178 2 29 0 189 2 29 0 190 2 29 0 191 0 137 0 192 2 29 0 193 2 29 0 194 2 29 0 195 2 29 0 196 2 29 0 197 2 29 0 198 2 29 0 199 2 29 0 200 2 29 0 201 2 29 0 202 2 29 0 203 2 29 0 205 2 29 0 206 2 29 0 207 2 29 0 208 2 29 0 212] 
#[1 0 6 0 34 0 6 0 35 0 6 0 47 0 6 0 49 0 6 0 56 0 6 0 59 0 6 0 63 0 6 0 64 0 6 0 66 0 6 0 83 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 96 0 6 0 99 0 6 0 103 0 6 0 127 2 33 0 131 2 37 0 133 0 6 1 46] 
#[1 0 205 0 11 0 209 0 100 2 41 0 124 0 217 0 125 2 41 0 145 2 41 0 146 2 41 0 147 2 41 0 148 2 41 0 149] 
#[1 2 45 0 64 2 49 0 99] 
#[1 0 205 0 11 0 209 0 100 2 53 0 124 0 217 0 125 2 53 0 145 2 53 0 146 2 53 0 147 2 53 0 148 2 53 0 149] 
#[1 0 205 0 11 0 209 0 100 2 57 0 124 0 217 0 125 2 57 0 145 2 57 0 146 2 57 0 147 2 57 0 148 2 57 0 149] 
#[1 0 205 0 11 0 209 0 100 2 61 0 124 0 217 0 125 2 61 0 145 2 61 0 146 2 61 0 147 2 61 0 148 2 61 0 149] 
#[1 2 65 0 65 2 69 0 73 2 73 0 94] 
#[0 0 26 0 64 0 89 0 99] 
#[1 0 205 0 11 0 209 0 100 2 77 0 124 0 217 0 125 2 77 0 145 2 77 0 146 2 77 0 147 2 77 0 148 2 77 0 149] 
#[1 0 205 0 11 0 209 0 100 2 81 0 124 0 217 0 125 2 81 0 145 2 81 0 146 2 81 0 147 2 81 0 148 2 81 0 149] 
#[1 2 85 0 64 2 89 0 89 2 93 0 99] 
#[1 0 19 0 5 0 19 0 8 0 178 0 9 0 19 0 10 0 19 0 11 0 19 0 22 0 19 0 23 0 19 0 25 0 19 0 26 0 19 0 34 0 19 0 35 0 19 0 47 0 19 0 49 0 19 0 50 0 19 0 53 0 19 0 54 0 19 0 55 0 19 0 56 0 19 0 59 0 19 0 60 0 19 0 62 0 19 0 63 0 19 0 64 0 19 0 66 0 19 0 67 0 19 0 68 0 19 0 69 0 19 0 73 0 19 0 77 0 19 0 79 0 19 0 80 0 19 0 82 0 19 0 83 0 19 0 88 0 19 0 89 0 19 0 90 0 19 0 91 0 19 0 92 0 19 0 93 0 19 0 94 0 19 0 96 0 19 0 99 0 19 0 100 0 19 0 103 0 19 0 107 0 19 0 108 0 19 0 109 0 19 0 111 0 19 0 117 0 19 0 118 0 19 0 119 0 19 0 120 0 19 0 121 0 19 0 122 0 19 0 123 0 19 0 124 0 19 0 125 0 19 0 127 1 213 0 211 0 19 1 46] 
#[0 0 234 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 205 0 11 0 209 0 100 2 97 0 124 0 217 0 125 2 97 0 145 2 97 0 146 2 97 0 147 2 97 0 148 2 97 0 149] 
#[1 2 101 0 65 2 105 0 73 2 109 0 94] 
#[1 0 205 0 11 0 209 0 100 2 113 0 124 0 217 0 125 2 113 0 145 2 113 0 146 2 113 0 147 2 113 0 148 2 113 0 149] 
#[0 0 238 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 117 0 124] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 2 233 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 2 233 0 134 2 233 0 135 2 233 0 136 2 233 0 137 2 233 0 138 2 233 0 139 2 233 0 140 2 233 0 141 2 233 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 2 233 0 213 2 233 0 214 2 233 0 215 2 233 0 219 2 233 0 220 2 233 0 221 2 233 0 222 2 233 0 223 2 233 0 230 2 233 0 231 2 233 0 232 2 233 0 233 2 233 0 234 2 233 0 235 2 233 0 236 2 233 0 237 2 233 0 238 2 233 0 240 2 233 0 242 2 233 0 244 2 233 0 245 2 233 0 246 2 233 0 247 2 233 0 248 2 233 0 249 2 233 0 250 2 233 1 40 2 233 1 41 2 233 1 42 2 233 1 43 2 233 1 44 2 233 1 45] 
#[0 0 242 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 246 0 55 0 246 0 127 3 101 0 156] 
#[1 1 169 0 11 3 105 0 74] 
#[1 1 169 0 11 3 109 0 74] 
#[1 0 250 0 5 0 250 0 8 0 250 0 9 0 250 0 10 1 169 0 11 0 250 0 22 0 250 0 23 0 250 0 25 0 250 0 26 1 197 0 33 0 250 0 34 0 250 0 35 0 250 0 47 0 250 0 49 0 250 0 50 0 250 0 53 0 250 0 54 0 250 0 55 0 250 0 56 0 250 0 59 0 250 0 60 0 250 0 62 0 250 0 63 0 250 0 64 0 250 0 66 0 250 0 67 0 250 0 68 0 250 0 69 0 250 0 73 0 250 0 77 0 250 0 79 0 250 0 80 0 250 0 82 0 250 0 83 0 250 0 88 0 250 0 89 0 250 0 90 0 250 0 91 0 250 0 92 0 250 0 93 0 250 0 94 0 250 0 96 0 250 0 99 0 250 0 100 0 250 0 103 0 250 0 107 0 250 0 108 0 250 0 109 0 250 0 111 0 250 0 117 0 250 0 118 0 250 0 119 0 250 0 120 0 250 0 121 0 250 0 122 0 250 0 123 0 250 0 124 0 250 0 125 0 250 0 127 3 113 0 167 3 113 0 170 3 113 0 171 0 250 1 46] 
#[1 0 205 0 11 3 117 0 25 3 177 0 37 3 177 0 39 3 177 0 42 3 177 0 46 3 177 0 51 3 177 0 71 3 177 0 76 3 177 0 81 3 177 0 95 3 177 0 98 0 209 0 100 3 161 0 105 3 165 0 124 0 217 0 125 3 165 0 145 3 165 0 146 3 165 0 147 3 165 0 148 3 165 0 149 3 177 0 163 3 177 0 165 3 177 0 166] 
#[0 0 254 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 2 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 6 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 10 0 5 1 10 0 8 3 181 0 9 1 10 0 10 1 10 0 11 1 10 0 22 1 10 0 23 1 10 0 25 1 10 0 26 1 10 0 34 1 10 0 35 1 10 0 47 1 10 0 49 1 10 0 50 1 10 0 53 1 10 0 54 1 10 0 55 1 10 0 56 1 10 0 59 1 10 0 60 1 10 0 62 1 10 0 63 1 10 0 64 1 10 0 66 1 10 0 67 1 10 0 68 1 10 0 69 1 10 0 73 1 10 0 77 1 10 0 79 1 10 0 80 1 10 0 82 1 10 0 83 1 10 0 88 1 10 0 89 1 10 0 90 1 10 0 91 1 10 0 92 1 10 0 93 1 10 0 94 1 10 0 96 1 10 0 99 1 10 0 100 1 10 0 103 1 10 0 107 1 10 0 108 1 10 0 109 1 10 0 111 1 10 0 117 1 10 0 118 1 10 0 119 1 10 0 120 1 10 0 121 1 10 0 122 1 10 0 123 1 10 0 124 1 10 0 125 1 10 0 127 3 185 0 210 1 10 1 46] 
#[1 0 6 0 11 0 6 0 55 0 6 0 100 0 6 0 124 0 6 0 125 0 6 0 127 3 189 0 133 3 193 0 179] 
#[1 3 197 0 6 0 205 0 11 3 201 0 38 3 221 0 40 3 209 0 84 3 213 0 86 0 209 0 100 3 217 0 124 0 217 0 125 3 217 0 145 3 217 0 146 3 217 0 147 3 217 0 148 3 217 0 149 3 221 0 182 3 225 0 186] 
#[0 1 14 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 3 229 0 133 3 233 0 167 3 233 0 170 3 233 0 171] 
#[0 1 18 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 1 22 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 1 26 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 1 30 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 3 237 0 133 3 241 0 167 3 241 0 170 3 241 0 171 3 245 0 183] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 3 249 0 133 3 253 0 183] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 4 1 0 133 4 5 0 183] 
#[1 0 23 0 5 0 23 0 8 0 178 0 9 0 23 0 10 0 23 0 11 0 23 0 22 0 23 0 23 0 23 0 25 0 23 0 26 0 23 0 34 0 23 0 35 0 23 0 47 0 23 0 49 0 23 0 50 0 23 0 53 0 23 0 54 0 23 0 55 0 23 0 56 0 23 0 59 0 23 0 60 0 23 0 62 0 23 0 63 0 23 0 64 0 23 0 66 0 23 0 67 0 23 0 68 0 23 0 69 0 23 0 73 0 23 0 77 0 23 0 79 0 23 0 80 0 23 0 82 0 23 0 83 0 23 0 88 0 23 0 89 0 23 0 90 0 23 0 91 0 23 0 92 0 23 0 93 0 23 0 94 0 23 0 96 0 23 0 99 0 23 0 100 0 23 0 103 0 23 0 107 0 23 0 108 0 23 0 109 0 23 0 111 0 23 0 117 0 23 0 118 0 23 0 119 0 23 0 120 0 23 0 121 0 23 0 122 0 23 0 123 0 23 0 124 0 23 0 125 0 23 0 127 1 213 0 211 0 23 1 46] 
#[0 1 38 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 4 61 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 4 233 0 133] 
#[1 0 6 0 11 0 6 0 55 0 6 0 100 0 6 0 124 0 6 0 125 0 6 0 127 4 237 0 133 4 241 0 174] 
#[0 1 42 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127] 
#[1 0 42 0 34 0 42 0 35 0 42 0 47 0 42 0 49 0 42 0 56 0 42 0 59 0 42 0 63 0 42 0 64 0 42 0 66 0 42 0 83 0 42 0 88 0 42 0 89 0 42 0 90 0 42 0 91 0 42 0 96 0 42 0 99 0 42 0 103 0 42 0 127 4 245 0 132 0 42 1 46] 
#[0 1 46 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 0 9 0 34 0 13 0 35 0 17 0 47 0 21 0 49 0 25 0 56 0 29 0 59 0 105 0 63 0 37 0 64 0 105 0 66 0 45 0 83 0 105 0 88 0 53 0 89 0 105 0 90 0 61 0 91 0 65 0 96 0 69 0 99 0 73 0 103 1 177 0 127 4 249 0 151 4 249 0 153 4 249 0 154 4 249 0 158 0 105 0 164 4 249 0 172 4 249 0 173 4 249 0 177 4 249 0 178 4 249 0 189 4 249 0 190 4 249 0 191 0 137 0 192 4 249 0 193 4 249 0 194 4 249 0 195 4 249 0 196 4 249 0 197 4 249 0 198 4 249 0 199 4 249 0 200 4 249 0 201 4 249 0 202 4 249 0 203 4 249 0 205 4 249 0 206 4 249 0 207 4 249 0 208 4 249 0 212 1 50 1 46] 
#[1 1 169 0 11 4 253 0 19 1 197 0 33 5 1 0 167 5 1 0 170 5 1 0 171] 
#[1 0 205 0 11 0 209 0 100 5 5 0 124 0 217 0 125 5 5 0 145 5 5 0 146 5 5 0 147 5 5 0 148 5 5 0 149] 
#[1 0 205 0 11 0 209 0 100 5 9 0 124 0 217 0 125 5 9 0 145 5 9 0 146 5 9 0 147 5 9 0 148 5 9 0 149] 
#[1 1 169 0 11 0 186 0 55 0 186 0 100 0 186 0 124 0 186 0 125 0 186 0 127 5 13 0 180] 
#[1 1 221 0 5 1 169 0 11 5 17 0 183] 
#[1 1 221 0 5 1 169 0 11 5 21 0 183] 
#[1 0 205 0 11 0 209 0 100 5 25 0 124 0 217 0 125 5 25 0 145 5 25 0 146 5 25 0 147 5 25 0 148 5 25 0 149] 
#[1 0 205 0 11 0 209 0 100 5 29 0 124 0 217 0 125 5 29 0 145 5 29 0 146 5 29 0 147 5 29 0 148 5 29 0 149] 
#[1 0 205 0 11 0 209 0 100 5 33 0 124 0 217 0 125 5 33 0 145 5 33 0 146 5 33 0 147 5 33 0 148 5 33 0 149] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 5 37 0 133 5 41 0 183] 
#[1 1 169 0 11 0 218 0 55 0 218 0 100 0 218 0 124 0 218 0 125 0 218 0 127 5 45 0 175] 
#[1 0 205 0 11 0 209 0 100 5 49 0 124 0 217 0 125 5 49 0 145 5 49 0 146 5 49 0 147 5 49 0 148 5 49 0 149] 
#[1 5 53 0 65 5 57 0 73 5 61 0 94] 
#[1 0 205 0 11 0 209 0 100 5 65 0 124 0 217 0 125 5 65 0 145 5 65 0 146 5 65 0 147 5 65 0 148 5 65 0 149] 
#[1 1 221 0 5 1 169 0 11 5 69 0 183] 
#[1 0 205 0 11 0 209 0 100 5 73 0 124 0 217 0 125 5 73 0 145 5 73 0 146 5 73 0 147 5 73 0 148 5 73 0 149] 
#[1 0 205 0 11 0 209 0 100 5 77 0 124 0 217 0 125 5 77 0 145 5 77 0 146 5 77 0 147 5 77 0 148 5 77 0 149] 
#[1 0 205 0 11 0 209 0 100 5 81 0 124 0 217 0 125 5 81 0 145 5 81 0 146 5 81 0 147 5 81 0 148 5 81 0 149] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 5 85 0 133 5 89 0 183] 
#[0 1 54 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 5 93 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 93 0 134 5 93 0 135 5 93 0 136 5 93 0 137 5 93 0 138 5 93 0 139 5 93 0 140 5 93 0 141 5 93 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 5 93 0 213 5 93 0 214 5 93 0 215 5 93 0 219 5 93 0 220 5 93 0 221 5 93 0 222 5 93 0 223 5 93 0 230 5 93 0 231 5 93 0 232 5 93 0 233 5 93 0 234 5 93 0 235 5 93 0 236 5 93 0 237 5 93 0 238 5 93 0 240 5 93 0 242 5 93 0 244 5 93 0 245 5 93 0 246 5 93 0 247 5 93 0 248 5 93 0 249 5 93 0 250 5 93 1 40 5 93 1 41 5 93 1 42 5 93 1 43 5 93 1 44 5 93 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 5 97 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 97 0 134 5 97 0 135 5 97 0 136 5 97 0 137 5 97 0 138 5 97 0 139 5 97 0 140 5 97 0 141 5 97 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 5 97 0 213 5 97 0 214 5 97 0 215 5 97 0 219 5 97 0 220 5 97 0 221 5 97 0 222 5 97 0 223 5 97 0 230 5 97 0 231 5 97 0 232 5 97 0 233 5 97 0 234 5 97 0 235 5 97 0 236 5 97 0 237 5 97 0 238 5 97 0 240 5 97 0 242 5 97 0 244 5 97 0 245 5 97 0 246 5 97 0 247 5 97 0 248 5 97 0 249 5 97 0 250 5 97 1 40 5 97 1 41 5 97 1 42 5 97 1 43 5 97 1 44 5 97 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 5 101 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 101 0 134 5 101 0 135 5 101 0 136 5 101 0 137 5 101 0 138 5 101 0 139 5 101 0 140 5 101 0 141 5 101 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 5 101 0 213 5 101 0 214 5 101 0 215 5 101 0 219 5 101 0 220 5 101 0 221 5 101 0 222 5 101 0 223 5 101 0 230 5 101 0 231 5 101 0 232 5 101 0 233 5 101 0 234 5 101 0 235 5 101 0 236 5 101 0 237 5 101 0 238 5 101 0 240 5 101 0 242 5 101 0 244 5 101 0 245 5 101 0 246 5 101 0 247 5 101 0 248 5 101 0 249 5 101 0 250 5 101 1 40 5 101 1 41 5 101 1 42 5 101 1 43 5 101 1 44 5 101 1 45] 
#[1 0 205 0 11 0 209 0 100 5 105 0 124 0 217 0 125 5 105 0 145 5 105 0 146 5 105 0 147 5 105 0 148 5 105 0 149] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 5 109 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 109 0 134 5 109 0 135 5 109 0 136 5 109 0 137 5 109 0 138 5 109 0 139 5 109 0 140 5 109 0 141 5 109 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 5 109 0 213 5 109 0 214 5 109 0 215 5 109 0 219 5 109 0 220 5 109 0 221 5 113 0 222 5 113 0 223 5 113 0 230 5 109 0 231 5 109 0 232 5 109 0 233 5 109 0 234 5 109 0 235 5 109 0 236 5 109 0 237 5 109 0 238 5 109 0 240 5 109 0 242 5 109 0 244 5 109 0 245 5 109 0 246 5 109 0 247 5 109 0 248 5 109 0 249 5 109 0 250 5 109 1 40 5 109 1 41 5 109 1 42 5 109 1 43 5 109 1 44 5 109 1 45] 
#[1 0 205 0 11 0 209 0 100 5 117 0 124 0 217 0 125 5 117 0 145 5 117 0 146 5 117 0 147 5 117 0 148 5 117 0 149] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 5 109 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 109 0 134 5 109 0 135 5 109 0 136 5 109 0 137 5 109 0 138 5 109 0 139 5 109 0 140 5 109 0 141 5 109 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 5 109 0 213 5 109 0 214 5 109 0 215 5 109 0 219 5 109 0 220 5 109 0 221 5 121 0 222 5 121 0 223 5 121 0 230 5 109 0 231 5 109 0 232 5 109 0 233 5 109 0 234 5 109 0 235 5 109 0 236 5 109 0 237 5 109 0 238 5 109 0 240 5 109 0 242 5 109 0 244 5 109 0 245 5 109 0 246 5 109 0 247 5 109 0 248 5 109 0 249 5 109 0 250 5 109 1 40 5 109 1 41 5 109 1 42 5 109 1 43 5 109 1 44 5 109 1 45] 
#[1 5 125 0 50 5 129 0 62 5 133 0 64 5 137 0 89 5 141 0 99] 
#[0 1 58 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 5 145 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 145 0 134 5 145 0 135 5 145 0 136 5 145 0 137 5 145 0 138 5 145 0 139 5 145 0 140 5 145 0 141 5 145 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 5 145 0 213 5 145 0 214 5 145 0 215 5 145 0 219 5 145 0 220 5 145 0 221 5 145 0 222 5 145 0 223 5 145 0 230 5 145 0 231 5 145 0 232 5 145 0 233 5 145 0 234 5 145 0 235 5 145 0 236 5 145 0 237 5 145 0 238 5 145 0 240 5 145 0 242 5 145 0 244 5 145 0 245 5 145 0 246 5 145 0 247 5 145 0 248 5 145 0 249 5 145 0 250 5 145 1 40 5 145 1 41 5 145 1 42 5 145 1 43 5 145 1 44 5 145 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 5 149 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 149 0 134 5 149 0 135 5 149 0 136 5 149 0 137 5 149 0 138 5 149 0 139 5 149 0 140 5 149 0 141 5 149 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 5 149 0 213 5 149 0 214 5 149 0 215 5 149 0 219 5 149 0 220 5 149 0 221 5 149 0 222 5 149 0 223 5 149 0 230 5 149 0 231 5 149 0 232 5 149 0 233 5 149 0 234 5 149 0 235 5 149 0 236 5 149 0 237 5 149 0 238 5 149 0 240 5 149 0 242 5 149 0 244 5 149 0 245 5 149 0 246 5 149 0 247 5 149 0 248 5 149 0 249 5 149 0 250 5 149 1 40 5 149 1 41 5 149 1 42 5 149 1 43 5 149 1 44 5 149 1 45] 
#[1 5 153 0 116 5 157 0 143] 
#[0 1 62 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 66 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 70 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 74 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 78 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 82 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 86 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 90 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 94 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 98 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 102 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 106 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 110 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 114 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 27 0 1 0 27 0 3 0 27 0 5 0 27 0 6 0 27 0 7 0 27 0 8 0 27 0 9 0 27 0 10 0 31 0 11 0 27 0 12 0 27 0 13 0 27 0 14 0 27 0 15 0 27 0 16 0 27 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 27 0 21 0 27 0 22 0 27 0 23 0 27 0 24 0 27 0 25 0 27 0 26 0 27 0 29 0 27 0 30 0 27 0 32 0 27 0 34 0 27 0 35 1 122 0 38 1 122 0 40 0 27 0 47 0 27 0 49 0 27 0 50 0 27 0 53 0 27 0 54 0 27 0 55 0 27 0 56 0 27 0 57 0 27 0 59 0 27 0 60 0 27 0 62 0 27 0 63 0 27 0 64 0 27 0 66 0 27 0 67 0 27 0 68 0 27 0 69 0 27 0 72 0 27 0 73 0 27 0 75 0 27 0 77 0 27 0 79 0 27 0 80 0 27 0 82 0 27 0 83 0 27 0 85 1 122 0 86 0 27 0 88 0 27 0 89 0 27 0 90 0 27 0 91 0 27 0 92 0 27 0 93 0 27 0 94 0 27 0 96 0 27 0 97 0 27 0 99 0 27 0 100 0 27 0 101 0 27 0 102 0 27 0 103 0 27 0 107 0 27 0 108 0 27 0 109 0 27 0 110 0 27 0 111 0 27 0 117 0 27 0 118 0 27 0 119 0 27 0 120 0 27 0 121 0 27 0 122 0 27 0 123 0 27 0 124 0 27 0 125 0 27 0 127 5 161 0 225 5 165 0 227 0 27 1 46] 
#[0 1 130 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 1 134 0 22 1 134 0 23 5 229 0 24 1 134 0 25 1 134 0 26 5 233 0 29 5 237 0 30 5 241 0 32 1 134 0 34 1 134 0 35 1 134 0 47 1 134 0 49 1 134 0 50 1 134 0 53 1 134 0 54 1 134 0 55 1 134 0 56 5 245 0 57 1 134 0 59 1 134 0 60 1 134 0 62 1 134 0 63 1 134 0 64 1 134 0 66 1 134 0 67 1 134 0 68 1 134 0 69 5 249 0 72 1 134 0 73 5 253 0 75 1 134 0 77 1 134 0 79 1 134 0 80 1 134 0 82 1 134 0 83 6 1 0 85 1 134 0 88 1 134 0 89 1 134 0 90 1 134 0 91 1 134 0 92 1 134 0 93 1 134 0 94 1 134 0 96 1 134 0 99 1 134 0 100 1 134 0 103 1 134 0 107 1 134 0 108 1 134 0 109 6 5 0 110 1 134 0 111 1 134 0 117 1 134 0 118 1 134 0 119 1 134 0 120 1 134 0 121 1 134 0 122 1 134 0 123 1 134 0 124 1 134 0 125 1 134 0 127 6 9 0 239 6 13 0 241 6 17 0 243 1 134 1 46] 
#[0 1 138 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 142 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 146 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 150 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 154 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 158 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 162 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 166 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 170 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 174 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 178 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 182 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 186 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 190 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 194 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 198 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 202 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 206 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 210 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 214 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 218 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 222 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 226 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 230 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 234 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 238 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 242 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 246 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 250 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 1 254 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 6 21 0 55 6 25 0 127 6 29 0 155 6 33 0 157] 
#[1 2 181 0 122 6 37 0 140] 
#[1 2 181 0 122 6 41 0 140] 
#[0 2 2 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 205 0 11 6 45 0 37 6 45 0 39 6 45 0 42 6 45 0 46 6 45 0 51 6 45 0 71 6 45 0 76 6 45 0 81 6 45 0 95 6 45 0 98 0 209 0 100 3 161 0 105 3 165 0 124 0 217 0 125 3 165 0 145 3 165 0 146 3 165 0 147 3 165 0 148 3 165 0 149 6 45 0 163 6 45 0 165 6 45 0 166] 
#[0 2 6 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 10 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 14 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 18 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 22 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 26 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 30 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 34 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 38 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 42 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 46 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 50 0 5 2 50 0 6 2 50 0 7 2 50 0 8 2 50 0 9 2 50 0 10 1 169 0 11 2 50 0 19 2 50 0 22 2 50 0 23 2 50 0 25 2 50 0 26 2 50 0 34 2 50 0 35 2 50 0 47 2 50 0 49 2 50 0 50 2 50 0 53 2 50 0 54 2 50 0 55 2 50 0 56 2 50 0 59 2 50 0 60 2 50 0 62 2 50 0 63 2 50 0 64 2 50 0 66 2 50 0 67 2 50 0 68 2 50 0 69 2 50 0 73 2 50 0 77 2 50 0 79 2 50 0 80 2 50 0 82 2 50 0 83 2 50 0 88 2 50 0 89 2 50 0 90 2 50 0 91 2 50 0 92 2 50 0 93 2 50 0 94 2 50 0 96 2 50 0 99 2 50 0 100 2 50 0 103 2 50 0 107 2 50 0 108 2 50 0 109 2 50 0 111 2 50 0 117 2 50 0 118 2 50 0 119 2 50 0 120 2 50 0 121 2 50 0 122 2 50 0 123 2 50 0 124 2 50 0 125 2 50 0 127 2 50 1 46] 
#[0 2 54 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 58 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 6 49 0 5 2 62 0 6 2 62 0 7 2 62 0 8 2 62 0 9 2 62 0 10 2 62 0 11 2 62 0 19 2 62 0 22 2 62 0 23 2 62 0 25 2 62 0 26 2 62 0 34 2 62 0 35 2 62 0 47 2 62 0 49 2 62 0 50 2 62 0 53 2 62 0 54 2 62 0 55 2 62 0 56 2 62 0 59 2 62 0 60 2 62 0 62 2 62 0 63 2 62 0 64 2 62 0 66 2 62 0 67 2 62 0 68 2 62 0 69 2 62 0 73 2 62 0 77 2 62 0 79 2 62 0 80 2 62 0 82 2 62 0 83 2 62 0 88 2 62 0 89 2 62 0 90 2 62 0 91 2 62 0 92 2 62 0 93 2 62 0 94 2 62 0 96 2 62 0 99 2 62 0 100 2 62 0 103 2 62 0 107 2 62 0 108 2 62 0 109 2 62 0 111 2 62 0 117 2 62 0 118 2 62 0 119 2 62 0 120 2 62 0 121 2 62 0 122 2 62 0 123 2 62 0 124 2 62 0 125 2 62 0 127 2 62 1 46] 
#[1 0 205 0 11 1 1 0 27 0 209 0 100 1 5 0 124 0 217 0 125 1 5 0 145 1 5 0 146 1 5 0 147 1 5 0 148 1 5 0 149 6 53 0 204] 
#[0 2 66 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 205 0 11 6 57 0 55 0 209 0 100 6 61 0 124 0 217 0 125 1 177 0 127 6 61 0 145 6 61 0 146 6 61 0 147 6 61 0 148 6 61 0 149 6 65 0 181] 
#[0 2 70 0 11 0 55 0 100 0 124 0 125 0 127] 
#[0 2 74 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 33 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 2 78 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 86 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 2 82 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 86 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 0 205 0 11 3 201 0 38 6 77 0 40 6 69 0 86 0 209 0 100 6 73 0 124 0 217 0 125 6 73 0 145 6 73 0 146 6 73 0 147 6 73 0 148 6 73 0 149 6 77 0 182] 
#[1 0 205 0 11 0 209 0 100 6 81 0 124 0 217 0 125 6 81 0 145 6 81 0 146 6 81 0 147 6 81 0 148 6 81 0 149] 
#[1 2 86 0 6 2 86 0 9 1 169 0 11 6 85 0 19 1 197 0 33 6 89 0 167 6 89 0 170 6 89 0 171 6 93 0 187 6 97 0 188] 
#[1 0 205 0 11 6 101 0 86 0 209 0 100 6 105 0 124 0 217 0 125 6 105 0 145 6 105 0 146 6 105 0 147 6 105 0 148 6 105 0 149] 
#[1 2 90 0 6 2 90 0 9 6 109 0 185] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 6 113 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 117 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 6 121 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 125 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 129 0 133 6 133 0 167 6 133 0 170 6 133 0 171] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 6 137 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 141 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 6 145 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 149 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 77 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 6 153 0 104 0 35 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 161 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 6 165 0 52 2 149 0 60 6 169 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 6 169 0 134 6 169 0 135 6 169 0 136 6 169 0 137 6 169 0 138 6 169 0 139 6 169 0 140 6 169 0 141 6 169 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 6 169 0 213 6 169 0 214 6 169 0 215 6 169 0 219 6 169 0 220 6 169 0 221 6 169 0 222 6 169 0 223 6 169 0 230 6 169 0 231 6 169 0 232 6 169 0 233 6 169 0 234 6 169 0 235 6 169 0 236 6 169 0 237 6 169 0 238 6 169 0 240 6 169 0 242 6 169 0 244 6 169 0 245 6 169 0 246 6 169 0 247 6 169 0 248 6 169 0 249 6 169 0 250 6 169 1 40 6 169 1 41 6 169 1 42 6 169 1 43 6 169 1 44 6 169 1 45] 
#[1 0 205 0 11 0 209 0 100 1 41 0 119 6 177 0 124 0 217 0 125 6 173 0 135 6 177 0 145 6 177 0 146 6 177 0 147 6 177 0 148 6 177 0 149] 
#[1 0 205 0 11 0 209 0 100 1 41 0 119 6 185 0 124 0 217 0 125 6 181 0 135 6 185 0 145 6 185 0 146 6 185 0 147 6 185 0 148 6 185 0 149] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 6 189 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 6 189 0 134 6 189 0 135 6 189 0 136 6 189 0 137 6 189 0 138 6 189 0 139 6 189 0 140 6 189 0 141 6 189 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 6 189 0 213 6 189 0 214 6 189 0 215 6 189 0 219 6 189 0 220 6 189 0 221 6 189 0 222 6 189 0 223 6 189 0 230 6 189 0 231 6 189 0 232 6 189 0 233 6 189 0 234 6 189 0 235 6 189 0 236 6 189 0 237 6 189 0 238 6 189 0 240 6 189 0 242 6 189 0 244 6 189 0 245 6 189 0 246 6 189 0 247 6 189 0 248 6 189 0 249 6 189 0 250 6 189 1 40 6 189 1 41 6 189 1 42 6 189 1 43 6 189 1 44 6 189 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 6 193 0 58 2 149 0 60 6 197 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 6 197 0 134 6 197 0 135 6 197 0 136 6 197 0 137 6 197 0 138 6 197 0 139 6 197 0 140 6 197 0 141 6 197 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 6 197 0 213 6 197 0 214 6 197 0 215 6 197 0 219 6 197 0 220 6 197 0 221 6 197 0 222 6 197 0 223 6 197 0 230 6 197 0 231 6 197 0 232 6 197 0 233 6 197 0 234 6 197 0 235 6 197 0 236 6 197 0 237 6 197 0 238 6 197 0 240 6 197 0 242 6 197 0 244 6 197 0 245 6 197 0 246 6 197 0 247 6 197 0 248 6 197 0 249 6 197 0 250 6 197 1 40 6 197 1 41 6 197 1 42 6 197 1 43 6 197 1 44 6 197 1 45] 
#[1 2 94 0 5 2 94 0 8 2 94 0 10 0 205 0 11 2 94 0 22 2 94 0 23 2 94 0 25 2 94 0 26 2 94 0 34 2 94 0 49 2 94 0 50 2 94 0 53 2 94 0 54 2 94 0 55 2 94 0 56 2 94 0 59 2 94 0 60 2 94 0 62 2 94 0 63 2 94 0 66 2 94 0 67 2 94 0 68 2 94 0 69 2 94 0 73 2 94 0 77 0 39 0 79 2 94 0 80 2 94 0 82 2 94 0 88 2 94 0 90 2 94 0 91 2 94 0 92 2 94 0 93 2 94 0 94 2 94 0 96 0 43 0 100 2 94 0 103 2 94 0 107 2 94 0 108 2 94 0 109 2 94 0 111 2 94 0 117 2 94 0 118 2 94 0 119 2 94 0 120 2 94 0 121 2 94 0 122 2 94 0 123 0 47 0 124 0 51 0 125 2 94 0 127 6 205 0 145 6 205 0 146 6 205 0 147 6 205 0 148 6 205 0 149] 
#[1 0 205 0 11 1 1 0 27 0 209 0 100 1 5 0 124 0 217 0 125 1 5 0 145 1 5 0 146 1 5 0 147 1 5 0 148 1 5 0 149 1 73 0 204 1 77 0 209] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 6 209 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 109 0 134 5 109 0 135 5 109 0 136 5 109 0 137 5 109 0 138 5 109 0 139 5 109 0 140 5 109 0 141 5 109 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 6 209 0 213 5 109 0 214 5 109 0 215 6 209 0 219 6 209 0 220 6 209 0 221 6 209 0 222 6 209 0 223 6 209 0 230 6 209 0 231 6 209 0 232 6 209 0 233 6 209 0 234 6 209 0 235 6 209 0 236 6 209 0 237 6 209 0 238 6 209 0 240 6 209 0 242 6 209 0 244 6 209 0 245 6 209 0 246 6 209 0 247 6 209 0 248 6 209 0 249 6 209 0 250 5 109 1 40 5 109 1 41 5 109 1 42 5 109 1 43 5 109 1 44 5 109 1 45] 
#[1 0 205 0 11 0 209 0 100 6 213 0 124 0 217 0 125 6 213 0 145 6 213 0 146 6 213 0 147 6 213 0 148 6 213 0 149] 
#[1 0 27 0 1 0 27 0 3 0 27 0 5 0 27 0 7 0 27 0 8 1 122 0 9 0 27 0 10 0 31 0 11 0 27 0 12 6 217 0 13 0 27 0 14 1 122 0 15 0 27 0 16 0 27 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 27 0 21 0 27 0 22 0 27 0 23 0 27 0 24 0 27 0 25 0 27 0 26 0 27 0 29 0 27 0 30 0 27 0 32 0 27 0 34 1 122 0 38 1 122 0 40 0 27 0 49 0 27 0 50 0 27 0 53 0 27 0 54 0 27 0 55 0 27 0 56 0 27 0 57 0 27 0 59 0 27 0 60 0 27 0 62 0 27 0 63 0 27 0 66 0 27 0 67 0 27 0 68 0 27 0 69 0 27 0 72 0 27 0 73 0 27 0 75 0 27 0 77 0 27 0 79 0 27 0 80 0 27 0 82 0 27 0 85 1 122 0 86 0 27 0 88 0 27 0 90 0 27 0 91 0 27 0 92 0 27 0 93 0 27 0 94 0 27 0 96 0 27 0 100 0 27 0 103 0 27 0 107 0 27 0 108 0 27 0 109 0 27 0 110 0 27 0 111 0 27 0 117 0 27 0 118 0 27 0 119 0 27 0 120 0 27 0 121 0 27 0 122 0 27 0 123 0 27 0 124 0 27 0 125 0 27 0 127 5 161 0 225 5 165 0 227] 
#[0 2 98 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 102 0 5 2 102 0 8 2 102 0 10 2 102 0 11 2 102 0 22 2 102 0 23 2 102 0 25 2 102 0 26 2 102 0 34 2 102 0 49 2 102 0 50 2 102 0 53 2 102 0 54 2 102 0 55 2 102 0 56 2 102 0 59 2 102 0 60 2 102 0 62 2 102 0 63 2 102 0 66 2 102 0 67 2 102 0 68 2 102 0 69 2 102 0 73 2 102 0 77 2 102 0 79 2 102 0 80 2 102 0 82 2 102 0 88 2 102 0 90 2 102 0 91 2 102 0 92 2 102 0 93 2 102 0 94 2 102 0 96 2 102 0 100 2 102 0 103 2 102 0 107 2 102 0 108 2 102 0 109 2 102 0 111 2 102 0 117 2 102 0 118 2 102 0 119 2 102 0 120 2 102 0 121 2 102 0 122 2 102 0 123 2 102 0 124 2 102 0 125 2 102 0 127 6 221 0 162] 
#[0 6 225 0 55] 
#[1 0 205 0 11 1 1 0 27 1 105 0 44 1 113 0 56 1 117 0 59 0 209 0 100 1 137 0 103 1 5 0 124 0 217 0 125 1 5 0 145 1 5 0 146 1 5 0 147 1 5 0 148 1 5 0 149 1 145 0 204 1 149 0 209] 
#[0 2 106 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 2 114 0 22 2 114 0 23 5 229 0 24 2 114 0 25 2 114 0 26 5 233 0 29 5 237 0 30 5 241 0 32 2 114 0 34 2 114 0 49 2 114 0 50 2 114 0 53 2 114 0 54 2 114 0 55 2 114 0 56 5 245 0 57 2 114 0 59 2 114 0 60 2 114 0 62 2 114 0 63 2 114 0 66 2 114 0 67 2 114 0 68 2 114 0 69 5 249 0 72 2 114 0 73 5 253 0 75 2 114 0 77 2 114 0 79 2 114 0 80 2 114 0 82 6 1 0 85 2 114 0 88 2 114 0 90 2 114 0 91 2 114 0 92 2 114 0 93 2 114 0 94 2 114 0 96 2 114 0 100 2 114 0 103 2 114 0 107 2 114 0 108 2 114 0 109 6 5 0 110 2 114 0 111 2 114 0 117 2 114 0 118 2 114 0 119 2 114 0 120 2 114 0 121 2 114 0 122 2 114 0 123 2 114 0 124 2 114 0 125 2 114 0 127 6 9 0 239 6 13 0 241 6 17 0 243] 
#[0 2 118 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 122 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 126 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 130 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 134 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 138 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 142 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 146 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 150 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 154 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 158 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 162 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 166 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 170 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 174 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 178 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 182 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 186 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 190 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 0 55 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 202 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 206 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 210 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 214 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 218 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 222 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 226 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 230 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 234 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 238 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 242 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 246 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 250 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 254 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 3 2 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 3 6 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 3 10 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 1 234 0 1 1 234 0 3 0 59 0 5 1 234 0 7 0 59 0 8 0 59 0 10 0 59 0 11 1 234 0 12 1 234 0 14 1 234 0 16 1 234 0 17 1 234 0 18 1 234 0 19 1 234 0 20 1 234 0 21 0 59 0 22 0 59 0 23 1 234 0 24 0 59 0 25 0 59 0 26 1 234 0 29 1 234 0 30 1 234 0 32 0 59 0 34 0 59 0 49 0 59 0 50 0 59 0 53 0 59 0 54 0 59 0 55 0 59 0 56 1 234 0 57 0 59 0 59 0 59 0 60 0 59 0 62 0 59 0 63 0 59 0 66 0 59 0 67 0 59 0 68 0 59 0 69 1 234 0 72 0 59 0 73 1 234 0 75 0 59 0 77 0 59 0 79 0 59 0 80 0 59 0 82 1 234 0 85 0 59 0 88 0 59 0 90 0 59 0 91 0 59 0 92 0 59 0 93 0 59 0 94 0 59 0 96 0 59 0 100 0 59 0 103 0 59 0 107 0 59 0 108 0 59 0 109 1 234 0 110 0 59 0 111 0 59 0 117 0 59 0 118 0 59 0 119 0 59 0 120 0 59 0 121 0 59 0 122 0 59 0 123 0 59 0 124 0 59 0 125 0 59 0 127] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 6 229 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 205 0 11 6 233 0 55 0 209 0 100 6 237 0 124 0 217 0 125 1 177 0 127 6 237 0 145 6 237 0 146 6 237 0 147 6 237 0 148 6 237 0 149 6 241 0 176] 
#[0 3 18 0 11 0 55 0 100 0 124 0 125 0 127] 
#[1 0 6 0 34 0 6 0 35 0 6 0 47 0 6 0 49 0 6 0 56 0 6 0 59 0 6 0 63 0 6 0 64 0 6 0 66 0 6 0 83 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 96 0 6 0 99 0 6 0 103 0 6 0 127 2 33 0 131 6 245 0 133 0 6 1 46] 
#[0 3 22 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 6 249 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 6 249 0 134 6 249 0 135 6 249 0 136 6 249 0 137 6 249 0 138 6 249 0 139 6 249 0 140 6 249 0 141 6 249 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 6 249 0 213 6 249 0 214 6 249 0 215 6 249 0 219 6 249 0 220 6 249 0 221 6 249 0 222 6 249 0 223 6 249 0 230 6 249 0 231 6 249 0 232 6 249 0 233 6 249 0 234 6 249 0 235 6 249 0 236 6 249 0 237 6 249 0 238 6 249 0 240 6 249 0 242 6 249 0 244 6 249 0 245 6 249 0 246 6 249 0 247 6 249 0 248 6 249 0 249 6 249 0 250 6 249 1 40 6 249 1 41 6 249 1 42 6 249 1 43 6 249 1 44 6 249 1 45] 
#[0 6 253 0 19] 
#[1 1 169 0 11 7 1 0 74] 
#[1 1 169 0 11 7 5 0 74] 
#[1 0 6 0 11 0 6 0 55 0 6 0 100 0 6 0 124 0 6 0 125 0 6 0 127 7 9 0 133 3 193 0 179] 
#[0 3 26 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 13 0 133 7 17 0 167 7 17 0 170 7 17 0 171] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 21 0 133 7 25 0 167 7 25 0 170 7 25 0 171 7 29 0 183] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 33 0 133 7 37 0 183] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 41 0 133 7 45 0 183] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 7 49 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 53 0 133] 
#[1 0 6 0 11 0 6 0 55 0 6 0 100 0 6 0 124 0 6 0 125 0 6 0 127 7 57 0 133 4 241 0 174] 
#[1 1 221 0 5 1 169 0 11 7 61 0 183] 
#[1 0 205 0 11 0 209 0 100 7 65 0 124 0 217 0 125 7 65 0 145 7 65 0 146 7 65 0 147 7 65 0 148 7 65 0 149] 
#[1 0 205 0 11 0 209 0 100 7 69 0 124 0 217 0 125 7 69 0 145 7 69 0 146 7 69 0 147 7 69 0 148 7 69 0 149] 
#[1 0 205 0 11 0 209 0 100 7 73 0 124 0 217 0 125 7 73 0 145 7 73 0 146 7 73 0 147 7 73 0 148 7 73 0 149] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 77 0 133 7 81 0 183] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 85 0 133 7 89 0 167 7 89 0 170 7 89 0 171] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 93 0 133 7 97 0 167 7 97 0 170 7 97 0 171 7 101 0 183] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 105 0 133 7 109 0 183] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 113 0 133 7 117 0 183] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 7 121 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 125 0 133] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 7 129 0 6 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 5 229 0 24 5 233 0 29 5 237 0 30 5 241 0 32 5 245 0 57 5 249 0 72 5 253 0 75 6 1 0 85 6 5 0 110 6 9 0 239 6 13 0 241 6 17 0 243] 
#[1 5 169 0 1 0 63 0 3 5 177 0 5 3 30 0 6 5 181 0 7 3 30 0 8 3 30 0 9 3 30 0 10 5 193 0 11 5 197 0 12 3 30 0 13 0 67 0 14 3 30 0 15 3 30 0 16 3 30 0 17 3 30 0 18 3 30 0 19 3 30 0 20 3 30 0 21 3 30 0 22 3 30 0 23 5 229 0 24 3 30 0 25 3 30 0 26 0 71 0 29 5 237 0 30 3 30 0 32 3 30 0 34 3 30 0 35 3 30 0 47 3 30 0 49 3 30 0 50 3 30 0 53 3 30 0 54 3 30 0 55 3 30 0 56 3 30 0 57 3 30 0 59 3 30 0 60 3 30 0 62 3 30 0 63 3 30 0 64 3 30 0 66 3 30 0 67 3 30 0 68 3 30 0 69 3 30 0 72 3 30 0 73 3 30 0 75 3 30 0 77 3 30 0 79 3 30 0 80 3 30 0 82 3 30 0 83 3 30 0 85 3 30 0 88 3 30 0 89 3 30 0 90 3 30 0 91 3 30 0 92 3 30 0 93 3 30 0 94 3 30 0 96 3 30 0 97 3 30 0 99 3 30 0 100 3 30 0 101 3 30 0 102 3 30 0 103 3 30 0 107 3 30 0 108 3 30 0 109 3 30 0 110 3 30 0 111 3 30 0 117 3 30 0 118 3 30 0 119 3 30 0 120 3 30 0 121 3 30 0 122 3 30 0 123 3 30 0 124 3 30 0 125 3 30 0 127 6 9 0 239 6 13 0 241 6 17 0 243 3 30 1 46] 
#[1 5 169 0 1 0 75 0 3 5 177 0 5 3 34 0 6 5 181 0 7 3 34 0 8 3 34 0 9 3 34 0 10 5 193 0 11 5 197 0 12 3 34 0 13 0 79 0 14 3 34 0 15 3 34 0 16 3 34 0 17 3 34 0 18 3 34 0 19 3 34 0 20 3 34 0 21 3 34 0 22 3 34 0 23 5 229 0 24 3 34 0 25 3 34 0 26 0 83 0 29 5 237 0 30 3 34 0 32 3 34 0 34 3 34 0 35 3 34 0 47 3 34 0 49 3 34 0 50 3 34 0 53 3 34 0 54 3 34 0 55 3 34 0 56 3 34 0 57 3 34 0 59 3 34 0 60 3 34 0 62 3 34 0 63 3 34 0 64 3 34 0 66 3 34 0 67 3 34 0 68 3 34 0 69 3 34 0 72 3 34 0 73 3 34 0 75 3 34 0 77 3 34 0 79 3 34 0 80 3 34 0 82 3 34 0 83 3 34 0 85 3 34 0 88 3 34 0 89 3 34 0 90 3 34 0 91 3 34 0 92 3 34 0 93 3 34 0 94 3 34 0 96 3 34 0 97 3 34 0 99 3 34 0 100 3 34 0 101 3 34 0 102 3 34 0 103 3 34 0 107 3 34 0 108 3 34 0 109 3 34 0 110 3 34 0 111 3 34 0 117 3 34 0 118 3 34 0 119 3 34 0 120 3 34 0 121 3 34 0 122 3 34 0 123 3 34 0 124 3 34 0 125 3 34 0 127 6 9 0 239 6 13 0 241 6 17 0 243 3 34 1 46] 
#[1 3 38 0 1 3 38 0 3 3 38 0 5 3 38 0 6 3 38 0 7 3 38 0 8 3 38 0 9 3 38 0 10 1 169 0 11 3 38 0 12 3 38 0 13 3 38 0 14 3 38 0 15 3 38 0 16 3 38 0 17 3 38 0 18 3 38 0 19 3 38 0 20 3 38 0 21 3 38 0 22 3 38 0 23 3 38 0 24 3 38 0 25 3 38 0 26 3 38 0 29 3 38 0 30 3 38 0 32 3 38 0 34 3 38 0 35 3 38 0 47 3 38 0 49 3 38 0 50 3 38 0 53 3 38 0 54 3 38 0 55 3 38 0 56 3 38 0 57 3 38 0 59 3 38 0 60 3 38 0 62 3 38 0 63 3 38 0 64 3 38 0 66 3 38 0 67 3 38 0 68 3 38 0 69 3 38 0 72 3 38 0 73 3 38 0 75 3 38 0 77 3 38 0 79 3 38 0 80 3 38 0 82 3 38 0 83 3 38 0 85 3 38 0 88 3 38 0 89 3 38 0 90 3 38 0 91 3 38 0 92 3 38 0 93 3 38 0 94 3 38 0 96 3 38 0 97 3 38 0 99 3 38 0 100 3 38 0 101 3 38 0 102 3 38 0 103 3 38 0 107 3 38 0 108 3 38 0 109 3 38 0 110 3 38 0 111 3 38 0 117 3 38 0 118 3 38 0 119 3 38 0 120 3 38 0 121 3 38 0 122 3 38 0 123 3 38 0 124 3 38 0 125 3 38 0 127 3 38 1 46] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 5 229 0 24 5 233 0 29 5 237 0 30 5 241 0 32 5 245 0 57 5 249 0 72 5 253 0 75 6 1 0 85 6 5 0 110 6 9 0 239 6 13 0 241 6 17 0 243] 
#[1 0 87 0 1 0 87 0 3 0 87 0 5 3 42 0 6 0 87 0 7 0 87 0 8 3 42 0 9 0 87 0 10 0 87 0 11 0 87 0 12 3 42 0 13 0 87 0 14 3 42 0 15 0 87 0 16 0 87 0 17 0 87 0 18 0 87 0 19 0 87 0 20 0 87 0 21 3 42 0 22 3 42 0 23 0 87 0 24 3 42 0 25 3 42 0 26 0 87 0 29 0 87 0 30 0 87 0 32 3 42 0 34 3 42 0 35 3 42 0 47 3 42 0 49 3 42 0 50 3 42 0 53 3 42 0 54 3 42 0 55 3 42 0 56 0 87 0 57 3 42 0 59 3 42 0 60 3 42 0 62 3 42 0 63 3 42 0 64 3 42 0 66 3 42 0 67 3 42 0 68 3 42 0 69 0 87 0 72 3 42 0 73 0 87 0 75 3 42 0 77 3 42 0 79 3 42 0 80 3 42 0 82 3 42 0 83 0 87 0 85 3 42 0 88 3 42 0 89 3 42 0 90 3 42 0 91 3 42 0 92 3 42 0 93 3 42 0 94 3 42 0 96 3 42 0 97 3 42 0 99 3 42 0 100 3 42 0 101 3 42 0 102 3 42 0 103 3 42 0 107 3 42 0 108 3 42 0 109 0 87 0 110 3 42 0 111 3 42 0 117 3 42 0 118 3 42 0 119 3 42 0 120 3 42 0 121 3 42 0 122 3 42 0 123 3 42 0 124 3 42 0 125 3 42 0 127 3 42 1 46] 
#[1 3 46 0 1 3 46 0 3 3 46 0 5 3 46 0 6 3 46 0 7 3 46 0 8 3 46 0 9 3 46 0 10 1 169 0 11 3 46 0 12 3 46 0 13 3 46 0 14 3 46 0 15 3 46 0 16 3 46 0 17 3 46 0 18 3 46 0 19 3 46 0 20 3 46 0 21 3 46 0 22 3 46 0 23 3 46 0 24 3 46 0 25 3 46 0 26 3 46 0 29 3 46 0 30 3 46 0 32 3 46 0 34 3 46 0 35 3 46 0 47 3 46 0 49 3 46 0 50 3 46 0 53 3 46 0 54 3 46 0 55 3 46 0 56 3 46 0 57 3 46 0 59 3 46 0 60 3 46 0 62 3 46 0 63 3 46 0 64 3 46 0 66 3 46 0 67 3 46 0 68 3 46 0 69 3 46 0 72 3 46 0 73 3 46 0 75 3 46 0 77 3 46 0 79 3 46 0 80 3 46 0 82 3 46 0 83 3 46 0 85 3 46 0 88 3 46 0 89 3 46 0 90 3 46 0 91 3 46 0 92 3 46 0 93 3 46 0 94 3 46 0 96 3 46 0 97 3 46 0 99 3 46 0 100 3 46 0 101 3 46 0 102 3 46 0 103 3 46 0 107 3 46 0 108 3 46 0 109 3 46 0 110 3 46 0 111 3 46 0 117 3 46 0 118 3 46 0 119 3 46 0 120 3 46 0 121 3 46 0 122 3 46 0 123 3 46 0 124 3 46 0 125 3 46 0 127 3 46 1 46] 
#[1 0 91 0 1 0 91 0 3 0 91 0 5 3 50 0 6 0 91 0 7 0 91 0 8 3 50 0 9 0 91 0 10 0 91 0 11 0 91 0 12 3 50 0 13 0 91 0 14 3 50 0 15 0 91 0 16 0 91 0 17 0 91 0 18 0 91 0 19 0 91 0 20 0 91 0 21 3 50 0 22 3 50 0 23 0 91 0 24 3 50 0 25 3 50 0 26 0 91 0 29 0 91 0 30 0 91 0 32 3 50 0 34 3 50 0 35 3 50 0 47 3 50 0 49 3 50 0 50 3 50 0 53 3 50 0 54 3 50 0 55 3 50 0 56 0 91 0 57 3 50 0 59 3 50 0 60 3 50 0 62 3 50 0 63 3 50 0 64 3 50 0 66 3 50 0 67 3 50 0 68 3 50 0 69 0 91 0 72 3 50 0 73 0 91 0 75 3 50 0 77 3 50 0 79 3 50 0 80 3 50 0 82 3 50 0 83 0 91 0 85 3 50 0 88 3 50 0 89 3 50 0 90 3 50 0 91 3 50 0 92 3 50 0 93 3 50 0 94 3 50 0 96 3 50 0 97 3 50 0 99 3 50 0 100 3 50 0 101 3 50 0 102 3 50 0 103 3 50 0 107 3 50 0 108 3 50 0 109 0 91 0 110 3 50 0 111 3 50 0 117 3 50 0 118 3 50 0 119 3 50 0 120 3 50 0 121 3 50 0 122 3 50 0 123 3 50 0 124 3 50 0 125 3 50 0 127 3 50 1 46] 
#[0 3 54 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 3 58 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 3 62 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 3 66 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 3 70 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 5 169 0 1 0 95 0 3 5 177 0 5 3 74 0 6 5 181 0 7 5 185 0 8 3 74 0 9 5 189 0 10 5 193 0 11 5 197 0 12 3 74 0 13 0 99 0 14 3 74 0 15 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 3 74 0 22 3 74 0 23 5 229 0 24 3 74 0 25 3 74 0 26 0 103 0 29 5 237 0 30 5 241 0 32 3 74 0 34 3 74 0 35 3 74 0 47 3 74 0 49 3 74 0 50 3 74 0 53 3 74 0 54 3 74 0 55 3 74 0 56 5 245 0 57 3 74 0 59 3 74 0 60 3 74 0 62 3 74 0 63 3 74 0 64 3 74 0 66 3 74 0 67 3 74 0 68 3 74 0 69 5 249 0 72 3 74 0 73 5 253 0 75 3 74 0 77 3 74 0 79 3 74 0 80 3 74 0 82 3 74 0 83 6 1 0 85 3 74 0 88 3 74 0 89 3 74 0 90 3 74 0 91 3 74 0 92 3 74 0 93 3 74 0 94 3 74 0 96 3 74 0 97 3 74 0 99 3 74 0 100 3 74 0 101 3 74 0 102 3 74 0 103 3 74 0 107 3 74 0 108 3 74 0 109 6 5 0 110 3 74 0 111 3 74 0 117 3 74 0 118 3 74 0 119 3 74 0 120 3 74 0 121 3 74 0 122 3 74 0 123 3 74 0 124 3 74 0 125 3 74 0 127 6 9 0 239 6 13 0 241 6 17 0 243 3 74 1 46] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 7 133 0 19 5 221 0 20 5 225 0 21 5 229 0 24 5 233 0 29 5 237 0 30 5 241 0 32 5 245 0 57 5 249 0 72 5 253 0 75 6 1 0 85 6 5 0 110 6 9 0 239 6 13 0 241 6 17 0 243] 
#[0 3 78 0 10 0 116] 
#[1 7 137 0 10 7 141 0 116] 
#[0 3 82 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 3 86 0 1 3 86 0 3 2 121 0 5 3 86 0 6 3 86 0 7 2 125 0 8 7 145 0 9 2 129 0 10 0 205 0 11 3 86 0 12 3 86 0 13 3 86 0 14 0 107 0 15 3 86 0 16 3 86 0 17 3 86 0 18 3 86 0 19 3 86 0 20 3 86 0 21 0 111 0 22 0 115 0 23 3 86 0 24 0 119 0 25 0 123 0 26 3 86 0 29 3 86 0 30 3 86 0 32 3 86 0 34 3 86 0 35 3 201 0 38 7 157 0 40 3 86 0 47 3 86 0 49 3 86 0 50 3 86 0 53 3 86 0 54 3 86 0 55 3 86 0 56 3 86 0 57 3 86 0 59 0 127 0 60 3 86 0 62 3 86 0 63 3 86 0 64 3 86 0 66 3 86 0 67 3 86 0 68 3 86 0 69 3 86 0 72 0 131 0 73 3 86 0 75 3 86 0 77 3 86 0 79 0 135 0 80 3 86 0 82 3 86 0 83 3 86 0 85 7 153 0 86 3 86 0 88 3 86 0 89 3 86 0 90 3 86 0 91 3 86 0 92 3 86 0 93 0 139 0 94 3 86 0 96 3 86 0 97 3 86 0 99 0 143 0 100 3 86 0 101 3 86 0 102 3 86 0 103 3 86 0 107 3 86 0 108 3 86 0 109 3 86 0 110 0 147 0 111 0 151 0 117 0 155 0 118 0 159 0 119 0 163 0 120 0 167 0 121 0 171 0 122 0 175 0 123 0 179 0 124 0 183 0 125 3 86 0 127 7 161 0 134 7 161 0 135 7 161 0 136 7 161 0 137 7 161 0 138 7 161 0 139 7 161 0 140 7 161 0 141 7 161 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 7 157 0 182 7 161 0 213 7 161 0 214 7 161 0 215 7 161 0 219 7 161 0 220 7 161 0 221 7 161 0 222 7 161 0 223 7 165 0 224 7 169 0 226 7 173 0 229 7 161 0 230 7 161 0 231 7 161 0 232 7 161 0 233 7 161 0 234 7 161 0 235 7 161 0 236 7 161 0 237 7 161 0 238 7 161 0 240 7 161 0 242 7 161 0 244 7 161 0 245 7 161 0 246 7 161 0 247 7 161 0 248 7 161 0 249 7 161 0 250 7 161 1 40 7 161 1 41 7 161 1 42 7 161 1 43 7 161 1 44 7 161 1 45 3 86 1 46] 
#[1 0 205 0 11 0 209 0 100 7 177 0 124 0 217 0 125 7 177 0 145 7 177 0 146 7 177 0 147 7 177 0 148 7 177 0 149] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 7 181 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 7 181 0 134 7 181 0 135 7 181 0 136 7 181 0 137 7 181 0 138 7 181 0 139 7 181 0 140 7 181 0 141 7 181 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 7 181 0 213 7 181 0 214 7 181 0 215 7 181 0 219 7 181 0 220 7 181 0 221 7 181 0 222 7 181 0 223 7 181 0 230 7 181 0 231 7 181 0 232 7 181 0 233 7 181 0 234 7 181 0 235 7 181 0 236 7 181 0 237 7 181 0 238 7 181 0 240 7 181 0 242 7 181 0 244 7 181 0 245 7 181 0 246 7 181 0 247 7 181 0 248 7 181 0 249 7 181 0 250 7 181 1 40 7 181 1 41 7 181 1 42 7 181 1 43 7 181 1 44 7 181 1 45] 
#[1 1 122 0 5 1 122 0 6 1 122 0 8 1 122 0 9 1 122 0 10 1 122 0 11 1 122 0 15 1 122 0 22 1 122 0 23 1 122 0 25 1 122 0 26 1 122 0 38 1 122 0 40 1 122 0 60 1 122 0 73 1 122 0 80 1 122 0 86 1 122 0 94 1 122 0 100 1 122 0 111 1 122 0 117 1 122 0 118 1 122 0 119 1 122 0 120 1 122 0 121 1 122 0 122 1 122 0 123 1 122 0 124 1 122 0 125 7 185 0 225 5 165 0 227] 
#[0 3 90 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 94 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 98 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 0 205 0 11 0 209 0 100 7 189 0 124 0 217 0 125 7 189 0 145 7 189 0 146 7 189 0 147 7 189 0 148 7 189 0 149] 
#[0 3 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 7 193 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 7 193 0 134 7 193 0 135 7 193 0 136 7 193 0 137 7 193 0 138 7 193 0 139 7 193 0 140 7 193 0 141 7 193 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 7 193 0 213 7 193 0 214 7 193 0 215 7 193 0 219 7 193 0 220 7 193 0 221 7 193 0 222 7 193 0 223 7 193 0 230 7 193 0 231 7 193 0 232 7 193 0 233 7 193 0 234 7 193 0 235 7 193 0 236 7 193 0 237 7 193 0 238 7 193 0 240 7 193 0 242 7 193 0 244 7 193 0 245 7 193 0 246 7 193 0 247 7 193 0 248 7 193 0 249 7 193 0 250 7 193 1 40 7 193 1 41 7 193 1 42 7 193 1 43 7 193 1 44 7 193 1 45] 
#[0 3 106 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 7 197 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 7 197 0 134 7 197 0 135 7 197 0 136 7 197 0 137 7 197 0 138 7 197 0 139 7 197 0 140 7 197 0 141 7 197 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 7 197 0 213 7 197 0 214 7 197 0 215 7 197 0 219 7 197 0 220 7 197 0 221 7 197 0 222 7 197 0 223 7 197 0 230 7 197 0 231 7 197 0 232 7 197 0 233 7 197 0 234 7 197 0 235 7 197 0 236 7 197 0 237 7 197 0 238 7 197 0 240 7 197 0 242 7 197 0 244 7 197 0 245 7 197 0 246 7 197 0 247 7 197 0 248 7 197 0 249 7 197 0 250 7 197 1 40 7 197 1 41 7 197 1 42 7 197 1 43 7 197 1 44 7 197 1 45] 
#[0 3 118 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 122 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 126 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 130 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 134 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 138 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 142 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 146 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 150 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 154 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 158 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 7 201 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 7 201 0 134 7 201 0 135 7 201 0 136 7 201 0 137 7 201 0 138 7 201 0 139 7 201 0 140 7 201 0 141 7 201 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 7 201 0 213 7 201 0 214 7 201 0 215 7 201 0 219 7 201 0 220 7 201 0 221 7 201 0 222 7 201 0 223 7 201 0 230 7 201 0 231 7 201 0 232 7 201 0 233 7 201 0 234 7 201 0 235 7 201 0 236 7 201 0 237 7 201 0 238 7 201 0 240 7 201 0 242 7 201 0 244 7 201 0 245 7 201 0 246 7 201 0 247 7 201 0 248 7 201 0 249 7 201 0 250 7 201 1 40 7 201 1 41 7 201 1 42 7 201 1 43 7 201 1 44 7 201 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 7 205 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 7 205 0 134 7 205 0 135 7 205 0 136 7 205 0 137 7 205 0 138 7 205 0 139 7 205 0 140 7 205 0 141 7 205 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 7 205 0 213 7 205 0 214 7 205 0 215 7 205 0 219 7 205 0 220 7 205 0 221 7 205 0 222 7 205 0 223 7 205 0 230 7 205 0 231 7 205 0 232 7 205 0 233 7 205 0 234 7 205 0 235 7 205 0 236 7 205 0 237 7 205 0 238 7 205 0 240 7 205 0 242 7 205 0 244 7 205 0 245 7 205 0 246 7 205 0 247 7 205 0 248 7 205 0 249 7 205 0 250 7 205 1 40 7 205 1 41 7 205 1 42 7 205 1 43 7 205 1 44 7 205 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 7 209 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 7 209 0 134 7 209 0 135 7 209 0 136 7 209 0 137 7 209 0 138 7 209 0 139 7 209 0 140 7 209 0 141 7 209 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 7 209 0 213 7 209 0 214 7 209 0 215 7 209 0 219 7 209 0 220 7 209 0 221 7 209 0 222 7 209 0 223 7 209 0 230 7 209 0 231 7 209 0 232 7 209 0 233 7 209 0 234 7 209 0 235 7 209 0 236 7 209 0 237 7 209 0 238 7 209 0 240 7 209 0 242 7 209 0 244 7 209 0 245 7 209 0 246 7 209 0 247 7 209 0 248 7 209 0 249 7 209 0 250 7 209 1 40 7 209 1 41 7 209 1 42 7 209 1 43 7 209 1 44 7 209 1 45] 
#[0 3 162 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 3 166 0 11 0 100 0 124 0 125 0 127] 
#[0 3 170 0 55 0 127] 
#[1 0 205 0 11 0 209 0 100 0 221 0 124 0 217 0 125 7 213 0 127 0 221 0 145 0 221 0 146 0 221 0 147 0 221 0 148 0 221 0 149 7 217 0 152] 
#[1 1 221 0 5 7 221 0 31 7 225 0 183] 
#[1 1 221 0 5 7 229 0 31 7 233 0 183] 
#[1 7 237 0 5 3 174 0 6 3 174 0 7 3 174 0 8 3 174 0 9 3 174 0 10 3 174 0 11 3 174 0 19 3 174 0 22 3 174 0 23 3 174 0 25 3 174 0 26 3 174 0 34 3 174 0 35 3 174 0 47 3 174 0 49 3 174 0 50 3 174 0 53 3 174 0 54 3 174 0 55 3 174 0 56 3 174 0 59 3 174 0 60 3 174 0 62 3 174 0 63 3 174 0 64 3 174 0 66 3 174 0 67 3 174 0 68 3 174 0 69 3 174 0 73 3 174 0 77 3 174 0 79 3 174 0 80 3 174 0 82 3 174 0 83 3 174 0 88 3 174 0 89 3 174 0 90 3 174 0 91 3 174 0 92 3 174 0 93 3 174 0 94 3 174 0 96 3 174 0 99 3 174 0 100 3 174 0 103 3 174 0 107 3 174 0 108 3 174 0 109 3 174 0 111 3 174 0 117 3 174 0 118 3 174 0 119 3 174 0 120 3 174 0 121 3 174 0 122 3 174 0 123 3 174 0 124 3 174 0 125 3 174 0 127 3 174 1 46] 
#[1 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 7 241 0 134 7 241 0 135 7 241 0 136 7 241 0 137 7 241 0 138 7 241 0 139 7 241 0 140 7 241 0 141 7 241 0 142] 
#[0 3 178 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 7 245 0 56] 
#[1 1 169 0 11 7 249 0 19 3 182 0 55 3 182 0 100 3 182 0 124 3 182 0 125 3 182 0 127] 
#[0 3 186 0 11 0 55 0 100 0 124 0 125 0 127] 
#[1 0 205 0 11 0 209 0 100 7 253 0 124 0 217 0 125 7 253 0 145 7 253 0 146 7 253 0 147 7 253 0 148 7 253 0 149] 
#[1 2 86 0 6 2 86 0 9 1 169 0 11 6 85 0 19 1 197 0 33 8 1 0 167 8 1 0 170 8 1 0 171 6 93 0 187 8 5 0 188] 
#[1 0 205 0 11 8 9 0 86 0 209 0 100 8 13 0 124 0 217 0 125 8 13 0 145 8 13 0 146 8 13 0 147 8 13 0 148 8 13 0 149] 
#[1 2 86 0 6 2 86 0 9 1 169 0 11 6 85 0 19 1 197 0 33 8 17 0 167 8 17 0 170 8 17 0 171 6 93 0 187 8 21 0 188] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 8 25 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 8 25 0 134 8 25 0 135 8 25 0 136 8 25 0 137 8 25 0 138 8 25 0 139 8 25 0 140 8 25 0 141 8 25 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 8 25 0 213 8 25 0 214 8 25 0 215 8 25 0 219 8 25 0 220 8 25 0 221 8 25 0 222 8 25 0 223 8 25 0 230 8 25 0 231 8 25 0 232 8 25 0 233 8 25 0 234 8 25 0 235 8 25 0 236 8 25 0 237 8 25 0 238 8 25 0 240 8 25 0 242 8 25 0 244 8 25 0 245 8 25 0 246 8 25 0 247 8 25 0 248 8 25 0 249 8 25 0 250 8 25 1 40 8 25 1 41 8 25 1 42 8 25 1 43 8 25 1 44 8 25 1 45] 
#[1 2 86 0 6 2 86 0 9 6 85 0 19 6 93 0 187 8 29 0 188] 
#[0 3 190 0 6 0 9] 
#[0 3 194 0 6 0 9] 
#[1 0 205 0 11 0 209 0 100 8 33 0 124 0 217 0 125 8 33 0 145 8 33 0 146 8 33 0 147 8 33 0 148 8 33 0 149] 
#[1 2 86 0 6 2 86 0 9 1 169 0 11 6 85 0 19 1 197 0 33 8 37 0 167 8 37 0 170 8 37 0 171 6 93 0 187 8 41 0 188] 
#[1 8 45 0 6 8 49 0 9 8 53 0 184] 
#[0 8 57 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 61 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 8 65 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 69 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 73 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 77 0 133] 
#[0 8 81 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 85 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 8 89 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 93 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 8 97 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 109 0 134 5 109 0 135 5 109 0 136 5 109 0 137 5 109 0 138 5 109 0 139 5 109 0 140 5 109 0 141 5 109 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 8 97 0 213 5 109 0 214 5 109 0 215 8 97 0 219 8 97 0 220 8 97 0 221 8 97 0 222 8 97 0 223 8 97 0 230 8 97 0 231 8 97 0 232 8 97 0 233 8 97 0 234 8 97 0 235 8 97 0 236 8 97 0 237 8 97 0 238 8 97 0 240 8 97 0 242 8 97 0 244 8 97 0 245 8 97 0 246 8 97 0 247 8 97 0 248 8 97 0 249 8 97 0 250 5 109 1 40 5 109 1 41 5 109 1 42 5 109 1 43 5 109 1 44 5 109 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 8 101 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 109 0 134 5 109 0 135 5 109 0 136 5 109 0 137 5 109 0 138 5 109 0 139 5 109 0 140 5 109 0 141 5 109 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 8 101 0 213 5 109 0 214 5 109 0 215 8 101 0 219 8 101 0 220 8 101 0 221 8 101 0 222 8 101 0 223 8 101 0 230 8 101 0 231 8 101 0 232 8 101 0 233 8 101 0 234 8 101 0 235 8 101 0 236 8 101 0 237 8 101 0 238 8 101 0 240 8 101 0 242 8 101 0 244 8 101 0 245 8 101 0 246 8 101 0 247 8 101 0 248 8 101 0 249 8 101 0 250 5 109 1 40 5 109 1 41 5 109 1 42 5 109 1 43 5 109 1 44 5 109 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 0 6 0 77 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 8 105 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 109 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 205 0 11 0 209 0 100 8 113 0 124 0 217 0 125 8 113 0 145 8 113 0 146 8 113 0 147 8 113 0 148 8 113 0 149] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 8 117 0 19 5 221 0 20 5 225 0 21 5 229 0 24 5 233 0 29 5 237 0 30 5 241 0 32 5 245 0 57 5 249 0 72 5 253 0 75 6 1 0 85 6 5 0 110 6 9 0 239 6 13 0 241 6 17 0 243] 
#[0 3 198 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 3 202 0 5 3 202 0 8 3 202 0 10 1 169 0 11 3 202 0 22 3 202 0 23 3 202 0 25 3 202 0 26 3 202 0 34 3 202 0 49 3 202 0 50 3 202 0 53 3 202 0 54 3 202 0 55 3 202 0 56 3 202 0 59 3 202 0 60 3 202 0 62 3 202 0 63 3 202 0 66 3 202 0 67 3 202 0 68 3 202 0 69 3 202 0 73 3 202 0 77 3 202 0 79 3 202 0 80 3 202 0 82 3 202 0 88 3 202 0 90 3 202 0 91 3 202 0 92 3 202 0 93 3 202 0 94 3 202 0 96 3 202 0 100 3 202 0 103 3 202 0 107 3 202 0 108 3 202 0 109 3 202 0 111 3 202 0 117 3 202 0 118 3 202 0 119 3 202 0 120 3 202 0 121 3 202 0 122 3 202 0 123 3 202 0 124 3 202 0 125 3 202 0 127] 
#[0 3 206 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 3 210 0 5 3 210 0 8 3 210 0 10 1 169 0 11 3 210 0 22 3 210 0 23 3 210 0 25 3 210 0 26 3 210 0 34 3 210 0 49 3 210 0 50 3 210 0 53 3 210 0 54 3 210 0 55 3 210 0 56 3 210 0 59 3 210 0 60 3 210 0 62 3 210 0 63 3 210 0 66 3 210 0 67 3 210 0 68 3 210 0 69 3 210 0 73 3 210 0 77 3 210 0 79 3 210 0 80 3 210 0 82 3 210 0 88 3 210 0 90 3 210 0 91 3 210 0 92 3 210 0 93 3 210 0 94 3 210 0 96 3 210 0 100 3 210 0 103 3 210 0 107 3 210 0 108 3 210 0 109 3 210 0 111 3 210 0 117 3 210 0 118 3 210 0 119 3 210 0 120 3 210 0 121 3 210 0 122 3 210 0 123 3 210 0 124 3 210 0 125 3 210 0 127] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 5 229 0 24 5 233 0 29 5 237 0 30 5 241 0 32 5 245 0 57 5 249 0 72 5 253 0 75 6 1 0 85 8 121 0 101 6 5 0 110 6 9 0 239 6 13 0 241 6 17 0 243] 
#[1 4 21 0 68 8 125 0 92 8 129 1 28 8 129 1 29 8 129 1 30] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 5 229 0 24 5 233 0 29 5 237 0 30 5 241 0 32 5 245 0 57 4 17 0 67 4 21 0 68 5 249 0 72 5 253 0 75 6 1 0 85 6 5 0 110 6 9 0 239 6 13 0 241 6 17 0 243 8 133 1 27 8 133 1 28 8 133 1 29 8 133 1 30 8 133 1 31 8 133 1 32 8 133 1 33] 
#[0 3 214 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 3 218 0 5 3 218 0 8 3 218 0 10 1 169 0 11 3 218 0 22 3 218 0 23 3 218 0 25 3 218 0 26 3 218 0 34 3 218 0 49 3 218 0 50 3 218 0 53 3 218 0 54 3 218 0 55 3 218 0 56 3 218 0 59 3 218 0 60 3 218 0 62 3 218 0 63 3 218 0 66 3 218 0 67 3 218 0 68 3 218 0 69 3 218 0 73 3 218 0 77 3 218 0 79 3 218 0 80 3 218 0 82 3 218 0 88 3 218 0 90 3 218 0 91 3 218 0 92 3 218 0 93 3 218 0 94 3 218 0 96 3 218 0 100 3 218 0 103 3 218 0 107 3 218 0 108 3 218 0 109 3 218 0 111 3 218 0 117 3 218 0 118 3 218 0 119 3 218 0 120 3 218 0 121 3 218 0 122 3 218 0 123 3 218 0 124 3 218 0 125 3 218 0 127] 
#[1 1 130 0 1 1 130 0 3 0 195 0 5 1 130 0 7 0 195 0 8 0 195 0 10 0 195 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 0 6 0 22 0 6 0 23 1 130 0 24 0 6 0 25 0 6 0 26 1 130 0 29 1 130 0 30 1 130 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 1 130 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 130 0 72 0 6 0 73 1 130 0 75 0 6 0 80 0 6 0 82 1 130 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 107 0 6 0 108 0 6 0 109 1 130 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 137 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 141 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 0 199 0 22 0 203 0 23 0 207 0 25 0 211 0 26 0 215 0 34 0 219 0 49 0 223 0 50 3 222 0 53 3 222 0 54 3 222 0 55 0 227 0 56 0 231 0 59 0 235 0 60 0 239 0 62 0 243 0 63 0 247 0 66 0 251 0 67 0 255 0 68 1 3 0 69 1 7 0 73 3 222 0 77 3 222 0 79 1 11 0 80 1 15 0 82 1 19 0 88 1 23 0 90 1 27 0 91 1 31 0 92 1 35 0 93 1 39 0 94 1 43 0 96 1 47 0 100 1 51 0 103 3 222 0 107 1 55 0 108 1 59 0 109 1 63 0 111 1 67 0 117 1 71 0 118 1 75 0 119 1 79 0 120 1 83 0 121 1 87 0 122 1 91 0 123 1 95 0 124 1 99 0 125 3 222 0 127 4 77 0 134 8 149 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 153 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 3 226 0 53 3 226 0 54 3 226 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 3 226 0 77 3 226 0 79 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 3 226 0 93 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 3 226 0 107 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 1 103 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 1 103 0 127 8 157 0 133 8 161 0 161] 
#[0 8 165 0 99] 
#[0 8 169 0 55] 
#[0 8 173 0 103] 
#[1 1 169 0 11 1 197 0 33 8 177 0 167 8 177 0 170 8 177 0 171] 
#[0 3 230 0 11 0 55 0 100 0 124 0 125 0 127] 
#[1 0 9 0 34 0 13 0 35 0 17 0 47 0 21 0 49 0 25 0 56 0 29 0 59 0 105 0 63 0 37 0 64 0 105 0 66 0 45 0 83 0 105 0 88 0 53 0 89 0 105 0 90 0 61 0 91 0 65 0 96 0 69 0 99 0 73 0 103 1 177 0 127 4 249 0 151 4 249 0 153 4 249 0 154 4 249 0 158 0 105 0 164 4 249 0 172 4 249 0 173 4 249 0 177 4 249 0 178 4 249 0 189 4 249 0 190 4 249 0 191 0 137 0 192 4 249 0 193 4 249 0 194 4 249 0 195 4 249 0 196 4 249 0 197 4 249 0 198 4 249 0 199 4 249 0 200 4 249 0 201 4 249 0 202 4 249 0 203 4 249 0 205 4 249 0 206 4 249 0 207 4 249 0 208 4 249 0 212 3 234 1 46] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 3 238 0 22 3 238 0 23 5 229 0 24 3 238 0 25 3 238 0 26 5 233 0 29 5 237 0 30 5 241 0 32 3 238 0 34 3 238 0 35 3 238 0 47 3 238 0 49 3 238 0 50 3 238 0 53 3 238 0 54 3 238 0 55 3 238 0 56 5 245 0 57 3 238 0 59 3 238 0 60 3 238 0 62 3 238 0 63 3 238 0 64 3 238 0 66 3 238 0 67 3 238 0 68 3 238 0 69 5 249 0 72 3 238 0 73 5 253 0 75 3 238 0 77 3 238 0 79 3 238 0 80 3 238 0 82 3 238 0 83 6 1 0 85 3 238 0 88 3 238 0 89 3 238 0 90 3 238 0 91 3 238 0 92 3 238 0 93 3 238 0 94 3 238 0 96 3 238 0 99 3 238 0 100 3 238 0 103 3 238 0 107 3 238 0 108 3 238 0 109 6 5 0 110 3 238 0 111 3 238 0 117 3 238 0 118 3 238 0 119 3 238 0 120 3 238 0 121 3 238 0 122 3 238 0 123 3 238 0 124 3 238 0 125 3 238 0 127 6 9 0 239 6 13 0 241 6 17 0 243 3 238 1 46] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 8 181 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 8 181 0 134 8 181 0 135 8 181 0 136 8 181 0 137 8 181 0 138 8 181 0 139 8 181 0 140 8 181 0 141 8 181 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 8 181 0 213 8 181 0 214 8 181 0 215 8 181 0 219 8 181 0 220 8 181 0 221 8 181 0 222 8 181 0 223 8 181 0 230 8 181 0 231 8 181 0 232 8 181 0 233 8 181 0 234 8 181 0 235 8 181 0 236 8 181 0 237 8 181 0 238 8 181 0 240 8 181 0 242 8 181 0 244 8 181 0 245 8 181 0 246 8 181 0 247 8 181 0 248 8 181 0 249 8 181 0 250 8 181 1 40 8 181 1 41 8 181 1 42 8 181 1 43 8 181 1 44 8 181 1 45] 
#[1 2 181 0 122 8 185 0 140] 
#[1 2 181 0 122 8 189 0 140] 
#[1 0 205 0 11 8 193 0 55 0 209 0 100 6 61 0 124 0 217 0 125 1 177 0 127 6 61 0 145 6 61 0 146 6 61 0 147 6 61 0 148 6 61 0 149 6 65 0 181] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 197 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 201 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 205 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 209 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 213 0 133 8 217 0 167 8 217 0 170 8 217 0 171] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 221 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 225 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 229 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 233 0 133] 
#[0 8 237 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 8 241 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 205 0 11 8 245 0 55 0 209 0 100 6 237 0 124 0 217 0 125 1 177 0 127 6 237 0 145 6 237 0 146 6 237 0 147 6 237 0 148 6 237 0 149 6 241 0 176] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 249 0 133 8 253 0 167 8 253 0 170 8 253 0 171] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 1 0 133 9 5 0 167 9 5 0 170 9 5 0 171 9 9 0 183] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 13 0 133 9 17 0 183] 
#[1 1 221 0 5 0 6 0 8 0 6 0 10 1 169 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 21 0 133 9 25 0 183] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 9 29 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 33 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 9 37 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 41 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 9 45 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 49 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 53 0 133 9 57 0 167 9 57 0 170 9 57 0 171] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 9 61 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 65 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 9 69 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 73 0 133] 
#[0 9 77 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 9 81 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 3 242 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 9 85 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 9 85 0 134 9 85 0 135 9 85 0 136 9 85 0 137 9 85 0 138 9 85 0 139 9 85 0 140 9 85 0 141 9 85 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 9 85 0 213 9 85 0 214 9 85 0 215 9 85 0 219 9 85 0 220 9 85 0 221 9 85 0 222 9 85 0 223 9 85 0 230 9 85 0 231 9 85 0 232 9 85 0 233 9 85 0 234 9 85 0 235 9 85 0 236 9 85 0 237 9 85 0 238 9 85 0 240 9 85 0 242 9 85 0 244 9 85 0 245 9 85 0 246 9 85 0 247 9 85 0 248 9 85 0 249 9 85 0 250 9 85 1 40 9 85 1 41 9 85 1 42 9 85 1 43 9 85 1 44 9 85 1 45] 
#[1 9 89 0 116 9 93 0 144] 
#[0 3 246 0 10 0 116] 
#[0 3 250 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 3 254 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 9 97 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 9 97 0 134 9 97 0 135 9 97 0 136 9 97 0 137 9 97 0 138 9 97 0 139 9 97 0 140 9 97 0 141 9 97 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 9 97 0 213 9 97 0 214 9 97 0 215 9 97 0 219 9 97 0 220 9 97 0 221 9 97 0 222 9 97 0 223 9 97 0 230 9 97 0 231 9 97 0 232 9 97 0 233 9 97 0 234 9 97 0 235 9 97 0 236 9 97 0 237 9 97 0 238 9 97 0 240 9 97 0 242 9 97 0 244 9 97 0 245 9 97 0 246 9 97 0 247 9 97 0 248 9 97 0 249 9 97 0 250 9 97 1 40 9 97 1 41 9 97 1 42 9 97 1 43 9 97 1 44 9 97 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 9 105 0 73 2 157 0 80 9 101 0 86 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 9 105 0 134 9 105 0 135 9 105 0 136 9 105 0 137 9 105 0 138 9 105 0 139 9 105 0 140 9 105 0 141 9 105 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 9 105 0 213 9 105 0 214 9 105 0 215 9 105 0 219 9 105 0 220 9 105 0 221 9 105 0 222 9 105 0 223 9 105 0 230 9 105 0 231 9 105 0 232 9 105 0 233 9 105 0 234 9 105 0 235 9 105 0 236 9 105 0 237 9 105 0 238 9 105 0 240 9 105 0 242 9 105 0 244 9 105 0 245 9 105 0 246 9 105 0 247 9 105 0 248 9 105 0 249 9 105 0 250 9 105 1 40 9 105 1 41 9 105 1 42 9 105 1 43 9 105 1 44 9 105 1 45] 
#[1 5 169 0 1 1 107 0 3 5 177 0 5 4 2 0 6 5 181 0 7 5 185 0 8 4 2 0 9 5 189 0 10 5 193 0 11 5 197 0 12 4 2 0 13 1 111 0 14 4 2 0 15 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 4 2 0 22 4 2 0 23 5 229 0 24 4 2 0 25 4 2 0 26 1 115 0 29 5 237 0 30 5 241 0 32 4 2 0 34 4 2 0 35 4 2 0 47 4 2 0 49 4 2 0 50 4 2 0 53 4 2 0 54 4 2 0 55 4 2 0 56 5 245 0 57 4 2 0 59 4 2 0 60 4 2 0 62 4 2 0 63 4 2 0 64 4 2 0 66 4 2 0 67 4 2 0 68 4 2 0 69 5 249 0 72 4 2 0 73 5 253 0 75 4 2 0 77 4 2 0 79 4 2 0 80 4 2 0 82 4 2 0 83 6 1 0 85 4 2 0 88 4 2 0 89 4 2 0 90 4 2 0 91 4 2 0 92 4 2 0 93 4 2 0 94 4 2 0 96 4 2 0 97 4 2 0 99 4 2 0 100 4 2 0 101 4 2 0 102 4 2 0 103 4 2 0 107 4 2 0 108 4 2 0 109 6 5 0 110 4 2 0 111 4 2 0 117 4 2 0 118 4 2 0 119 4 2 0 120 4 2 0 121 4 2 0 122 4 2 0 123 4 2 0 124 4 2 0 125 4 2 0 127 6 9 0 239 6 13 0 241 6 17 0 243 4 2 1 46] 
#[1 3 86 0 1 3 86 0 3 3 86 0 5 3 86 0 6 3 86 0 7 3 86 0 8 9 109 0 9 3 86 0 10 3 86 0 11 3 86 0 12 3 86 0 13 3 86 0 14 1 119 0 15 3 86 0 16 3 86 0 17 3 86 0 18 3 86 0 19 3 86 0 20 3 86 0 21 3 86 0 22 3 86 0 23 3 86 0 24 3 86 0 25 3 86 0 26 3 86 0 29 3 86 0 30 3 86 0 32 3 86 0 34 3 86 0 35 3 86 0 47 3 86 0 49 3 86 0 50 3 86 0 53 3 86 0 54 3 86 0 55 3 86 0 56 3 86 0 57 3 86 0 59 3 86 0 60 3 86 0 62 3 86 0 63 3 86 0 64 3 86 0 66 3 86 0 67 3 86 0 68 3 86 0 69 3 86 0 72 3 86 0 73 3 86 0 75 3 86 0 77 3 86 0 79 3 86 0 80 3 86 0 82 3 86 0 83 3 86 0 85 3 86 0 88 3 86 0 89 3 86 0 90 3 86 0 91 3 86 0 92 3 86 0 93 3 86 0 94 3 86 0 96 3 86 0 97 3 86 0 99 3 86 0 100 3 86 0 101 3 86 0 102 3 86 0 103 3 86 0 107 3 86 0 108 3 86 0 109 3 86 0 110 3 86 0 111 3 86 0 117 3 86 0 118 3 86 0 119 3 86 0 120 3 86 0 121 3 86 0 122 3 86 0 123 3 86 0 124 3 86 0 125 3 86 0 127 9 117 0 229 3 86 1 46] 
#[0 4 6 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 4 10 0 1 4 10 0 3 4 10 0 5 4 10 0 6 4 10 0 7 4 10 0 8 9 121 0 9 4 10 0 10 4 10 0 11 4 10 0 12 4 10 0 13 4 10 0 14 1 123 0 15 4 10 0 16 4 10 0 17 4 10 0 18 4 10 0 19 4 10 0 20 4 10 0 21 4 10 0 22 4 10 0 23 4 10 0 24 4 10 0 25 4 10 0 26 4 10 0 29 4 10 0 30 4 10 0 32 4 10 0 34 4 10 0 35 4 10 0 47 4 10 0 49 4 10 0 50 4 10 0 53 4 10 0 54 4 10 0 55 4 10 0 56 4 10 0 57 4 10 0 59 4 10 0 60 4 10 0 62 4 10 0 63 4 10 0 64 4 10 0 66 4 10 0 67 4 10 0 68 4 10 0 69 4 10 0 72 4 10 0 73 4 10 0 75 4 10 0 77 4 10 0 79 4 10 0 80 4 10 0 82 4 10 0 83 4 10 0 85 4 10 0 88 4 10 0 89 4 10 0 90 4 10 0 91 4 10 0 92 4 10 0 93 4 10 0 94 4 10 0 96 4 10 0 97 4 10 0 99 4 10 0 100 4 10 0 101 4 10 0 102 4 10 0 103 4 10 0 107 4 10 0 108 4 10 0 109 4 10 0 110 4 10 0 111 4 10 0 117 4 10 0 118 4 10 0 119 4 10 0 120 4 10 0 121 4 10 0 122 4 10 0 123 4 10 0 124 4 10 0 125 4 10 0 127 9 129 0 228 4 10 1 46] 
#[0 4 14 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 5 169 0 1 1 127 0 3 5 177 0 5 4 18 0 6 5 181 0 7 5 185 0 8 4 18 0 9 5 189 0 10 5 193 0 11 5 197 0 12 4 18 0 13 1 131 0 14 4 18 0 15 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 4 18 0 22 4 18 0 23 5 229 0 24 4 18 0 25 4 18 0 26 1 135 0 29 5 237 0 30 5 241 0 32 4 18 0 34 4 18 0 35 4 18 0 47 4 18 0 49 4 18 0 50 4 18 0 53 4 18 0 54 4 18 0 55 4 18 0 56 5 245 0 57 4 18 0 59 4 18 0 60 4 18 0 62 4 18 0 63 4 18 0 64 4 18 0 66 4 18 0 67 4 18 0 68 4 18 0 69 5 249 0 72 4 18 0 73 5 253 0 75 4 18 0 77 4 18 0 79 4 18 0 80 4 18 0 82 4 18 0 83 6 1 0 85 4 18 0 88 4 18 0 89 4 18 0 90 4 18 0 91 4 18 0 92 4 18 0 93 4 18 0 94 4 18 0 96 4 18 0 97 4 18 0 99 4 18 0 100 4 18 0 101 4 18 0 102 4 18 0 103 4 18 0 107 4 18 0 108 4 18 0 109 6 5 0 110 4 18 0 111 4 18 0 117 4 18 0 118 4 18 0 119 4 18 0 120 4 18 0 121 4 18 0 122 4 18 0 123 4 18 0 124 4 18 0 125 4 18 0 127 6 9 0 239 6 13 0 241 6 17 0 243 4 18 1 46] 
#[0 9 133 0 6] 
#[0 4 22 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 5 169 0 1 1 139 0 3 5 177 0 5 4 26 0 6 5 181 0 7 5 185 0 8 4 26 0 9 5 189 0 10 5 193 0 11 5 197 0 12 4 26 0 13 1 143 0 14 4 26 0 15 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 4 26 0 22 4 26 0 23 5 229 0 24 4 26 0 25 4 26 0 26 1 147 0 29 5 237 0 30 5 241 0 32 4 26 0 34 4 26 0 35 4 26 0 47 4 26 0 49 4 26 0 50 4 26 0 53 4 26 0 54 4 26 0 55 4 26 0 56 5 245 0 57 4 26 0 59 4 26 0 60 4 26 0 62 4 26 0 63 4 26 0 64 4 26 0 66 4 26 0 67 4 26 0 68 4 26 0 69 5 249 0 72 4 26 0 73 5 253 0 75 4 26 0 77 4 26 0 79 4 26 0 80 4 26 0 82 4 26 0 83 6 1 0 85 4 26 0 88 4 26 0 89 4 26 0 90 4 26 0 91 4 26 0 92 4 26 0 93 4 26 0 94 4 26 0 96 4 26 0 97 4 26 0 99 4 26 0 100 4 26 0 101 4 26 0 102 4 26 0 103 4 26 0 107 4 26 0 108 4 26 0 109 6 5 0 110 4 26 0 111 4 26 0 117 4 26 0 118 4 26 0 119 4 26 0 120 4 26 0 121 4 26 0 122 4 26 0 123 4 26 0 124 4 26 0 125 4 26 0 127 6 9 0 239 6 13 0 241 6 17 0 243 4 26 1 46] 
#[1 5 169 0 1 1 151 0 3 5 177 0 5 4 30 0 6 5 181 0 7 5 185 0 8 4 30 0 9 5 189 0 10 5 193 0 11 5 197 0 12 4 30 0 13 1 155 0 14 4 30 0 15 5 205 0 16 5 209 0 17 5 213 0 18 4 30 0 19 5 221 0 20 5 225 0 21 4 30 0 22 4 30 0 23 5 229 0 24 4 30 0 25 4 30 0 26 1 159 0 29 5 237 0 30 5 241 0 32 4 30 0 34 4 30 0 35 4 30 0 47 4 30 0 49 4 30 0 50 4 30 0 53 4 30 0 54 4 30 0 55 4 30 0 56 5 245 0 57 4 30 0 59 4 30 0 60 4 30 0 62 4 30 0 63 4 30 0 64 4 30 0 66 4 30 0 67 4 30 0 68 4 30 0 69 5 249 0 72 4 30 0 73 5 253 0 75 4 30 0 77 4 30 0 79 4 30 0 80 4 30 0 82 4 30 0 83 6 1 0 85 4 30 0 88 4 30 0 89 4 30 0 90 4 30 0 91 4 30 0 92 4 30 0 93 4 30 0 94 4 30 0 96 4 30 0 97 4 30 0 99 4 30 0 100 4 30 0 101 4 30 0 102 4 30 0 103 4 30 0 107 4 30 0 108 4 30 0 109 6 5 0 110 4 30 0 111 4 30 0 117 4 30 0 118 4 30 0 119 4 30 0 120 4 30 0 121 4 30 0 122 4 30 0 123 4 30 0 124 4 30 0 125 4 30 0 127 6 9 0 239 6 13 0 241 6 17 0 243 4 30 1 46] 
#[1 5 169 0 1 1 163 0 3 5 177 0 5 4 34 0 6 5 181 0 7 5 185 0 8 4 34 0 9 5 189 0 10 5 193 0 11 5 197 0 12 4 34 0 13 1 167 0 14 4 34 0 15 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 4 34 0 22 4 34 0 23 5 229 0 24 4 34 0 25 4 34 0 26 1 171 0 29 5 237 0 30 5 241 0 32 4 34 0 34 4 34 0 35 4 34 0 47 4 34 0 49 4 34 0 50 4 34 0 53 4 34 0 54 4 34 0 55 4 34 0 56 5 245 0 57 4 34 0 59 4 34 0 60 4 34 0 62 4 34 0 63 4 34 0 64 4 34 0 66 4 34 0 67 4 34 0 68 4 34 0 69 5 249 0 72 4 34 0 73 5 253 0 75 4 34 0 77 4 34 0 79 4 34 0 80 4 34 0 82 4 34 0 83 6 1 0 85 4 34 0 88 4 34 0 89 4 34 0 90 4 34 0 91 4 34 0 92 4 34 0 93 4 34 0 94 4 34 0 96 4 34 0 97 4 34 0 99 4 34 0 100 4 34 0 101 4 34 0 102 4 34 0 103 4 34 0 107 4 34 0 108 4 34 0 109 6 5 0 110 4 34 0 111 4 34 0 117 4 34 0 118 4 34 0 119 4 34 0 120 4 34 0 121 4 34 0 122 4 34 0 123 4 34 0 124 4 34 0 125 4 34 0 127 6 9 0 239 6 13 0 241 6 17 0 243 4 34 1 46] 
#[1 5 169 0 1 1 175 0 3 5 177 0 5 4 38 0 6 5 181 0 7 5 185 0 8 4 38 0 9 5 189 0 10 5 193 0 11 5 197 0 12 4 38 0 13 1 179 0 14 4 38 0 15 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 4 38 0 22 4 38 0 23 5 229 0 24 4 38 0 25 4 38 0 26 1 183 0 29 5 237 0 30 5 241 0 32 4 38 0 34 4 38 0 35 4 38 0 47 4 38 0 49 4 38 0 50 4 38 0 53 4 38 0 54 4 38 0 55 4 38 0 56 5 245 0 57 4 38 0 59 4 38 0 60 4 38 0 62 4 38 0 63 4 38 0 64 4 38 0 66 4 38 0 67 4 38 0 68 4 38 0 69 5 249 0 72 4 38 0 73 5 253 0 75 4 38 0 77 4 38 0 79 4 38 0 80 4 38 0 82 4 38 0 83 6 1 0 85 4 38 0 88 4 38 0 89 4 38 0 90 4 38 0 91 4 38 0 92 4 38 0 93 4 38 0 94 4 38 0 96 4 38 0 97 4 38 0 99 4 38 0 100 4 38 0 101 4 38 0 102 4 38 0 103 4 38 0 107 4 38 0 108 4 38 0 109 6 5 0 110 4 38 0 111 4 38 0 117 4 38 0 118 4 38 0 119 4 38 0 120 4 38 0 121 4 38 0 122 4 38 0 123 4 38 0 124 4 38 0 125 4 38 0 127 6 9 0 239 6 13 0 241 6 17 0 243 4 38 1 46] 
#[1 5 169 0 1 1 187 0 3 5 177 0 5 4 42 0 6 5 181 0 7 5 185 0 8 4 42 0 9 5 189 0 10 5 193 0 11 5 197 0 12 4 42 0 13 1 191 0 14 4 42 0 15 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 4 42 0 22 4 42 0 23 5 229 0 24 4 42 0 25 4 42 0 26 1 195 0 29 5 237 0 30 5 241 0 32 4 42 0 34 4 42 0 35 4 42 0 47 4 42 0 49 4 42 0 50 4 42 0 53 4 42 0 54 4 42 0 55 4 42 0 56 5 245 0 57 4 42 0 59 4 42 0 60 4 42 0 62 4 42 0 63 4 42 0 64 4 42 0 66 4 42 0 67 4 42 0 68 4 42 0 69 5 249 0 72 4 42 0 73 5 253 0 75 4 42 0 77 4 42 0 79 4 42 0 80 4 42 0 82 4 42 0 83 6 1 0 85 4 42 0 88 4 42 0 89 4 42 0 90 4 42 0 91 4 42 0 92 4 42 0 93 4 42 0 94 4 42 0 96 4 42 0 97 4 42 0 99 4 42 0 100 4 42 0 101 4 42 0 102 4 42 0 103 4 42 0 107 4 42 0 108 4 42 0 109 6 5 0 110 4 42 0 111 4 42 0 117 4 42 0 118 4 42 0 119 4 42 0 120 4 42 0 121 4 42 0 122 4 42 0 123 4 42 0 124 4 42 0 125 4 42 0 127 6 9 0 239 6 13 0 241 6 17 0 243 4 42 1 46] 
#[0 4 46 0 11 0 100 0 124 0 125 0 127] 
#[0 4 50 0 55 0 127] 
#[1 2 181 0 122 9 137 0 140] 
#[1 1 197 0 33 9 141 0 167 9 141 0 170 9 141 0 171] 
#[1 2 181 0 122 9 145 0 140] 
#[0 4 54 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 9 149 0 134 9 149 0 135 9 149 0 136 9 149 0 137 9 149 0 138 9 149 0 139 9 149 0 140 9 149 0 141 9 149 0 142] 
#[1 4 58 0 6 4 58 0 9 9 153 0 169] 
#[0 4 62 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 9 157 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 9 157 0 134 9 157 0 135 9 157 0 136 9 157 0 137 9 157 0 138 9 157 0 139 9 157 0 140 9 157 0 141 9 157 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 9 157 0 213 9 157 0 214 9 157 0 215 9 157 0 219 9 157 0 220 9 157 0 221 9 157 0 222 9 157 0 223 9 157 0 230 9 157 0 231 9 157 0 232 9 157 0 233 9 157 0 234 9 157 0 235 9 157 0 236 9 157 0 237 9 157 0 238 9 157 0 240 9 157 0 242 9 157 0 244 9 157 0 245 9 157 0 246 9 157 0 247 9 157 0 248 9 157 0 249 9 157 0 250 9 157 1 40 9 157 1 41 9 157 1 42 9 157 1 43 9 157 1 44 9 157 1 45] 
#[1 2 86 0 6 2 86 0 9 1 169 0 11 6 85 0 19 1 197 0 33 9 161 0 167 9 161 0 170 9 161 0 171 6 93 0 187 9 165 0 188] 
#[1 2 86 0 6 2 86 0 9 6 85 0 19 6 93 0 187 9 169 0 188] 
#[0 4 66 0 6 0 9] 
#[1 0 205 0 11 0 209 0 100 9 173 0 124 0 217 0 125 9 173 0 145 9 173 0 146 9 173 0 147 9 173 0 148 9 173 0 149] 
#[1 2 86 0 6 2 86 0 9 1 169 0 11 6 85 0 19 1 197 0 33 9 177 0 167 9 177 0 170 9 177 0 171 6 93 0 187 9 181 0 188] 
#[1 2 86 0 6 2 86 0 9 6 85 0 19 6 93 0 187 9 185 0 188] 
#[0 4 70 0 6 0 9] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 4 74 0 6 5 181 0 7 5 185 0 8 4 74 0 9 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 5 229 0 24 5 233 0 29 5 237 0 30 5 241 0 32 5 245 0 57 5 249 0 72 5 253 0 75 6 1 0 85 6 5 0 110 6 9 0 239 6 13 0 241 6 17 0 243] 
#[0 4 78 0 6 0 9] 
#[1 2 86 0 6 2 86 0 9 1 169 0 11 6 85 0 19 1 197 0 33 9 189 0 167 9 189 0 170 9 189 0 171 6 93 0 187 9 193 0 188] 
#[1 2 86 0 6 2 86 0 9 6 85 0 19 6 93 0 187 9 197 0 188] 
#[0 4 82 0 6 0 9] 
#[0 4 86 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 33 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 0 205 0 11 3 201 0 38 3 221 0 40 3 209 0 84 3 213 0 86 0 209 0 100 3 217 0 124 0 217 0 125 3 217 0 145 3 217 0 146 3 217 0 147 3 217 0 148 3 217 0 149 3 221 0 182 9 201 0 186] 
#[0 4 90 0 6 0 9] 
#[0 9 205 0 64] 
#[0 9 209 0 55] 
#[0 9 213 0 89] 
#[0 9 217 0 55] 
#[0 9 221 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 9 225 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 9 229 0 89] 
#[0 9 233 0 55] 
#[0 9 237 0 89] 
#[0 9 241 0 55] 
#[1 1 130 0 1 1 130 0 3 0 195 0 5 1 130 0 7 0 195 0 8 0 195 0 10 0 195 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 0 6 0 22 0 6 0 23 1 130 0 24 0 6 0 25 0 6 0 26 1 130 0 29 1 130 0 30 1 130 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 1 130 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 130 0 72 0 6 0 73 1 130 0 75 0 6 0 80 0 6 0 82 1 130 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 1 130 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 245 0 133] 
#[1 1 130 0 1 1 130 0 3 0 195 0 5 1 130 0 7 0 195 0 8 0 195 0 10 0 195 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 0 6 0 22 0 6 0 23 1 130 0 24 0 6 0 25 0 6 0 26 1 130 0 29 1 130 0 30 1 130 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 1 130 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 130 0 72 0 6 0 73 1 130 0 75 0 6 0 77 0 6 0 80 0 6 0 82 1 130 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 1 130 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 249 0 133] 
#[1 9 253 0 77 1 41 0 119 1 177 0 127 10 1 0 135] 
#[1 0 6 0 77 0 6 0 119 0 6 0 127 10 5 0 133] 
#[1 1 169 0 11 10 9 0 70] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 10 13 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 10 13 0 134 10 13 0 135 10 13 0 136 10 13 0 137 10 13 0 138 10 13 0 139 10 13 0 140 10 13 0 141 10 13 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 10 13 0 213 10 13 0 214 10 13 0 215 10 13 0 219 10 13 0 220 10 13 0 221 10 13 0 222 10 13 0 223 10 13 0 230 10 13 0 231 10 13 0 232 10 13 0 233 10 13 0 234 10 13 0 235 10 13 0 236 10 13 0 237 10 13 0 238 10 13 0 240 10 13 0 242 10 13 0 244 10 13 0 245 10 13 0 246 10 13 0 247 10 13 0 248 10 13 0 249 10 13 0 250 10 13 1 40 10 13 1 41 10 13 1 42 10 13 1 43 10 13 1 44 10 13 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 1 199 0 22 1 203 0 23 1 207 0 25 1 211 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 53 0 6 0 54 0 6 0 55 0 6 0 56 0 6 0 59 1 215 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 219 0 73 1 223 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 1 227 0 94 0 6 0 96 1 231 0 100 0 6 0 103 0 6 0 108 0 6 0 109 1 235 0 111 1 239 0 117 1 243 0 118 0 187 0 119 1 247 0 120 1 251 0 121 1 255 0 122 2 3 0 123 2 7 0 124 2 11 0 125 0 6 0 127 10 17 0 133 10 21 0 134 10 21 0 135 10 21 0 136 10 21 0 137 10 21 0 138 10 21 0 139 10 21 0 140 10 21 0 141 10 21 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 10 21 0 213 10 21 0 214 10 21 0 215 10 21 0 219 10 21 0 220 10 21 0 221 10 21 0 222 10 21 0 223 10 21 0 230 10 21 0 231 10 21 0 232 10 21 0 233 10 21 0 234 10 21 0 235 10 21 0 236 10 21 0 237 10 21 0 238 10 21 0 240 10 21 0 242 10 21 0 244 10 21 0 245 10 21 0 246 10 21 0 247 10 21 0 248 10 21 0 249 10 21 0 250 10 21 1 40 10 21 1 41 10 21 1 42 10 21 1 43 10 21 1 44 10 21 1 45] 
#[0 10 25 0 79] 
#[0 4 94 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 4 98 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 0 6 0 107 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 10 29 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 33 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 10 37 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 41 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 4 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 1 86 0 1 1 86 0 3 1 86 0 5 1 86 0 7 1 86 0 8 1 86 0 10 1 86 0 11 1 86 0 12 1 86 0 14 1 86 0 16 1 86 0 17 1 86 0 18 1 86 0 19 1 86 0 20 1 86 0 21 1 86 0 22 1 86 0 23 1 86 0 24 1 86 0 25 1 86 0 26 1 86 0 29 1 86 0 30 1 86 0 32 1 86 0 34 1 86 0 49 1 86 0 50 1 86 0 56 1 86 0 57 1 86 0 59 1 86 0 60 1 86 0 62 1 86 0 63 1 86 0 66 1 86 0 67 1 86 0 68 1 86 0 69 1 86 0 72 1 86 0 73 1 86 0 75 1 86 0 80 1 86 0 82 1 86 0 85 1 86 0 88 1 86 0 90 1 86 0 91 1 86 0 92 2 15 0 93 1 86 0 94 1 86 0 96 1 86 0 100 1 86 0 103 1 86 0 108 1 86 0 109 1 86 0 110 1 86 0 111 1 86 0 117 1 86 0 118 1 86 0 119 1 86 0 120 1 86 0 121 1 86 0 122 1 86 0 123 1 86 0 124 1 86 0 125 1 86 0 127] 
#[1 10 49 0 93 1 41 0 119 10 53 0 135] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 10 57 0 153 10 57 0 159 4 65 0 164 10 57 0 172 10 57 0 173 10 57 0 177 10 57 0 178 10 57 0 199 10 57 0 200 10 57 0 201 10 57 0 202 10 57 0 203 10 57 0 205 10 57 0 206 10 57 0 207 10 57 0 208 10 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 10 57 0 251 10 57 0 252 10 57 0 253 10 57 0 254 10 57 0 255 10 57 1 0 10 57 1 1 10 57 1 2 10 57 1 3 10 57 1 4 10 57 1 5 10 57 1 6 10 57 1 7 10 57 1 8 10 57 1 9 10 57 1 10 10 57 1 11 10 57 1 12 10 57 1 20 4 157 1 21 10 57 1 22 10 57 1 23 10 57 1 24 10 57 1 25 10 57 1 26 10 57 1 27 10 57 1 28 10 57 1 29 10 57 1 30 10 57 1 31 10 57 1 32 10 57 1 33 10 57 1 34 10 57 1 35 10 57 1 36 10 57 1 37 10 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 4 106 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 4 110 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 10 61 0 99] 
#[0 4 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 10 65 0 7 4 118 0 11 4 118 0 55 4 118 0 100 4 118 0 124 4 118 0 125 4 118 0 127] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 4 122 0 22 4 122 0 23 5 229 0 24 4 122 0 25 4 122 0 26 5 233 0 29 5 237 0 30 5 241 0 32 4 122 0 34 4 122 0 35 4 122 0 47 4 122 0 49 4 122 0 50 4 122 0 53 4 122 0 54 4 122 0 55 4 122 0 56 5 245 0 57 4 122 0 59 4 122 0 60 4 122 0 62 4 122 0 63 4 122 0 64 4 122 0 66 4 122 0 67 4 122 0 68 4 122 0 69 5 249 0 72 4 122 0 73 5 253 0 75 4 122 0 77 4 122 0 79 4 122 0 80 4 122 0 82 4 122 0 83 6 1 0 85 4 122 0 88 4 122 0 89 4 122 0 90 4 122 0 91 4 122 0 92 4 122 0 93 4 122 0 94 4 122 0 96 4 122 0 99 4 122 0 100 4 122 0 103 4 122 0 107 4 122 0 108 4 122 0 109 6 5 0 110 4 122 0 111 4 122 0 117 4 122 0 118 4 122 0 119 4 122 0 120 4 122 0 121 4 122 0 122 4 122 0 123 4 122 0 124 4 122 0 125 4 122 0 127 6 9 0 239 6 13 0 241 6 17 0 243 4 122 1 46] 
#[1 1 221 0 5 10 69 0 31 10 73 0 183] 
#[1 1 221 0 5 10 77 0 31 10 81 0 183] 
#[0 10 85 0 56] 
#[0 10 89 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 93 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 10 97 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 101 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 105 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 109 0 133] 
#[0 10 113 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 117 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 10 121 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 125 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 10 129 0 99] 
#[0 10 133 0 55] 
#[0 10 137 0 103] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 141 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 145 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 149 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 153 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 157 0 133 10 161 0 167 10 161 0 170 10 161 0 171] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 165 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 169 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 173 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 177 0 133] 
#[0 10 181 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 185 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 10 189 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 193 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 10 197 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 201 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 205 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 209 0 133] 
#[0 10 213 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 217 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 10 221 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 10 225 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 10 229 0 99] 
#[0 10 233 0 55] 
#[1 2 19 0 1 2 23 0 3 2 27 0 5 4 126 0 6 2 31 0 7 2 35 0 8 4 126 0 9 2 39 0 10 2 43 0 11 2 47 0 12 4 126 0 13 2 51 0 14 4 126 0 15 2 55 0 16 2 59 0 17 2 63 0 18 2 67 0 19 2 71 0 20 2 75 0 21 4 126 0 22 4 126 0 23 2 79 0 24 4 126 0 25 4 126 0 26 2 83 0 29 2 87 0 30 2 91 0 32 4 126 0 34 4 126 0 35 4 126 0 47 4 126 0 49 4 126 0 50 4 126 0 53 4 126 0 54 4 126 0 55 4 126 0 56 2 95 0 57 4 126 0 59 4 126 0 60 4 126 0 62 4 126 0 63 4 126 0 64 4 126 0 66 4 126 0 67 4 126 0 68 4 126 0 69 2 99 0 72 4 126 0 73 2 103 0 75 4 126 0 77 4 126 0 79 4 126 0 80 4 126 0 82 4 126 0 83 2 107 0 85 4 126 0 88 4 126 0 89 4 126 0 90 4 126 0 91 4 126 0 92 4 126 0 93 4 126 0 94 4 126 0 96 4 126 0 97 4 126 0 99 4 126 0 100 4 126 0 101 4 126 0 102 4 126 0 103 4 126 0 107 4 126 0 108 4 126 0 109 2 111 0 110 4 126 0 111 4 126 0 117 4 126 0 118 4 126 0 119 4 126 0 120 4 126 0 121 4 126 0 122 4 126 0 123 4 126 0 124 4 126 0 125 4 126 0 127 6 9 0 239 6 13 0 241 6 17 0 243 4 126 1 46] 
#[0 4 130 0 10 0 113 0 116] 
#[1 10 237 0 10 10 241 0 116] 
#[1 5 169 0 1 2 115 0 3 5 177 0 5 4 134 0 6 5 181 0 7 5 185 0 8 4 134 0 9 5 189 0 10 5 193 0 11 5 197 0 12 4 134 0 13 2 119 0 14 4 134 0 15 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 4 134 0 22 4 134 0 23 5 229 0 24 4 134 0 25 4 134 0 26 2 123 0 29 5 237 0 30 5 241 0 32 4 134 0 34 4 134 0 35 4 134 0 47 4 134 0 49 4 134 0 50 4 134 0 53 4 134 0 54 4 134 0 55 4 134 0 56 5 245 0 57 4 134 0 59 4 134 0 60 4 134 0 62 4 134 0 63 4 134 0 64 4 134 0 66 4 134 0 67 4 134 0 68 4 134 0 69 5 249 0 72 4 134 0 73 5 253 0 75 4 134 0 77 4 134 0 79 4 134 0 80 4 134 0 82 4 134 0 83 6 1 0 85 4 134 0 88 4 134 0 89 4 134 0 90 4 134 0 91 4 134 0 92 4 134 0 93 4 134 0 94 4 134 0 96 4 134 0 97 4 134 0 99 4 134 0 100 4 134 0 101 4 134 0 102 4 134 0 103 4 134 0 107 4 134 0 108 4 134 0 109 6 5 0 110 4 134 0 111 4 134 0 117 4 134 0 118 4 134 0 119 4 134 0 120 4 134 0 121 4 134 0 122 4 134 0 123 4 134 0 124 4 134 0 125 4 134 0 127 6 9 0 239 6 13 0 241 6 17 0 243 4 134 1 46] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 10 245 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 10 245 0 134 10 245 0 135 10 245 0 136 10 245 0 137 10 245 0 138 10 245 0 139 10 245 0 140 10 245 0 141 10 245 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 10 245 0 213 10 245 0 214 10 245 0 215 10 245 0 219 10 245 0 220 10 245 0 221 10 245 0 222 10 245 0 223 10 245 0 230 10 245 0 231 10 245 0 232 10 245 0 233 10 245 0 234 10 245 0 235 10 245 0 236 10 245 0 237 10 245 0 238 10 245 0 240 10 245 0 242 10 245 0 244 10 245 0 245 10 245 0 246 10 245 0 247 10 245 0 248 10 245 0 249 10 245 0 250 10 245 1 40 10 245 1 41 10 245 1 42 10 245 1 43 10 245 1 44 10 245 1 45] 
#[1 5 169 0 1 2 127 0 3 5 177 0 5 4 138 0 6 5 181 0 7 5 185 0 8 4 138 0 9 5 189 0 10 5 193 0 11 5 197 0 12 4 138 0 13 2 131 0 14 4 138 0 15 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 4 138 0 22 4 138 0 23 5 229 0 24 4 138 0 25 4 138 0 26 2 135 0 29 5 237 0 30 5 241 0 32 4 138 0 34 4 138 0 35 4 138 0 47 4 138 0 49 4 138 0 50 4 138 0 53 4 138 0 54 4 138 0 55 4 138 0 56 5 245 0 57 4 138 0 59 4 138 0 60 4 138 0 62 4 138 0 63 4 138 0 64 4 138 0 66 4 138 0 67 4 138 0 68 4 138 0 69 5 249 0 72 4 138 0 73 5 253 0 75 4 138 0 77 4 138 0 79 4 138 0 80 4 138 0 82 4 138 0 83 6 1 0 85 4 138 0 88 4 138 0 89 4 138 0 90 4 138 0 91 4 138 0 92 4 138 0 93 4 138 0 94 4 138 0 96 4 138 0 97 4 138 0 99 4 138 0 100 4 138 0 101 4 138 0 102 4 138 0 103 4 138 0 107 4 138 0 108 4 138 0 109 6 5 0 110 4 138 0 111 4 138 0 117 4 138 0 118 4 138 0 119 4 138 0 120 4 138 0 121 4 138 0 122 4 138 0 123 4 138 0 124 4 138 0 125 4 138 0 127 6 9 0 239 6 13 0 241 6 17 0 243 4 138 1 46] 
#[0 4 142 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 4 146 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 4 150 0 1 4 150 0 3 4 150 0 5 4 150 0 6 4 150 0 7 4 150 0 8 9 121 0 9 4 150 0 10 4 150 0 11 4 150 0 12 4 150 0 13 4 150 0 14 2 139 0 15 4 150 0 16 4 150 0 17 4 150 0 18 4 150 0 19 4 150 0 20 4 150 0 21 4 150 0 22 4 150 0 23 4 150 0 24 4 150 0 25 4 150 0 26 4 150 0 29 4 150 0 30 4 150 0 32 4 150 0 34 4 150 0 35 4 150 0 47 4 150 0 49 4 150 0 50 4 150 0 53 4 150 0 54 4 150 0 55 4 150 0 56 4 150 0 57 4 150 0 59 4 150 0 60 4 150 0 62 4 150 0 63 4 150 0 64 4 150 0 66 4 150 0 67 4 150 0 68 4 150 0 69 4 150 0 72 4 150 0 73 4 150 0 75 4 150 0 77 4 150 0 79 4 150 0 80 4 150 0 82 4 150 0 83 4 150 0 85 4 150 0 88 4 150 0 89 4 150 0 90 4 150 0 91 4 150 0 92 4 150 0 93 4 150 0 94 4 150 0 96 4 150 0 97 4 150 0 99 4 150 0 100 4 150 0 101 4 150 0 102 4 150 0 103 4 150 0 107 4 150 0 108 4 150 0 109 4 150 0 110 4 150 0 111 4 150 0 117 4 150 0 118 4 150 0 119 4 150 0 120 4 150 0 121 4 150 0 122 4 150 0 123 4 150 0 124 4 150 0 125 4 150 0 127 9 129 0 228 4 150 1 46] 
#[1 4 154 0 1 4 154 0 3 2 121 0 5 4 154 0 6 4 154 0 7 2 125 0 8 4 154 0 9 2 129 0 10 0 205 0 11 4 154 0 12 4 154 0 13 4 154 0 14 4 154 0 15 4 154 0 16 4 154 0 17 4 154 0 18 4 154 0 19 4 154 0 20 4 154 0 21 2 143 0 22 2 147 0 23 4 154 0 24 2 151 0 25 2 155 0 26 4 154 0 29 4 154 0 30 4 154 0 32 4 154 0 34 4 154 0 35 3 201 0 38 7 157 0 40 4 154 0 47 4 154 0 49 4 154 0 50 4 154 0 53 4 154 0 54 4 154 0 55 4 154 0 56 4 154 0 57 4 154 0 59 2 159 0 60 4 154 0 62 4 154 0 63 4 154 0 64 4 154 0 66 4 154 0 67 4 154 0 68 4 154 0 69 4 154 0 72 2 163 0 73 4 154 0 75 4 154 0 77 4 154 0 79 2 167 0 80 4 154 0 82 4 154 0 83 4 154 0 85 7 153 0 86 4 154 0 88 4 154 0 89 4 154 0 90 4 154 0 91 4 154 0 92 4 154 0 93 2 171 0 94 4 154 0 96 4 154 0 97 4 154 0 99 2 175 0 100 4 154 0 101 4 154 0 102 4 154 0 103 4 154 0 107 4 154 0 108 4 154 0 109 4 154 0 110 2 179 0 111 2 183 0 117 2 187 0 118 2 191 0 119 2 195 0 120 2 199 0 121 2 203 0 122 2 207 0 123 2 211 0 124 2 215 0 125 4 154 0 127 7 161 0 134 7 161 0 135 7 161 0 136 7 161 0 137 7 161 0 138 7 161 0 139 7 161 0 140 7 161 0 141 7 161 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 7 157 0 182 7 161 0 213 7 161 0 214 7 161 0 215 7 161 0 219 7 161 0 220 7 161 0 221 7 161 0 222 7 161 0 223 10 249 0 224 7 161 0 230 7 161 0 231 7 161 0 232 7 161 0 233 7 161 0 234 7 161 0 235 7 161 0 236 7 161 0 237 7 161 0 238 7 161 0 240 7 161 0 242 7 161 0 244 7 161 0 245 7 161 0 246 7 161 0 247 7 161 0 248 7 161 0 249 7 161 0 250 7 161 1 40 7 161 1 41 7 161 1 42 7 161 1 43 7 161 1 44 7 161 1 45 4 154 1 46] 
#[1 4 158 0 1 4 158 0 3 2 121 0 5 4 158 0 6 4 158 0 7 2 125 0 8 4 158 0 9 2 129 0 10 0 205 0 11 4 158 0 12 4 158 0 13 4 158 0 14 4 158 0 15 4 158 0 16 4 158 0 17 4 158 0 18 4 158 0 19 4 158 0 20 4 158 0 21 2 219 0 22 2 223 0 23 4 158 0 24 2 227 0 25 2 231 0 26 4 158 0 29 4 158 0 30 4 158 0 32 4 158 0 34 4 158 0 35 3 201 0 38 7 157 0 40 4 158 0 47 4 158 0 49 4 158 0 50 4 158 0 53 4 158 0 54 4 158 0 55 4 158 0 56 4 158 0 57 4 158 0 59 2 235 0 60 4 158 0 62 4 158 0 63 4 158 0 64 4 158 0 66 4 158 0 67 4 158 0 68 4 158 0 69 4 158 0 72 2 239 0 73 4 158 0 75 4 158 0 77 4 158 0 79 2 243 0 80 4 158 0 82 4 158 0 83 4 158 0 85 7 153 0 86 4 158 0 88 4 158 0 89 4 158 0 90 4 158 0 91 4 158 0 92 4 158 0 93 2 247 0 94 4 158 0 96 4 158 0 97 4 158 0 99 2 251 0 100 4 158 0 101 4 158 0 102 4 158 0 103 4 158 0 107 4 158 0 108 4 158 0 109 4 158 0 110 2 255 0 111 3 3 0 117 3 7 0 118 3 11 0 119 3 15 0 120 3 19 0 121 3 23 0 122 3 27 0 123 3 31 0 124 3 35 0 125 4 158 0 127 7 161 0 134 7 161 0 135 7 161 0 136 7 161 0 137 7 161 0 138 7 161 0 139 7 161 0 140 7 161 0 141 7 161 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 7 157 0 182 7 161 0 213 7 161 0 214 7 161 0 215 7 161 0 219 7 161 0 220 7 161 0 221 7 161 0 222 7 161 0 223 10 253 0 224 7 161 0 230 7 161 0 231 7 161 0 232 7 161 0 233 7 161 0 234 7 161 0 235 7 161 0 236 7 161 0 237 7 161 0 238 7 161 0 240 7 161 0 242 7 161 0 244 7 161 0 245 7 161 0 246 7 161 0 247 7 161 0 248 7 161 0 249 7 161 0 250 7 161 1 40 7 161 1 41 7 161 1 42 7 161 1 43 7 161 1 44 7 161 1 45 4 158 1 46] 
#[0 4 162 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 4 166 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 221 0 5 11 1 0 183] 
#[0 4 170 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 1 221 0 5 11 5 0 183] 
#[1 4 58 0 6 4 58 0 9 11 9 0 169] 
#[1 11 13 0 6 11 17 0 9 11 21 0 168] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 5 229 0 24 5 233 0 29 5 237 0 30 5 241 0 32 4 174 0 55 5 245 0 57 5 249 0 72 5 253 0 75 6 1 0 85 4 174 0 100 6 5 0 110 4 174 0 124 4 174 0 125 4 174 0 127 6 9 0 239 6 13 0 241 6 17 0 243] 
#[1 2 86 0 6 2 86 0 9 6 85 0 19 6 93 0 187 11 25 0 188] 
#[0 4 178 0 6 0 9] 
#[0 4 182 0 6 0 9] 
#[1 2 86 0 6 2 86 0 9 1 169 0 11 6 85 0 19 1 197 0 33 11 29 0 167 11 29 0 170 11 29 0 171 6 93 0 187 11 33 0 188] 
#[1 2 86 0 6 2 86 0 9 6 85 0 19 6 93 0 187 11 37 0 188] 
#[0 4 186 0 6 0 9] 
#[0 4 190 0 6 0 9] 
#[1 2 86 0 6 2 86 0 9 6 85 0 19 6 93 0 187 11 41 0 188] 
#[0 4 194 0 6 0 9] 
#[0 4 198 0 6 0 9] 
#[0 4 202 0 6 0 9] 
#[0 4 206 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 11 45 0 64] 
#[0 4 210 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 11 49 0 89] 
#[0 11 53 0 89] 
#[0 11 57 0 55] 
#[0 4 214 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 11 61 0 89] 
#[0 4 218 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 11 65 0 89] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 11 69 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 0 6 0 77 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 11 73 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 11 77 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 4 222 0 5 4 222 0 8 4 222 0 10 4 222 0 11 4 222 0 22 4 222 0 23 4 222 0 25 4 222 0 26 4 222 0 34 4 222 0 49 4 222 0 50 4 222 0 53 4 222 0 54 4 222 0 55 4 222 0 56 4 222 0 59 4 222 0 60 4 222 0 62 4 222 0 63 4 222 0 66 4 222 0 67 4 222 0 68 4 222 0 69 4 222 0 73 4 222 0 77 4 222 0 79 4 222 0 80 4 222 0 82 4 222 0 88 4 222 0 90 4 222 0 91 4 222 0 92 4 222 0 93 4 222 0 94 4 222 0 96 4 222 0 100 4 222 0 103 4 222 0 107 3 39 0 108 4 222 0 109 4 222 0 111 4 222 0 117 4 222 0 118 4 222 0 119 4 222 0 120 4 222 0 121 4 222 0 122 4 222 0 123 4 222 0 124 4 222 0 125 4 222 0 127] 
#[0 11 85 0 77] 
#[1 11 89 0 77 1 41 0 119 1 177 0 127 11 93 0 135] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 11 97 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 11 97 0 134 11 97 0 135 11 97 0 136 11 97 0 137 11 97 0 138 11 97 0 139 11 97 0 140 11 97 0 141 11 97 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 11 97 0 213 11 97 0 214 11 97 0 215 11 97 0 219 11 97 0 220 11 97 0 221 11 97 0 222 11 97 0 223 11 97 0 230 11 97 0 231 11 97 0 232 11 97 0 233 11 97 0 234 11 97 0 235 11 97 0 236 11 97 0 237 11 97 0 238 11 97 0 240 11 97 0 242 11 97 0 244 11 97 0 245 11 97 0 246 11 97 0 247 11 97 0 248 11 97 0 249 11 97 0 250 11 97 1 40 11 97 1 41 11 97 1 42 11 97 1 43 11 97 1 44 11 97 1 45] 
#[1 5 169 0 1 1 151 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 1 155 0 14 5 205 0 16 5 209 0 17 5 213 0 18 4 30 0 19 5 221 0 20 5 225 0 21 5 229 0 24 1 159 0 29 5 237 0 30 5 241 0 32 5 245 0 57 5 249 0 72 5 253 0 75 6 1 0 85 11 101 0 102 6 5 0 110 6 9 0 239 6 13 0 241 6 17 0 243] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 6 0 53 0 6 0 54 0 6 0 55 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 11 105 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 11 109 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 4 226 0 22 4 226 0 23 5 229 0 24 4 226 0 25 4 226 0 26 5 233 0 29 5 237 0 30 5 241 0 32 4 226 0 34 4 226 0 49 4 226 0 50 4 226 0 53 4 226 0 54 4 226 0 55 4 226 0 56 5 245 0 57 4 226 0 59 4 226 0 60 4 226 0 62 4 226 0 63 4 226 0 66 4 226 0 67 4 226 0 68 4 226 0 69 5 249 0 72 4 226 0 73 5 253 0 75 4 226 0 77 4 226 0 79 4 226 0 80 4 226 0 82 6 1 0 85 4 226 0 88 4 226 0 90 4 226 0 91 4 226 0 92 4 226 0 93 4 226 0 94 4 226 0 96 4 226 0 100 4 226 0 103 4 226 0 107 4 226 0 108 4 226 0 109 6 5 0 110 4 226 0 111 4 226 0 117 4 226 0 118 4 226 0 119 4 226 0 120 4 226 0 121 4 226 0 122 4 226 0 123 4 226 0 124 4 226 0 125 4 226 0 127 6 9 0 239 6 13 0 241 6 17 0 243] 
#[0 4 230 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 11 113 0 107 1 41 0 119 1 177 0 127 11 117 0 135] 
#[1 0 6 0 107 0 6 0 119 0 6 0 127 11 121 0 133] 
#[1 11 125 0 55 1 41 0 119 1 177 0 127 11 129 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 11 133 0 133] 
#[0 4 234 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 4 238 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 11 137 0 93] 
#[0 4 242 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 4 246 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 1 41 0 119 11 141 0 135] 
#[1 2 181 0 122 11 145 0 140] 
#[1 1 197 0 33 11 149 0 167 11 149 0 170 11 149 0 171] 
#[1 2 181 0 122 11 153 0 140] 
#[0 4 250 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 4 254 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 11 157 0 64] 
#[0 11 161 0 55] 
#[0 11 165 0 89] 
#[0 11 169 0 55] 
#[0 11 173 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 11 177 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 11 181 0 89] 
#[0 11 185 0 55] 
#[0 11 189 0 89] 
#[0 11 193 0 55] 
#[0 5 2 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 11 197 0 99] 
#[0 5 6 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 11 201 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 11 205 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 11 209 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 11 213 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 11 217 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 11 221 0 133] 
#[0 11 225 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 11 229 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 11 233 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 11 237 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 11 241 0 99] 
#[0 11 245 0 55] 
#[0 11 249 0 64] 
#[0 11 253 0 55] 
#[0 12 1 0 89] 
#[0 12 5 0 55] 
#[0 12 9 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 12 13 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 12 17 0 89] 
#[0 12 21 0 55] 
#[0 12 25 0 89] 
#[0 12 29 0 55] 
#[0 5 10 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 33 0 99] 
#[1 9 89 0 116 12 37 0 144] 
#[0 5 14 0 10 0 113 0 116] 
#[1 5 169 0 1 3 43 0 3 5 177 0 5 5 18 0 6 5 181 0 7 5 185 0 8 5 18 0 9 5 189 0 10 5 193 0 11 5 197 0 12 5 18 0 13 3 47 0 14 5 18 0 15 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 5 18 0 22 5 18 0 23 5 229 0 24 5 18 0 25 5 18 0 26 3 51 0 29 5 237 0 30 5 241 0 32 5 18 0 34 5 18 0 35 5 18 0 47 5 18 0 49 5 18 0 50 5 18 0 53 5 18 0 54 5 18 0 55 5 18 0 56 5 245 0 57 5 18 0 59 5 18 0 60 5 18 0 62 5 18 0 63 5 18 0 64 5 18 0 66 5 18 0 67 5 18 0 68 5 18 0 69 5 249 0 72 5 18 0 73 5 253 0 75 5 18 0 77 5 18 0 79 5 18 0 80 5 18 0 82 5 18 0 83 6 1 0 85 5 18 0 88 5 18 0 89 5 18 0 90 5 18 0 91 5 18 0 92 5 18 0 93 5 18 0 94 5 18 0 96 5 18 0 97 5 18 0 99 5 18 0 100 5 18 0 101 5 18 0 102 5 18 0 103 5 18 0 107 5 18 0 108 5 18 0 109 6 5 0 110 5 18 0 111 5 18 0 117 5 18 0 118 5 18 0 119 5 18 0 120 5 18 0 121 5 18 0 122 5 18 0 123 5 18 0 124 5 18 0 125 5 18 0 127 6 9 0 239 6 13 0 241 6 17 0 243 5 18 1 46] 
#[0 5 22 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 5 26 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 1 197 0 33 12 41 0 167 12 41 0 170 12 41 0 171] 
#[0 5 30 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 12 45 0 6 11 17 0 9 11 21 0 168] 
#[0 5 34 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 12 49 0 134 12 49 0 135 12 49 0 136 12 49 0 137 12 49 0 138 12 49 0 139 12 49 0 140 12 49 0 141 12 49 0 142] 
#[0 5 38 0 6 0 9] 
#[0 5 42 0 6 0 9] 
#[1 2 86 0 6 2 86 0 9 6 85 0 19 6 93 0 187 12 53 0 188] 
#[0 5 46 0 6 0 9] 
#[0 5 50 0 6 0 9] 
#[0 5 54 0 6 0 9] 
#[0 5 58 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 62 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 66 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 57 0 89] 
#[0 5 70 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 74 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 0 6 0 77 0 6 0 119 0 6 0 127 12 61 0 133] 
#[1 12 65 0 77 1 41 0 119 1 177 0 127 12 69 0 135] 
#[1 0 6 0 77 0 6 0 119 0 6 0 127 12 73 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 12 77 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 109 0 134 5 109 0 135 5 109 0 136 5 109 0 137 5 109 0 138 5 109 0 139 5 109 0 140 5 109 0 141 5 109 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 12 77 0 213 5 109 0 214 5 109 0 215 12 77 0 219 12 77 0 220 12 77 0 221 12 77 0 222 12 77 0 223 12 77 0 230 12 77 0 231 12 77 0 232 12 77 0 233 12 77 0 234 12 77 0 235 12 77 0 236 12 77 0 237 12 77 0 238 12 77 0 240 12 77 0 242 12 77 0 244 12 77 0 245 12 77 0 246 12 77 0 247 12 77 0 248 12 77 0 249 12 77 0 250 5 109 1 40 5 109 1 41 5 109 1 42 5 109 1 43 5 109 1 44 5 109 1 45] 
#[1 5 78 0 5 5 78 0 8 5 78 0 10 5 78 0 11 5 78 0 22 5 78 0 23 5 78 0 25 5 78 0 26 5 78 0 34 5 78 0 49 5 78 0 50 5 78 0 53 5 78 0 54 5 78 0 55 5 78 0 56 5 78 0 59 5 78 0 60 5 78 0 62 5 78 0 63 5 78 0 66 5 78 0 67 5 78 0 68 5 78 0 69 5 78 0 73 5 78 0 77 5 78 0 79 5 78 0 80 5 78 0 82 5 78 0 88 5 78 0 90 5 78 0 91 5 78 0 92 5 78 0 93 5 78 0 94 5 78 0 96 5 78 0 100 5 78 0 103 5 78 0 107 3 55 0 108 5 78 0 109 5 78 0 111 5 78 0 117 5 78 0 118 5 78 0 119 5 78 0 120 5 78 0 121 5 78 0 122 5 78 0 123 5 78 0 124 5 78 0 125 5 78 0 127] 
#[1 5 82 0 5 5 82 0 8 5 82 0 10 5 82 0 11 5 82 0 22 5 82 0 23 5 82 0 25 5 82 0 26 5 82 0 34 5 82 0 49 5 82 0 50 5 82 0 53 5 82 0 54 5 82 0 55 5 82 0 56 5 82 0 59 5 82 0 60 5 82 0 62 5 82 0 63 5 82 0 66 5 82 0 67 5 82 0 68 5 82 0 69 5 82 0 73 5 82 0 77 5 82 0 79 5 82 0 80 5 82 0 82 5 82 0 88 5 82 0 90 5 82 0 91 5 82 0 92 5 82 0 93 5 82 0 94 5 82 0 96 5 82 0 100 5 82 0 103 12 85 0 104 5 82 0 107 3 59 0 108 5 82 0 109 5 82 0 111 5 82 0 117 5 82 0 118 5 82 0 119 5 82 0 120 5 82 0 121 5 82 0 122 5 82 0 123 5 82 0 124 5 82 0 125 5 82 0 127] 
#[0 12 93 0 77] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 0 6 0 22 0 6 0 23 5 229 0 24 0 6 0 25 0 6 0 26 5 233 0 29 5 237 0 30 5 241 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 5 245 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 5 249 0 72 0 6 0 73 5 253 0 75 0 6 0 79 0 6 0 80 0 6 0 82 6 1 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 6 5 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 12 97 0 133 6 9 0 239 6 13 0 241 6 17 0 243] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 12 101 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 12 101 0 134 12 101 0 135 12 101 0 136 12 101 0 137 12 101 0 138 12 101 0 139 12 101 0 140 12 101 0 141 12 101 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 12 101 0 213 12 101 0 214 12 101 0 215 12 101 0 219 12 101 0 220 12 101 0 221 12 101 0 222 12 101 0 223 12 101 0 230 12 101 0 231 12 101 0 232 12 101 0 233 12 101 0 234 12 101 0 235 12 101 0 236 12 101 0 237 12 101 0 238 12 101 0 240 12 101 0 242 12 101 0 244 12 101 0 245 12 101 0 246 12 101 0 247 12 101 0 248 12 101 0 249 12 101 0 250 12 101 1 40 12 101 1 41 12 101 1 42 12 101 1 43 12 101 1 44 12 101 1 45] 
#[1 12 105 0 53 12 109 0 54 12 113 0 55 1 41 0 119 1 177 0 127 12 117 0 135 12 121 1 13 12 125 1 14 12 121 1 15 12 121 1 16 12 121 1 17] 
#[1 0 6 0 53 0 6 0 54 0 6 0 55 0 6 0 119 0 6 0 127 12 141 0 133] 
#[0 5 86 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 12 145 0 107] 
#[1 12 149 0 107 1 41 0 119 1 177 0 127 12 153 0 135] 
#[0 12 157 0 109] 
#[0 12 161 0 55] 
#[1 12 165 0 55 1 41 0 119 1 177 0 127 12 169 0 135] 
#[0 5 90 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 5 94 0 11 0 55 0 100 0 124 0 125 0 127] 
#[1 1 221 0 5 12 173 0 183] 
#[0 5 98 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 1 221 0 5 12 177 0 183] 
#[0 5 102 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 181 0 64] 
#[0 5 106 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 185 0 89] 
#[0 12 189 0 89] 
#[0 12 193 0 55] 
#[0 5 110 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 197 0 89] 
#[0 5 114 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 201 0 89] 
#[0 5 118 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 205 0 64] 
#[0 12 209 0 55] 
#[0 12 213 0 89] 
#[0 12 217 0 55] 
#[0 12 221 0 55] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 1 177 0 127 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 12 225 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 12 229 0 89] 
#[0 12 233 0 55] 
#[0 12 237 0 89] 
#[0 12 241 0 55] 
#[0 5 122 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 245 0 99] 
#[0 5 126 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 249 0 64] 
#[0 5 130 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 12 253 0 89] 
#[0 13 1 0 89] 
#[0 13 5 0 55] 
#[0 5 134 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 9 0 89] 
#[0 5 138 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 13 0 89] 
#[0 5 142 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 13 17 0 10 10 241 0 116] 
#[0 5 146 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 150 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[0 5 154 0 6 0 9] 
#[0 5 158 0 6 0 9] 
#[0 5 162 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 13 21 0 77 1 41 0 119 1 177 0 127 13 25 0 135] 
#[0 5 166 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 29 0 77] 
#[1 13 33 0 77 1 41 0 119 1 177 0 127 13 37 0 135] 
#[1 1 130 0 1 1 130 0 3 3 63 0 5 1 130 0 7 3 63 0 8 3 63 0 10 3 63 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 5 170 0 22 5 170 0 23 1 130 0 24 5 170 0 25 5 170 0 26 1 130 0 29 1 130 0 30 1 130 0 32 5 170 0 34 5 170 0 49 5 170 0 50 5 170 0 53 5 170 0 54 5 170 0 55 5 170 0 56 1 130 0 57 5 170 0 59 5 170 0 60 5 170 0 62 5 170 0 63 5 170 0 66 5 170 0 67 5 170 0 68 5 170 0 69 1 130 0 72 5 170 0 73 1 130 0 75 5 170 0 77 5 170 0 79 5 170 0 80 5 170 0 82 1 130 0 85 5 170 0 88 5 170 0 90 5 170 0 91 5 170 0 92 5 170 0 93 5 170 0 94 5 170 0 96 5 170 0 100 5 170 0 103 5 170 0 107 5 170 0 108 5 170 0 109 1 130 0 110 5 170 0 111 5 170 0 117 5 170 0 118 5 170 0 119 5 170 0 120 5 170 0 121 5 170 0 122 5 170 0 123 5 170 0 124 5 170 0 125 5 170 0 127] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 13 41 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 109 0 134 5 109 0 135 5 109 0 136 5 109 0 137 5 109 0 138 5 109 0 139 5 109 0 140 5 109 0 141 5 109 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 13 41 0 213 5 109 0 214 5 109 0 215 13 41 0 219 13 41 0 220 13 41 0 221 13 41 0 222 13 41 0 223 13 41 0 230 13 41 0 231 13 41 0 232 13 41 0 233 13 41 0 234 13 41 0 235 13 41 0 236 13 41 0 237 13 41 0 238 13 41 0 240 13 41 0 242 13 41 0 244 13 41 0 245 13 41 0 246 13 41 0 247 13 41 0 248 13 41 0 249 13 41 0 250 5 109 1 40 5 109 1 41 5 109 1 42 5 109 1 43 5 109 1 44 5 109 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 13 45 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 109 0 134 5 109 0 135 5 109 0 136 5 109 0 137 5 109 0 138 5 109 0 139 5 109 0 140 5 109 0 141 5 109 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 13 45 0 213 5 109 0 214 5 109 0 215 13 45 0 219 13 45 0 220 13 45 0 221 13 45 0 222 13 45 0 223 13 45 0 230 13 45 0 231 13 45 0 232 13 45 0 233 13 45 0 234 13 45 0 235 13 45 0 236 13 45 0 237 13 45 0 238 13 45 0 240 13 45 0 242 13 45 0 244 13 45 0 245 13 45 0 246 13 45 0 247 13 45 0 248 13 45 0 249 13 45 0 250 5 109 1 40 5 109 1 41 5 109 1 42 5 109 1 43 5 109 1 44 5 109 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 13 49 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 109 0 134 5 109 0 135 5 109 0 136 5 109 0 137 5 109 0 138 5 109 0 139 5 109 0 140 5 109 0 141 5 109 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 13 49 0 213 5 109 0 214 5 109 0 215 13 49 0 219 13 49 0 220 13 49 0 221 13 49 0 222 13 49 0 223 13 49 0 230 13 49 0 231 13 49 0 232 13 49 0 233 13 49 0 234 13 49 0 235 13 49 0 236 13 49 0 237 13 49 0 238 13 49 0 240 13 49 0 242 13 49 0 244 13 49 0 245 13 49 0 246 13 49 0 247 13 49 0 248 13 49 0 249 13 49 0 250 5 109 1 40 5 109 1 41 5 109 1 42 5 109 1 43 5 109 1 44 5 109 1 45] 
#[1 5 174 0 5 5 174 0 8 5 174 0 10 5 174 0 11 5 174 0 22 5 174 0 23 5 174 0 25 5 174 0 26 5 174 0 34 5 174 0 49 5 174 0 50 5 174 0 53 5 174 0 54 5 174 0 55 5 174 0 56 5 174 0 59 5 174 0 60 5 174 0 62 5 174 0 63 5 174 0 66 5 174 0 67 5 174 0 68 5 174 0 69 5 174 0 73 5 174 0 77 5 174 0 79 5 174 0 80 5 174 0 82 5 174 0 88 5 174 0 90 5 174 0 91 5 174 0 92 5 174 0 93 5 174 0 94 5 174 0 96 5 174 0 100 5 174 0 103 13 53 0 104 5 174 0 107 3 67 0 108 5 174 0 109 5 174 0 111 5 174 0 117 5 174 0 118 5 174 0 119 5 174 0 120 5 174 0 121 5 174 0 122 5 174 0 123 5 174 0 124 5 174 0 125 5 174 0 127] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 0 6 0 79 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 13 61 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 13 65 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 0 6 0 22 0 6 0 23 5 229 0 24 0 6 0 25 0 6 0 26 5 233 0 29 5 237 0 30 5 241 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 5 245 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 5 249 0 72 0 6 0 73 5 253 0 75 0 6 0 79 0 6 0 80 0 6 0 82 6 1 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 13 69 0 97 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 6 5 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 73 0 133 6 9 0 239 6 13 0 241 6 17 0 243] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 77 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 13 81 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 13 81 0 134 13 81 0 135 13 81 0 136 13 81 0 137 13 81 0 138 13 81 0 139 13 81 0 140 13 81 0 141 13 81 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 13 81 0 213 13 81 0 214 13 81 0 215 13 81 0 219 13 81 0 220 13 81 0 221 13 81 0 222 13 81 0 223 13 81 0 230 13 81 0 231 13 81 0 232 13 81 0 233 13 81 0 234 13 81 0 235 13 81 0 236 13 81 0 237 13 81 0 238 13 81 0 240 13 81 0 242 13 81 0 244 13 81 0 245 13 81 0 246 13 81 0 247 13 81 0 248 13 81 0 249 13 81 0 250 13 81 1 40 13 81 1 41 13 81 1 42 13 81 1 43 13 81 1 44 13 81 1 45] 
#[0 13 85 0 69] 
#[1 13 89 0 53 13 93 0 55] 
#[0 5 178 0 53 0 54] 
#[1 13 97 0 53 12 109 0 54 13 101 1 13 13 101 1 15 13 101 1 16 13 101 1 17] 
#[0 5 182 0 53 0 54] 
#[0 5 186 0 53 0 54] 
#[0 5 190 0 53 0 54] 
#[1 13 105 0 53 12 109 0 54 13 109 0 55 1 41 0 119 1 177 0 127 13 113 0 135 12 121 1 13 13 117 1 14 12 121 1 15 12 121 1 16 12 121 1 17] 
#[0 5 194 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 5 198 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 121 0 107] 
#[0 5 202 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 125 0 109] 
#[0 13 129 0 109] 
#[0 13 133 0 55] 
#[1 1 197 0 33 13 137 0 167 13 137 0 170 13 137 0 171] 
#[0 5 206 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 210 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 214 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 218 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 141 0 89] 
#[0 5 222 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 226 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 230 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 145 0 64] 
#[0 5 234 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 149 0 89] 
#[0 13 153 0 89] 
#[0 13 157 0 55] 
#[0 5 238 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 161 0 89] 
#[0 5 242 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 165 0 89] 
#[0 5 246 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 250 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 5 254 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 2 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 13 169 0 89] 
#[0 6 6 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 10 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 9 89 0 116 13 173 0 144] 
#[0 6 14 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 177 0 77] 
#[0 6 18 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 22 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 181 0 77] 
#[1 1 130 0 1 1 130 0 3 3 71 0 5 1 130 0 7 3 71 0 8 3 71 0 10 3 71 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 6 26 0 22 6 26 0 23 1 130 0 24 6 26 0 25 6 26 0 26 1 130 0 29 1 130 0 30 1 130 0 32 6 26 0 34 6 26 0 49 6 26 0 50 6 26 0 53 6 26 0 54 6 26 0 55 6 26 0 56 1 130 0 57 6 26 0 59 6 26 0 60 6 26 0 62 6 26 0 63 6 26 0 66 6 26 0 67 6 26 0 68 6 26 0 69 1 130 0 72 6 26 0 73 1 130 0 75 6 26 0 77 6 26 0 79 6 26 0 80 6 26 0 82 1 130 0 85 6 26 0 88 6 26 0 90 6 26 0 91 6 26 0 92 6 26 0 93 6 26 0 94 6 26 0 96 6 26 0 100 6 26 0 103 6 26 0 107 6 26 0 108 6 26 0 109 1 130 0 110 6 26 0 111 6 26 0 117 6 26 0 118 6 26 0 119 6 26 0 120 6 26 0 121 6 26 0 122 6 26 0 123 6 26 0 124 6 26 0 125 6 26 0 127] 
#[1 1 130 0 1 1 130 0 3 3 75 0 5 1 130 0 7 3 75 0 8 3 75 0 10 3 75 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 6 30 0 22 6 30 0 23 1 130 0 24 6 30 0 25 6 30 0 26 1 130 0 29 1 130 0 30 1 130 0 32 6 30 0 34 6 30 0 49 6 30 0 50 6 30 0 53 6 30 0 54 6 30 0 55 6 30 0 56 1 130 0 57 6 30 0 59 6 30 0 60 6 30 0 62 6 30 0 63 6 30 0 66 6 30 0 67 6 30 0 68 6 30 0 69 1 130 0 72 6 30 0 73 1 130 0 75 6 30 0 77 6 30 0 79 6 30 0 80 6 30 0 82 1 130 0 85 6 30 0 88 6 30 0 90 6 30 0 91 6 30 0 92 6 30 0 93 6 30 0 94 6 30 0 96 6 30 0 100 6 30 0 103 6 30 0 107 6 30 0 108 6 30 0 109 1 130 0 110 6 30 0 111 6 30 0 117 6 30 0 118 6 30 0 119 6 30 0 120 6 30 0 121 6 30 0 122 6 30 0 123 6 30 0 124 6 30 0 125 6 30 0 127] 
#[1 1 130 0 1 1 130 0 3 3 79 0 5 1 130 0 7 3 79 0 8 3 79 0 10 3 79 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 6 34 0 22 6 34 0 23 1 130 0 24 6 34 0 25 6 34 0 26 1 130 0 29 1 130 0 30 1 130 0 32 6 34 0 34 6 34 0 49 6 34 0 50 6 34 0 53 6 34 0 54 6 34 0 55 6 34 0 56 1 130 0 57 6 34 0 59 6 34 0 60 6 34 0 62 6 34 0 63 6 34 0 66 6 34 0 67 6 34 0 68 6 34 0 69 1 130 0 72 6 34 0 73 1 130 0 75 6 34 0 77 6 34 0 79 6 34 0 80 6 34 0 82 1 130 0 85 6 34 0 88 6 34 0 90 6 34 0 91 6 34 0 92 6 34 0 93 6 34 0 94 6 34 0 96 6 34 0 100 6 34 0 103 6 34 0 107 6 34 0 108 6 34 0 109 1 130 0 110 6 34 0 111 6 34 0 117 6 34 0 118 6 34 0 119 6 34 0 120 6 34 0 121 6 34 0 122 6 34 0 123 6 34 0 124 6 34 0 125 6 34 0 127] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 13 185 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 109 0 134 5 109 0 135 5 109 0 136 5 109 0 137 5 109 0 138 5 109 0 139 5 109 0 140 5 109 0 141 5 109 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 13 185 0 213 5 109 0 214 5 109 0 215 13 185 0 219 13 185 0 220 13 185 0 221 13 185 0 222 13 185 0 223 13 185 0 230 13 185 0 231 13 185 0 232 13 185 0 233 13 185 0 234 13 185 0 235 13 185 0 236 13 185 0 237 13 185 0 238 13 185 0 240 13 185 0 242 13 185 0 244 13 185 0 245 13 185 0 246 13 185 0 247 13 185 0 248 13 185 0 249 13 185 0 250 5 109 1 40 5 109 1 41 5 109 1 42 5 109 1 43 5 109 1 44 5 109 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 13 189 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 5 109 0 134 5 109 0 135 5 109 0 136 5 109 0 137 5 109 0 138 5 109 0 139 5 109 0 140 5 109 0 141 5 109 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 13 189 0 213 5 109 0 214 5 109 0 215 13 189 0 219 13 189 0 220 13 189 0 221 13 189 0 222 13 189 0 223 13 189 0 230 13 189 0 231 13 189 0 232 13 189 0 233 13 189 0 234 13 189 0 235 13 189 0 236 13 189 0 237 13 189 0 238 13 189 0 240 13 189 0 242 13 189 0 244 13 189 0 245 13 189 0 246 13 189 0 247 13 189 0 248 13 189 0 249 13 189 0 250 5 109 1 40 5 109 1 41 5 109 1 42 5 109 1 43 5 109 1 44 5 109 1 45] 
#[1 13 193 0 79 1 41 0 119 1 177 0 127 13 197 0 135] 
#[1 0 6 0 79 0 6 0 119 0 6 0 127 13 201 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 2 149 0 60 13 205 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 13 205 0 134 13 205 0 135 13 205 0 136 13 205 0 137 13 205 0 138 13 205 0 139 13 205 0 140 13 205 0 141 13 205 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 13 205 0 213 13 205 0 214 13 205 0 215 13 205 0 219 13 205 0 220 13 205 0 221 13 205 0 222 13 205 0 223 13 205 0 230 13 205 0 231 13 205 0 232 13 205 0 233 13 205 0 234 13 205 0 235 13 205 0 236 13 205 0 237 13 205 0 238 13 205 0 240 13 205 0 242 13 205 0 244 13 205 0 245 13 205 0 246 13 205 0 247 13 205 0 248 13 205 0 249 13 205 0 250 13 205 1 40 13 205 1 41 13 205 1 42 13 205 1 43 13 205 1 44 13 205 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 0 6 0 79 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 13 209 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 13 213 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 13 217 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 13 221 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 5 229 0 24 5 233 0 29 5 237 0 30 5 241 0 32 5 245 0 57 5 249 0 72 5 253 0 75 6 1 0 85 13 225 0 101 6 5 0 110 6 9 0 239 6 13 0 241 6 17 0 243] 
#[0 6 38 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 229 0 133] 
#[0 13 233 0 69] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 237 0 133] 
#[0 6 42 0 53 0 54] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 241 0 133] 
#[0 13 245 0 69] 
#[1 13 249 0 53 13 253 0 55] 
#[1 14 1 0 53 12 109 0 54 13 101 1 13 13 101 1 15 13 101 1 16 13 101 1 17] 
#[0 6 46 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 50 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 54 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 14 5 0 109] 
#[0 6 58 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 62 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 66 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 70 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 74 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 14 9 0 89] 
#[0 6 78 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 82 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[0 6 86 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 14 13 0 10 10 241 0 116] 
#[0 6 90 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 94 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 1 130 0 1 1 130 0 3 3 83 0 5 1 130 0 7 3 83 0 8 3 83 0 10 3 83 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 6 98 0 22 6 98 0 23 1 130 0 24 6 98 0 25 6 98 0 26 1 130 0 29 1 130 0 30 1 130 0 32 6 98 0 34 6 98 0 49 6 98 0 50 6 98 0 53 6 98 0 54 6 98 0 55 6 98 0 56 1 130 0 57 6 98 0 59 6 98 0 60 6 98 0 62 6 98 0 63 6 98 0 66 6 98 0 67 6 98 0 68 6 98 0 69 1 130 0 72 6 98 0 73 1 130 0 75 6 98 0 77 6 98 0 79 6 98 0 80 6 98 0 82 1 130 0 85 6 98 0 88 6 98 0 90 6 98 0 91 6 98 0 92 6 98 0 93 6 98 0 94 6 98 0 96 6 98 0 100 6 98 0 103 6 98 0 107 6 98 0 108 6 98 0 109 1 130 0 110 6 98 0 111 6 98 0 117 6 98 0 118 6 98 0 119 6 98 0 120 6 98 0 121 6 98 0 122 6 98 0 123 6 98 0 124 6 98 0 125 6 98 0 127] 
#[1 1 130 0 1 1 130 0 3 3 87 0 5 1 130 0 7 3 87 0 8 3 87 0 10 3 87 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 6 102 0 22 6 102 0 23 1 130 0 24 6 102 0 25 6 102 0 26 1 130 0 29 1 130 0 30 1 130 0 32 6 102 0 34 6 102 0 49 6 102 0 50 6 102 0 53 6 102 0 54 6 102 0 55 6 102 0 56 1 130 0 57 6 102 0 59 6 102 0 60 6 102 0 62 6 102 0 63 6 102 0 66 6 102 0 67 6 102 0 68 6 102 0 69 1 130 0 72 6 102 0 73 1 130 0 75 6 102 0 77 6 102 0 79 6 102 0 80 6 102 0 82 1 130 0 85 6 102 0 88 6 102 0 90 6 102 0 91 6 102 0 92 6 102 0 93 6 102 0 94 6 102 0 96 6 102 0 100 6 102 0 103 6 102 0 107 6 102 0 108 6 102 0 109 1 130 0 110 6 102 0 111 6 102 0 117 6 102 0 118 6 102 0 119 6 102 0 120 6 102 0 121 6 102 0 122 6 102 0 123 6 102 0 124 6 102 0 125 6 102 0 127] 
#[1 6 106 0 5 6 106 0 8 6 106 0 10 0 205 0 11 6 106 0 22 6 106 0 23 6 106 0 25 6 106 0 26 6 106 0 34 6 106 0 49 6 106 0 50 6 106 0 53 6 106 0 54 6 106 0 55 6 106 0 56 6 106 0 59 6 106 0 60 6 106 0 62 6 106 0 63 6 106 0 66 6 106 0 67 6 106 0 68 6 106 0 69 6 106 0 73 6 106 0 77 6 106 0 79 6 106 0 80 6 106 0 82 6 106 0 88 6 106 0 90 6 106 0 91 6 106 0 92 6 106 0 93 6 106 0 94 6 106 0 96 3 91 0 100 6 106 0 103 6 106 0 107 6 106 0 108 6 106 0 109 6 106 0 111 6 106 0 117 6 106 0 118 6 106 0 119 6 106 0 120 6 106 0 121 6 106 0 122 6 106 0 123 3 95 0 124 3 99 0 125 6 106 0 127 14 17 0 145 14 17 0 146 14 17 0 147 14 17 0 148 14 17 0 149] 
#[0 14 21 0 79] 
#[1 14 25 0 79 1 41 0 119 1 177 0 127 14 29 0 135] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 0 6 0 22 0 6 0 23 5 229 0 24 0 6 0 25 0 6 0 26 5 233 0 29 5 237 0 30 5 241 0 32 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 56 5 245 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 5 249 0 72 0 6 0 73 5 253 0 75 0 6 0 79 0 6 0 80 0 6 0 82 6 1 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 6 5 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 33 0 133 6 9 0 239 6 13 0 241 6 17 0 243] 
#[1 14 37 0 79 1 41 0 119 1 177 0 127 14 41 0 135] 
#[1 0 6 0 79 0 6 0 119 0 6 0 127 14 45 0 133] 
#[1 14 49 0 55 1 41 0 119 1 177 0 127 14 53 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 14 57 0 133] 
#[1 3 103 0 5 3 103 0 8 3 103 0 10 3 103 0 11 6 110 0 13 3 103 0 22 3 103 0 23 3 103 0 25 3 103 0 26 0 6 0 34 0 6 0 49 0 6 0 50 3 103 0 53 3 103 0 54 0 6 0 56 0 6 0 59 3 103 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 3 103 0 73 3 103 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 3 103 0 94 0 6 0 96 3 103 0 100 0 6 0 103 0 6 0 108 0 6 0 109 3 103 0 111 3 103 0 117 3 103 0 118 3 103 0 119 3 103 0 120 3 103 0 121 3 103 0 122 3 103 0 123 3 103 0 124 3 103 0 125 0 6 0 127 14 61 0 133 14 65 1 19] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 14 69 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 14 73 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 6 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 14 77 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 14 81 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 14 85 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 14 89 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 6 118 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 93 0 133] 
#[0 14 97 0 69] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 101 0 133] 
#[0 6 122 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 126 0 34 0 35 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 46] 
#[1 9 89 0 116 14 105 0 144] 
#[1 6 130 0 5 6 130 0 8 6 130 0 10 1 169 0 11 6 130 0 22 6 130 0 23 6 130 0 25 6 130 0 26 6 130 0 34 6 130 0 49 6 130 0 50 6 130 0 53 6 130 0 54 6 130 0 55 6 130 0 56 6 130 0 59 6 130 0 60 6 130 0 62 6 130 0 63 6 130 0 66 6 130 0 67 6 130 0 68 6 130 0 69 6 130 0 73 6 130 0 77 6 130 0 79 6 130 0 80 6 130 0 82 6 130 0 88 6 130 0 90 6 130 0 91 6 130 0 92 6 130 0 93 6 130 0 94 6 130 0 96 6 130 0 100 6 130 0 103 6 130 0 107 6 130 0 108 6 130 0 109 6 130 0 111 6 130 0 117 6 130 0 118 6 130 0 119 6 130 0 120 6 130 0 121 6 130 0 122 6 130 0 123 6 130 0 124 6 130 0 125 6 130 0 127] 
#[1 6 134 0 5 6 134 0 8 6 134 0 10 0 205 0 11 6 134 0 22 6 134 0 23 6 134 0 25 6 134 0 26 6 134 0 34 6 134 0 49 6 134 0 50 6 134 0 53 6 134 0 54 6 134 0 55 6 134 0 56 6 134 0 59 6 134 0 60 6 134 0 62 6 134 0 63 6 134 0 66 6 134 0 67 6 134 0 68 6 134 0 69 6 134 0 73 6 134 0 77 6 134 0 79 6 134 0 80 6 134 0 82 6 134 0 88 6 134 0 90 6 134 0 91 6 134 0 92 6 134 0 93 6 134 0 94 6 134 0 96 3 107 0 100 6 134 0 103 6 134 0 107 6 134 0 108 6 134 0 109 6 134 0 111 6 134 0 117 6 134 0 118 6 134 0 119 6 134 0 120 6 134 0 121 6 134 0 122 6 134 0 123 3 111 0 124 3 115 0 125 6 134 0 127 14 109 0 145 14 109 0 146 14 109 0 147 14 109 0 148 14 109 0 149] 
#[1 6 138 0 5 6 138 0 8 6 138 0 10 0 205 0 11 6 138 0 22 6 138 0 23 6 138 0 25 6 138 0 26 6 138 0 34 6 138 0 49 6 138 0 50 6 138 0 53 6 138 0 54 6 138 0 55 6 138 0 56 6 138 0 59 6 138 0 60 6 138 0 62 6 138 0 63 6 138 0 66 6 138 0 67 6 138 0 68 6 138 0 69 6 138 0 73 6 138 0 77 6 138 0 79 6 138 0 80 6 138 0 82 6 138 0 88 6 138 0 90 6 138 0 91 6 138 0 92 6 138 0 93 6 138 0 94 6 138 0 96 3 119 0 100 6 138 0 103 6 138 0 107 6 138 0 108 6 138 0 109 6 138 0 111 6 138 0 117 6 138 0 118 6 138 0 119 6 138 0 120 6 138 0 121 6 138 0 122 6 138 0 123 3 123 0 124 3 127 0 125 6 138 0 127 14 113 0 145 14 113 0 146 14 113 0 147 14 113 0 148 14 113 0 149] 
#[0 14 117 0 79] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 0 6 0 79 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 14 121 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 14 125 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 6 142 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 14 129 0 79] 
#[1 14 133 0 79 1 41 0 119 1 177 0 127 14 137 0 135] 
#[0 14 141 0 69] 
#[0 14 145 0 55] 
#[1 14 149 0 55 1 41 0 119 1 177 0 127 14 153 0 135] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 6 0 53 0 6 0 54 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 14 157 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 14 161 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 14 165 0 13 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 6 146 0 53 6 146 0 54 2 149 0 60 14 169 0 73 2 157 0 80 2 161 0 94 0 209 0 100 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 2 225 0 124 0 217 0 125 14 169 0 134 14 169 0 135 14 169 0 136 14 169 0 137 14 169 0 138 14 169 0 139 14 169 0 140 14 169 0 141 14 169 0 142 2 225 0 145 2 225 0 146 2 225 0 147 2 225 0 148 2 225 0 149 14 169 0 213 14 169 0 214 14 169 0 215 14 169 0 219 14 169 0 220 14 169 0 221 14 169 0 222 14 169 0 223 14 169 0 230 14 169 0 231 14 169 0 232 14 169 0 233 14 169 0 234 14 169 0 235 14 169 0 236 14 169 0 237 14 169 0 238 14 169 0 240 14 169 0 242 14 169 0 244 14 169 0 245 14 169 0 246 14 169 0 247 14 169 0 248 14 169 0 249 14 169 0 250 14 173 1 18 14 169 1 40 14 169 1 41 14 169 1 42 14 169 1 43 14 169 1 44 14 169 1 45] 
#[1 14 177 0 55 1 41 0 119 1 177 0 127 14 181 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 14 185 0 133] 
#[1 14 189 0 55 1 177 0 127] 
#[1 0 6 0 55 0 6 0 127 14 193 0 133] 
#[1 14 197 0 55 1 41 0 119 1 177 0 127 14 201 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 14 205 0 133] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 0 187 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 14 209 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 14 213 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[0 6 150 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 121 0 5 2 125 0 8 2 129 0 10 0 205 0 11 2 133 0 22 2 137 0 23 2 141 0 25 2 145 0 26 0 9 0 34 0 21 0 49 4 9 0 50 0 6 0 55 0 25 0 56 0 29 0 59 2 149 0 60 4 13 0 62 4 65 0 63 4 65 0 66 4 17 0 67 4 21 0 68 4 25 0 69 4 77 0 73 2 157 0 80 4 29 0 82 4 65 0 88 4 65 0 90 0 61 0 91 4 33 0 92 2 161 0 94 4 37 0 96 0 209 0 100 0 73 0 103 4 41 0 108 4 45 0 109 2 165 0 111 2 169 0 117 2 173 0 118 1 41 0 119 1 89 0 120 2 177 0 121 2 181 0 122 2 185 0 123 4 49 0 124 0 217 0 125 0 191 0 127 14 217 0 133 4 77 0 134 4 77 0 135 4 77 0 136 4 77 0 137 4 77 0 138 4 77 0 139 4 77 0 140 4 77 0 141 4 77 0 142 4 49 0 145 4 49 0 146 4 49 0 147 4 49 0 148 4 49 0 149 4 57 0 153 4 57 0 159 14 221 0 160 4 65 0 164 4 57 0 172 4 57 0 173 4 57 0 177 4 57 0 178 4 57 0 199 4 57 0 200 4 57 0 201 4 57 0 202 4 57 0 203 4 57 0 205 4 57 0 206 4 57 0 207 4 57 0 208 4 57 0 212 4 77 0 213 4 77 0 214 4 77 0 215 4 77 0 219 4 77 0 220 4 77 0 221 4 77 0 222 4 77 0 223 4 77 0 230 4 77 0 231 4 77 0 232 4 77 0 233 4 77 0 234 4 77 0 235 4 77 0 236 4 77 0 237 4 77 0 238 4 77 0 240 4 77 0 242 4 77 0 244 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 57 0 251 4 57 0 252 4 57 0 253 4 57 0 254 4 57 0 255 4 57 1 0 4 57 1 1 4 57 1 2 4 57 1 3 4 57 1 4 4 57 1 5 4 57 1 6 4 57 1 7 4 57 1 8 4 57 1 9 4 57 1 10 4 57 1 11 4 57 1 12 4 57 1 20 4 157 1 21 4 57 1 22 4 57 1 23 4 57 1 24 4 57 1 25 4 57 1 26 4 57 1 27 4 57 1 28 4 57 1 29 4 57 1 30 4 57 1 31 4 57 1 32 4 57 1 33 4 57 1 34 4 57 1 35 4 57 1 36 4 57 1 37 4 57 1 39 4 229 1 40 4 229 1 41 4 229 1 42 4 229 1 43 4 229 1 44 4 229 1 45] 
#[1 14 225 0 113 10 241 0 116] 
#[1 6 154 0 5 6 154 0 8 6 154 0 10 1 169 0 11 6 154 0 22 6 154 0 23 6 154 0 25 6 154 0 26 6 154 0 34 6 154 0 49 6 154 0 50 6 154 0 53 6 154 0 54 6 154 0 55 6 154 0 56 6 154 0 59 6 154 0 60 6 154 0 62 6 154 0 63 6 154 0 66 6 154 0 67 6 154 0 68 6 154 0 69 6 154 0 73 6 154 0 77 6 154 0 79 6 154 0 80 6 154 0 82 6 154 0 88 6 154 0 90 6 154 0 91 6 154 0 92 6 154 0 93 6 154 0 94 6 154 0 96 6 154 0 100 6 154 0 103 6 154 0 107 6 154 0 108 6 154 0 109 6 154 0 111 6 154 0 117 6 154 0 118 6 154 0 119 6 154 0 120 6 154 0 121 6 154 0 122 6 154 0 123 6 154 0 124 6 154 0 125 6 154 0 127] 
#[1 6 158 0 5 6 158 0 8 6 158 0 10 1 169 0 11 6 158 0 22 6 158 0 23 6 158 0 25 6 158 0 26 6 158 0 34 6 158 0 49 6 158 0 50 6 158 0 53 6 158 0 54 6 158 0 55 6 158 0 56 6 158 0 59 6 158 0 60 6 158 0 62 6 158 0 63 6 158 0 66 6 158 0 67 6 158 0 68 6 158 0 69 6 158 0 73 6 158 0 77 6 158 0 79 6 158 0 80 6 158 0 82 6 158 0 88 6 158 0 90 6 158 0 91 6 158 0 92 6 158 0 93 6 158 0 94 6 158 0 96 6 158 0 100 6 158 0 103 6 158 0 107 6 158 0 108 6 158 0 109 6 158 0 111 6 158 0 117 6 158 0 118 6 158 0 119 6 158 0 120 6 158 0 121 6 158 0 122 6 158 0 123 6 158 0 124 6 158 0 125 6 158 0 127] 
#[1 6 162 0 5 6 162 0 8 6 162 0 10 0 205 0 11 6 162 0 22 6 162 0 23 6 162 0 25 6 162 0 26 6 162 0 34 6 162 0 49 6 162 0 50 6 162 0 53 6 162 0 54 6 162 0 55 6 162 0 56 6 162 0 59 6 162 0 60 6 162 0 62 6 162 0 63 6 162 0 66 6 162 0 67 6 162 0 68 6 162 0 69 6 162 0 73 6 162 0 77 6 162 0 79 6 162 0 80 6 162 0 82 6 162 0 88 6 162 0 90 6 162 0 91 6 162 0 92 6 162 0 93 6 162 0 94 6 162 0 96 3 131 0 100 6 162 0 103 6 162 0 107 6 162 0 108 6 162 0 109 6 162 0 111 6 162 0 117 6 162 0 118 6 162 0 119 6 162 0 120 6 162 0 121 6 162 0 122 6 162 0 123 3 135 0 124 3 139 0 125 6 162 0 127 14 229 0 145 14 229 0 146 14 229 0 147 14 229 0 148 14 229 0 149] 
#[1 14 233 0 79 1 41 0 119 1 177 0 127 14 237 0 135] 
#[1 0 6 0 79 0 6 0 119 0 6 0 127 14 241 0 133] 
#[0 6 166 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 170 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 14 245 0 79] 
#[0 6 174 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 14 249 0 69] 
#[0 14 253 0 69] 
#[0 15 1 0 55] 
#[1 6 178 0 53 6 178 0 54 1 177 0 127] 
#[1 0 6 0 53 0 6 0 54 0 6 0 127 15 5 0 133] 
#[0 6 182 0 5 0 8 0 10 0 11 0 13 0 22 0 23 0 25 0 26 0 53 0 54 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 5 169 0 1 5 173 0 3 5 177 0 5 5 181 0 7 5 185 0 8 5 189 0 10 5 193 0 11 5 197 0 12 15 9 0 13 5 201 0 14 5 205 0 16 5 209 0 17 5 213 0 18 5 217 0 19 5 221 0 20 5 225 0 21 5 229 0 24 5 233 0 29 5 237 0 30 5 241 0 32 5 245 0 57 5 249 0 72 5 253 0 75 6 1 0 85 6 5 0 110 6 9 0 239 6 13 0 241 6 17 0 243] 
#[0 6 186 0 5 0 8 0 10 0 11 0 13 0 22 0 23 0 25 0 26 0 53 0 54 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 15 13 0 69] 
#[0 15 17 0 55] 
#[1 15 21 0 55 1 41 0 119 1 177 0 127 15 25 0 135] 
#[0 15 29 0 69] 
#[1 15 33 0 55 1 177 0 127] 
#[0 15 37 0 69] 
#[0 15 41 0 55] 
#[1 15 45 0 55 1 41 0 119 1 177 0 127 15 49 0 135] 
#[1 15 53 0 55 1 41 0 119 1 177 0 127 15 57 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 15 61 0 133] 
#[1 15 65 0 55 1 177 0 127] 
#[1 0 6 0 55 0 6 0 127 15 69 0 133] 
#[0 6 190 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 46] 
#[1 6 194 0 5 6 194 0 8 6 194 0 10 1 169 0 11 6 194 0 22 6 194 0 23 6 194 0 25 6 194 0 26 6 194 0 34 6 194 0 49 6 194 0 50 6 194 0 53 6 194 0 54 6 194 0 55 6 194 0 56 6 194 0 59 6 194 0 60 6 194 0 62 6 194 0 63 6 194 0 66 6 194 0 67 6 194 0 68 6 194 0 69 6 194 0 73 6 194 0 77 6 194 0 79 6 194 0 80 6 194 0 82 6 194 0 88 6 194 0 90 6 194 0 91 6 194 0 92 6 194 0 93 6 194 0 94 6 194 0 96 6 194 0 100 6 194 0 103 6 194 0 107 6 194 0 108 6 194 0 109 6 194 0 111 6 194 0 117 6 194 0 118 6 194 0 119 6 194 0 120 6 194 0 121 6 194 0 122 6 194 0 123 6 194 0 124 6 194 0 125 6 194 0 127] 
#[0 6 198 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 73 0 79] 
#[1 15 77 0 79 1 41 0 119 1 177 0 127 15 81 0 135] 
#[0 6 202 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 206 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 210 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 85 0 69] 
#[1 6 214 0 53 6 214 0 54 1 177 0 127] 
#[0 6 218 0 5 0 8 0 10 0 11 0 13 0 22 0 23 0 25 0 26 0 53 0 54 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 6 222 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 89 0 69] 
#[0 15 93 0 69] 
#[0 15 97 0 55] 
#[0 6 226 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 101 0 69] 
#[0 6 230 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 105 0 69] 
#[0 15 109 0 69] 
#[0 15 113 0 55] 
#[0 15 117 0 69] 
#[0 15 121 0 55] 
#[1 15 125 0 55 1 41 0 119 1 177 0 127 15 129 0 135] 
#[0 15 133 0 69] 
#[1 15 137 0 55 1 177 0 127] 
#[0 6 234 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 238 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 141 0 79] 
#[0 6 242 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 246 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 250 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 145 0 69] 
#[0 6 254 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 2 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 6 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 149 0 69] 
#[0 7 10 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 153 0 69] 
#[0 15 157 0 69] 
#[0 15 161 0 55] 
#[0 7 14 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 165 0 69] 
#[0 7 18 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 22 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 26 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 30 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 34 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 169 0 69] 
#[0 7 38 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 42 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127]
	).
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAddressOfClause1: nodes [
	| result |
	result := VBAddressOfClauseNode new.
	result addressOfToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument1: nodes [
	| result |
	result := VBArgumentNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument2: nodes [
	| result |
	result := VBArgumentNode new.
	result paramarrayToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument3: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument4: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result arguments.
	result addTokens: ((nodes at: 2) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addNode: (nodes at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result timesToken: ((nodes at: 2) at: 1).
	result plusToken: ((nodes at: 2) at: 2).
	result minusToken: ((nodes at: 2) at: 3).
	result divideToken: ((nodes at: 2) at: 4).
	result upArrowToken: ((nodes at: 2) at: 5).
	result _Token: ((nodes at: 2) at: 6).
	result modToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator4: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator6: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator7: nodes [
	| result |
	result := Array new: 7.
	result at: 7 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignementOrEquals1: nodes [
	| result |
	result := VBAssignementOrEqualsNode new.
	result left: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBModuleAttributeNode new.
	result attributeToken: (nodes at: 1).
	result setting: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBaseType11: nodes [
	| result |
	result := VBBaseTypeNode new.
	result variantToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addObject: (nodes at: 1) to: result statements.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addObjects: ((nodes at: 2) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanBinaryOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result andToken: ((nodes at: 2) at: 1).
	result orToken: ((nodes at: 2) at: 2).
	result xorToken: ((nodes at: 2) at: 3).
	result eqvToken: ((nodes at: 2) at: 4).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanLiteral1: nodes [
	| result |
	result := VBBooleanLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForColorLiteral1: nodes [
	| result |
	result := VBColorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperation1: nodes [
	| result |
	result := VBComparisonOperationNode new.
	result left: (nodes at: 1).
	result greaterThanToken: ((nodes at: 2) at: 1).
	result lessThanToken: ((nodes at: 2) at: 2).
	result lessThanGreaterThanToken: ((nodes at: 2) at: 3).
	result lessThanEqualToken: ((nodes at: 2) at: 4).
	result greaterThanEqualToken: ((nodes at: 2) at: 5).
	result isToken: ((nodes at: 2) at: 6).
	result likeToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator5: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType1: nodes [
	| result |
	result := VBComplexTypeNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConcatenationOperation1: nodes [
	| result |
	result := VBConcatenationOperationNode new.
	result left: (nodes at: 1).
	result andToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConfiguration1: nodes [
	| result |
	result := VBConfigurationNode new.
	result beginToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result settings.
	result addNodes: ((nodes at: 4) at: 1) to: result settings.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDateLiteral1: nodes [
	| result |
	result := VBDateLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction1: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction2: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction3: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction4: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	result type: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub1: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub2: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub3: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub4: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum1: nodes [
	| result |
	result := VBDefineEnumNode new.
	result addToken: (nodes at: 1) to: result enumTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum2: nodes [
	| result |
	result := VBDefineEnumNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction1: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction2: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction3: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction4: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction5: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction6: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction7: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction8: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub1: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result selector: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub2: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub3: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub4: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub5: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub6: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub7: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result subTokens.
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub8: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result subTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType1: nodes [
	| result |
	result := VBDefineTypeNode new.
	result addToken: (nodes at: 1) to: result typeTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType2: nodes [
	| result |
	result := VBDefineTypeNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result typeTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariable1: nodes [
	| result |
	result := VBDimVariableNode new.
	result dimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariables1: nodes [
	| result |
	result := VBDimMultipleVariablesNode new.
	result dimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess1: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result receiver: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue1: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	result untilToken: (nodes at: 6).
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue2: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	result untilToken: (nodes at: 7).
	result condition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue1: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result loopToken: (nodes at: 4).
	result whileToken: (nodes at: 5).
	result condition: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue2: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result endLineNumber: (nodes at: 4).
	result loopToken: (nodes at: 5).
	result whileToken: (nodes at: 6).
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue3: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	result whileToken: (nodes at: 6).
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue4: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	result whileToken: (nodes at: 7).
	result condition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfBlock1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfBlock2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result ifMatch: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfColon1: nodes [
	| result |
	result := VBElseIfColonNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 4) at: 2) to: result ifMatches.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry1: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry2: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent1: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent2: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result eventToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitDo1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result doToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFor1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result forToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFunction1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitProperty1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result propertyToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitSub1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result setToken: (nodes at: 1).
	result left: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result right: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement3: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result left: (nodes at: 1).
	result colonEqualToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitCall1: nodes [
	| result |
	result := VBExplicitCallNode new.
	result callToken: (nodes at: 1).
	result call: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFloatLiteral1: nodes [
	| result |
	result := VBFloatLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach1: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach2: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	result addObject: (nodes at: 9) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach3: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach4: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	result addObject: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach5: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach6: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	result addObject: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach7: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach8: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	result addObject: (nodes at: 11) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext1: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext2: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext3: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext4: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext1: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext2: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext3: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext4: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endLineNumber: (nodes at: 12).
	result nextToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLabel1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result gosubToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLine1: nodes [
	| result |
	result := VBGoSubLineNode new.
	result gosubToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result gotoToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLine1: nodes [
	| result |
	result := VBGoToLineNode new.
	result gotoToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGuidLiteral1: nodes [
	| result |
	result := VBGuidLiteralNode new.
	result leftBraceToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 3) to: result minusTokens.
	result addTokens: (nodes at: 4) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 5) to: result minusTokens.
	result addTokens: (nodes at: 6) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 7) to: result minusTokens.
	result addTokens: (nodes at: 8) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 9) to: result minusTokens.
	result addTokens: (nodes at: 10) to: result hEX_INTEGERTokens.
	result rightBraceToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHashIdentifier1: nodes [
	| result |
	result := VBHashIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHeadlessIdentifier1: nodes [
	| result |
	result := VBHeadlessIdentifierNode new.
	result periodToken: (nodes at: 1).
	result token: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen1: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen2: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen3: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen4: nodes [
	| result |
	result := VBIfThenNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenColon1: nodes [
	| result |
	result := VBIfThenColonNode new.
	result ifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result
		ifTrue: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse10: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse11: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse12: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse13: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse14: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse15: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result
		ifFalse: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse16: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result
		ifFalse: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endLineNumber: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result
		ifFalse: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result
		ifFalse: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse5: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse6: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse7: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse8: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse9: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse1: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse2: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result otherwise: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse3: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse4: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result otherwise: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall1: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result identifier: (nodes at: 1).
	result arguments: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop1: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result loopToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop2: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result endLineNumber: (nodes at: 4).
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop3: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop4: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral1: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result returnToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub2: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result returnToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub3: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result block: (nodes at: 3).
	result returnToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub4: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result block: (nodes at: 3).
	result endLineNumber: (nodes at: 4).
	result returnToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess1: nodes [
	| result |
	result := VBMemberAccessNode new.
	result receiver: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant1: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: (nodes at: 2).
	result constant: (nodes at: 3).
	result equalToken: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant2: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: (nodes at: 2).
	result constant: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: (nodes at: 5).
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperties1: nodes [
	| result |
	result := VBModuleMultiplePropertiesNode new.
	result visibility: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperty1: nodes [
	| result |
	result := VBModulePropertyNode new.
	result visibility: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet10: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet11: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet12: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet13: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet14: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet15: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet16: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet9: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result letToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result letToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result letToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result letToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result setToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result setToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result setToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result setToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNegatedOperation1: nodes [
	| result |
	result := VBNegatedOperationNode new.
	result minusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNewClause1: nodes [
	| result |
	result := VBNewClauseNode new.
	result nEWToken: (nodes at: 1).
	result typeName: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation1: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNull1: nodes [
	| result |
	result := VBNullNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorGoTo1: nodes [
	| result |
	result := VBOnErrorGoToNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorResumeNext1: nodes [
	| result |
	result := VBOnErrorResumeNextNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result resumeToken: (nodes at: 3).
	result nextToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnExpressionGo1: nodes [
	| result |
	result := VBOnExpressionGoNode new.
	result onToken: (nodes at: 1).
	result integerExpression: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption1: nodes [
	| result |
	result := VBOptionValueNode new.
	result optionToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption2: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result databaseToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption3: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result binaryToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption4: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result compare: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption5: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result optionToken: (nodes at: 1).
	result explicitToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption6: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result optionToken: (nodes at: 1).
	result privateToken: (nodes at: 2).
	result moduleToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter10: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter11: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter12: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter13: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter14: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter15: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter16: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result type: (nodes at: 5).
	result equalToken: ((nodes at: 6) at: 1).
	result default: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result equalToken: ((nodes at: 2) at: 1).
	result default: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter9: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList1: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result rightParenToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList2: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result parameters.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterPassingStrategy2: nodes [
	| result |
	result := VBParameterPassingStrategyNode new.
	result byrefToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression1: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPositiveOperation1: nodes [
	| result |
	result := VBPositiveOperationNode new.
	result plusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess1: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result receiver: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForQualifiedIdentifier1: nodes [
	| result |
	result := VBQualifiedIdentifierNode new.
	result token: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseEvent1: nodes [
	| result |
	result := VBRaiseEventNode new.
	result raiseEventToken: (nodes at: 1).
	result call: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable1: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable2: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables1: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables2: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeLabel1: nodes [
	| result |
	result := VBResumeLabelNode new.
	result resumeToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeNext1: nodes [
	| result |
	result := VBResumeNextNode new.
	result resumeToken: (nodes at: 1).
	result nextToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSetUpAssignation1: nodes [
	| result |
	result := VBSetUpAssignationNode new.
	result identifier: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleIdentifier2: nodes [
	| result |
	result := VBSimpleIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariable1: nodes [
	| result |
	result := VBStaticVariableNode new.
	result staticToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariables1: nodes [
	| result |
	result := VBStaticMultipleVariablesNode new.
	result staticToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStringLiteral1: nodes [
	| result |
	result := VBStringLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry1: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry2: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing1: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing2: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParenToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result sizes.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing1: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing2: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	result leftParenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result sizes.
	result addTokens: ((nodes at: 5) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue1: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue2: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable1: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable2: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable3: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable4: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariableList1: nodes [
	| result |
	result := VBVariableListNode new.
	result addNode: (nodes at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result variables.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue1: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue2: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue3: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue4: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend1: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result wendToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend2: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend3: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend4: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result wendToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith1: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith2: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith3: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith4: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________2: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_HEX_INTEGER___1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___Expression__ifMatch__________1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___Expression__ifMatch__________2: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Expression__default___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Expression__default___2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___eol___EnumEntry__field___2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader1: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader2: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	result classToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule1: nodes [
	| result |
	result := VBModuleNode new.
	result addNode: (nodes at: 1) to: result elements.
	result addNodes: ((nodes at: 2) at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule2: nodes [
	| result |
	result := VBModuleNode new.
	result header: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result elements.
	result addNodes: ((nodes at: 4) at: 1) to: result elements.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]
