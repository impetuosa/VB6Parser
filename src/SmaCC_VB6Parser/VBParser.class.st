Class {
	#name : #VBParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_VB6Parser'
}

{ #category : #generated }
VBParser class >> ambiguousTransitions [
^#(
#[ 0 174 0 178] 
#[ 0 178 0 202] 
#[ 0 178 0 210] 
#[ 0 178 0 230] 
#[ 0 178 1 34] 
#[ 1 118 1 122 1 126] 
#[ 1 118 1 122 1 126 1 177] 
#[ 0 6 6 193] 
#[ 2 98 6 237] 
#[ 0 213 2 98] 
#[ 0 217 2 98] 
#[ 0 221 2 98] 
#[ 2 206 2 210] 
#[ 1 234 3 26] 
#[ 3 42 5 205] 
#[ 3 42 5 233] 
#[ 3 42 6 9] 
#[ 3 46 5 205] 
#[ 3 46 5 233] 
#[ 3 46 6 9] 
#[ 1 162 3 54] 
#[ 1 162 3 62] 
#[ 3 86 5 205] 
#[ 3 86 5 233] 
#[ 3 86 6 9] 
#[ 3 98 7 185] 
#[ 2 149 3 98] 
#[ 2 153 3 98] 
#[ 2 157 3 98] 
#[ 2 161 3 98] 
#[ 2 165 3 98] 
#[ 2 169 3 98] 
#[ 2 173 3 98] 
#[ 2 177 3 98] 
#[ 0 213 3 98] 
#[ 2 181 3 98] 
#[ 2 185 3 98] 
#[ 2 189 3 98] 
#[ 1 49 3 98] 
#[ 1 97 3 98] 
#[ 2 193 3 98] 
#[ 2 197 3 98] 
#[ 2 201 3 98] 
#[ 0 217 3 98] 
#[ 0 221 3 98] 
#[ 0 6 1 49] 
#[ 0 6 1 185] 
#[ 0 6 1 130] 
#[ 2 149 3 238] 
#[ 2 153 3 238] 
#[ 2 157 3 238] 
#[ 2 161 3 238] 
#[ 0 9 3 238] 
#[ 0 17 3 238] 
#[ 0 25 3 238] 
#[ 3 238 4 33] 
#[ 0 29 3 238] 
#[ 0 33 3 238] 
#[ 2 165 3 238] 
#[ 3 238 4 37] 
#[ 0 37 3 238] 
#[ 0 45 3 238] 
#[ 3 238 4 41] 
#[ 3 238 4 45] 
#[ 3 238 4 49] 
#[ 2 169 3 238] 
#[ 2 173 3 238] 
#[ 3 238 4 53] 
#[ 0 53 3 238] 
#[ 0 61 3 238] 
#[ 0 65 3 238] 
#[ 3 238 4 57] 
#[ 3 238 8 181] 
#[ 2 177 3 238] 
#[ 3 238 4 61] 
#[ 0 213 3 238] 
#[ 0 77 3 238] 
#[ 3 238 4 65] 
#[ 3 238 4 69] 
#[ 2 181 3 238] 
#[ 2 185 3 238] 
#[ 2 189 3 238] 
#[ 1 49 3 238] 
#[ 1 97 3 238] 
#[ 2 193 3 238] 
#[ 2 197 3 238] 
#[ 2 201 3 238] 
#[ 0 217 3 238] 
#[ 0 221 3 238] 
#[ 0 6 3 242] 
#[ 4 18 5 205] 
#[ 4 18 5 233] 
#[ 4 18 6 9] 
#[ 3 98 9 149] 
#[ 4 26 9 161] 
#[ 4 34 5 205] 
#[ 4 34 5 233] 
#[ 4 34 6 9] 
#[ 4 42 5 205] 
#[ 4 42 5 233] 
#[ 4 42 6 9] 
#[ 4 46 5 205] 
#[ 4 46 5 233] 
#[ 4 46 6 9] 
#[ 4 50 5 205] 
#[ 4 50 5 233] 
#[ 4 50 6 9] 
#[ 4 54 5 205] 
#[ 4 54 5 233] 
#[ 4 54 6 9] 
#[ 4 58 5 205] 
#[ 4 58 5 233] 
#[ 4 58 6 9] 
#[ 0 6 2 149] 
#[ 0 6 2 153] 
#[ 0 6 2 157] 
#[ 0 6 2 161] 
#[ 0 6 2 165] 
#[ 0 6 2 169] 
#[ 0 6 2 173] 
#[ 0 6 2 177] 
#[ 0 6 0 213] 
#[ 0 6 2 181] 
#[ 0 6 2 185] 
#[ 0 6 2 189] 
#[ 0 6 1 97] 
#[ 0 6 2 193] 
#[ 0 6 2 197] 
#[ 0 6 2 201] 
#[ 0 6 0 217] 
#[ 0 6 0 221] 
#[ 1 86 10 81] 
#[ 4 46 4 142 5 201] 
#[ 4 46 4 142 5 205] 
#[ 4 46 4 142 5 209] 
#[ 4 46 4 142 5 213] 
#[ 4 46 4 142 5 217] 
#[ 4 46 4 142 5 221] 
#[ 4 46 4 142 5 225] 
#[ 4 46 4 142 5 229] 
#[ 4 46 4 142 5 233] 
#[ 4 46 4 142 5 237] 
#[ 4 46 4 142 5 241] 
#[ 4 46 4 142 5 245] 
#[ 4 46 4 142 5 249] 
#[ 4 46 4 142 5 253] 
#[ 4 46 4 142 6 1] 
#[ 4 46 4 142 6 5] 
#[ 4 46 4 142 6 9] 
#[ 4 46 4 142 6 13] 
#[ 4 46 4 142 6 17] 
#[ 4 46 4 142 6 21] 
#[ 4 46 4 142 6 25] 
#[ 4 46 4 142 6 29] 
#[ 4 46 4 142 6 33] 
#[ 4 46 4 142 6 37] 
#[ 4 150 5 205] 
#[ 4 150 5 233] 
#[ 4 150 6 9] 
#[ 4 154 5 205] 
#[ 4 154 5 233] 
#[ 4 154 6 9] 
#[ 4 166 9 161] 
#[ 2 149 4 170] 
#[ 2 153 4 170] 
#[ 2 157 4 170] 
#[ 2 161 4 170] 
#[ 2 165 4 170] 
#[ 2 169 4 170] 
#[ 2 173 4 170] 
#[ 2 177 4 170] 
#[ 0 213 4 170] 
#[ 2 181 4 170] 
#[ 2 185 4 170] 
#[ 2 189 4 170] 
#[ 1 49 4 170] 
#[ 1 97 4 170] 
#[ 2 193 4 170] 
#[ 2 197 4 170] 
#[ 2 201 4 170] 
#[ 0 217 4 170] 
#[ 0 221 4 170] 
#[ 2 149 4 174] 
#[ 2 153 4 174] 
#[ 2 157 4 174] 
#[ 2 161 4 174] 
#[ 2 165 4 174] 
#[ 2 169 4 174] 
#[ 2 173 4 174] 
#[ 2 177 4 174] 
#[ 0 213 4 174] 
#[ 2 181 4 174] 
#[ 2 185 4 174] 
#[ 2 189 4 174] 
#[ 1 49 4 174] 
#[ 1 97 4 174] 
#[ 2 193 4 174] 
#[ 2 197 4 174] 
#[ 2 201 4 174] 
#[ 0 217 4 174] 
#[ 0 221 4 174] 
#[ 4 238 11 117] 
#[ 4 242 11 149] 
#[ 5 34 5 205] 
#[ 5 34 5 233] 
#[ 5 34 6 9] 
#[ 5 94 12 121] 
#[ 5 98 12 129] 
#[ 1 130 5 186] 
#[ 5 190 13 101] 
#[ 1 130 6 46] 
#[ 1 130 6 50] 
#[ 1 130 6 54] 
#[ 1 130 6 118] 
#[ 1 130 6 122] 
#[ 0 213 6 126] 
#[ 0 217 6 126] 
#[ 0 221 6 126] 
#[ 0 6 6 130] 
#[ 0 213 6 158] 
#[ 0 217 6 158] 
#[ 0 221 6 158] 
#[ 0 213 6 162] 
#[ 0 217 6 162] 
#[ 0 221 6 162] 
#[ 0 213 6 190] 
#[ 0 217 6 190] 
#[ 0 221 6 190]
	).
]

{ #category : #'generated-accessing' }
VBParser class >> cacheId [
	^'2020-08-31T10:26:04.757422+02:00'
]

{ #category : #generated }
VBParser class >> definitionComment [
"%glr;
%ignorecase;
%annotate_tokens;

#expression operators -- lowest precedence are first.
%left "")""  ;
%left  ""="";
%left "","";
%right "":"";
%left ""eqv"" ;
%left ""||"" ""or"" ""xor"";
%left ""&&"" ""and"";
%left ""is"" ""like"" ""!="" ""<>"";
%left ""<"" ""<="" "">"" "">="";
%left ""+"" ""-"";
%left ""*"" ""/"" ""Mod"";
%right ""^"";
%right ""delete"" ""~"";
%right ""["" ""("";
%left ""."" ""!"" ;
%prefix VB;
%root Program;
%suffix Node;
%start module;

<lineContinuation>
   :    [_ \r? \n ]
   ;
<DECIMAL_INTEGER>
	: 0 | [1-9] [0-9]*	
	;
<HEX_INTEGER>
	: 0[xX][0-9a-fA-F]+	
	;
<OCTAL_INTEGER>
	: 0[0-7]+	
	;
<EXPONENT>
	: [eE] [\-\+]? [0-9]+ 	
	;
<FLOAT_TYPE>
	: [fFdD]	
	;

<DATE_LITERAL>
   : ""#"" ([^\#\r\n])*  ""#""
   ;
<COLOR_LITERAL>
   : \&H <HEX_INTEGER>+ ""&""?
   ;

<INTEGER_LITERAL>
	: (<DECIMAL_INTEGER> | <HEX_INTEGER> | <OCTAL_INTEGER>) [lL]?	
	;
<FLOATING_POINT_LITERAL>
	: [0-9]+ \. [0-9]* <EXPONENT>? <FLOAT_TYPE>? 
	| \. [0-9]+ <EXPONENT>? <FLOAT_TYPE>? 
	| [0-9]+ <EXPONENT> <FLOAT_TYPE>? 
	| [0-9]+ <FLOAT_TYPE>	
	| <HEX_INTEGER> \. [0-9a-fA-F]+ [pP] [\-\+]? [0-9]+ <FLOAT_TYPE>?
	;
<BOOLEAN_LITERAL>
	: true
	| false
	;
<STRING_LITERAL>
   : \"" ([^\""\r\n] | \""\"")* \""
   ;
<NULL_LITERAL>
	: Nothing	
	;
<IDENTIFIER>
	: (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|$)* 
	;
<HASH_IDENTIFIER>
	: ( \#) (<isLetter>|\w|$)*
	;
<whitespace>
	: \s+ | \s 
	;
<eol>
   :  (\r? \n | : \ ) 
   ;

<comment>
   :  (\' | :?  REM  \ ) ( [^\n\r])* 
   ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Basic module
########## ########## ########## ########## ########## ########## ########## ########## 

module: (header 'header' <eol>*)? ModuleStatement 'element'  (<eol>* ModuleStatement 'element' )*   <eol>* {{Module}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Literals
########## ########## ########## ########## ########## ########## ########## ########## 
literal 
	: IntegerLiteral
	| ColorLiteral
	| DateLiteral
	| FloatLiteral
	| BooleanLiteral
	| StringLiteral
	| Null
	| GuidLiteral
;
IntegerLiteral :  <INTEGER_LITERAL> 'token' {{IntegerLiteral}};
ColorLiteral: <COLOR_LITERAL> 'token' {{ColorLiteral}} ; 
DateLiteral:  <DATE_LITERAL> 'token' {{DateLiteral}};
FloatLiteral: <FLOATING_POINT_LITERAL> 'token' {{FloatLiteral}};
BooleanLiteral: <BOOLEAN_LITERAL> 'token' {{BooleanLiteral}};
StringLiteral:  <STRING_LITERAL> 'token' {{StringLiteral}};
Null: <NULL_LITERAL> 'token' {{Null}};
GuidLiteral: ""{""<HEX_INTEGER> + ""-""<HEX_INTEGER>+""-"" <HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""-""<HEX_INTEGER>+ ""}"" {{GuidLiteral}};

Identifier : 
	   SimpleIdentifier 
	| HashIdentifier
	| QualifiedIdentifier | HeadlessIdentifier;

HashIdentifier :  <HASH_IDENTIFIER> 'token'   {{HashIdentifier}};
SimpleIdentifier : <IDENTIFIER> | ""text""  'token'  {{SimpleIdentifier}};
HeadlessIdentifier  : "".""  Identifier 'token'  {{HeadlessIdentifier}};
QualifiedIdentifier : Identifier 'token'  "".""  <IDENTIFIER> 'member' {{QualifiedIdentifier}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Module header and configuration
########## ########## ########## ########## ########## ########## ########## ########## 

header: ""version""   FloatLiteral  'version'  (""class"")?  {{}};
Option
   :   ""option"" IntegerLiteral 'value' {{OptionValue}}
   |   ""option"" ""compare"" ""database"" {{OptionCompareDatabase}}
   |   ""option"" ""compare""  (""binary""| ""text"" 'compare') {{OptionCompare}}
   |   ""option"" ""explicit"" {{OptionExplicit}}
   |  ""option"" ""private"" ""module""{{OptionPrivateModule}}
   ;

SetUpAssignation :  
	Identifier  'identifier' ""="" Expression 'value' {{SetUpAssignation}} 
;
Attribute
 : ""attribute"" SetUpAssignation 'setting' {{ModuleAttribute}}
 ;
Configuration 
:	""begin""  <eol>* SetUpAssignation 'setting' ( <eol>+ SetUpAssignation 'setting')* ""end"" {{Configuration}};

ModuleStatement :  
	Option  | Configuration | Attribute | DeclareExternal | VariableDefinition | BehaviourDefinition | Types
 ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Body statements
########## ########## ########## ########## ########## ########## ########## ########## 



Statement :   VariableDefinition | Attribute | Expression | ControlFlowStatement | Types ;
Block: Statement 'statement' (<eol>* Statement 'statement'  )* {{Block}};

BaseType: ""boolean"" | ""byte"" | ""collection"" | ""date"" | ""double"" | ""integer"" | ""long"" | ""object"" | ""single"" | ""string"" | ""variant"" {{BaseType}};
Visibility: ""private"" | ""public"" | ""friend"" | ""global"" ; 

ComplexType: Identifier 'name' {{ComplexType}};
Type: BaseType | ComplexType ;

TypedThing: ""as""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsType}}; 
TypedAndInstantiatedThing: ""as"" ""new""  Type 'type' (""("" literal 'size' ( "","" literal 'size')* "")"")? {{AsTypeAndNew}}; 

AsType: TypedThing | TypedAndInstantiatedThing;



########## ########## ########## ########## ########## ########## ########## ########## 
########## Types
########## ########## ########## ########## ########## ########## ########## ########## 
Types : DefineEnum | DefineType | Event ;

DefineType : 	 (Visibility 'visibility')? ""type"" Identifier 'name' ( <eol>* TypeEntry 'field' )* <eol>* ""end"" ""type"" {{DefineType}}    ;
TypeEntry    : Identifier 'name' AsType 'type' (""*"" IntegerLiteral 'size' )? {{TypeEntry}}     ;
Event  : (Visibility 'visibility')?  ""event"" Identifier 'selector' ParameterList 'parameters' {{Event}} ;
DefineEnum    :  (Visibility 'visibility')?  ""enum"" Identifier 'name'  ( <eol>* EnumEntry 'field')* <eol>*  ""end"" ""enum"" {{DefineEnum}}    ;
EnumEntry    : Identifier 'name'  ( ""=""  Expression 'value')? {{EnumEntry}}    ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Parameters
########## ########## ########## ########## ########## ########## ########## ########## 
ParameterPassingStrategy :  ""byval"" | ""byref"" {{ParameterPassingStrategy}};
ParameterList:  ""("" (Parameter 'parameter' ( "","" Parameter 'parameter')* )? "")"" {{ParameterList}};
Parameter: ""optional"" ? (ParameterPassingStrategy 'strategy')? ""paramarray""? Identifier 'name'  (AsType 'type')? (""="" Expression 'default')? {{Parameter}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## External declaration
########## ########## ########## ########## ########## ########## ########## ########## 
DeclareSub: (Visibility 'visibility')? ""declare""  ""sub"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  {{ExternalSub}};
DeclareFunction: (Visibility 'visibility')? ""declare""  ""function"" Identifier 'selector' ""lib"" StringLiteral 'library' (""alias"" StringLiteral 'alias')? ParameterList 'parameters'  AsType 'type' {{ExternalFunction}};
DeclareExternal : DeclareSub|DeclareFunction; 

########## ########## ########## ########## ########## ########## ########## ########## 
########## Function / Sub Definition 
########## ########## ########## ########## ########## ########## ########## ########## 

Modifier: ""static"" ;
DefineFunction: (Visibility 'visibility')? (Modifier 'modifier')? ""function"" Identifier 'selector' ParameterList 'parameters' (AsType 'type')? <eol>* Block 'block' ""end"" ""function"" {{FunctionDefinition}};
DefineSub:  (Visibility 'visibility')? (Modifier 'modifier')? ""sub"" Identifier 'selector' (ParameterList 'parameters') ? <eol>* Block 'block' ""end"" ""sub"" {{SubDefinition}};


ModulePropertyGet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""get"" Identifier 'selector' (ParameterList 'parameters') ? (AsType 'type')? <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 
ModulePropertySet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""set"" Identifier 'selector'  (ParameterList 'parameters') ?   <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 
ModulePropertyLet : (Visibility 'visibility')? (Modifier 'modifier')? ""property"" ""let"" Identifier 'selector' (ParameterList 'parameters') ?    <eol>* Block 'block' ""end"" ""property"" {{ModulePropertyGet}}; 


BehaviourDefinition:  DefineFunction | DefineSub | ModulePropertyGet | ModulePropertySet | ModulePropertyLet ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Variable / And Multiple Variables
########## ########## ########## ########## ########## ########## ########## ########## 

ModuleProperty : Visibility 'visibility' Variable 'variable' {{ModuleProperty}};
ModuleConstant : (Visibility 'visibility')? ""const"" Identifier 'constant' (AsType 'type')?  ""="" Expression 'value'  {{ModuleConstant}};
DefineVariable : ""dim"" Variable 'variable' {{DimVariable}};
ReDefineVariable : ""redim"" ""preserve""? Variable 'variable' {{ReDimVariable}};
StaticVariable : ""static"" Variable 'variable' {{StaticVariable}};
Variable : ""WithEvents"" ? Identifier 'name' (AsType 'type') ? {{Variable}};

ModuleProperties : Visibility 'visibility' VariableList 'variables' {{ModuleMultipleProperties}};
DefineVariables : ""dim"" VariableList 'variables' {{DimMultipleVariables}};
ReDefineVariables : ""redim""  ""preserve""?  VariableList 'variables' {{ReDimMultipleVariables}};
StaticVariables : ""static"" VariableList 'variables' {{StaticMultipleVariables}};
VariableList : Variable 'variable' ("",""  Variable 'variable' )* {{VariableList}};

VariableDefinition : ModuleProperties | ModuleProperty | ModuleConstant | DefineVariable | ReDefineVariable |  DefineVariables |  ReDefineVariables | StaticVariable | StaticVariables ;

########## ########## ########## ########## ########## ########## ########## ########## 
########## Value Statements
########## ########## ########## ########## ########## ########## ########## ########## 

ValueStatement :  Operation | ValueClause | ImplicitCall | StateAccess | ExplicitCall | RaiseEvent  ;
Expression :  ValueStatement |  Identifier | literal  | ParentheseesExpression | Exits ; 
ParentheseesExpression : ""("" Expression 'expression' "")"" {{ParentheseesExpression}};
ValueStatementList : ValueStatement 'value' ("","" ValueStatement 'value' ) * {{ValueStatementList}} ; 

### Ops

Operation : UnaryOperation | BinaryOperation ;

DictionaryAccess :   Expression 'receiver' ""!"" Identifier 'member' {{DictionaryAccess}} ;
MemberAccess : Expression 'receiver' ""."" Identifier 'member' {{MemberAccess}} ;
ImplicitParenthesesLessCall : Identifier 'identifier' ArgumentList 'arguments' {{ImplicitParenthesesLessCall}} ;
ProcedureCallOrArrayAccess :  Expression 'receiver' ""("" ArgumentList 'arguments' "")"" {{ProcedureCallOrArrayAccess}} ;

Argument : (ParameterPassingStrategy 'strategy')?  ""paramarray""?  Expression 'value' {{Argument}};
ArgumentList : (Argument 'argument' ? ("","" | "";"" ))* Argument 'argument'? ( ("","" | "";"" )Argument 'argument' ?)* {{ArgumentList}};

ImplicitCall : Identifier | ProcedureCallOrArrayAccess | ImplicitParenthesesLessCall ;
StateAccess : DictionaryAccess | MemberAccess ;

ExplicitCall : ""Call""  ImplicitCall 'call'  {{ExplicitCall}}; 
RaiseEvent : ""RaiseEvent""  ImplicitCall 'call'  {{RaiseEvent}}; 

### Unary Ops 
UnaryOperation:  NegatedOperation | PositiveOperation |  NotOperation ; 

NegatedOperation : ""-""  Expression 'value' {{NegatedOperation}} ;
PositiveOperation : ""+"" Expression 'value' {{PositiveOperation}} ;
NotOperation : ""not""  Expression 'value'  {{NotOperation}};

### Binary Ops 
BinaryOperation: ComparisonOperation  
				| ArithmeticOperation | BooleanBinaryOperation 
				| ExplicitAssignement | AssignementOrEquals  | ConcatenationOperation ;

ComparisonOperator : "">"" | ""<""  |  ""<>"" | ""<="" | "">="" | ""is"" | ""like""  ;
ComparisonOperation : Expression 'left' ComparisonOperator Expression 'right' {{ComparisonOperation}};
ArithmeticOperator : ""*"" | ""+"" | ""-"" | ""/"" | ""^"" | ""\"" | ""Mod"";
ArithmeticOperation : Expression 'left' ArithmeticOperator Expression 'right' {{ArithmeticOperation}};
BooleanOperator : ""and"" | ""or"" | ""xor"" | ""eqv"";
BooleanBinaryOperation : Expression 'left' BooleanOperator Expression 'right' {{ArithmeticOperation}};
ConcatenationOperation : Expression 'left' ""&"" Expression 'right' {{ConcatenationOperation}}; 
AssignementOrEquals : Expression 'left' ""="" Expression  'right' {{AssignementOrEquals}}; 
ExplicitAssignement : ""let"" | ""set""  Expression 'left' ""=""  Expression 'right' {{ExplicitAssignement}}; 
ExplicitAssignement :  Expression 'left' "":=""  Expression 'right' {{ExplicitAssignement}}; 
### Value Clause 
ValueClause: AddressOfClause | NewClause ;
AddressOfClause : ""AddressOf"" Identifier 'name'  {{AddressOfClause}}; 
NewClause : ""New"" Identifier 'typeName' {{NewClause}};

########## ########## ########## ########## ########## ########## ########## ########## 
########## Control flow statements
########## ########## ########## ########## ########## ########## ########## ########## 


ControlFlowStatement : Exits| Loops | If  | On | Resume| Go | To | Label | With ; 

#### Loops
Loops : DoLoop | WhileWend | ForLoop ;

########## Do
DoLoop : InfinityLoop | WhileTrue | UntilTrue | DoWhileTrue | DoUntilTrue; 
InfinityLoop : 
	""do""  
		<eol>* (Block 'body')? <eol>* 
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{InfinityLoop}} ;

WhileTrue :  
	""do"" ""while"" ValueStatement 'condition' 
		<eol>* ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""loop""  
{{WhileTrue}}; 
UntilTrue : 
	""do"" ""until"" ValueStatement 'condition'
		 <eol>*  Block 'body' <eol>* 
	(IntegerLiteral 'endLineNumber')?""loop"" 
 {{UntilTrue}}; 

DoWhileTrue :  
	""do""<eol>* ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')?  ""loop""  ""while"" ValueStatement 'condition' 
{{DoWhileTrue}}; 

DoUntilTrue : 
	""do"" <eol>*  Block 'body' <eol>* 
	(IntegerLiteral 'endLineNumber')? ""loop"" ""until"" ValueStatement 'condition'
 {{DoUntilTrue}}; 

########## WhileWend
WhileWend: 
	""while"" ValueStatement 'condition'
		 <eol>* ( Block 'body')? <eol>*  (IntegerLiteral 'endLineNumber')? 
	""wend""  {{WhileWend}}; 

########## For 
ForLoop : ForEach | ForNext | ForStepNext;

ForEach :  
	""for"" ""each"" Identifier 'element' ""in"" Expression 'group' 
		 <eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next"" (Identifier 'element' )? 
{{ForEach}} ;
 
ForNext :   
	""for"" Expression 'counter' ""="" Expression  'initialValue'  ""to"" Expression  'limit'   
		<eol>*  ( Block 'body')? <eol>* 
	 (IntegerLiteral 'endLineNumber')? 	""next"" 
{{ForNext}} ;
ForStepNext:   
	""for"" Expression 'counter' ""="" Expression  'initialValue'  ""to"" Expression  'limit' ""step"" Expression 'step'   
		<eol>*  ( Block 'body')? <eol>*  
	(IntegerLiteral 'endLineNumber')? ""next""
 {{ForStepNext}} ;

########## If

If : IfThenColon | IfThenElseOneLine | IfThen | IfThenElse | IfThenElseIfElse | IfThenElseIf ; 

IfThenColon : ""if"" Expression 'condition' ""then"" Expression  'ifTrue' {{IfThenColon}} ;

IfThenElseOneLine : 
	""if"" Expression 'condition' ""then"" 
		 Expression  'ifTrue' 
	""else"" 
		 Expression  'ifFalse'  
{{IfThenColon}};


IfThen : 
	""if"" Expression 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>*  
	(IntegerLiteral 'endLineNumber')?  ""end"" ""if"" 
{{IfThenElse}};

IfThenElse : 
	""if"" Expression 'condition' ""then"" 
		<eol>* (Block 'ifTrue')? <eol>* 
	(IntegerLiteral 'elseLineNumber')? ""else"" 
		 <eol>* (Block 'ifFalse')? <eol>* 
	(IntegerLiteral 'endLineNumber')? ""end"" ""if"" 
{{IfThenElse}};

IfThenElseIfElse  : 
""if"" Expression 'condition' ""then"" 
	<eol>* (Block 'ifTrue')? <eol>* 
(ElseIf 'case') + 
""else""  
	<eol>* (Block 'otherwise')? <eol>*
 ""end"" ""if""
{{IfThenElseIfElse}};

IfThenElseIf  : 
""if"" Expression 'condition' ""then"" 
	<eol>* (Block 'ifTrue')? <eol>* 
(ElseIf 'case') + 
 ""end"" ""if""
{{IfThenElseIfElse}};


ElseIf: ElseIfBlock | ElseIfColon ;

ElseIfBlock : ""elseif"" Expression 'condition' ""then"" 
	<eol>* (Block 'ifMatch')? <eol>*  {{ElseIfBlock}};
	
ElseIfColon : ""elseif"" Expression 'condition' ""then"" (  Expression 'ifMatch' ?  "":"" )* {{ElseIfColon}} ;

###### Label / LabelSub
	To : Label | LabelSub ;
	Label : Identifier 'label' "":""  {{GoToLabel}}; 
	LabelSub : Identifier 'label' "":"" (Block 'block' )? (IntegerLiteral 'endLineNumber')? ""return"" {{GoSubLabel}}; 

###### Resume
	Resume : ResumeLabel | ResumeNext | ResumeEmpty ;
	
	ResumeLabel : ""resume"" Identifier 'label' {{ResumeLabel}} ; 
	ResumeNext : ""resume"" ""next"" {{ResumeNext}} ; 
	ResumeEmpty : ""resume"" ; 

###### GoTo / GoSub 
Go: GoTo | GoSub ;

GoTo :  GoToLabel | GoToLine ;
GoToLabel : ""goto"" Identifier 'label' {{GoToLabel}}  ;
GoToLine :  ""goto"" IntegerLiteral 'lineNumber' {{GoToLine}}  ;

GoSub: GoSubLabel | GoSubLine ;
GoSubLabel :  ""gosub"" Identifier 'label'  {{GoSubLabel}} ;
GoSubLine :  ""gosub""  IntegerLiteral 'lineNumber'{{GoSubLine}} ;

########## On 
On: OnErrorGoTo | OnErrorResumeNext |  OnExpressionGo  ; 

OnErrorGoTo : ""on"" ""error"" GoTo 'to' {{OnErrorGoTo}}  ;
OnErrorResumeNext : ""on"" ""error"" ""resume""  ""next"" {{OnErrorResumeNext }} ;
OnExpressionGo : ""on"" Expression 'integerExpression' Go 'to' {{OnExpressionGo}} ;

########## Error
Error: ""error"" Expression 'errorCode' {{Error}} ;

########## With
With : ""with"" Identifier 'with' <eol>* (Block 'block' )? <eol>*  (IntegerLiteral 'endLineNumber')?""end"" ""with"" {{With}} ;

########## Exits

Exits : ExitFunction | ExitSub | ExitProperty | ExitDo |ExitFor ; 
ExitFunction : ""exit"" ""function"" {{Exits}} ; 
ExitSub : ""exit"" ""sub"" {{Exits}} ; 
ExitDo : ""exit"" ""do"" {{Exits}} ; 
ExitFor : ""exit"" ""for"" {{Exits}} ; 
ExitProperty : ""exit"" ""property"" {{Exits}} ;"
]

{ #category : #generated }
VBParser class >> reduceTable [
^#(
	#(133 0 #reduceActionFor_eol__1: 1715201 false ) 
	#(164 1 #liftFirstValue: 4640771 false ) 
	#(164 1 #liftFirstValue: 4640772 false ) 
	#(164 1 #liftFirstValue: 4640769 false ) 
	#(164 1 #liftFirstValue: 4640770 false ) 
	#(192 1 #liftFirstValue: 7314433 false ) 
	#(158 1 #liftFirstValue: 3977217 false ) 
	#(158 1 #liftFirstValue: 3977219 false ) 
	#(158 1 #liftFirstValue: 3977218 false ) 
	#(132 0 #reduceActionFor__eol___ModuleStatement__element____1: 1714177 false ) 
	#(158 1 #liftFirstValue: 3977223 false ) 
	#(172 1 #liftFirstValue: 5252098 false ) 
	#(172 1 #liftFirstValue: 5252099 false ) 
	#(172 1 #liftFirstValue: 5252097 false ) 
	#(191 1 #liftFirstValue: 7043073 false ) 
	#(191 1 #liftFirstValue: 7043074 false ) 
	#(158 1 #liftFirstValue: 3977220 false ) 
	#(198 1 #liftFirstValue: 8371201 false ) 
	#(198 1 #liftFirstValue: 8371202 false ) 
	#(198 1 #liftFirstValue: 8371203 false ) 
	#(198 1 #liftFirstValue: 8371204 false ) 
	#(198 1 #liftFirstValue: 8371205 false ) 
	#(158 1 #liftFirstValue: 3977222 false ) 
	#(212 1 #liftFirstValue: 9667586 false ) 
	#(212 1 #liftFirstValue: 9667587 false ) 
	#(212 1 #liftFirstValue: 9667588 false ) 
	#(212 1 #liftFirstValue: 9667589 false ) 
	#(212 1 #liftFirstValue: 9667592 false ) 
	#(212 1 #liftFirstValue: 9667585 false ) 
	#(212 1 #liftFirstValue: 9667590 false ) 
	#(212 1 #liftFirstValue: 9667591 false ) 
	#(212 1 #liftFirstValue: 9667593 false ) 
	#(158 1 #liftFirstValue: 3977221 false ) 
	#(147 1 #reduceActionForSimpleIdentifier2: 2825218 false ) 
	#(147 1 #liftFirstValue: 2825217 false ) 
	#(146 1 #reduceActionForHashIdentifier1: 2757633 false ) 
	#(145 1 #liftFirstValue: 2655234 false ) 
	#(145 1 #liftFirstValue: 2655233 false ) 
	#(145 1 #liftFirstValue: 2655236 false ) 
	#(145 1 #liftFirstValue: 2655235 false ) 
	#(153 2 #reduceActionForAttribute1: 3773441 false ) 
	#(204 1 #reduceActionForVariable1: 9146369 false ) 
	#(201 2 #reduceActionForDefineVariable1: 8937473 false ) 
	#(211 0 #reduceActionFor__eol___ModuleStatement__element____1: 9618433 false ) 
	#(206 2 #reduceActionForDefineVariables1: 9325569 false ) 
	#(180 0 #reduceActionFor__eol___ModuleStatement__element____1: 5716993 false ) 
	#(151 2 #reduceActionForOption5: 3361797 false ) 
	#(135 1 #reduceActionForIntegerLiteral1: 2114561 false ) 
	#(151 2 #reduceActionForOption1: 3361793 false ) 
	#(202 2 #reduceActionForReDefineVariable1: 8998913 false ) 
	#(207 2 #reduceActionForReDefineVariables1: 9402369 false ) 
	#(203 2 #reduceActionForStaticVariable1: 9078785 false ) 
	#(208 2 #reduceActionForStaticVariables1: 9499649 false ) 
	#(175 0 #reduceActionFor__eol___ModuleStatement__element____1: 5364737 false ) 
	#(138 1 #reduceActionForFloatLiteral1: 2294785 false ) 
	#(150 2 #reduceActionForheader1: 3297281 false ) 
	#(199 2 #reduceActionForModuleProperty1: 8715265 false ) 
	#(205 2 #reduceActionForModuleProperties1: 9225217 false ) 
	#(148 2 #reduceActionForHeadlessIdentifier1: 2899969 false ) 
	#(133 2 #reduceActionFor_eol__2: 1715202 false ) 
	#(156 0 #reduceActionFor__eol___ModuleStatement__element____1: 3911681 false ) 
	#(171 1 #liftFirstValue: 5000193 false ) 
	#(171 1 #liftFirstValue: 5000194 false ) 
	#(204 2 #reduceActionForVariable3: 9146371 false ) 
	#(204 2 #reduceActionForVariable2: 9146370 false ) 
	#(209 2 #reduceActionForVariableList1: 9582593 false ) 
	#(177 3 #reduceActionForEvent1: 5535745 false ) 
	#(151 3 #reduceActionForOption3: 3361795 false ) 
	#(151 3 #reduceActionForOption2: 3361794 false ) 
	#(151 3 #reduceActionForOption4: 3361796 false ) 
	#(151 3 #reduceActionForOption6: 3361798 false ) 
	#(202 3 #reduceActionForReDefineVariable2: 8998914 false ) 
	#(207 3 #reduceActionForReDefineVariables2: 9402370 false ) 
	#(150 3 #reduceActionForheader2: 3297282 false ) 
	#(132 2 #reduceActionFor__eol___ModuleStatement__element____2: 1714178 false ) 
	#(130 3 #reduceActionFormodule1: 1651713 false ) 
	#(149 3 #reduceActionForQualifiedIdentifier1: 2972673 false ) 
	#(247 1 #liftFirstValue: 12609537 false ) 
	#(137 1 #reduceActionForDateLiteral1: 2239489 false ) 
	#(136 1 #reduceActionForColorLiteral1: 2180097 false ) 
	#(139 1 #reduceActionForBooleanLiteral1: 2361345 false ) 
	#(140 1 #reduceActionForStringLiteral1: 2424833 false ) 
	#(141 1 #reduceActionForNull1: 2486273 false ) 
	#(214 1 #liftFirstValue: 10174467 false ) 
	#(134 1 #liftFirstValue: 1977345 false ) 
	#(134 1 #liftFirstValue: 1977346 false ) 
	#(134 1 #liftFirstValue: 1977347 false ) 
	#(134 1 #liftFirstValue: 1977348 false ) 
	#(134 1 #liftFirstValue: 1977349 false ) 
	#(134 1 #liftFirstValue: 1977350 false ) 
	#(134 1 #liftFirstValue: 1977351 false ) 
	#(134 1 #liftFirstValue: 1977352 false ) 
	#(214 1 #liftFirstValue: 10174466 false ) 
	#(230 1 #liftFirstValue: 11164673 false ) 
	#(227 0 #reduceActionFor_Argument__argument__________________1: 11045889 false ) 
	#(214 1 #liftFirstValue: 10174465 false ) 
	#(152 3 #reduceActionForSetUpAssignation1: 3677185 false ) 
	#(214 1 #liftFirstValue: 10174468 false ) 
	#(213 1 #liftFirstValue: 10070017 false ) 
	#(231 1 #liftFirstValue: 11253761 false ) 
	#(231 1 #liftFirstValue: 11253762 false ) 
	#(230 1 #liftFirstValue: 11164675 false ) 
	#(230 1 #liftFirstValue: 11164674 false ) 
	#(213 1 #liftFirstValue: 10070019 false ) 
	#(213 1 #liftFirstValue: 10070020 false ) 
	#(213 1 #liftFirstValue: 10070021 false ) 
	#(213 1 #liftFirstValue: 10070022 false ) 
	#(219 1 #liftFirstValue: 10468353 false ) 
	#(234 1 #liftFirstValue: 11451393 false ) 
	#(234 1 #liftFirstValue: 11451394 false ) 
	#(234 1 #liftFirstValue: 11451395 false ) 
	#(219 1 #liftFirstValue: 10468354 false ) 
	#(238 1 #liftFirstValue: 11742209 false ) 
	#(238 1 #liftFirstValue: 11742210 false ) 
	#(238 1 #liftFirstValue: 11742211 false ) 
	#(238 1 #liftFirstValue: 11742214 false ) 
	#(238 1 #liftFirstValue: 11742213 false ) 
	#(238 1 #liftFirstValue: 11742212 false ) 
	#(213 1 #liftFirstValue: 10070018 false ) 
	#(248 1 #liftFirstValue: 12829697 false ) 
	#(248 1 #liftFirstValue: 12829698 false ) 
	#(214 1 #liftFirstValue: 10174469 false ) 
	#(298 1 #liftFirstValue: 17690625 false ) 
	#(298 1 #liftFirstValue: 17690626 false ) 
	#(298 1 #liftFirstValue: 17690628 false ) 
	#(298 1 #liftFirstValue: 17690629 false ) 
	#(298 1 #liftFirstValue: 17690627 false ) 
	#(200 4 #reduceActionForModuleConstant1: 8798209 false ) 
	#(163 1 #liftFirstValue: 4493313 false ) 
	#(163 1 #liftFirstValue: 4493314 false ) 
	#(163 1 #liftFirstValue: 4493315 false ) 
	#(163 1 #liftFirstValue: 4493316 false ) 
	#(163 1 #liftFirstValue: 4493317 false ) 
	#(163 1 #liftFirstValue: 4493318 false ) 
	#(163 1 #liftFirstValue: 4493319 false ) 
	#(163 1 #liftFirstValue: 4493320 false ) 
	#(163 1 #liftFirstValue: 4493321 false ) 
	#(163 1 #liftFirstValue: 4493322 false ) 
	#(163 1 #reduceActionForBaseType11: 4493323 false ) 
	#(165 1 #reduceActionForComplexType1: 4701185 false ) 
	#(166 1 #liftFirstValue: 4750337 false ) 
	#(166 1 #liftFirstValue: 4750338 false ) 
	#(167 2 #reduceActionForTypedThing1: 4783105 false ) 
	#(204 3 #reduceActionForVariable4: 9146372 false ) 
	#(211 2 #reduceActionFor______Variable__variable____2: 9618434 false ) 
	#(180 2 #reduceActionFor___eol___EnumEntry__field___2: 5716994 false ) 
	#(183 2 #reduceActionForParameterList1: 6155265 false ) 
	#(182 1 #reduceActionForParameterPassingStrategy2: 6077442 false ) 
	#(182 1 #liftFirstValue: 6077441 false ) 
	#(188 0 #reduceActionFor_____Expression__default___1: 6372353 false ) 
	#(185 0 #reduceActionFor__eol___ModuleStatement__element____1: 6199297 false ) 
	#(284 1 #liftFirstValue: 16781313 false ) 
	#(159 1 #liftFirstValue: 4323330 false ) 
	#(162 0 #reduceActionFor__eol___ModuleStatement__element____1: 4446209 false ) 
	#(159 1 #liftFirstValue: 4323333 false ) 
	#(159 1 #liftFirstValue: 4323329 false ) 
	#(159 1 #liftFirstValue: 4323331 false ) 
	#(159 1 #liftFirstValue: 4323332 false ) 
	#(251 1 #liftFirstValue: 13223938 false ) 
	#(252 1 #liftFirstValue: 13321217 false ) 
	#(253 1 #liftFirstValue: 13376513 false ) 
	#(253 1 #liftFirstValue: 13376514 false ) 
	#(253 1 #liftFirstValue: 13376515 false ) 
	#(253 1 #liftFirstValue: 13376516 false ) 
	#(253 1 #liftFirstValue: 13376517 false ) 
	#(252 1 #liftFirstValue: 13321218 false ) 
	#(252 1 #liftFirstValue: 13321219 false ) 
	#(260 1 #liftFirstValue: 14374913 false ) 
	#(260 1 #liftFirstValue: 14374914 false ) 
	#(260 1 #liftFirstValue: 14374915 false ) 
	#(251 1 #liftFirstValue: 13223939 false ) 
	#(264 1 #liftFirstValue: 15065089 false ) 
	#(264 1 #liftFirstValue: 15065090 false ) 
	#(264 1 #liftFirstValue: 15065091 false ) 
	#(264 1 #liftFirstValue: 15065092 false ) 
	#(264 1 #liftFirstValue: 15065093 false ) 
	#(264 1 #liftFirstValue: 15065094 false ) 
	#(251 1 #liftFirstValue: 13223943 false ) 
	#(278 1 #liftFirstValue: 16407553 false ) 
	#(251 1 #liftFirstValue: 13223944 false ) 
	#(278 1 #liftFirstValue: 16407554 false ) 
	#(251 1 #liftFirstValue: 13223941 false ) 
	#(281 1 #liftFirstValue: 16614401 false ) 
	#(281 1 #liftFirstValue: 16614402 false ) 
	#(281 1 #liftFirstValue: 16614403 false ) 
	#(251 1 #liftFirstValue: 13223942 false ) 
	#(285 1 #liftFirstValue: 16830465 false ) 
	#(286 1 #liftFirstValue: 16850945 false ) 
	#(286 1 #liftFirstValue: 16850946 false ) 
	#(285 1 #liftFirstValue: 16830466 false ) 
	#(289 1 #liftFirstValue: 17004545 false ) 
	#(289 1 #liftFirstValue: 17004546 false ) 
	#(251 1 #liftFirstValue: 13223940 false ) 
	#(292 1 #liftFirstValue: 17180673 false ) 
	#(292 1 #liftFirstValue: 17180674 false ) 
	#(292 1 #liftFirstValue: 17180675 false ) 
	#(251 1 #liftFirstValue: 13223945 false ) 
	#(251 1 #liftFirstValue: 13223937 false ) 
	#(175 2 #reduceActionFor___eol___EnumEntry__field___2: 5364738 false ) 
	#(131 2 #reduceActionFor__eol___ModuleStatement__element___1: 1714177 false ) 
	#(177 4 #reduceActionForEvent2: 5535746 false ) 
	#(236 2 #reduceActionForPositiveOperation1: 11594753 false ) 
	#(235 2 #reduceActionForNegatedOperation1: 11527169 false ) 
	#(249 2 #reduceActionForAddressOfClause1: 12873729 false ) 
	#(232 2 #reduceActionForExplicitCall1: 11303937 false ) 
	#(250 2 #reduceActionForNewClause1: 12946433 false ) 
	#(233 2 #reduceActionForRaiseEvent1: 11368449 false ) 
	#(301 2 #reduceActionForExitDo1: 17843201 false ) 
	#(302 2 #reduceActionForExitFor1: 17878017 false ) 
	#(299 2 #reduceActionForExitFunction1: 17759233 false ) 
	#(303 2 #reduceActionForExitProperty1: 17914881 false ) 
	#(300 2 #reduceActionForExitSub1: 17806337 false ) 
	#(237 2 #reduceActionForNotOperation1: 11663361 false ) 
	#(143 1 #reduceActionFor_HEX_INTEGER___1: 2542593 false ) 
	#(222 2 #reduceActionForImplicitParenthesesLessCall1: 10691585 false ) 
	#(229 0 #reduceActionFor_Argument__argument__________________1: 11106305 false ) 
	#(241 1 #reduceActionForArithmeticOperator1: 12094465 false ) 
	#(241 1 #reduceActionForArithmeticOperator2: 12094466 false ) 
	#(241 1 #reduceActionForArithmeticOperator3: 12094467 false ) 
	#(241 1 #reduceActionForArithmeticOperator4: 12094468 false ) 
	#(239 1 #reduceActionForArithmeticOperator2: 11914242 false ) 
	#(239 1 #reduceActionForArithmeticOperator4: 11914244 false ) 
	#(239 1 #reduceActionForArithmeticOperator3: 11914243 false ) 
	#(239 1 #reduceActionForArithmeticOperator1: 11914241 false ) 
	#(239 1 #reduceActionForComparisonOperator5: 11914245 false ) 
	#(241 1 #reduceActionForArithmeticOperator7: 12094471 false ) 
	#(241 1 #reduceActionForArithmeticOperator6: 12094470 false ) 
	#(241 1 #reduceActionForComparisonOperator5: 12094469 false ) 
	#(243 1 #reduceActionForBooleanOperator1: 12265473 false ) 
	#(243 1 #reduceActionForBooleanOperator4: 12265476 false ) 
	#(239 1 #reduceActionForArithmeticOperator6: 11914246 false ) 
	#(239 1 #reduceActionForArithmeticOperator7: 11914247 false ) 
	#(243 1 #reduceActionForBooleanOperator2: 12265474 false ) 
	#(243 1 #reduceActionForBooleanOperator3: 12265475 false ) 
	#(154 5 #reduceActionForConfiguration1: 3850241 false ) 
	#(157 1 #reduceActionFor_HEX_INTEGER___1: 3913729 false ) 
	#(156 2 #reduceActionFor__eol___ModuleStatement__element____2: 3911682 false ) 
	#(170 3 #reduceActionForTypedAndInstantiatedThing1: 4877313 false ) 
	#(200 5 #reduceActionForModuleConstant2: 8798210 false ) 
	#(210 2 #reduceActionFor______Variable__variable___1: 9618433 false ) 
	#(181 1 #reduceActionForEnumEntry1: 5788673 false ) 
	#(179 2 #reduceActionFor__eol___ModuleStatement__element___1: 5716993 false ) 
	#(188 1 #reduceActionFor_____Expression__default___2: 6372354 false ) 
	#(186 2 #reduceActionForParameter1: 6256641 false ) 
	#(291 2 #reduceActionForGoSubLine1: 17097729 false ) 
	#(290 2 #reduceActionForGoSubLabel1: 17037313 false ) 
	#(288 2 #reduceActionForGoToLine1: 16939009 false ) 
	#(287 2 #reduceActionForGoToLabel1: 16882689 false ) 
	#(283 2 #reduceActionForResumeNext1: 16732161 false ) 
	#(282 2 #reduceActionForResumeLabel1: 16668673 false ) 
	#(279 2 #reduceActionForLabel1: 16433153 false ) 
	#(160 2 #reduceActionForBlock1: 4416513 false ) 
	#(174 2 #reduceActionFor__eol___ModuleStatement__element___1: 5364737 false ) 
	#(130 5 #reduceActionFormodule2: 1651714 false ) 
	#(200 5 #reduceActionForModuleConstant3: 8798211 false ) 
	#(215 3 #reduceActionForParentheseesExpression1: 10266625 false ) 
	#(143 2 #reduceActionFor_eol__2: 2542594 false ) 
	#(226 1 #reduceActionFor_Argument__argument_________________1: 11045889 false ) 
	#(226 1 #reduceActionFor_Argument__argument_________________2: 11045890 false ) 
	#(224 1 #reduceActionForArgument1: 10929153 false ) 
	#(227 2 #reduceActionFor_Argument__argument__________________2: 11045890 false ) 
	#(225 2 #reduceActionForArgumentList1: 11030529 false ) 
	#(220 3 #reduceActionForDictionaryAccess1: 10517505 false ) 
	#(245 3 #reduceActionForConcatenationOperation1: 12420097 false ) 
	#(221 3 #reduceActionForMemberAccess1: 10609665 false ) 
	#(247 3 #reduceActionForExplicitAssignement3: 12609539 false ) 
	#(246 3 #reduceActionForAssignementOrEquals1: 12517377 false ) 
	#(240 3 #reduceActionForComparisonOperation1: 11988993 false ) 
	#(242 3 #reduceActionForArithmeticOperation1: 12160001 false ) 
	#(244 3 #reduceActionForBooleanBinaryOperation1: 12314625 false ) 
	#(157 2 #reduceActionFor_eol__2: 3913730 false ) 
	#(155 2 #reduceActionFor__eol___ModuleStatement__element___1: 3911681 false ) 
	#(169 0 #reduceActionFor__eol___ModuleStatement__element____1: 4834305 false ) 
	#(189 6 #reduceActionForDeclareSub1: 6632449 false ) 
	#(178 6 #reduceActionForDefineEnum1: 5644289 false ) 
	#(186 3 #reduceActionForParameter9: 6256649 false ) 
	#(186 3 #reduceActionForParameter3: 6256643 false ) 
	#(187 2 #reduceActionFor______Variable__variable___1: 6372353 false ) 
	#(186 3 #reduceActionForParameter2: 6256642 false ) 
	#(186 3 #reduceActionForParameter5: 6256645 false ) 
	#(183 4 #reduceActionForParameterList2: 6155266 false ) 
	#(185 2 #reduceActionFor______Variable__variable____2: 6199298 false ) 
	#(293 3 #reduceActionForOnErrorGoTo1: 17241089 false ) 
	#(295 3 #reduceActionForOnExpressionGo1: 17375233 false ) 
	#(280 3 #reduceActionForLabelSub1: 16483329 false ) 
	#(162 2 #reduceActionFor___eol___EnumEntry__field___2: 4446210 false ) 
	#(194 6 #reduceActionForDefineSub1: 7545857 false ) 
	#(173 6 #reduceActionForDefineType1: 5296129 false ) 
	#(176 2 #reduceActionForTypeEntry1: 5436417 false ) 
	#(200 6 #reduceActionForModuleConstant4: 8798212 false ) 
	#(247 4 #reduceActionForExplicitAssignement2: 12609538 false ) 
	#(144 1 #reduceActionFor_HEX_INTEGER___1: 2562049 false ) 
	#(224 2 #reduceActionForArgument2: 10929154 false ) 
	#(224 2 #reduceActionForArgument3: 10929155 false ) 
	#(226 2 #reduceActionFor_Argument__argument_________________3: 11045891 false ) 
	#(226 2 #reduceActionFor_Argument__argument_________________4: 11045892 false ) 
	#(225 3 #reduceActionForArgumentList2: 11030530 false ) 
	#(228 1 #reduceActionFor_Argument__argument_________________1: 11106305 false ) 
	#(228 1 #reduceActionFor______________Argument__argument____3: 11106307 false ) 
	#(229 2 #reduceActionFor_Argument__argument__________________2: 11106306 false ) 
	#(223 4 #reduceActionForProcedureCallOrArrayAccess1: 10807297 false ) 
	#(190 7 #reduceActionForDeclareFunction1: 6822913 false ) 
	#(181 3 #reduceActionForEnumEntry2: 5788674 false ) 
	#(186 4 #reduceActionForParameter11: 6256651 false ) 
	#(186 4 #reduceActionForParameter10: 6256650 false ) 
	#(186 4 #reduceActionForParameter13: 6256653 false ) 
	#(186 4 #reduceActionForParameter4: 6256644 false ) 
	#(186 4 #reduceActionForParameter7: 6256647 false ) 
	#(186 4 #reduceActionForParameter6: 6256646 false ) 
	#(184 2 #reduceActionFor______Variable__variable___1: 6199297 false ) 
	#(193 7 #reduceActionForDefineFunction1: 7335937 false ) 
	#(195 7 #reduceActionForModulePropertyGet1: 7725057 false ) 
	#(197 7 #reduceActionForModulePropertyLet1: 8159233 false ) 
	#(196 7 #reduceActionForModulePropertySet1: 7949313 false ) 
	#(254 4 #reduceActionForInfinityLoop1: 13454337 false ) 
	#(265 4 #reduceActionForIfThenColon1: 15164417 false ) 
	#(294 4 #reduceActionForOnErrorResumeNext1: 17298433 false ) 
	#(280 4 #reduceActionForLabelSub2: 16483330 false ) 
	#(280 4 #reduceActionForLabelSub3: 16483331 false ) 
	#(161 2 #reduceActionFor__eol___ModuleStatement__element___1: 4446209 false ) 
	#(194 7 #reduceActionForDefineSub2: 7545858 false ) 
	#(189 7 #reduceActionForDeclareSub3: 6632451 false ) 
	#(178 7 #reduceActionForDefineEnum2: 5644290 false ) 
	#(194 7 #reduceActionForDefineSub5: 7545861 false ) 
	#(173 7 #reduceActionForDefineType2: 5296130 false ) 
	#(194 7 #reduceActionForDefineSub3: 7545859 false ) 
	#(144 2 #reduceActionFor_eol__2: 2562050 false ) 
	#(224 3 #reduceActionForArgument4: 10929156 false ) 
	#(228 2 #reduceActionFor______________Argument__argument____2: 11106306 false ) 
	#(228 2 #reduceActionFor_Argument__argument_________________4: 11106308 false ) 
	#(167 6 #reduceActionForTypedThing2: 4783106 false ) 
	#(169 2 #reduceActionFor______Variable__variable____2: 4834306 false ) 
	#(189 8 #reduceActionForDeclareSub2: 6632450 false ) 
	#(186 5 #reduceActionForParameter12: 6256652 false ) 
	#(186 5 #reduceActionForParameter15: 6256655 false ) 
	#(186 5 #reduceActionForParameter14: 6256654 false ) 
	#(186 5 #reduceActionForParameter8: 6256648 false ) 
	#(193 8 #reduceActionForDefineFunction2: 7335938 false ) 
	#(195 8 #reduceActionForModulePropertyGet2: 7725058 false ) 
	#(195 8 #reduceActionForModulePropertyGet3: 7725059 false ) 
	#(197 8 #reduceActionForModulePropertyLet2: 8159234 false ) 
	#(196 8 #reduceActionForModulePropertySet2: 7949314 false ) 
	#(254 5 #reduceActionForInfinityLoop2: 13454338 false ) 
	#(254 5 #reduceActionForInfinityLoop3: 13454339 false ) 
	#(259 5 #reduceActionForWhileWend1: 14211073 false ) 
	#(280 5 #reduceActionForLabelSub4: 16483332 false ) 
	#(176 4 #reduceActionForTypeEntry2: 5436418 false ) 
	#(190 8 #reduceActionForDeclareFunction3: 6822915 false ) 
	#(193 8 #reduceActionForDefineFunction5: 7335941 false ) 
	#(195 8 #reduceActionForModulePropertyGet9: 7725065 false ) 
	#(197 8 #reduceActionForModulePropertyLet5: 8159237 false ) 
	#(196 8 #reduceActionForModulePropertySet5: 7949317 false ) 
	#(194 8 #reduceActionForDefineSub6: 7545862 false ) 
	#(194 8 #reduceActionForDefineSub7: 7545863 false ) 
	#(193 8 #reduceActionForDefineFunction3: 7335939 false ) 
	#(195 8 #reduceActionForModulePropertyGet5: 7725061 false ) 
	#(197 8 #reduceActionForModulePropertyLet3: 8159235 false ) 
	#(196 8 #reduceActionForModulePropertySet3: 7949315 false ) 
	#(194 8 #reduceActionForDefineSub4: 7545860 false ) 
	#(170 7 #reduceActionForTypedAndInstantiatedThing2: 4877314 false ) 
	#(168 2 #reduceActionFor______Variable__variable___1: 4834305 false ) 
	#(190 9 #reduceActionForDeclareFunction2: 6822914 false ) 
	#(186 6 #reduceActionForParameter16: 6256656 false ) 
	#(195 9 #reduceActionForModulePropertyGet4: 7725060 false ) 
	#(255 6 #reduceActionForWhileTrue1: 13578241 false ) 
	#(257 6 #reduceActionForDoWhileTrue1: 13882369 false ) 
	#(254 6 #reduceActionForInfinityLoop4: 13454340 false ) 
	#(271 1 #reduceActionFor_HEX_INTEGER___1: 15878145 false ) 
	#(270 1 #liftFirstValue: 15878145 false ) 
	#(273 1 #liftFirstValue: 16124929 false ) 
	#(273 1 #liftFirstValue: 16124930 false ) 
	#(266 6 #reduceActionForIfThenElseOneLine1: 15255553 false ) 
	#(259 6 #reduceActionForWhileWend2: 14211074 false ) 
	#(259 6 #reduceActionForWhileWend3: 14211075 false ) 
	#(297 6 #reduceActionForWith1: 17546241 false ) 
	#(189 9 #reduceActionForDeclareSub4: 6632452 false ) 
	#(193 9 #reduceActionForDefineFunction6: 7335942 false ) 
	#(195 9 #reduceActionForModulePropertyGet10: 7725066 false ) 
	#(195 9 #reduceActionForModulePropertyGet11: 7725067 false ) 
	#(197 9 #reduceActionForModulePropertyLet6: 8159238 false ) 
	#(196 9 #reduceActionForModulePropertySet6: 7949318 false ) 
	#(193 9 #reduceActionForDefineFunction7: 7335943 false ) 
	#(195 9 #reduceActionForModulePropertyGet13: 7725069 false ) 
	#(197 9 #reduceActionForModulePropertyLet7: 8159239 false ) 
	#(196 9 #reduceActionForModulePropertySet7: 7949319 false ) 
	#(194 9 #reduceActionForDefineSub8: 7545864 false ) 
	#(193 9 #reduceActionForDefineFunction4: 7335940 false ) 
	#(195 9 #reduceActionForModulePropertyGet6: 7725062 false ) 
	#(195 9 #reduceActionForModulePropertyGet7: 7725063 false ) 
	#(197 9 #reduceActionForModulePropertyLet4: 8159236 false ) 
	#(196 9 #reduceActionForModulePropertySet4: 7949316 false ) 
	#(256 7 #reduceActionForUntilTrue1: 13732865 false ) 
	#(255 7 #reduceActionForWhileTrue2: 13578242 false ) 
	#(255 7 #reduceActionForWhileTrue3: 13578243 false ) 
	#(257 7 #reduceActionForDoWhileTrue2: 13882370 false ) 
	#(258 7 #reduceActionForDoUntilTrue1: 14039041 false ) 
	#(257 7 #reduceActionForDoWhileTrue3: 13882371 false ) 
	#(267 7 #reduceActionForIfThen1: 15396865 false ) 
	#(271 2 #reduceActionFor_eol__2: 15878146 false ) 
	#(259 7 #reduceActionForWhileWend4: 14211076 false ) 
	#(297 7 #reduceActionForWith2: 17546242 false ) 
	#(297 7 #reduceActionForWith3: 17546243 false ) 
	#(190 10 #reduceActionForDeclareFunction4: 6822916 false ) 
	#(195 10 #reduceActionForModulePropertyGet12: 7725068 false ) 
	#(193 10 #reduceActionForDefineFunction8: 7335944 false ) 
	#(195 10 #reduceActionForModulePropertyGet14: 7725070 false ) 
	#(195 10 #reduceActionForModulePropertyGet15: 7725071 false ) 
	#(197 10 #reduceActionForModulePropertyLet8: 8159240 false ) 
	#(196 10 #reduceActionForModulePropertySet8: 7949320 false ) 
	#(195 10 #reduceActionForModulePropertyGet8: 7725064 false ) 
	#(256 8 #reduceActionForUntilTrue2: 13732866 false ) 
	#(255 8 #reduceActionForWhileTrue4: 13578244 false ) 
	#(258 8 #reduceActionForDoUntilTrue2: 14039042 false ) 
	#(257 8 #reduceActionForDoWhileTrue4: 13882372 false ) 
	#(261 8 #reduceActionForForEach1: 14419969 false ) 
	#(277 0 #reduceActionFor__eol___ModuleStatement__element____1: 16327681 false ) 
	#(267 8 #reduceActionForIfThen2: 15396866 false ) 
	#(272 8 #reduceActionForIfThenElseIf1: 15979521 false ) 
	#(267 8 #reduceActionForIfThen3: 15396867 false ) 
	#(297 8 #reduceActionForWith4: 17546244 false ) 
	#(195 11 #reduceActionForModulePropertyGet16: 7725072 false ) 
	#(261 9 #reduceActionForForEach2: 14419970 false ) 
	#(261 9 #reduceActionForForEach3: 14419971 false ) 
	#(261 9 #reduceActionForForEach5: 14419973 false ) 
	#(262 9 #reduceActionForForNext1: 14617601 false ) 
	#(275 4 #reduceActionForElseIfColon1: 16273409 false ) 
	#(267 9 #reduceActionForIfThen4: 15396868 false ) 
	#(272 9 #reduceActionForIfThenElseIf2: 15979522 false ) 
	#(261 10 #reduceActionForForEach4: 14419972 false ) 
	#(261 10 #reduceActionForForEach6: 14419974 false ) 
	#(261 10 #reduceActionForForEach7: 14419975 false ) 
	#(262 10 #reduceActionForForNext2: 14617602 false ) 
	#(262 10 #reduceActionForForNext3: 14617603 false ) 
	#(268 10 #reduceActionForIfThenElse1: 15548417 false ) 
	#(274 5 #reduceActionForElseIfBlock1: 16162817 false ) 
	#(276 1 #reduceActionFor___Expression__ifMatch__________1: 16327681 false ) 
	#(277 2 #reduceActionFor______Variable__variable____2: 16327682 false ) 
	#(142 11 #reduceActionForGuidLiteral1: 2526209 false ) 
	#(261 11 #reduceActionForForEach8: 14419976 false ) 
	#(263 11 #reduceActionForForStepNext1: 14817281 false ) 
	#(262 11 #reduceActionForForNext4: 14617604 false ) 
	#(268 11 #reduceActionForIfThenElse2: 15548418 false ) 
	#(268 11 #reduceActionForIfThenElse3: 15548419 false ) 
	#(274 6 #reduceActionForElseIfBlock2: 16162818 false ) 
	#(276 2 #reduceActionFor___Expression__ifMatch__________2: 16327682 false ) 
	#(268 11 #reduceActionForIfThenElse5: 15548421 false ) 
	#(269 11 #reduceActionForIfThenElseIfElse1: 15784961 false ) 
	#(268 11 #reduceActionForIfThenElse9: 15548425 false ) 
	#(263 12 #reduceActionForForStepNext2: 14817282 false ) 
	#(263 12 #reduceActionForForStepNext3: 14817283 false ) 
	#(268 12 #reduceActionForIfThenElse4: 15548420 false ) 
	#(268 12 #reduceActionForIfThenElse6: 15548422 false ) 
	#(268 12 #reduceActionForIfThenElse7: 15548423 false ) 
	#(269 12 #reduceActionForIfThenElseIfElse2: 15784962 false ) 
	#(268 12 #reduceActionForIfThenElse10: 15548426 false ) 
	#(268 12 #reduceActionForIfThenElse11: 15548427 false ) 
	#(268 12 #reduceActionForIfThenElse13: 15548429 false ) 
	#(269 12 #reduceActionForIfThenElseIfElse3: 15784963 false ) 
	#(263 13 #reduceActionForForStepNext4: 14817284 false ) 
	#(268 13 #reduceActionForIfThenElse8: 15548424 false ) 
	#(268 13 #reduceActionForIfThenElse12: 15548428 false ) 
	#(268 13 #reduceActionForIfThenElse14: 15548430 false ) 
	#(268 13 #reduceActionForIfThenElse15: 15548431 false ) 
	#(269 13 #reduceActionForIfThenElseIfElse4: 15784964 false ) 
	#(268 14 #reduceActionForIfThenElse16: 15548432 false )
	).
]

{ #category : #'generated-accessing' }
VBParser class >> scannerClass [
	^VBScanner
]

{ #category : #generated }
VBParser class >> startingStateFormodule [
	^ 1
]

{ #category : #generated }
VBParser class >> symbolNames [
	^ #('"!"' '"!="' '"&"' '"&&"' '"("' '")"' '"*"' '"+"' '","' '"-"' '"."' '"/"' '":"' '":="' '";"' '"<"' '"<="' '"<>"' '"="' '">"' '">="' '"AddressOf"' '"Call"' '"Mod"' '"NEW"' '"RaiseEvent"' '"WithEvents"' '"["' '"\"' '"^"' '"alias"' '"and"' '"as"' '"attribute"' '"begin"' '"binary"' '"boolean"' '"byref"' '"byte"' '"byval"' '"class"' '"collection"' '"compare"' '"const"' '"database"' '"date"' '"declare"' '"delete"' '"dim"' '"do"' '"double"' '"each"' '"else"' '"elseif"' '"end"' '"enum"' '"eqv"' '"error"' '"event"' '"exit"' '"explicit"' '"for"' '"friend"' '"function"' '"get"' '"global"' '"gosub"' '"goto"' '"if"' '"in"' '"integer"' '"is"' '"let"' '"lib"' '"like"' '"long"' '"loop"' '"module"' '"next"' '"not"' '"object"' '"on"' '"option"' '"optional"' '"or"' '"paramarray"' '"preserve"' '"private"' '"property"' '"public"' '"redim"' '"resume"' '"return"' '"set"' '"single"' '"static"' '"step"' '"string"' '"sub"' '"text"' '"then"' '"to"' '"type"' '"until"' '"variant"' '"version"' '"wend"' '"while"' '"with"' '"xor"' '"{"' '"||"' '"}"' '"~"' '<lineContinuation>' '<HEX_INTEGER>' '<DATE_LITERAL>' '<COLOR_LITERAL>' '<INTEGER_LITERAL>' '<FLOATING_POINT_LITERAL>' '<BOOLEAN_LITERAL>' '<STRING_LITERAL>' '<NULL_LITERAL>' '<IDENTIFIER>' '<HASH_IDENTIFIER>' '<whitespace>' '<eol>' '<comment>' 'B e g i n' 'module' '(<eol>* ModuleStatement ''element'' )' '(<eol>* ModuleStatement ''element'' )*' '<eol>*' 'literal' 'IntegerLiteral' 'ColorLiteral' 'DateLiteral' 'FloatLiteral' 'BooleanLiteral' 'StringLiteral' 'Null' 'GuidLiteral' '<HEX_INTEGER> +' '<HEX_INTEGER>+' 'Identifier' 'HashIdentifier' 'SimpleIdentifier' 'HeadlessIdentifier' 'QualifiedIdentifier' 'header' 'Option' 'SetUpAssignation' 'Attribute' 'Configuration' '( <eol>+ SetUpAssignation ''setting'')' '( <eol>+ SetUpAssignation ''setting'')*' '<eol>+' 'ModuleStatement' 'Statement' 'Block' '(<eol>* Statement ''statement''  )' '(<eol>* Statement ''statement''  )*' 'BaseType' 'Visibility' 'ComplexType' 'Type' 'TypedThing' '( "," literal ''size'')' '( "," literal ''size'')*' 'TypedAndInstantiatedThing' 'AsType' 'Types' 'DefineType' '( <eol>* TypeEntry ''field'' )' '( <eol>* TypeEntry ''field'' )*' 'TypeEntry' 'Event' 'DefineEnum' '( <eol>* EnumEntry ''field'')' '( <eol>* EnumEntry ''field'')*' 'EnumEntry' 'ParameterPassingStrategy' 'ParameterList' '( "," Parameter ''parameter'')' '( "," Parameter ''parameter'')*' 'Parameter' '("=" Expression ''default'')' '("=" Expression ''default'')?' 'DeclareSub' 'DeclareFunction' 'DeclareExternal' 'Modifier' 'DefineFunction' 'DefineSub' 'ModulePropertyGet' 'ModulePropertySet' 'ModulePropertyLet' 'BehaviourDefinition' 'ModuleProperty' 'ModuleConstant' 'DefineVariable' 'ReDefineVariable' 'StaticVariable' 'Variable' 'ModuleProperties' 'DefineVariables' 'ReDefineVariables' 'StaticVariables' 'VariableList' '(","  Variable ''variable'' )' '(","  Variable ''variable'' )*' 'VariableDefinition' 'ValueStatement' 'Expression' 'ParentheseesExpression' 'ValueStatementList' '("," ValueStatement ''value'' )' '("," ValueStatement ''value'' ) *' 'Operation' 'DictionaryAccess' 'MemberAccess' 'ImplicitParenthesesLessCall' 'ProcedureCallOrArrayAccess' 'Argument' 'ArgumentList' '(Argument ''argument'' ? ("," | ";" ))' '(Argument ''argument'' ? ("," | ";" ))*' '( ("," | ";" )Argument ''argument'' ?)' '( ("," | ";" )Argument ''argument'' ?)*' 'ImplicitCall' 'StateAccess' 'ExplicitCall' 'RaiseEvent' 'UnaryOperation' 'NegatedOperation' 'PositiveOperation' 'NotOperation' 'BinaryOperation' 'ComparisonOperator' 'ComparisonOperation' 'ArithmeticOperator' 'ArithmeticOperation' 'BooleanOperator' 'BooleanBinaryOperation' 'ConcatenationOperation' 'AssignementOrEquals' 'ExplicitAssignement' 'ValueClause' 'AddressOfClause' 'NewClause' 'ControlFlowStatement' 'Loops' 'DoLoop' 'InfinityLoop' 'WhileTrue' 'UntilTrue' 'DoWhileTrue' 'DoUntilTrue' 'WhileWend' 'ForLoop' 'ForEach' 'ForNext' 'ForStepNext' 'If' 'IfThenColon' 'IfThenElseOneLine' 'IfThen' 'IfThenElse' 'IfThenElseIfElse' '(ElseIf ''case'')' '(ElseIf ''case'') +' 'IfThenElseIf' 'ElseIf' 'ElseIfBlock' 'ElseIfColon' '(  Expression ''ifMatch'' ?  ":" )' '(  Expression ''ifMatch'' ?  ":" )*' 'To' 'Label' 'LabelSub' 'Resume' 'ResumeLabel' 'ResumeNext' 'ResumeEmpty' 'Go' 'GoTo' 'GoToLabel' 'GoToLine' 'GoSub' 'GoSubLabel' 'GoSubLine' 'On' 'OnErrorGoTo' 'OnErrorResumeNext' 'OnExpressionGo' 'Error' 'With' 'Exits' 'ExitFunction' 'ExitSub' 'ExitDo' 'ExitFor' 'ExitProperty' 'E O F' 'error')
]

{ #category : #generated }
VBParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBModuleNode #VBModuleNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBIntegerLiteralNode #VBColorLiteralNode #VBDateLiteralNode #VBFloatLiteralNode #VBBooleanLiteralNode #VBStringLiteralNode #VBNullNode #VBGuidLiteralNode #OrderedCollection #OrderedCollection #Object #VBHashIdentifierNode #Object #VBHeadlessIdentifierNode #VBQualifiedIdentifierNode #VBHeaderNode #VBProgramNode #VBSetUpAssignationNode #VBModuleAttributeNode #VBConfigurationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #Object #VBBlockNode #OrderedCollection #OrderedCollection #Object #SmaCCToken #VBComplexTypeNode #Object #VBAsTypeNode #OrderedCollection #OrderedCollection #VBAsTypeAndNewNode #VBProgramNode #VBProgramNode #VBDefineTypeNode #OrderedCollection #OrderedCollection #VBTypeEntryNode #VBEventNode #VBDefineEnumNode #OrderedCollection #OrderedCollection #VBEnumEntryNode #Object #VBParameterListNode #OrderedCollection #OrderedCollection #VBParameterNode #OrderedCollection #OrderedCollection #VBExternalSubNode #VBExternalFunctionNode #VBProgramNode #SmaCCToken #VBFunctionDefinitionNode #VBSubDefinitionNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBProgramNode #VBModulePropertyNode #VBModuleConstantNode #VBDimVariableNode #VBReDimVariableNode #VBStaticVariableNode #VBVariableNode #VBModuleMultiplePropertiesNode #VBDimMultipleVariablesNode #VBReDimMultipleVariablesNode #VBStaticMultipleVariablesNode #VBVariableListNode #OrderedCollection #OrderedCollection #VBProgramNode #Object #Object #VBParentheseesExpressionNode #VBValueStatementListNode #OrderedCollection #OrderedCollection #Object #VBDictionaryAccessNode #VBMemberAccessNode #VBImplicitParenthesesLessCallNode #VBProcedureCallOrArrayAccessNode #VBArgumentNode #VBArgumentListNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #Object #VBProgramNode #VBExplicitCallNode #VBRaiseEventNode #VBProgramNode #VBNegatedOperationNode #VBPositiveOperationNode #VBNotOperationNode #Object #OrderedCollection #VBComparisonOperationNode #OrderedCollection #VBArithmeticOperationNode #OrderedCollection #VBArithmeticOperationNode #VBConcatenationOperationNode #VBAssignementOrEqualsNode #Object #VBProgramNode #VBAddressOfClauseNode #VBNewClauseNode #Object #VBProgramNode #VBProgramNode #VBInfinityLoopNode #VBWhileTrueNode #VBUntilTrueNode #VBDoWhileTrueNode #VBDoUntilTrueNode #VBWhileWendNode #VBProgramNode #VBForEachNode #VBForNextNode #VBForStepNextNode #VBProgramNode #VBIfThenColonNode #VBIfThenColonNode #VBIfThenElseNode #VBIfThenElseNode #VBIfThenElseIfElseNode #VBProgramNode #OrderedCollection #VBIfThenElseIfElseNode #VBProgramNode #VBElseIfBlockNode #VBElseIfColonNode #OrderedCollection #OrderedCollection #VBProgramNode #VBGoToLabelNode #VBGoSubLabelNode #Object #VBResumeLabelNode #VBResumeNextNode #SmaCCToken #VBProgramNode #VBProgramNode #VBGoToLabelNode #VBGoToLineNode #VBProgramNode #VBGoSubLabelNode #VBGoSubLineNode #VBProgramNode #VBOnErrorGoToNode #VBOnErrorResumeNextNode #VBOnExpressionGoNode #VBErrorNode #VBWithNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBParser class >> transitionTable [
^#(
#[1 0 9 0 34 0 13 0 35 0 17 0 44 0 21 0 47 0 25 0 49 0 29 0 56 0 33 0 59 0 109 0 63 0 41 0 64 0 109 0 66 0 49 0 83 0 109 0 88 0 57 0 89 0 109 0 90 0 65 0 91 0 69 0 96 0 73 0 99 0 77 0 103 0 81 0 106 0 85 0 130 0 89 0 150 0 105 0 151 0 105 0 153 0 105 0 154 0 105 0 158 0 109 0 164 0 105 0 172 0 105 0 173 0 105 0 177 0 105 0 178 0 105 0 189 0 105 0 190 0 105 0 191 0 141 0 192 0 105 0 193 0 105 0 194 0 105 0 195 0 105 0 196 0 105 0 197 0 105 0 198 0 105 0 199 0 105 0 200 0 105 0 201 0 105 0 202 0 105 0 203 0 105 0 205 0 105 0 206 0 105 0 207 0 105 0 208 0 105 0 212] 
#[1 0 209 0 11 0 213 0 100 0 225 0 124 0 221 0 125 0 225 0 145 0 225 0 146 0 225 0 147 0 225 0 148 0 225 0 149 0 245 0 152] 
#[1 0 6 0 11 0 6 0 100 0 6 0 124 0 6 0 125 0 6 0 127 0 249 0 133] 
#[1 0 209 0 11 0 213 0 100 0 253 0 124 0 221 0 125 0 253 0 145 0 253 0 146 0 253 0 147 0 253 0 148 0 253 0 149] 
#[1 1 1 0 64 1 5 0 99] 
#[1 0 209 0 11 1 9 0 27 0 213 0 100 1 13 0 124 0 221 0 125 1 13 0 145 1 13 0 146 1 13 0 147 1 13 0 148 1 13 0 149 1 17 0 204 1 21 0 209] 
#[1 0 209 0 11 0 213 0 100 1 25 0 124 0 221 0 125 1 25 0 145 1 25 0 146 1 25 0 147 1 25 0 148 1 25 0 149] 
#[1 0 209 0 11 0 213 0 100 1 29 0 124 0 221 0 125 1 29 0 145 1 29 0 146 1 29 0 147 1 29 0 148 1 29 0 149] 
#[0 0 10 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 100 0 103 0 124 0 125] 
#[1 0 209 0 11 0 213 0 100 1 33 0 124 0 221 0 125 1 33 0 145 1 33 0 146 1 33 0 147 1 33 0 148 1 33 0 149] 
#[0 0 14 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 100 0 103 0 124 0 125] 
#[1 1 37 0 43 1 41 0 61 1 45 0 88 1 49 0 119 1 53 0 135] 
#[0 0 18 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 100 0 103 0 124 0 125] 
#[1 1 57 0 65 1 61 0 73 1 65 0 94] 
#[0 0 22 0 11 0 27 0 44 0 47 0 56 0 59 0 64 0 89 0 96 0 99 0 100 0 103 0 124 0 125] 
#[1 0 209 0 11 1 9 0 27 1 69 0 87 0 213 0 100 1 13 0 124 0 221 0 125 1 13 0 145 1 13 0 146 1 13 0 147 1 13 0 148 1 13 0 149 1 73 0 204 1 77 0 209] 
#[1 0 209 0 11 1 9 0 27 0 26 0 64 0 26 0 89 0 26 0 99 0 213 0 100 1 13 0 124 0 221 0 125 1 13 0 145 1 13 0 146 1 13 0 147 1 13 0 148 1 13 0 149 1 81 0 204 1 85 0 209] 
#[1 0 209 0 11 0 213 0 100 1 89 0 124 0 221 0 125 1 89 0 145 1 89 0 146 1 89 0 147 1 89 0 148 1 89 0 149] 
#[1 0 209 0 11 0 213 0 100 1 93 0 124 0 221 0 125 1 93 0 145 1 93 0 146 1 93 0 147 1 93 0 148 1 93 0 149] 
#[1 1 97 0 120 1 101 0 138] 
#[0 0 0 1 48] 
#[1 0 6 0 34 0 6 0 35 0 6 0 44 0 6 0 47 0 6 0 49 0 6 0 56 0 6 0 59 0 6 0 63 0 6 0 64 0 6 0 66 0 6 0 83 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 96 0 6 0 99 0 6 0 103 0 6 0 127 1 105 0 133] 
#[0 0 30 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 0 34 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 0 38 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 0 42 0 34 0 42 0 35 0 42 0 44 0 42 0 47 0 42 0 49 0 42 0 56 0 42 0 59 0 42 0 63 0 42 0 64 0 42 0 66 0 42 0 83 0 42 0 88 0 42 0 89 0 42 0 90 0 42 0 91 0 42 0 96 0 42 0 99 0 42 0 103 0 42 0 127 1 109 0 132 0 42 1 48] 
#[1 0 209 0 11 1 9 0 27 1 113 0 44 1 117 0 47 1 121 0 56 1 125 0 59 1 129 0 64 1 133 0 89 1 149 0 96 1 141 0 99 0 213 0 100 1 145 0 103 1 13 0 124 0 221 0 125 1 13 0 145 1 13 0 146 1 13 0 147 1 13 0 148 1 13 0 149 1 149 0 192 1 153 0 204 1 157 0 209] 
#[0 0 46 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 0 50 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 54 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 58 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 62 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 0 66 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 0 70 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 1 161 0 64 1 165 0 89 1 169 0 99] 
#[0 0 74 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 0 78 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 0 82 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 0 86 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 0 90 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 0 94 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 0 98 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 106 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 118 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 122 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 126 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 130 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 134 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 0 209 0 11 0 213 0 100 1 173 0 124 0 221 0 125 1 173 0 145 1 173 0 146 1 173 0 147 1 173 0 148 1 173 0 149] 
#[0 0 138 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 142 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 146 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 1 177 0 11 1 181 0 19] 
#[0 0 150 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 154 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 158 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 162 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 166 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 0 209 0 11 0 213 0 100 0 225 0 124 0 221 0 125 1 185 0 127 0 225 0 145 0 225 0 146 0 225 0 147 0 225 0 148 0 225 0 149 1 189 0 152] 
#[1 1 177 0 11 1 193 0 19 1 197 0 33 1 209 0 167 1 209 0 170 1 209 0 171] 
#[1 0 209 0 11 0 213 0 100 1 213 0 124 0 221 0 125 1 213 0 145 1 213 0 146 1 213 0 147 1 213 0 148 1 213 0 149] 
#[1 0 209 0 11 0 213 0 100 1 217 0 124 0 221 0 125 1 217 0 145 1 217 0 146 1 217 0 147 1 217 0 148 1 217 0 149] 
#[1 0 209 0 11 0 213 0 100 1 221 0 124 0 221 0 125 1 221 0 145 1 221 0 146 1 221 0 147 1 221 0 148 1 221 0 149] 
#[1 0 170 0 5 0 170 0 8 0 170 0 9 0 170 0 10 1 177 0 11 0 170 0 22 0 170 0 23 0 170 0 25 0 170 0 26 1 197 0 33 0 170 0 34 0 170 0 35 0 170 0 44 0 170 0 47 0 170 0 49 0 170 0 50 0 170 0 53 0 170 0 54 0 170 0 55 0 170 0 56 0 170 0 59 0 170 0 60 0 170 0 62 0 170 0 63 0 170 0 64 0 170 0 66 0 170 0 67 0 170 0 68 0 170 0 69 0 170 0 73 0 170 0 77 0 170 0 79 0 170 0 80 0 170 0 82 0 170 0 83 0 170 0 88 0 170 0 89 0 170 0 90 0 170 0 91 0 170 0 92 0 170 0 93 0 170 0 94 0 170 0 96 0 170 0 99 0 170 0 100 0 170 0 103 0 170 0 107 0 170 0 108 0 170 0 109 0 170 0 111 0 170 0 117 0 170 0 118 0 170 0 119 0 170 0 120 0 170 0 121 0 170 0 122 0 170 0 123 0 170 0 124 0 170 0 125 0 170 0 127 1 225 0 167 1 225 0 170 1 225 0 171 0 170 1 48] 
#[1 0 7 0 5 0 7 0 8 0 178 0 9 0 7 0 10 0 7 0 11 0 7 0 22 0 7 0 23 0 7 0 25 0 7 0 26 0 7 0 34 0 7 0 35 0 7 0 44 0 7 0 47 0 7 0 49 0 7 0 50 0 7 0 53 0 7 0 54 0 7 0 55 0 7 0 56 0 7 0 59 0 7 0 60 0 7 0 62 0 7 0 63 0 7 0 64 0 7 0 66 0 7 0 67 0 7 0 68 0 7 0 69 0 7 0 73 0 7 0 77 0 7 0 79 0 7 0 80 0 7 0 82 0 7 0 83 0 7 0 88 0 7 0 89 0 7 0 90 0 7 0 91 0 7 0 92 0 7 0 93 0 7 0 94 0 7 0 96 0 7 0 99 0 7 0 100 0 7 0 103 0 7 0 107 0 7 0 108 0 7 0 109 0 7 0 111 0 7 0 117 0 7 0 118 0 7 0 119 0 7 0 120 0 7 0 121 0 7 0 122 0 7 0 123 0 7 0 124 0 7 0 125 0 7 0 127 1 229 0 211 0 7 1 48] 
#[0 0 182 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 1 177 0 11 0 186 0 55 0 186 0 100 0 186 0 124 0 186 0 125 0 186 0 127 1 233 0 180] 
#[1 1 237 0 5 1 177 0 11 1 241 0 183] 
#[1 1 237 0 5 1 177 0 11 1 245 0 183] 
#[1 1 249 0 36 1 253 0 45 2 1 0 100] 
#[0 0 190 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 2 5 0 78] 
#[0 0 194 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 198 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 0 209 0 11 0 213 0 100 2 9 0 124 0 221 0 125 2 9 0 145 2 9 0 146 2 9 0 147 2 9 0 148 2 9 0 149] 
#[1 0 209 0 11 0 213 0 100 2 13 0 124 0 221 0 125 2 13 0 145 2 13 0 146 2 13 0 147 2 13 0 148 2 13 0 149] 
#[1 0 209 0 11 0 213 0 100 2 17 0 124 0 221 0 125 2 17 0 145 2 17 0 146 2 17 0 147 2 17 0 148 2 17 0 149] 
#[1 0 209 0 11 1 9 0 27 0 213 0 100 1 13 0 124 0 221 0 125 1 13 0 145 1 13 0 146 1 13 0 147 1 13 0 148 1 13 0 149 2 21 0 204 2 25 0 209] 
#[1 0 11 0 5 0 11 0 8 0 178 0 9 0 11 0 10 0 11 0 11 0 11 0 22 0 11 0 23 0 11 0 25 0 11 0 26 0 11 0 34 0 11 0 35 0 11 0 44 0 11 0 47 0 11 0 49 0 11 0 50 0 11 0 53 0 11 0 54 0 11 0 55 0 11 0 56 0 11 0 59 0 11 0 60 0 11 0 62 0 11 0 63 0 11 0 64 0 11 0 66 0 11 0 67 0 11 0 68 0 11 0 69 0 11 0 73 0 11 0 77 0 11 0 79 0 11 0 80 0 11 0 82 0 11 0 83 0 11 0 88 0 11 0 89 0 11 0 90 0 11 0 91 0 11 0 92 0 11 0 93 0 11 0 94 0 11 0 96 0 11 0 99 0 11 0 100 0 11 0 103 0 11 0 107 0 11 0 108 0 11 0 109 0 11 0 111 0 11 0 117 0 11 0 118 0 11 0 119 0 11 0 120 0 11 0 121 0 11 0 122 0 11 0 123 0 11 0 124 0 11 0 125 0 11 0 127 1 229 0 211 0 11 1 48] 
#[0 0 206 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 0 15 0 5 0 15 0 8 0 178 0 9 0 15 0 10 0 15 0 11 0 15 0 22 0 15 0 23 0 15 0 25 0 15 0 26 0 15 0 34 0 15 0 35 0 15 0 44 0 15 0 47 0 15 0 49 0 15 0 50 0 15 0 53 0 15 0 54 0 15 0 55 0 15 0 56 0 15 0 59 0 15 0 60 0 15 0 62 0 15 0 63 0 15 0 64 0 15 0 66 0 15 0 67 0 15 0 68 0 15 0 69 0 15 0 73 0 15 0 77 0 15 0 79 0 15 0 80 0 15 0 82 0 15 0 83 0 15 0 88 0 15 0 89 0 15 0 90 0 15 0 91 0 15 0 92 0 15 0 93 0 15 0 94 0 15 0 96 0 15 0 99 0 15 0 100 0 15 0 103 0 15 0 107 0 15 0 108 0 15 0 109 0 15 0 111 0 15 0 117 0 15 0 118 0 15 0 119 0 15 0 120 0 15 0 121 0 15 0 122 0 15 0 123 0 15 0 124 0 15 0 125 0 15 0 127 1 229 0 211 0 15 1 48] 
#[0 0 214 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 2 29 0 133 2 33 0 183] 
#[1 1 177 0 11 0 218 0 55 0 218 0 100 0 218 0 124 0 218 0 125 0 218 0 127 2 37 0 175] 
#[0 0 222 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 41 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 0 226 0 34 0 226 0 35 2 41 0 41 0 226 0 44 0 226 0 47 0 226 0 49 0 226 0 56 0 226 0 59 0 226 0 63 0 226 0 64 0 226 0 66 0 226 0 83 0 226 0 88 0 226 0 89 0 226 0 90 0 226 0 91 0 226 0 96 0 226 0 99 0 226 0 103 0 226 0 127] 
#[1 0 9 0 34 0 13 0 35 0 17 0 44 0 21 0 47 0 25 0 49 0 29 0 56 0 33 0 59 0 109 0 63 0 41 0 64 0 109 0 66 0 49 0 83 0 109 0 88 0 57 0 89 0 109 0 90 0 65 0 91 0 69 0 96 0 73 0 99 0 77 0 103 1 185 0 127 2 45 0 151 2 45 0 153 2 45 0 154 2 45 0 158 0 109 0 164 2 45 0 172 2 45 0 173 2 45 0 177 2 45 0 178 2 45 0 189 2 45 0 190 2 45 0 191 0 141 0 192 2 45 0 193 2 45 0 194 2 45 0 195 2 45 0 196 2 45 0 197 2 45 0 198 2 45 0 199 2 45 0 200 2 45 0 201 2 45 0 202 2 45 0 203 2 45 0 205 2 45 0 206 2 45 0 207 2 45 0 208 2 45 0 212] 
#[1 0 6 0 34 0 6 0 35 0 6 0 44 0 6 0 47 0 6 0 49 0 6 0 56 0 6 0 59 0 6 0 63 0 6 0 64 0 6 0 66 0 6 0 83 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 96 0 6 0 99 0 6 0 103 0 6 0 127 2 49 0 131 2 53 0 133 0 6 1 48] 
#[1 0 209 0 11 0 213 0 100 2 57 0 124 0 221 0 125 2 57 0 145 2 57 0 146 2 57 0 147 2 57 0 148 2 57 0 149] 
#[1 2 61 0 64 2 65 0 99] 
#[1 0 209 0 11 0 213 0 100 2 69 0 124 0 221 0 125 2 69 0 145 2 69 0 146 2 69 0 147 2 69 0 148 2 69 0 149] 
#[1 0 209 0 11 0 213 0 100 2 73 0 124 0 221 0 125 2 73 0 145 2 73 0 146 2 73 0 147 2 73 0 148 2 73 0 149] 
#[1 0 209 0 11 0 213 0 100 2 77 0 124 0 221 0 125 2 77 0 145 2 77 0 146 2 77 0 147 2 77 0 148 2 77 0 149] 
#[1 2 81 0 65 2 85 0 73 2 89 0 94] 
#[0 0 26 0 64 0 89 0 99] 
#[1 0 209 0 11 0 213 0 100 2 93 0 124 0 221 0 125 2 93 0 145 2 93 0 146 2 93 0 147 2 93 0 148 2 93 0 149] 
#[1 0 209 0 11 0 213 0 100 2 97 0 124 0 221 0 125 2 97 0 145 2 97 0 146 2 97 0 147 2 97 0 148 2 97 0 149] 
#[1 2 101 0 64 2 105 0 89 2 109 0 99] 
#[1 0 19 0 5 0 19 0 8 0 178 0 9 0 19 0 10 0 19 0 11 0 19 0 22 0 19 0 23 0 19 0 25 0 19 0 26 0 19 0 34 0 19 0 35 0 19 0 44 0 19 0 47 0 19 0 49 0 19 0 50 0 19 0 53 0 19 0 54 0 19 0 55 0 19 0 56 0 19 0 59 0 19 0 60 0 19 0 62 0 19 0 63 0 19 0 64 0 19 0 66 0 19 0 67 0 19 0 68 0 19 0 69 0 19 0 73 0 19 0 77 0 19 0 79 0 19 0 80 0 19 0 82 0 19 0 83 0 19 0 88 0 19 0 89 0 19 0 90 0 19 0 91 0 19 0 92 0 19 0 93 0 19 0 94 0 19 0 96 0 19 0 99 0 19 0 100 0 19 0 103 0 19 0 107 0 19 0 108 0 19 0 109 0 19 0 111 0 19 0 117 0 19 0 118 0 19 0 119 0 19 0 120 0 19 0 121 0 19 0 122 0 19 0 123 0 19 0 124 0 19 0 125 0 19 0 127 1 229 0 211 0 19 1 48] 
#[0 0 234 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 0 209 0 11 0 213 0 100 2 113 0 124 0 221 0 125 2 113 0 145 2 113 0 146 2 113 0 147 2 113 0 148 2 113 0 149] 
#[1 2 117 0 65 2 121 0 73 2 125 0 94] 
#[1 0 209 0 11 0 213 0 100 2 129 0 124 0 221 0 125 2 129 0 145 2 129 0 146 2 129 0 147 2 129 0 148 2 129 0 149] 
#[0 0 238 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 133 0 124] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 2 249 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 2 249 0 134 2 249 0 135 2 249 0 136 2 249 0 137 2 249 0 138 2 249 0 139 2 249 0 140 2 249 0 141 2 249 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 2 249 0 213 2 249 0 214 2 249 0 215 2 249 0 219 2 249 0 220 2 249 0 221 2 249 0 222 2 249 0 223 2 249 0 230 2 249 0 231 2 249 0 232 2 249 0 233 2 249 0 234 2 249 0 235 2 249 0 236 2 249 0 237 2 249 0 238 2 249 0 240 2 249 0 242 2 249 0 244 2 249 0 245 2 249 0 246 2 249 0 247 2 249 0 248 2 249 0 249 2 249 0 250 2 249 1 42 2 249 1 43 2 249 1 44 2 249 1 45 2 249 1 46 2 249 1 47] 
#[0 0 242 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 0 246 0 55 0 246 0 127 3 117 0 156] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 3 121 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 3 121 0 134 3 121 0 135 3 121 0 136 3 121 0 137 3 121 0 138 3 121 0 139 3 121 0 140 3 121 0 141 3 121 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 3 121 0 213 3 121 0 214 3 121 0 215 3 121 0 219 3 121 0 220 3 121 0 221 3 121 0 222 3 121 0 223 3 121 0 230 3 121 0 231 3 121 0 232 3 121 0 233 3 121 0 234 3 121 0 235 3 121 0 236 3 121 0 237 3 121 0 238 3 121 0 240 3 121 0 242 3 121 0 244 3 121 0 245 3 121 0 246 3 121 0 247 3 121 0 248 3 121 0 249 3 121 0 250 3 121 1 42 3 121 1 43 3 121 1 44 3 121 1 45 3 121 1 46 3 121 1 47] 
#[1 0 209 0 11 3 125 0 25 3 185 0 37 3 185 0 39 3 185 0 42 3 185 0 46 3 185 0 51 3 185 0 71 3 185 0 76 3 185 0 81 3 185 0 95 3 185 0 98 0 213 0 100 3 169 0 105 3 173 0 124 0 221 0 125 3 173 0 145 3 173 0 146 3 173 0 147 3 173 0 148 3 173 0 149 3 185 0 163 3 185 0 165 3 185 0 166] 
#[0 0 250 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 0 254 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 3 189 0 19] 
#[1 1 177 0 11 3 193 0 74] 
#[1 1 177 0 11 3 197 0 74] 
#[1 1 2 0 5 1 2 0 8 1 2 0 9 1 2 0 10 1 177 0 11 1 2 0 22 1 2 0 23 1 2 0 25 1 2 0 26 1 197 0 33 1 2 0 34 1 2 0 35 1 2 0 44 1 2 0 47 1 2 0 49 1 2 0 50 1 2 0 53 1 2 0 54 1 2 0 55 1 2 0 56 1 2 0 59 1 2 0 60 1 2 0 62 1 2 0 63 1 2 0 64 1 2 0 66 1 2 0 67 1 2 0 68 1 2 0 69 1 2 0 73 1 2 0 77 1 2 0 79 1 2 0 80 1 2 0 82 1 2 0 83 1 2 0 88 1 2 0 89 1 2 0 90 1 2 0 91 1 2 0 92 1 2 0 93 1 2 0 94 1 2 0 96 1 2 0 99 1 2 0 100 1 2 0 103 1 2 0 107 1 2 0 108 1 2 0 109 1 2 0 111 1 2 0 117 1 2 0 118 1 2 0 119 1 2 0 120 1 2 0 121 1 2 0 122 1 2 0 123 1 2 0 124 1 2 0 125 1 2 0 127 3 201 0 167 3 201 0 170 3 201 0 171 1 2 1 48] 
#[0 1 6 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 1 10 0 5 1 10 0 8 3 205 0 9 1 10 0 10 1 10 0 11 1 10 0 22 1 10 0 23 1 10 0 25 1 10 0 26 1 10 0 34 1 10 0 35 1 10 0 44 1 10 0 47 1 10 0 49 1 10 0 50 1 10 0 53 1 10 0 54 1 10 0 55 1 10 0 56 1 10 0 59 1 10 0 60 1 10 0 62 1 10 0 63 1 10 0 64 1 10 0 66 1 10 0 67 1 10 0 68 1 10 0 69 1 10 0 73 1 10 0 77 1 10 0 79 1 10 0 80 1 10 0 82 1 10 0 83 1 10 0 88 1 10 0 89 1 10 0 90 1 10 0 91 1 10 0 92 1 10 0 93 1 10 0 94 1 10 0 96 1 10 0 99 1 10 0 100 1 10 0 103 1 10 0 107 1 10 0 108 1 10 0 109 1 10 0 111 1 10 0 117 1 10 0 118 1 10 0 119 1 10 0 120 1 10 0 121 1 10 0 122 1 10 0 123 1 10 0 124 1 10 0 125 1 10 0 127 3 209 0 210 1 10 1 48] 
#[1 0 6 0 11 0 6 0 55 0 6 0 100 0 6 0 124 0 6 0 125 0 6 0 127 3 213 0 133 3 217 0 179] 
#[1 3 221 0 6 0 209 0 11 3 225 0 38 3 245 0 40 3 233 0 84 3 237 0 86 0 213 0 100 3 241 0 124 0 221 0 125 3 241 0 145 3 241 0 146 3 241 0 147 3 241 0 148 3 241 0 149 3 245 0 182 3 249 0 186] 
#[0 1 14 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 3 253 0 133 4 1 0 167 4 1 0 170 4 1 0 171] 
#[0 1 18 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 1 22 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 1 26 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 1 30 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 4 5 0 133 4 9 0 167 4 9 0 170 4 9 0 171 4 13 0 183] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 4 17 0 133 4 21 0 183] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 4 25 0 133 4 29 0 183] 
#[1 0 23 0 5 0 23 0 8 0 178 0 9 0 23 0 10 0 23 0 11 0 23 0 22 0 23 0 23 0 23 0 25 0 23 0 26 0 23 0 34 0 23 0 35 0 23 0 44 0 23 0 47 0 23 0 49 0 23 0 50 0 23 0 53 0 23 0 54 0 23 0 55 0 23 0 56 0 23 0 59 0 23 0 60 0 23 0 62 0 23 0 63 0 23 0 64 0 23 0 66 0 23 0 67 0 23 0 68 0 23 0 69 0 23 0 73 0 23 0 77 0 23 0 79 0 23 0 80 0 23 0 82 0 23 0 83 0 23 0 88 0 23 0 89 0 23 0 90 0 23 0 91 0 23 0 92 0 23 0 93 0 23 0 94 0 23 0 96 0 23 0 99 0 23 0 100 0 23 0 103 0 23 0 107 0 23 0 108 0 23 0 109 0 23 0 111 0 23 0 117 0 23 0 118 0 23 0 119 0 23 0 120 0 23 0 121 0 23 0 122 0 23 0 123 0 23 0 124 0 23 0 125 0 23 0 127 1 229 0 211 0 23 1 48] 
#[0 1 38 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 4 85 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 5 9 0 133] 
#[1 0 6 0 11 0 6 0 55 0 6 0 100 0 6 0 124 0 6 0 125 0 6 0 127 5 13 0 133 5 17 0 174] 
#[0 1 42 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127] 
#[1 0 42 0 34 0 42 0 35 0 42 0 44 0 42 0 47 0 42 0 49 0 42 0 56 0 42 0 59 0 42 0 63 0 42 0 64 0 42 0 66 0 42 0 83 0 42 0 88 0 42 0 89 0 42 0 90 0 42 0 91 0 42 0 96 0 42 0 99 0 42 0 103 0 42 0 127 5 21 0 132 0 42 1 48] 
#[0 1 46 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 0 9 0 34 0 13 0 35 0 17 0 44 0 21 0 47 0 25 0 49 0 29 0 56 0 33 0 59 0 109 0 63 0 41 0 64 0 109 0 66 0 49 0 83 0 109 0 88 0 57 0 89 0 109 0 90 0 65 0 91 0 69 0 96 0 73 0 99 0 77 0 103 1 185 0 127 5 25 0 151 5 25 0 153 5 25 0 154 5 25 0 158 0 109 0 164 5 25 0 172 5 25 0 173 5 25 0 177 5 25 0 178 5 25 0 189 5 25 0 190 5 25 0 191 0 141 0 192 5 25 0 193 5 25 0 194 5 25 0 195 5 25 0 196 5 25 0 197 5 25 0 198 5 25 0 199 5 25 0 200 5 25 0 201 5 25 0 202 5 25 0 203 5 25 0 205 5 25 0 206 5 25 0 207 5 25 0 208 5 25 0 212 1 50 1 48] 
#[1 1 177 0 11 5 29 0 19 1 197 0 33 5 33 0 167 5 33 0 170 5 33 0 171] 
#[1 0 209 0 11 0 213 0 100 5 37 0 124 0 221 0 125 5 37 0 145 5 37 0 146 5 37 0 147 5 37 0 148 5 37 0 149] 
#[1 0 209 0 11 0 213 0 100 5 41 0 124 0 221 0 125 5 41 0 145 5 41 0 146 5 41 0 147 5 41 0 148 5 41 0 149] 
#[1 1 177 0 11 0 186 0 55 0 186 0 100 0 186 0 124 0 186 0 125 0 186 0 127 5 45 0 180] 
#[1 1 237 0 5 1 177 0 11 5 49 0 183] 
#[1 1 237 0 5 1 177 0 11 5 53 0 183] 
#[1 0 209 0 11 0 213 0 100 5 57 0 124 0 221 0 125 5 57 0 145 5 57 0 146 5 57 0 147 5 57 0 148 5 57 0 149] 
#[1 0 209 0 11 0 213 0 100 5 61 0 124 0 221 0 125 5 61 0 145 5 61 0 146 5 61 0 147 5 61 0 148 5 61 0 149] 
#[1 0 209 0 11 0 213 0 100 5 65 0 124 0 221 0 125 5 65 0 145 5 65 0 146 5 65 0 147 5 65 0 148 5 65 0 149] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 5 69 0 133 5 73 0 183] 
#[1 1 177 0 11 0 218 0 55 0 218 0 100 0 218 0 124 0 218 0 125 0 218 0 127 5 77 0 175] 
#[1 0 209 0 11 0 213 0 100 5 81 0 124 0 221 0 125 5 81 0 145 5 81 0 146 5 81 0 147 5 81 0 148 5 81 0 149] 
#[1 5 85 0 65 5 89 0 73 5 93 0 94] 
#[1 0 209 0 11 0 213 0 100 5 97 0 124 0 221 0 125 5 97 0 145 5 97 0 146 5 97 0 147 5 97 0 148 5 97 0 149] 
#[1 1 237 0 5 1 177 0 11 5 101 0 183] 
#[1 0 209 0 11 0 213 0 100 5 105 0 124 0 221 0 125 5 105 0 145 5 105 0 146 5 105 0 147 5 105 0 148 5 105 0 149] 
#[1 0 209 0 11 0 213 0 100 5 109 0 124 0 221 0 125 5 109 0 145 5 109 0 146 5 109 0 147 5 109 0 148 5 109 0 149] 
#[1 0 209 0 11 0 213 0 100 5 113 0 124 0 221 0 125 5 113 0 145 5 113 0 146 5 113 0 147 5 113 0 148 5 113 0 149] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 5 117 0 133 5 121 0 183] 
#[0 1 54 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 33 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 72 0 73 0 74 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 5 125 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 125 0 134 5 125 0 135 5 125 0 136 5 125 0 137 5 125 0 138 5 125 0 139 5 125 0 140 5 125 0 141 5 125 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 5 125 0 213 5 125 0 214 5 125 0 215 5 125 0 219 5 125 0 220 5 125 0 221 5 125 0 222 5 125 0 223 5 125 0 230 5 125 0 231 5 125 0 232 5 125 0 233 5 125 0 234 5 125 0 235 5 125 0 236 5 125 0 237 5 125 0 238 5 125 0 240 5 125 0 242 5 125 0 244 5 125 0 245 5 125 0 246 5 125 0 247 5 125 0 248 5 125 0 249 5 125 0 250 5 125 1 42 5 125 1 43 5 125 1 44 5 125 1 45 5 125 1 46 5 125 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 5 129 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 129 0 134 5 129 0 135 5 129 0 136 5 129 0 137 5 129 0 138 5 129 0 139 5 129 0 140 5 129 0 141 5 129 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 5 129 0 213 5 129 0 214 5 129 0 215 5 129 0 219 5 129 0 220 5 129 0 221 5 129 0 222 5 129 0 223 5 129 0 230 5 129 0 231 5 129 0 232 5 129 0 233 5 129 0 234 5 129 0 235 5 129 0 236 5 129 0 237 5 129 0 238 5 129 0 240 5 129 0 242 5 129 0 244 5 129 0 245 5 129 0 246 5 129 0 247 5 129 0 248 5 129 0 249 5 129 0 250 5 129 1 42 5 129 1 43 5 129 1 44 5 129 1 45 5 129 1 46 5 129 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 5 133 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 133 0 134 5 133 0 135 5 133 0 136 5 133 0 137 5 133 0 138 5 133 0 139 5 133 0 140 5 133 0 141 5 133 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 5 133 0 213 5 133 0 214 5 133 0 215 5 133 0 219 5 133 0 220 5 133 0 221 5 133 0 222 5 133 0 223 5 133 0 230 5 133 0 231 5 133 0 232 5 133 0 233 5 133 0 234 5 133 0 235 5 133 0 236 5 133 0 237 5 133 0 238 5 133 0 240 5 133 0 242 5 133 0 244 5 133 0 245 5 133 0 246 5 133 0 247 5 133 0 248 5 133 0 249 5 133 0 250 5 133 1 42 5 133 1 43 5 133 1 44 5 133 1 45 5 133 1 46 5 133 1 47] 
#[1 0 209 0 11 0 213 0 100 5 137 0 124 0 221 0 125 5 137 0 145 5 137 0 146 5 137 0 147 5 137 0 148 5 137 0 149] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 5 141 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 5 141 0 213 5 141 0 214 5 141 0 215 5 141 0 219 5 141 0 220 5 141 0 221 5 145 0 222 5 145 0 223 5 145 0 230 5 141 0 231 5 141 0 232 5 141 0 233 5 141 0 234 5 141 0 235 5 141 0 236 5 141 0 237 5 141 0 238 5 141 0 240 5 141 0 242 5 141 0 244 5 141 0 245 5 141 0 246 5 141 0 247 5 141 0 248 5 141 0 249 5 141 0 250 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45 5 141 1 46 5 141 1 47] 
#[1 0 209 0 11 0 213 0 100 5 149 0 124 0 221 0 125 5 149 0 145 5 149 0 146 5 149 0 147 5 149 0 148 5 149 0 149] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 5 141 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 5 141 0 213 5 141 0 214 5 141 0 215 5 141 0 219 5 141 0 220 5 141 0 221 5 153 0 222 5 153 0 223 5 153 0 230 5 141 0 231 5 141 0 232 5 141 0 233 5 141 0 234 5 141 0 235 5 141 0 236 5 141 0 237 5 141 0 238 5 141 0 240 5 141 0 242 5 141 0 244 5 141 0 245 5 141 0 246 5 141 0 247 5 141 0 248 5 141 0 249 5 141 0 250 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45 5 141 1 46 5 141 1 47] 
#[1 5 157 0 50 5 161 0 62 5 165 0 64 5 169 0 89 5 173 0 99] 
#[0 1 58 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 5 177 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 177 0 134 5 177 0 135 5 177 0 136 5 177 0 137 5 177 0 138 5 177 0 139 5 177 0 140 5 177 0 141 5 177 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 5 177 0 213 5 177 0 214 5 177 0 215 5 177 0 219 5 177 0 220 5 177 0 221 5 177 0 222 5 177 0 223 5 177 0 230 5 177 0 231 5 177 0 232 5 177 0 233 5 177 0 234 5 177 0 235 5 177 0 236 5 177 0 237 5 177 0 238 5 177 0 240 5 177 0 242 5 177 0 244 5 177 0 245 5 177 0 246 5 177 0 247 5 177 0 248 5 177 0 249 5 177 0 250 5 177 1 42 5 177 1 43 5 177 1 44 5 177 1 45 5 177 1 46 5 177 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 5 181 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 181 0 134 5 181 0 135 5 181 0 136 5 181 0 137 5 181 0 138 5 181 0 139 5 181 0 140 5 181 0 141 5 181 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 5 181 0 213 5 181 0 214 5 181 0 215 5 181 0 219 5 181 0 220 5 181 0 221 5 181 0 222 5 181 0 223 5 181 0 230 5 181 0 231 5 181 0 232 5 181 0 233 5 181 0 234 5 181 0 235 5 181 0 236 5 181 0 237 5 181 0 238 5 181 0 240 5 181 0 242 5 181 0 244 5 181 0 245 5 181 0 246 5 181 0 247 5 181 0 248 5 181 0 249 5 181 0 250 5 181 1 42 5 181 1 43 5 181 1 44 5 181 1 45 5 181 1 46 5 181 1 47] 
#[1 5 185 0 116 5 189 0 143] 
#[0 1 62 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 66 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 70 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 74 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 78 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 82 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 86 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 90 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 94 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 98 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 102 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 106 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 110 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 114 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 0 27 0 1 0 27 0 3 0 27 0 5 0 27 0 6 0 27 0 7 0 27 0 8 0 27 0 9 0 27 0 10 0 31 0 11 0 27 0 12 0 27 0 13 0 27 0 14 0 27 0 15 0 27 0 16 0 27 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 27 0 21 0 27 0 22 0 27 0 23 0 27 0 24 0 27 0 25 0 27 0 26 0 27 0 29 0 27 0 30 0 27 0 32 0 27 0 34 0 27 0 35 1 126 0 38 1 126 0 40 0 27 0 44 0 27 0 47 0 27 0 49 0 27 0 50 0 27 0 53 0 27 0 54 0 27 0 55 0 27 0 56 0 27 0 57 0 27 0 59 0 27 0 60 0 27 0 62 0 27 0 63 0 27 0 64 0 27 0 66 0 27 0 67 0 27 0 68 0 27 0 69 0 27 0 72 0 27 0 73 0 27 0 75 0 27 0 77 0 27 0 79 0 27 0 80 0 27 0 82 0 27 0 83 0 27 0 85 1 126 0 86 0 27 0 88 0 27 0 89 0 27 0 90 0 27 0 91 0 27 0 92 0 27 0 93 0 27 0 94 0 27 0 96 0 27 0 97 0 27 0 99 0 27 0 100 0 27 0 101 0 27 0 102 0 27 0 103 0 27 0 107 0 27 0 108 0 27 0 109 0 27 0 110 0 27 0 111 0 27 0 117 0 27 0 118 0 27 0 119 0 27 0 120 0 27 0 121 0 27 0 122 0 27 0 123 0 27 0 124 0 27 0 125 0 27 0 127 5 193 0 225 5 197 0 227 0 27 1 48] 
#[0 1 130 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 1 134 0 22 1 134 0 23 6 5 0 24 1 134 0 25 1 134 0 26 6 9 0 29 6 13 0 30 6 17 0 32 1 134 0 34 1 134 0 35 1 134 0 44 1 134 0 47 1 134 0 49 1 134 0 50 1 134 0 53 1 134 0 54 1 134 0 55 1 134 0 56 6 21 0 57 1 134 0 59 1 134 0 60 1 134 0 62 1 134 0 63 1 134 0 64 1 134 0 66 1 134 0 67 1 134 0 68 1 134 0 69 6 25 0 72 1 134 0 73 6 29 0 75 1 134 0 77 1 134 0 79 1 134 0 80 1 134 0 82 1 134 0 83 6 33 0 85 1 134 0 88 1 134 0 89 1 134 0 90 1 134 0 91 1 134 0 92 1 134 0 93 1 134 0 94 1 134 0 96 1 134 0 99 1 134 0 100 1 134 0 103 1 134 0 107 1 134 0 108 1 134 0 109 6 37 0 110 1 134 0 111 1 134 0 117 1 134 0 118 1 134 0 119 1 134 0 120 1 134 0 121 1 134 0 122 1 134 0 123 1 134 0 124 1 134 0 125 1 134 0 127 6 41 0 239 6 45 0 241 6 49 0 243 1 134 1 48] 
#[0 1 138 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 142 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 146 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 150 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 154 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 158 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 162 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 166 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 170 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 174 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 178 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 182 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 186 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 190 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 194 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 198 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 202 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 206 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 210 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 214 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 218 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 222 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 226 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 230 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 234 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 238 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 242 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 246 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 250 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 1 254 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 6 53 0 55 6 57 0 127 6 61 0 155 6 65 0 157] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 2 2 0 22 2 2 0 23 6 5 0 24 2 2 0 25 2 2 0 26 6 9 0 29 6 13 0 30 6 17 0 32 2 2 0 34 2 2 0 35 2 2 0 44 2 2 0 47 2 2 0 49 2 2 0 50 2 2 0 53 2 2 0 54 2 2 0 55 2 2 0 56 6 21 0 57 2 2 0 59 2 2 0 60 2 2 0 62 2 2 0 63 2 2 0 64 2 2 0 66 2 2 0 67 2 2 0 68 2 2 0 69 6 25 0 72 2 2 0 73 6 29 0 75 2 2 0 77 2 2 0 79 2 2 0 80 2 2 0 82 2 2 0 83 6 33 0 85 2 2 0 88 2 2 0 89 2 2 0 90 2 2 0 91 2 2 0 92 2 2 0 93 2 2 0 94 2 2 0 96 2 2 0 99 2 2 0 100 2 2 0 103 2 2 0 107 2 2 0 108 2 2 0 109 6 37 0 110 2 2 0 111 2 2 0 117 2 2 0 118 2 2 0 119 2 2 0 120 2 2 0 121 2 2 0 122 2 2 0 123 2 2 0 124 2 2 0 125 2 2 0 127 6 41 0 239 6 45 0 241 6 49 0 243 2 2 1 48] 
#[1 0 209 0 11 6 69 0 37 6 69 0 39 6 69 0 42 6 69 0 46 6 69 0 51 6 69 0 71 6 69 0 76 6 69 0 81 6 69 0 95 6 69 0 98 0 213 0 100 3 169 0 105 3 173 0 124 0 221 0 125 3 173 0 145 3 173 0 146 3 173 0 147 3 173 0 148 3 173 0 149 6 69 0 163 6 69 0 165 6 69 0 166] 
#[0 2 6 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 10 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 14 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 18 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 22 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 26 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 30 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 34 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 38 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 42 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 46 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 2 50 0 5 2 50 0 6 2 50 0 7 2 50 0 8 2 50 0 9 2 50 0 10 1 177 0 11 2 50 0 19 2 50 0 22 2 50 0 23 2 50 0 25 2 50 0 26 2 50 0 34 2 50 0 35 2 50 0 44 2 50 0 47 2 50 0 49 2 50 0 50 2 50 0 53 2 50 0 54 2 50 0 55 2 50 0 56 2 50 0 59 2 50 0 60 2 50 0 62 2 50 0 63 2 50 0 64 2 50 0 66 2 50 0 67 2 50 0 68 2 50 0 69 2 50 0 73 2 50 0 77 2 50 0 79 2 50 0 80 2 50 0 82 2 50 0 83 2 50 0 88 2 50 0 89 2 50 0 90 2 50 0 91 2 50 0 92 2 50 0 93 2 50 0 94 2 50 0 96 2 50 0 99 2 50 0 100 2 50 0 103 2 50 0 107 2 50 0 108 2 50 0 109 2 50 0 111 2 50 0 117 2 50 0 118 2 50 0 119 2 50 0 120 2 50 0 121 2 50 0 122 2 50 0 123 2 50 0 124 2 50 0 125 2 50 0 127 2 50 1 48] 
#[0 2 54 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 58 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 6 73 0 5 2 62 0 6 2 62 0 7 2 62 0 8 2 62 0 9 2 62 0 10 2 62 0 11 2 62 0 19 2 62 0 22 2 62 0 23 2 62 0 25 2 62 0 26 2 62 0 34 2 62 0 35 2 62 0 44 2 62 0 47 2 62 0 49 2 62 0 50 2 62 0 53 2 62 0 54 2 62 0 55 2 62 0 56 2 62 0 59 2 62 0 60 2 62 0 62 2 62 0 63 2 62 0 64 2 62 0 66 2 62 0 67 2 62 0 68 2 62 0 69 2 62 0 73 2 62 0 77 2 62 0 79 2 62 0 80 2 62 0 82 2 62 0 83 2 62 0 88 2 62 0 89 2 62 0 90 2 62 0 91 2 62 0 92 2 62 0 93 2 62 0 94 2 62 0 96 2 62 0 99 2 62 0 100 2 62 0 103 2 62 0 107 2 62 0 108 2 62 0 109 2 62 0 111 2 62 0 117 2 62 0 118 2 62 0 119 2 62 0 120 2 62 0 121 2 62 0 122 2 62 0 123 2 62 0 124 2 62 0 125 2 62 0 127 2 62 1 48] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 6 77 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 6 77 0 134 6 77 0 135 6 77 0 136 6 77 0 137 6 77 0 138 6 77 0 139 6 77 0 140 6 77 0 141 6 77 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 6 77 0 213 6 77 0 214 6 77 0 215 6 77 0 219 6 77 0 220 6 77 0 221 6 77 0 222 6 77 0 223 6 77 0 230 6 77 0 231 6 77 0 232 6 77 0 233 6 77 0 234 6 77 0 235 6 77 0 236 6 77 0 237 6 77 0 238 6 77 0 240 6 77 0 242 6 77 0 244 6 77 0 245 6 77 0 246 6 77 0 247 6 77 0 248 6 77 0 249 6 77 0 250 6 77 1 42 6 77 1 43 6 77 1 44 6 77 1 45 6 77 1 46 6 77 1 47] 
#[1 2 197 0 122 6 81 0 140] 
#[1 2 197 0 122 6 85 0 140] 
#[0 2 66 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 0 209 0 11 1 9 0 27 0 213 0 100 1 13 0 124 0 221 0 125 1 13 0 145 1 13 0 146 1 13 0 147 1 13 0 148 1 13 0 149 6 89 0 204] 
#[0 2 70 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 0 209 0 11 6 93 0 55 0 213 0 100 6 97 0 124 0 221 0 125 1 185 0 127 6 97 0 145 6 97 0 146 6 97 0 147 6 97 0 148 6 97 0 149 6 101 0 181] 
#[0 2 74 0 11 0 55 0 100 0 124 0 125 0 127] 
#[0 2 78 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 33 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 2 82 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 86 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 2 86 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 86 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 0 209 0 11 3 225 0 38 6 113 0 40 6 105 0 86 0 213 0 100 6 109 0 124 0 221 0 125 6 109 0 145 6 109 0 146 6 109 0 147 6 109 0 148 6 109 0 149 6 113 0 182] 
#[1 0 209 0 11 0 213 0 100 6 117 0 124 0 221 0 125 6 117 0 145 6 117 0 146 6 117 0 147 6 117 0 148 6 117 0 149] 
#[1 2 90 0 6 2 90 0 9 1 177 0 11 6 121 0 19 1 197 0 33 6 125 0 167 6 125 0 170 6 125 0 171 6 129 0 187 6 133 0 188] 
#[1 0 209 0 11 6 137 0 86 0 213 0 100 6 141 0 124 0 221 0 125 6 141 0 145 6 141 0 146 6 141 0 147 6 141 0 148 6 141 0 149] 
#[1 2 94 0 6 2 94 0 9 6 145 0 185] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 6 149 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 153 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 6 157 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 161 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 165 0 133 6 169 0 167 6 169 0 170 6 169 0 171] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 6 173 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 177 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 6 181 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 185 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 77 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 6 189 0 104 0 35 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 6 197 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 6 201 0 52 2 165 0 60 6 205 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 6 205 0 134 6 205 0 135 6 205 0 136 6 205 0 137 6 205 0 138 6 205 0 139 6 205 0 140 6 205 0 141 6 205 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 6 205 0 213 6 205 0 214 6 205 0 215 6 205 0 219 6 205 0 220 6 205 0 221 6 205 0 222 6 205 0 223 6 205 0 230 6 205 0 231 6 205 0 232 6 205 0 233 6 205 0 234 6 205 0 235 6 205 0 236 6 205 0 237 6 205 0 238 6 205 0 240 6 205 0 242 6 205 0 244 6 205 0 245 6 205 0 246 6 205 0 247 6 205 0 248 6 205 0 249 6 205 0 250 6 205 1 42 6 205 1 43 6 205 1 44 6 205 1 45 6 205 1 46 6 205 1 47] 
#[1 0 209 0 11 0 213 0 100 1 49 0 119 6 213 0 124 0 221 0 125 6 209 0 135 6 213 0 145 6 213 0 146 6 213 0 147 6 213 0 148 6 213 0 149] 
#[1 0 209 0 11 0 213 0 100 1 49 0 119 6 221 0 124 0 221 0 125 6 217 0 135 6 221 0 145 6 221 0 146 6 221 0 147 6 221 0 148 6 221 0 149] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 6 225 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 6 225 0 134 6 225 0 135 6 225 0 136 6 225 0 137 6 225 0 138 6 225 0 139 6 225 0 140 6 225 0 141 6 225 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 6 225 0 213 6 225 0 214 6 225 0 215 6 225 0 219 6 225 0 220 6 225 0 221 6 225 0 222 6 225 0 223 6 225 0 230 6 225 0 231 6 225 0 232 6 225 0 233 6 225 0 234 6 225 0 235 6 225 0 236 6 225 0 237 6 225 0 238 6 225 0 240 6 225 0 242 6 225 0 244 6 225 0 245 6 225 0 246 6 225 0 247 6 225 0 248 6 225 0 249 6 225 0 250 6 225 1 42 6 225 1 43 6 225 1 44 6 225 1 45 6 225 1 46 6 225 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 6 229 0 58 2 165 0 60 6 233 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 6 233 0 134 6 233 0 135 6 233 0 136 6 233 0 137 6 233 0 138 6 233 0 139 6 233 0 140 6 233 0 141 6 233 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 6 233 0 213 6 233 0 214 6 233 0 215 6 233 0 219 6 233 0 220 6 233 0 221 6 233 0 222 6 233 0 223 6 233 0 230 6 233 0 231 6 233 0 232 6 233 0 233 6 233 0 234 6 233 0 235 6 233 0 236 6 233 0 237 6 233 0 238 6 233 0 240 6 233 0 242 6 233 0 244 6 233 0 245 6 233 0 246 6 233 0 247 6 233 0 248 6 233 0 249 6 233 0 250 6 233 1 42 6 233 1 43 6 233 1 44 6 233 1 45 6 233 1 46 6 233 1 47] 
#[1 2 98 0 5 2 98 0 8 2 98 0 10 0 209 0 11 2 98 0 22 2 98 0 23 2 98 0 25 2 98 0 26 2 98 0 34 2 98 0 44 2 98 0 49 2 98 0 50 2 98 0 53 2 98 0 54 2 98 0 55 2 98 0 56 2 98 0 59 2 98 0 60 2 98 0 62 2 98 0 63 2 98 0 66 2 98 0 67 2 98 0 68 2 98 0 69 2 98 0 73 2 98 0 77 0 39 0 79 2 98 0 80 2 98 0 82 2 98 0 88 2 98 0 90 2 98 0 91 2 98 0 92 2 98 0 93 2 98 0 94 2 98 0 96 0 43 0 100 2 98 0 103 2 98 0 107 2 98 0 108 2 98 0 109 2 98 0 111 2 98 0 117 2 98 0 118 2 98 0 119 2 98 0 120 2 98 0 121 2 98 0 122 2 98 0 123 0 47 0 124 0 51 0 125 2 98 0 127 6 241 0 145 6 241 0 146 6 241 0 147 6 241 0 148 6 241 0 149] 
#[1 0 209 0 11 1 9 0 27 0 213 0 100 1 13 0 124 0 221 0 125 1 13 0 145 1 13 0 146 1 13 0 147 1 13 0 148 1 13 0 149 1 81 0 204 1 85 0 209] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 6 245 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 6 245 0 213 5 141 0 214 5 141 0 215 6 245 0 219 6 245 0 220 6 245 0 221 6 245 0 222 6 245 0 223 6 245 0 230 6 245 0 231 6 245 0 232 6 245 0 233 6 245 0 234 6 245 0 235 6 245 0 236 6 245 0 237 6 245 0 238 6 245 0 240 6 245 0 242 6 245 0 244 6 245 0 245 6 245 0 246 6 245 0 247 6 245 0 248 6 245 0 249 6 245 0 250 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45 5 141 1 46 5 141 1 47] 
#[1 0 209 0 11 0 213 0 100 6 249 0 124 0 221 0 125 6 249 0 145 6 249 0 146 6 249 0 147 6 249 0 148 6 249 0 149] 
#[1 0 27 0 1 0 27 0 3 0 27 0 5 0 27 0 7 0 27 0 8 1 126 0 9 0 27 0 10 0 31 0 11 0 27 0 12 6 253 0 13 0 27 0 14 1 126 0 15 0 27 0 16 0 27 0 17 0 27 0 18 0 27 0 19 0 27 0 20 0 27 0 21 0 27 0 22 0 27 0 23 0 27 0 24 0 27 0 25 0 27 0 26 0 27 0 29 0 27 0 30 0 27 0 32 0 27 0 34 1 126 0 38 1 126 0 40 0 27 0 44 0 27 0 49 0 27 0 50 0 27 0 53 0 27 0 54 0 27 0 55 0 27 0 56 0 27 0 57 0 27 0 59 0 27 0 60 0 27 0 62 0 27 0 63 0 27 0 66 0 27 0 67 0 27 0 68 0 27 0 69 0 27 0 72 0 27 0 73 0 27 0 75 0 27 0 77 0 27 0 79 0 27 0 80 0 27 0 82 0 27 0 85 1 126 0 86 0 27 0 88 0 27 0 90 0 27 0 91 0 27 0 92 0 27 0 93 0 27 0 94 0 27 0 96 0 27 0 100 0 27 0 103 0 27 0 107 0 27 0 108 0 27 0 109 0 27 0 110 0 27 0 111 0 27 0 117 0 27 0 118 0 27 0 119 0 27 0 120 0 27 0 121 0 27 0 122 0 27 0 123 0 27 0 124 0 27 0 125 0 27 0 127 5 193 0 225 5 197 0 227] 
#[0 2 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 106 0 5 2 106 0 8 2 106 0 10 2 106 0 11 2 106 0 22 2 106 0 23 2 106 0 25 2 106 0 26 2 106 0 34 2 106 0 44 2 106 0 49 2 106 0 50 2 106 0 53 2 106 0 54 2 106 0 55 2 106 0 56 2 106 0 59 2 106 0 60 2 106 0 62 2 106 0 63 2 106 0 66 2 106 0 67 2 106 0 68 2 106 0 69 2 106 0 73 2 106 0 77 2 106 0 79 2 106 0 80 2 106 0 82 2 106 0 88 2 106 0 90 2 106 0 91 2 106 0 92 2 106 0 93 2 106 0 94 2 106 0 96 2 106 0 100 2 106 0 103 2 106 0 107 2 106 0 108 2 106 0 109 2 106 0 111 2 106 0 117 2 106 0 118 2 106 0 119 2 106 0 120 2 106 0 121 2 106 0 122 2 106 0 123 2 106 0 124 2 106 0 125 2 106 0 127 7 1 0 162] 
#[0 7 5 0 55] 
#[1 0 209 0 11 1 9 0 27 1 113 0 44 1 121 0 56 1 125 0 59 0 213 0 100 1 145 0 103 1 13 0 124 0 221 0 125 1 13 0 145 1 13 0 146 1 13 0 147 1 13 0 148 1 13 0 149 1 153 0 204 1 157 0 209] 
#[0 2 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 2 118 0 22 2 118 0 23 6 5 0 24 2 118 0 25 2 118 0 26 6 9 0 29 6 13 0 30 6 17 0 32 2 118 0 34 2 118 0 44 2 118 0 49 2 118 0 50 2 118 0 53 2 118 0 54 2 118 0 55 2 118 0 56 6 21 0 57 2 118 0 59 2 118 0 60 2 118 0 62 2 118 0 63 2 118 0 66 2 118 0 67 2 118 0 68 2 118 0 69 6 25 0 72 2 118 0 73 6 29 0 75 2 118 0 77 2 118 0 79 2 118 0 80 2 118 0 82 6 33 0 85 2 118 0 88 2 118 0 90 2 118 0 91 2 118 0 92 2 118 0 93 2 118 0 94 2 118 0 96 2 118 0 100 2 118 0 103 2 118 0 107 2 118 0 108 2 118 0 109 6 37 0 110 2 118 0 111 2 118 0 117 2 118 0 118 2 118 0 119 2 118 0 120 2 118 0 121 2 118 0 122 2 118 0 123 2 118 0 124 2 118 0 125 2 118 0 127 6 41 0 239 6 45 0 241 6 49 0 243] 
#[0 2 122 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 126 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 130 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 134 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 138 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 142 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 146 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 150 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 154 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 158 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 162 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 166 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 170 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 174 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 178 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 182 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 186 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 190 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 194 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 198 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 202 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 0 55 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 214 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 218 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 222 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 226 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 230 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 234 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 238 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 242 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 246 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 250 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 2 254 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 3 2 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 3 6 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 3 10 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 3 14 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 3 18 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 3 22 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 1 234 0 1 1 234 0 3 0 59 0 5 1 234 0 7 0 59 0 8 0 59 0 10 0 59 0 11 1 234 0 12 1 234 0 14 1 234 0 16 1 234 0 17 1 234 0 18 1 234 0 19 1 234 0 20 1 234 0 21 0 59 0 22 0 59 0 23 1 234 0 24 0 59 0 25 0 59 0 26 1 234 0 29 1 234 0 30 1 234 0 32 0 59 0 34 0 59 0 44 0 59 0 49 0 59 0 50 0 59 0 53 0 59 0 54 0 59 0 55 0 59 0 56 1 234 0 57 0 59 0 59 0 59 0 60 0 59 0 62 0 59 0 63 0 59 0 66 0 59 0 67 0 59 0 68 0 59 0 69 1 234 0 72 0 59 0 73 1 234 0 75 0 59 0 77 0 59 0 79 0 59 0 80 0 59 0 82 1 234 0 85 0 59 0 88 0 59 0 90 0 59 0 91 0 59 0 92 0 59 0 93 0 59 0 94 0 59 0 96 0 59 0 100 0 59 0 103 0 59 0 107 0 59 0 108 0 59 0 109 1 234 0 110 0 59 0 111 0 59 0 117 0 59 0 118 0 59 0 119 0 59 0 120 0 59 0 121 0 59 0 122 0 59 0 123 0 59 0 124 0 59 0 125 0 59 0 127] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 7 9 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 209 0 11 7 13 0 55 0 213 0 100 7 17 0 124 0 221 0 125 1 185 0 127 7 17 0 145 7 17 0 146 7 17 0 147 7 17 0 148 7 17 0 149 7 21 0 176] 
#[0 3 30 0 11 0 55 0 100 0 124 0 125 0 127] 
#[1 0 6 0 34 0 6 0 35 0 6 0 44 0 6 0 47 0 6 0 49 0 6 0 56 0 6 0 59 0 6 0 63 0 6 0 64 0 6 0 66 0 6 0 83 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 96 0 6 0 99 0 6 0 103 0 6 0 127 2 49 0 131 7 25 0 133 0 6 1 48] 
#[0 3 34 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 7 29 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 7 29 0 134 7 29 0 135 7 29 0 136 7 29 0 137 7 29 0 138 7 29 0 139 7 29 0 140 7 29 0 141 7 29 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 7 29 0 213 7 29 0 214 7 29 0 215 7 29 0 219 7 29 0 220 7 29 0 221 7 29 0 222 7 29 0 223 7 29 0 230 7 29 0 231 7 29 0 232 7 29 0 233 7 29 0 234 7 29 0 235 7 29 0 236 7 29 0 237 7 29 0 238 7 29 0 240 7 29 0 242 7 29 0 244 7 29 0 245 7 29 0 246 7 29 0 247 7 29 0 248 7 29 0 249 7 29 0 250 7 29 1 42 7 29 1 43 7 29 1 44 7 29 1 45 7 29 1 46 7 29 1 47] 
#[0 7 33 0 19] 
#[1 1 177 0 11 7 37 0 74] 
#[1 1 177 0 11 7 41 0 74] 
#[1 0 6 0 11 0 6 0 55 0 6 0 100 0 6 0 124 0 6 0 125 0 6 0 127 7 45 0 133 3 217 0 179] 
#[0 3 38 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 49 0 133 7 53 0 167 7 53 0 170 7 53 0 171] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 57 0 133 7 61 0 167 7 61 0 170 7 61 0 171 7 65 0 183] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 69 0 133 7 73 0 183] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 77 0 133 7 81 0 183] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 7 85 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 89 0 133] 
#[1 0 6 0 11 0 6 0 55 0 6 0 100 0 6 0 124 0 6 0 125 0 6 0 127 7 93 0 133 5 17 0 174] 
#[1 1 237 0 5 1 177 0 11 7 97 0 183] 
#[1 0 209 0 11 0 213 0 100 7 101 0 124 0 221 0 125 7 101 0 145 7 101 0 146 7 101 0 147 7 101 0 148 7 101 0 149] 
#[1 0 209 0 11 0 213 0 100 7 105 0 124 0 221 0 125 7 105 0 145 7 105 0 146 7 105 0 147 7 105 0 148 7 105 0 149] 
#[1 0 209 0 11 0 213 0 100 7 109 0 124 0 221 0 125 7 109 0 145 7 109 0 146 7 109 0 147 7 109 0 148 7 109 0 149] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 113 0 133 7 117 0 183] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 121 0 133 7 125 0 167 7 125 0 170 7 125 0 171] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 129 0 133 7 133 0 167 7 133 0 170 7 133 0 171 7 137 0 183] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 141 0 133 7 145 0 183] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 149 0 133 7 153 0 183] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 7 157 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 7 161 0 133] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 7 165 0 6 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 6 5 0 24 6 9 0 29 6 13 0 30 6 17 0 32 6 21 0 57 6 25 0 72 6 29 0 75 6 33 0 85 6 37 0 110 6 41 0 239 6 45 0 241 6 49 0 243] 
#[1 5 201 0 1 0 63 0 3 5 209 0 5 3 42 0 6 5 213 0 7 3 42 0 8 3 42 0 9 3 42 0 10 5 225 0 11 5 229 0 12 3 42 0 13 0 67 0 14 3 42 0 15 3 42 0 16 3 42 0 17 3 42 0 18 3 42 0 19 3 42 0 20 3 42 0 21 3 42 0 22 3 42 0 23 6 5 0 24 3 42 0 25 3 42 0 26 0 71 0 29 6 13 0 30 3 42 0 32 3 42 0 34 3 42 0 35 3 42 0 44 3 42 0 47 3 42 0 49 3 42 0 50 3 42 0 53 3 42 0 54 3 42 0 55 3 42 0 56 3 42 0 57 3 42 0 59 3 42 0 60 3 42 0 62 3 42 0 63 3 42 0 64 3 42 0 66 3 42 0 67 3 42 0 68 3 42 0 69 3 42 0 72 3 42 0 73 3 42 0 75 3 42 0 77 3 42 0 79 3 42 0 80 3 42 0 82 3 42 0 83 3 42 0 85 3 42 0 88 3 42 0 89 3 42 0 90 3 42 0 91 3 42 0 92 3 42 0 93 3 42 0 94 3 42 0 96 3 42 0 97 3 42 0 99 3 42 0 100 3 42 0 101 3 42 0 102 3 42 0 103 3 42 0 107 3 42 0 108 3 42 0 109 3 42 0 110 3 42 0 111 3 42 0 117 3 42 0 118 3 42 0 119 3 42 0 120 3 42 0 121 3 42 0 122 3 42 0 123 3 42 0 124 3 42 0 125 3 42 0 127 6 41 0 239 6 45 0 241 6 49 0 243 3 42 1 48] 
#[1 5 201 0 1 0 75 0 3 5 209 0 5 3 46 0 6 5 213 0 7 3 46 0 8 3 46 0 9 3 46 0 10 5 225 0 11 5 229 0 12 3 46 0 13 0 79 0 14 3 46 0 15 3 46 0 16 3 46 0 17 3 46 0 18 3 46 0 19 3 46 0 20 3 46 0 21 3 46 0 22 3 46 0 23 6 5 0 24 3 46 0 25 3 46 0 26 0 83 0 29 6 13 0 30 3 46 0 32 3 46 0 34 3 46 0 35 3 46 0 44 3 46 0 47 3 46 0 49 3 46 0 50 3 46 0 53 3 46 0 54 3 46 0 55 3 46 0 56 3 46 0 57 3 46 0 59 3 46 0 60 3 46 0 62 3 46 0 63 3 46 0 64 3 46 0 66 3 46 0 67 3 46 0 68 3 46 0 69 3 46 0 72 3 46 0 73 3 46 0 75 3 46 0 77 3 46 0 79 3 46 0 80 3 46 0 82 3 46 0 83 3 46 0 85 3 46 0 88 3 46 0 89 3 46 0 90 3 46 0 91 3 46 0 92 3 46 0 93 3 46 0 94 3 46 0 96 3 46 0 97 3 46 0 99 3 46 0 100 3 46 0 101 3 46 0 102 3 46 0 103 3 46 0 107 3 46 0 108 3 46 0 109 3 46 0 110 3 46 0 111 3 46 0 117 3 46 0 118 3 46 0 119 3 46 0 120 3 46 0 121 3 46 0 122 3 46 0 123 3 46 0 124 3 46 0 125 3 46 0 127 6 41 0 239 6 45 0 241 6 49 0 243 3 46 1 48] 
#[1 3 50 0 1 3 50 0 3 3 50 0 5 3 50 0 6 3 50 0 7 3 50 0 8 3 50 0 9 3 50 0 10 1 177 0 11 3 50 0 12 3 50 0 13 3 50 0 14 3 50 0 15 3 50 0 16 3 50 0 17 3 50 0 18 3 50 0 19 3 50 0 20 3 50 0 21 3 50 0 22 3 50 0 23 3 50 0 24 3 50 0 25 3 50 0 26 3 50 0 29 3 50 0 30 3 50 0 32 3 50 0 34 3 50 0 35 3 50 0 44 3 50 0 47 3 50 0 49 3 50 0 50 3 50 0 53 3 50 0 54 3 50 0 55 3 50 0 56 3 50 0 57 3 50 0 59 3 50 0 60 3 50 0 62 3 50 0 63 3 50 0 64 3 50 0 66 3 50 0 67 3 50 0 68 3 50 0 69 3 50 0 72 3 50 0 73 3 50 0 75 3 50 0 77 3 50 0 79 3 50 0 80 3 50 0 82 3 50 0 83 3 50 0 85 3 50 0 88 3 50 0 89 3 50 0 90 3 50 0 91 3 50 0 92 3 50 0 93 3 50 0 94 3 50 0 96 3 50 0 97 3 50 0 99 3 50 0 100 3 50 0 101 3 50 0 102 3 50 0 103 3 50 0 107 3 50 0 108 3 50 0 109 3 50 0 110 3 50 0 111 3 50 0 117 3 50 0 118 3 50 0 119 3 50 0 120 3 50 0 121 3 50 0 122 3 50 0 123 3 50 0 124 3 50 0 125 3 50 0 127 3 50 1 48] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 6 5 0 24 6 9 0 29 6 13 0 30 6 17 0 32 6 21 0 57 6 25 0 72 6 29 0 75 6 33 0 85 6 37 0 110 6 41 0 239 6 45 0 241 6 49 0 243] 
#[1 0 87 0 1 0 87 0 3 0 87 0 5 3 54 0 6 0 87 0 7 0 87 0 8 3 54 0 9 0 87 0 10 0 87 0 11 0 87 0 12 3 54 0 13 0 87 0 14 3 54 0 15 0 87 0 16 0 87 0 17 0 87 0 18 0 87 0 19 0 87 0 20 0 87 0 21 3 54 0 22 3 54 0 23 0 87 0 24 3 54 0 25 3 54 0 26 0 87 0 29 0 87 0 30 0 87 0 32 3 54 0 34 3 54 0 35 3 54 0 44 3 54 0 47 3 54 0 49 3 54 0 50 3 54 0 53 3 54 0 54 3 54 0 55 3 54 0 56 0 87 0 57 3 54 0 59 3 54 0 60 3 54 0 62 3 54 0 63 3 54 0 64 3 54 0 66 3 54 0 67 3 54 0 68 3 54 0 69 0 87 0 72 3 54 0 73 0 87 0 75 3 54 0 77 3 54 0 79 3 54 0 80 3 54 0 82 3 54 0 83 0 87 0 85 3 54 0 88 3 54 0 89 3 54 0 90 3 54 0 91 3 54 0 92 3 54 0 93 3 54 0 94 3 54 0 96 3 54 0 97 3 54 0 99 3 54 0 100 3 54 0 101 3 54 0 102 3 54 0 103 3 54 0 107 3 54 0 108 3 54 0 109 0 87 0 110 3 54 0 111 3 54 0 117 3 54 0 118 3 54 0 119 3 54 0 120 3 54 0 121 3 54 0 122 3 54 0 123 3 54 0 124 3 54 0 125 3 54 0 127 3 54 1 48] 
#[1 3 58 0 1 3 58 0 3 3 58 0 5 3 58 0 6 3 58 0 7 3 58 0 8 3 58 0 9 3 58 0 10 1 177 0 11 3 58 0 12 3 58 0 13 3 58 0 14 3 58 0 15 3 58 0 16 3 58 0 17 3 58 0 18 3 58 0 19 3 58 0 20 3 58 0 21 3 58 0 22 3 58 0 23 3 58 0 24 3 58 0 25 3 58 0 26 3 58 0 29 3 58 0 30 3 58 0 32 3 58 0 34 3 58 0 35 3 58 0 44 3 58 0 47 3 58 0 49 3 58 0 50 3 58 0 53 3 58 0 54 3 58 0 55 3 58 0 56 3 58 0 57 3 58 0 59 3 58 0 60 3 58 0 62 3 58 0 63 3 58 0 64 3 58 0 66 3 58 0 67 3 58 0 68 3 58 0 69 3 58 0 72 3 58 0 73 3 58 0 75 3 58 0 77 3 58 0 79 3 58 0 80 3 58 0 82 3 58 0 83 3 58 0 85 3 58 0 88 3 58 0 89 3 58 0 90 3 58 0 91 3 58 0 92 3 58 0 93 3 58 0 94 3 58 0 96 3 58 0 97 3 58 0 99 3 58 0 100 3 58 0 101 3 58 0 102 3 58 0 103 3 58 0 107 3 58 0 108 3 58 0 109 3 58 0 110 3 58 0 111 3 58 0 117 3 58 0 118 3 58 0 119 3 58 0 120 3 58 0 121 3 58 0 122 3 58 0 123 3 58 0 124 3 58 0 125 3 58 0 127 3 58 1 48] 
#[1 0 91 0 1 0 91 0 3 0 91 0 5 3 62 0 6 0 91 0 7 0 91 0 8 3 62 0 9 0 91 0 10 0 91 0 11 0 91 0 12 3 62 0 13 0 91 0 14 3 62 0 15 0 91 0 16 0 91 0 17 0 91 0 18 0 91 0 19 0 91 0 20 0 91 0 21 3 62 0 22 3 62 0 23 0 91 0 24 3 62 0 25 3 62 0 26 0 91 0 29 0 91 0 30 0 91 0 32 3 62 0 34 3 62 0 35 3 62 0 44 3 62 0 47 3 62 0 49 3 62 0 50 3 62 0 53 3 62 0 54 3 62 0 55 3 62 0 56 0 91 0 57 3 62 0 59 3 62 0 60 3 62 0 62 3 62 0 63 3 62 0 64 3 62 0 66 3 62 0 67 3 62 0 68 3 62 0 69 0 91 0 72 3 62 0 73 0 91 0 75 3 62 0 77 3 62 0 79 3 62 0 80 3 62 0 82 3 62 0 83 0 91 0 85 3 62 0 88 3 62 0 89 3 62 0 90 3 62 0 91 3 62 0 92 3 62 0 93 3 62 0 94 3 62 0 96 3 62 0 97 3 62 0 99 3 62 0 100 3 62 0 101 3 62 0 102 3 62 0 103 3 62 0 107 3 62 0 108 3 62 0 109 0 91 0 110 3 62 0 111 3 62 0 117 3 62 0 118 3 62 0 119 3 62 0 120 3 62 0 121 3 62 0 122 3 62 0 123 3 62 0 124 3 62 0 125 3 62 0 127 3 62 1 48] 
#[0 3 66 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 3 70 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 3 74 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 3 78 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 3 82 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 5 201 0 1 0 95 0 3 5 209 0 5 3 86 0 6 5 213 0 7 5 217 0 8 3 86 0 9 5 221 0 10 5 225 0 11 5 229 0 12 3 86 0 13 0 99 0 14 3 86 0 15 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 3 86 0 22 3 86 0 23 6 5 0 24 3 86 0 25 3 86 0 26 0 103 0 29 6 13 0 30 6 17 0 32 3 86 0 34 3 86 0 35 3 86 0 44 3 86 0 47 3 86 0 49 3 86 0 50 3 86 0 53 3 86 0 54 3 86 0 55 3 86 0 56 6 21 0 57 3 86 0 59 3 86 0 60 3 86 0 62 3 86 0 63 3 86 0 64 3 86 0 66 3 86 0 67 3 86 0 68 3 86 0 69 6 25 0 72 3 86 0 73 6 29 0 75 3 86 0 77 3 86 0 79 3 86 0 80 3 86 0 82 3 86 0 83 6 33 0 85 3 86 0 88 3 86 0 89 3 86 0 90 3 86 0 91 3 86 0 92 3 86 0 93 3 86 0 94 3 86 0 96 3 86 0 97 3 86 0 99 3 86 0 100 3 86 0 101 3 86 0 102 3 86 0 103 3 86 0 107 3 86 0 108 3 86 0 109 6 37 0 110 3 86 0 111 3 86 0 117 3 86 0 118 3 86 0 119 3 86 0 120 3 86 0 121 3 86 0 122 3 86 0 123 3 86 0 124 3 86 0 125 3 86 0 127 6 41 0 239 6 45 0 241 6 49 0 243 3 86 1 48] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 7 169 0 19 5 253 0 20 6 1 0 21 6 5 0 24 6 9 0 29 6 13 0 30 6 17 0 32 6 21 0 57 6 25 0 72 6 29 0 75 6 33 0 85 6 37 0 110 6 41 0 239 6 45 0 241 6 49 0 243] 
#[0 3 90 0 10 0 116] 
#[1 7 173 0 10 7 177 0 116] 
#[0 3 94 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 3 98 0 1 3 98 0 3 2 137 0 5 3 98 0 6 3 98 0 7 2 141 0 8 7 181 0 9 2 145 0 10 0 209 0 11 3 98 0 12 3 98 0 13 3 98 0 14 0 107 0 15 3 98 0 16 3 98 0 17 3 98 0 18 3 98 0 19 3 98 0 20 3 98 0 21 0 111 0 22 0 115 0 23 3 98 0 24 0 119 0 25 0 123 0 26 3 98 0 29 3 98 0 30 3 98 0 32 3 98 0 34 3 98 0 35 3 225 0 38 7 193 0 40 3 98 0 44 3 98 0 47 3 98 0 49 3 98 0 50 3 98 0 53 3 98 0 54 3 98 0 55 3 98 0 56 3 98 0 57 3 98 0 59 0 127 0 60 3 98 0 62 3 98 0 63 3 98 0 64 3 98 0 66 3 98 0 67 3 98 0 68 3 98 0 69 3 98 0 72 0 131 0 73 3 98 0 75 3 98 0 77 3 98 0 79 0 135 0 80 3 98 0 82 3 98 0 83 3 98 0 85 7 189 0 86 3 98 0 88 3 98 0 89 3 98 0 90 3 98 0 91 3 98 0 92 3 98 0 93 0 139 0 94 3 98 0 96 3 98 0 97 3 98 0 99 0 143 0 100 3 98 0 101 3 98 0 102 3 98 0 103 3 98 0 107 3 98 0 108 3 98 0 109 3 98 0 110 0 147 0 111 0 151 0 117 0 155 0 118 0 159 0 119 0 163 0 120 0 167 0 121 0 171 0 122 0 175 0 123 0 179 0 124 0 183 0 125 3 98 0 127 7 197 0 134 7 197 0 135 7 197 0 136 7 197 0 137 7 197 0 138 7 197 0 139 7 197 0 140 7 197 0 141 7 197 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 7 193 0 182 7 197 0 213 7 197 0 214 7 197 0 215 7 197 0 219 7 197 0 220 7 197 0 221 7 197 0 222 7 197 0 223 7 201 0 224 7 205 0 226 7 209 0 229 7 197 0 230 7 197 0 231 7 197 0 232 7 197 0 233 7 197 0 234 7 197 0 235 7 197 0 236 7 197 0 237 7 197 0 238 7 197 0 240 7 197 0 242 7 197 0 244 7 197 0 245 7 197 0 246 7 197 0 247 7 197 0 248 7 197 0 249 7 197 0 250 7 197 1 42 7 197 1 43 7 197 1 44 7 197 1 45 7 197 1 46 7 197 1 47 3 98 1 48] 
#[1 0 209 0 11 0 213 0 100 7 213 0 124 0 221 0 125 7 213 0 145 7 213 0 146 7 213 0 147 7 213 0 148 7 213 0 149] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 7 217 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 7 217 0 134 7 217 0 135 7 217 0 136 7 217 0 137 7 217 0 138 7 217 0 139 7 217 0 140 7 217 0 141 7 217 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 7 217 0 213 7 217 0 214 7 217 0 215 7 217 0 219 7 217 0 220 7 217 0 221 7 217 0 222 7 217 0 223 7 217 0 230 7 217 0 231 7 217 0 232 7 217 0 233 7 217 0 234 7 217 0 235 7 217 0 236 7 217 0 237 7 217 0 238 7 217 0 240 7 217 0 242 7 217 0 244 7 217 0 245 7 217 0 246 7 217 0 247 7 217 0 248 7 217 0 249 7 217 0 250 7 217 1 42 7 217 1 43 7 217 1 44 7 217 1 45 7 217 1 46 7 217 1 47] 
#[1 1 126 0 5 1 126 0 6 1 126 0 8 1 126 0 9 1 126 0 10 1 126 0 11 1 126 0 15 1 126 0 22 1 126 0 23 1 126 0 25 1 126 0 26 1 126 0 38 1 126 0 40 1 126 0 60 1 126 0 73 1 126 0 80 1 126 0 86 1 126 0 94 1 126 0 100 1 126 0 111 1 126 0 117 1 126 0 118 1 126 0 119 1 126 0 120 1 126 0 121 1 126 0 122 1 126 0 123 1 126 0 124 1 126 0 125 7 221 0 225 5 197 0 227] 
#[0 3 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 106 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 0 209 0 11 0 213 0 100 7 225 0 124 0 221 0 125 7 225 0 145 7 225 0 146 7 225 0 147 7 225 0 148 7 225 0 149] 
#[0 3 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 7 229 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 7 229 0 134 7 229 0 135 7 229 0 136 7 229 0 137 7 229 0 138 7 229 0 139 7 229 0 140 7 229 0 141 7 229 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 7 229 0 213 7 229 0 214 7 229 0 215 7 229 0 219 7 229 0 220 7 229 0 221 7 229 0 222 7 229 0 223 7 229 0 230 7 229 0 231 7 229 0 232 7 229 0 233 7 229 0 234 7 229 0 235 7 229 0 236 7 229 0 237 7 229 0 238 7 229 0 240 7 229 0 242 7 229 0 244 7 229 0 245 7 229 0 246 7 229 0 247 7 229 0 248 7 229 0 249 7 229 0 250 7 229 1 42 7 229 1 43 7 229 1 44 7 229 1 45 7 229 1 46 7 229 1 47] 
#[0 3 118 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 122 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 126 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 7 233 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 7 233 0 134 7 233 0 135 7 233 0 136 7 233 0 137 7 233 0 138 7 233 0 139 7 233 0 140 7 233 0 141 7 233 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 7 233 0 213 7 233 0 214 7 233 0 215 7 233 0 219 7 233 0 220 7 233 0 221 7 233 0 222 7 233 0 223 7 233 0 230 7 233 0 231 7 233 0 232 7 233 0 233 7 233 0 234 7 233 0 235 7 233 0 236 7 233 0 237 7 233 0 238 7 233 0 240 7 233 0 242 7 233 0 244 7 233 0 245 7 233 0 246 7 233 0 247 7 233 0 248 7 233 0 249 7 233 0 250 7 233 1 42 7 233 1 43 7 233 1 44 7 233 1 45 7 233 1 46 7 233 1 47] 
#[0 3 130 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 134 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 138 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 142 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 146 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 150 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 154 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 158 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 162 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 166 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 3 170 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 7 237 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 7 237 0 134 7 237 0 135 7 237 0 136 7 237 0 137 7 237 0 138 7 237 0 139 7 237 0 140 7 237 0 141 7 237 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 7 237 0 213 7 237 0 214 7 237 0 215 7 237 0 219 7 237 0 220 7 237 0 221 7 237 0 222 7 237 0 223 7 237 0 230 7 237 0 231 7 237 0 232 7 237 0 233 7 237 0 234 7 237 0 235 7 237 0 236 7 237 0 237 7 237 0 238 7 237 0 240 7 237 0 242 7 237 0 244 7 237 0 245 7 237 0 246 7 237 0 247 7 237 0 248 7 237 0 249 7 237 0 250 7 237 1 42 7 237 1 43 7 237 1 44 7 237 1 45 7 237 1 46 7 237 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 7 241 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 7 241 0 134 7 241 0 135 7 241 0 136 7 241 0 137 7 241 0 138 7 241 0 139 7 241 0 140 7 241 0 141 7 241 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 7 241 0 213 7 241 0 214 7 241 0 215 7 241 0 219 7 241 0 220 7 241 0 221 7 241 0 222 7 241 0 223 7 241 0 230 7 241 0 231 7 241 0 232 7 241 0 233 7 241 0 234 7 241 0 235 7 241 0 236 7 241 0 237 7 241 0 238 7 241 0 240 7 241 0 242 7 241 0 244 7 241 0 245 7 241 0 246 7 241 0 247 7 241 0 248 7 241 0 249 7 241 0 250 7 241 1 42 7 241 1 43 7 241 1 44 7 241 1 45 7 241 1 46 7 241 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 7 245 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 7 245 0 134 7 245 0 135 7 245 0 136 7 245 0 137 7 245 0 138 7 245 0 139 7 245 0 140 7 245 0 141 7 245 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 7 245 0 213 7 245 0 214 7 245 0 215 7 245 0 219 7 245 0 220 7 245 0 221 7 245 0 222 7 245 0 223 7 245 0 230 7 245 0 231 7 245 0 232 7 245 0 233 7 245 0 234 7 245 0 235 7 245 0 236 7 245 0 237 7 245 0 238 7 245 0 240 7 245 0 242 7 245 0 244 7 245 0 245 7 245 0 246 7 245 0 247 7 245 0 248 7 245 0 249 7 245 0 250 7 245 1 42 7 245 1 43 7 245 1 44 7 245 1 45 7 245 1 46 7 245 1 47] 
#[0 3 174 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 3 178 0 11 0 100 0 124 0 125 0 127] 
#[0 3 182 0 55 0 127] 
#[1 0 209 0 11 0 213 0 100 0 225 0 124 0 221 0 125 7 249 0 127 0 225 0 145 0 225 0 146 0 225 0 147 0 225 0 148 0 225 0 149 7 253 0 152] 
#[1 8 1 0 5 3 186 0 6 3 186 0 7 3 186 0 8 3 186 0 9 3 186 0 10 3 186 0 11 3 186 0 19 3 186 0 22 3 186 0 23 3 186 0 25 3 186 0 26 3 186 0 34 3 186 0 35 3 186 0 44 3 186 0 47 3 186 0 49 3 186 0 50 3 186 0 53 3 186 0 54 3 186 0 55 3 186 0 56 3 186 0 59 3 186 0 60 3 186 0 62 3 186 0 63 3 186 0 64 3 186 0 66 3 186 0 67 3 186 0 68 3 186 0 69 3 186 0 73 3 186 0 77 3 186 0 79 3 186 0 80 3 186 0 82 3 186 0 83 3 186 0 88 3 186 0 89 3 186 0 90 3 186 0 91 3 186 0 92 3 186 0 93 3 186 0 94 3 186 0 96 3 186 0 99 3 186 0 100 3 186 0 103 3 186 0 107 3 186 0 108 3 186 0 109 3 186 0 111 3 186 0 117 3 186 0 118 3 186 0 119 3 186 0 120 3 186 0 121 3 186 0 122 3 186 0 123 3 186 0 124 3 186 0 125 3 186 0 127 3 186 1 48] 
#[1 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 8 5 0 134 8 5 0 135 8 5 0 136 8 5 0 137 8 5 0 138 8 5 0 139 8 5 0 140 8 5 0 141 8 5 0 142] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 3 190 0 22 3 190 0 23 6 5 0 24 3 190 0 25 3 190 0 26 6 9 0 29 6 13 0 30 6 17 0 32 3 190 0 34 3 190 0 35 3 190 0 44 3 190 0 47 3 190 0 49 3 190 0 50 3 190 0 53 3 190 0 54 3 190 0 55 3 190 0 56 6 21 0 57 3 190 0 59 3 190 0 60 3 190 0 62 3 190 0 63 3 190 0 64 3 190 0 66 3 190 0 67 3 190 0 68 3 190 0 69 6 25 0 72 3 190 0 73 6 29 0 75 3 190 0 77 3 190 0 79 3 190 0 80 3 190 0 82 3 190 0 83 6 33 0 85 3 190 0 88 3 190 0 89 3 190 0 90 3 190 0 91 3 190 0 92 3 190 0 93 3 190 0 94 3 190 0 96 3 190 0 99 3 190 0 100 3 190 0 103 3 190 0 107 3 190 0 108 3 190 0 109 6 37 0 110 3 190 0 111 3 190 0 117 3 190 0 118 3 190 0 119 3 190 0 120 3 190 0 121 3 190 0 122 3 190 0 123 3 190 0 124 3 190 0 125 3 190 0 127 6 41 0 239 6 45 0 241 6 49 0 243 3 190 1 48] 
#[1 1 237 0 5 8 9 0 31 8 13 0 183] 
#[1 1 237 0 5 8 17 0 31 8 21 0 183] 
#[0 3 194 0 5 0 8 0 9 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 8 25 0 56] 
#[1 1 177 0 11 8 29 0 19 3 198 0 55 3 198 0 100 3 198 0 124 3 198 0 125 3 198 0 127] 
#[0 3 202 0 11 0 55 0 100 0 124 0 125 0 127] 
#[1 0 209 0 11 0 213 0 100 8 33 0 124 0 221 0 125 8 33 0 145 8 33 0 146 8 33 0 147 8 33 0 148 8 33 0 149] 
#[1 2 90 0 6 2 90 0 9 1 177 0 11 6 121 0 19 1 197 0 33 8 37 0 167 8 37 0 170 8 37 0 171 6 129 0 187 8 41 0 188] 
#[1 0 209 0 11 8 45 0 86 0 213 0 100 8 49 0 124 0 221 0 125 8 49 0 145 8 49 0 146 8 49 0 147 8 49 0 148 8 49 0 149] 
#[1 2 90 0 6 2 90 0 9 1 177 0 11 6 121 0 19 1 197 0 33 8 53 0 167 8 53 0 170 8 53 0 171 6 129 0 187 8 57 0 188] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 8 61 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 8 61 0 134 8 61 0 135 8 61 0 136 8 61 0 137 8 61 0 138 8 61 0 139 8 61 0 140 8 61 0 141 8 61 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 8 61 0 213 8 61 0 214 8 61 0 215 8 61 0 219 8 61 0 220 8 61 0 221 8 61 0 222 8 61 0 223 8 61 0 230 8 61 0 231 8 61 0 232 8 61 0 233 8 61 0 234 8 61 0 235 8 61 0 236 8 61 0 237 8 61 0 238 8 61 0 240 8 61 0 242 8 61 0 244 8 61 0 245 8 61 0 246 8 61 0 247 8 61 0 248 8 61 0 249 8 61 0 250 8 61 1 42 8 61 1 43 8 61 1 44 8 61 1 45 8 61 1 46 8 61 1 47] 
#[1 2 90 0 6 2 90 0 9 6 121 0 19 6 129 0 187 8 65 0 188] 
#[0 3 206 0 6 0 9] 
#[0 3 210 0 6 0 9] 
#[1 0 209 0 11 0 213 0 100 8 69 0 124 0 221 0 125 8 69 0 145 8 69 0 146 8 69 0 147 8 69 0 148 8 69 0 149] 
#[1 2 90 0 6 2 90 0 9 1 177 0 11 6 121 0 19 1 197 0 33 8 73 0 167 8 73 0 170 8 73 0 171 6 129 0 187 8 77 0 188] 
#[1 8 81 0 6 8 85 0 9 8 89 0 184] 
#[0 8 93 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 8 97 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 8 101 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 8 105 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 8 109 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 113 0 133] 
#[0 8 117 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 8 121 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 8 125 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 8 129 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 8 133 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 8 133 0 213 5 141 0 214 5 141 0 215 8 133 0 219 8 133 0 220 8 133 0 221 8 133 0 222 8 133 0 223 8 133 0 230 8 133 0 231 8 133 0 232 8 133 0 233 8 133 0 234 8 133 0 235 8 133 0 236 8 133 0 237 8 133 0 238 8 133 0 240 8 133 0 242 8 133 0 244 8 133 0 245 8 133 0 246 8 133 0 247 8 133 0 248 8 133 0 249 8 133 0 250 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45 5 141 1 46 5 141 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 8 137 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 8 137 0 213 5 141 0 214 5 141 0 215 8 137 0 219 8 137 0 220 8 137 0 221 8 137 0 222 8 137 0 223 8 137 0 230 8 137 0 231 8 137 0 232 8 137 0 233 8 137 0 234 8 137 0 235 8 137 0 236 8 137 0 237 8 137 0 238 8 137 0 240 8 137 0 242 8 137 0 244 8 137 0 245 8 137 0 246 8 137 0 247 8 137 0 248 8 137 0 249 8 137 0 250 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45 5 141 1 46 5 141 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 0 6 0 77 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 8 141 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 8 145 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 209 0 11 0 213 0 100 8 149 0 124 0 221 0 125 8 149 0 145 8 149 0 146 8 149 0 147 8 149 0 148 8 149 0 149] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 8 153 0 19 5 253 0 20 6 1 0 21 6 5 0 24 6 9 0 29 6 13 0 30 6 17 0 32 6 21 0 57 6 25 0 72 6 29 0 75 6 33 0 85 6 37 0 110 6 41 0 239 6 45 0 241 6 49 0 243] 
#[0 3 214 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 3 218 0 5 3 218 0 8 3 218 0 10 1 177 0 11 3 218 0 22 3 218 0 23 3 218 0 25 3 218 0 26 3 218 0 34 3 218 0 44 3 218 0 49 3 218 0 50 3 218 0 53 3 218 0 54 3 218 0 55 3 218 0 56 3 218 0 59 3 218 0 60 3 218 0 62 3 218 0 63 3 218 0 66 3 218 0 67 3 218 0 68 3 218 0 69 3 218 0 73 3 218 0 77 3 218 0 79 3 218 0 80 3 218 0 82 3 218 0 88 3 218 0 90 3 218 0 91 3 218 0 92 3 218 0 93 3 218 0 94 3 218 0 96 3 218 0 100 3 218 0 103 3 218 0 107 3 218 0 108 3 218 0 109 3 218 0 111 3 218 0 117 3 218 0 118 3 218 0 119 3 218 0 120 3 218 0 121 3 218 0 122 3 218 0 123 3 218 0 124 3 218 0 125 3 218 0 127] 
#[0 3 222 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 3 226 0 5 3 226 0 8 3 226 0 10 1 177 0 11 3 226 0 22 3 226 0 23 3 226 0 25 3 226 0 26 3 226 0 34 3 226 0 44 3 226 0 49 3 226 0 50 3 226 0 53 3 226 0 54 3 226 0 55 3 226 0 56 3 226 0 59 3 226 0 60 3 226 0 62 3 226 0 63 3 226 0 66 3 226 0 67 3 226 0 68 3 226 0 69 3 226 0 73 3 226 0 77 3 226 0 79 3 226 0 80 3 226 0 82 3 226 0 88 3 226 0 90 3 226 0 91 3 226 0 92 3 226 0 93 3 226 0 94 3 226 0 96 3 226 0 100 3 226 0 103 3 226 0 107 3 226 0 108 3 226 0 109 3 226 0 111 3 226 0 117 3 226 0 118 3 226 0 119 3 226 0 120 3 226 0 121 3 226 0 122 3 226 0 123 3 226 0 124 3 226 0 125 3 226 0 127] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 6 5 0 24 6 9 0 29 6 13 0 30 6 17 0 32 6 21 0 57 6 25 0 72 6 29 0 75 6 33 0 85 8 157 0 101 6 37 0 110 6 41 0 239 6 45 0 241 6 49 0 243] 
#[1 4 45 0 68 8 161 0 92 8 165 1 30 8 165 1 31 8 165 1 32] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 6 5 0 24 6 9 0 29 6 13 0 30 6 17 0 32 6 21 0 57 4 41 0 67 4 45 0 68 6 25 0 72 6 29 0 75 6 33 0 85 6 37 0 110 6 41 0 239 6 45 0 241 6 49 0 243 8 169 1 29 8 169 1 30 8 169 1 31 8 169 1 32 8 169 1 33 8 169 1 34 8 169 1 35] 
#[0 3 230 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 3 234 0 5 3 234 0 8 3 234 0 10 1 177 0 11 3 234 0 22 3 234 0 23 3 234 0 25 3 234 0 26 3 234 0 34 3 234 0 44 3 234 0 49 3 234 0 50 3 234 0 53 3 234 0 54 3 234 0 55 3 234 0 56 3 234 0 59 3 234 0 60 3 234 0 62 3 234 0 63 3 234 0 66 3 234 0 67 3 234 0 68 3 234 0 69 3 234 0 73 3 234 0 77 3 234 0 79 3 234 0 80 3 234 0 82 3 234 0 88 3 234 0 90 3 234 0 91 3 234 0 92 3 234 0 93 3 234 0 94 3 234 0 96 3 234 0 100 3 234 0 103 3 234 0 107 3 234 0 108 3 234 0 109 3 234 0 111 3 234 0 117 3 234 0 118 3 234 0 119 3 234 0 120 3 234 0 121 3 234 0 122 3 234 0 123 3 234 0 124 3 234 0 125 3 234 0 127] 
#[1 1 130 0 1 1 130 0 3 0 195 0 5 1 130 0 7 0 195 0 8 0 195 0 10 0 195 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 0 6 0 22 0 6 0 23 1 130 0 24 0 6 0 25 0 6 0 26 1 130 0 29 1 130 0 30 1 130 0 32 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 1 130 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 130 0 72 0 6 0 73 1 130 0 75 0 6 0 80 0 6 0 82 1 130 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 107 0 6 0 108 0 6 0 109 1 130 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 173 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 177 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 0 199 0 22 0 203 0 23 0 207 0 25 0 211 0 26 0 215 0 34 0 219 0 44 0 223 0 49 0 227 0 50 3 238 0 53 3 238 0 54 3 238 0 55 0 231 0 56 0 235 0 59 0 239 0 60 0 243 0 62 0 247 0 63 0 251 0 66 0 255 0 67 1 3 0 68 1 7 0 69 1 11 0 73 3 238 0 77 3 238 0 79 1 15 0 80 1 19 0 82 1 23 0 88 1 27 0 90 1 31 0 91 1 35 0 92 1 39 0 93 1 43 0 94 1 47 0 96 1 51 0 100 1 55 0 103 3 238 0 107 1 59 0 108 1 63 0 109 1 67 0 111 1 71 0 117 1 75 0 118 1 79 0 119 1 83 0 120 1 87 0 121 1 91 0 122 1 95 0 123 1 99 0 124 1 103 0 125 3 238 0 127 4 101 0 134 8 185 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 8 189 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 3 242 0 53 3 242 0 54 3 242 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 3 242 0 77 3 242 0 79 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 3 242 0 93 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 3 242 0 107 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 1 107 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 1 107 0 127 8 193 0 133 8 197 0 161] 
#[0 8 201 0 99] 
#[0 8 205 0 55] 
#[0 8 209 0 103] 
#[1 1 177 0 11 1 197 0 33 8 213 0 167 8 213 0 170 8 213 0 171] 
#[0 3 246 0 11 0 55 0 100 0 124 0 125 0 127] 
#[1 0 9 0 34 0 13 0 35 0 17 0 44 0 21 0 47 0 25 0 49 0 29 0 56 0 33 0 59 0 109 0 63 0 41 0 64 0 109 0 66 0 49 0 83 0 109 0 88 0 57 0 89 0 109 0 90 0 65 0 91 0 69 0 96 0 73 0 99 0 77 0 103 1 185 0 127 5 25 0 151 5 25 0 153 5 25 0 154 5 25 0 158 0 109 0 164 5 25 0 172 5 25 0 173 5 25 0 177 5 25 0 178 5 25 0 189 5 25 0 190 5 25 0 191 0 141 0 192 5 25 0 193 5 25 0 194 5 25 0 195 5 25 0 196 5 25 0 197 5 25 0 198 5 25 0 199 5 25 0 200 5 25 0 201 5 25 0 202 5 25 0 203 5 25 0 205 5 25 0 206 5 25 0 207 5 25 0 208 5 25 0 212 3 250 1 48] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 3 254 0 22 3 254 0 23 6 5 0 24 3 254 0 25 3 254 0 26 6 9 0 29 6 13 0 30 6 17 0 32 3 254 0 34 3 254 0 35 3 254 0 44 3 254 0 47 3 254 0 49 3 254 0 50 3 254 0 53 3 254 0 54 3 254 0 55 3 254 0 56 6 21 0 57 3 254 0 59 3 254 0 60 3 254 0 62 3 254 0 63 3 254 0 64 3 254 0 66 3 254 0 67 3 254 0 68 3 254 0 69 6 25 0 72 3 254 0 73 6 29 0 75 3 254 0 77 3 254 0 79 3 254 0 80 3 254 0 82 3 254 0 83 6 33 0 85 3 254 0 88 3 254 0 89 3 254 0 90 3 254 0 91 3 254 0 92 3 254 0 93 3 254 0 94 3 254 0 96 3 254 0 99 3 254 0 100 3 254 0 103 3 254 0 107 3 254 0 108 3 254 0 109 6 37 0 110 3 254 0 111 3 254 0 117 3 254 0 118 3 254 0 119 3 254 0 120 3 254 0 121 3 254 0 122 3 254 0 123 3 254 0 124 3 254 0 125 3 254 0 127 6 41 0 239 6 45 0 241 6 49 0 243 3 254 1 48] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 8 217 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 8 217 0 134 8 217 0 135 8 217 0 136 8 217 0 137 8 217 0 138 8 217 0 139 8 217 0 140 8 217 0 141 8 217 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 8 217 0 213 8 217 0 214 8 217 0 215 8 217 0 219 8 217 0 220 8 217 0 221 8 217 0 222 8 217 0 223 8 217 0 230 8 217 0 231 8 217 0 232 8 217 0 233 8 217 0 234 8 217 0 235 8 217 0 236 8 217 0 237 8 217 0 238 8 217 0 240 8 217 0 242 8 217 0 244 8 217 0 245 8 217 0 246 8 217 0 247 8 217 0 248 8 217 0 249 8 217 0 250 8 217 1 42 8 217 1 43 8 217 1 44 8 217 1 45 8 217 1 46 8 217 1 47] 
#[1 2 197 0 122 8 221 0 140] 
#[1 2 197 0 122 8 225 0 140] 
#[1 0 209 0 11 8 229 0 55 0 213 0 100 6 97 0 124 0 221 0 125 1 185 0 127 6 97 0 145 6 97 0 146 6 97 0 147 6 97 0 148 6 97 0 149 6 101 0 181] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 8 233 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 237 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 8 241 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 245 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 8 249 0 133 8 253 0 167 8 253 0 170 8 253 0 171] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 9 1 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 5 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 9 9 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 13 0 133] 
#[0 9 17 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 9 21 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 209 0 11 9 25 0 55 0 213 0 100 7 17 0 124 0 221 0 125 1 185 0 127 7 17 0 145 7 17 0 146 7 17 0 147 7 17 0 148 7 17 0 149 7 21 0 176] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 29 0 133 9 33 0 167 9 33 0 170 9 33 0 171] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 37 0 133 9 41 0 167 9 41 0 170 9 41 0 171 9 45 0 183] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 49 0 133 9 53 0 183] 
#[1 1 237 0 5 0 6 0 8 0 6 0 10 1 177 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 57 0 133 9 61 0 183] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 9 65 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 69 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 9 73 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 77 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 9 81 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 85 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 89 0 133 9 93 0 167 9 93 0 170 9 93 0 171] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 9 97 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 101 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 9 105 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 9 109 0 133] 
#[0 9 113 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 9 117 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 4 2 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 9 121 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 9 121 0 134 9 121 0 135 9 121 0 136 9 121 0 137 9 121 0 138 9 121 0 139 9 121 0 140 9 121 0 141 9 121 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 9 121 0 213 9 121 0 214 9 121 0 215 9 121 0 219 9 121 0 220 9 121 0 221 9 121 0 222 9 121 0 223 9 121 0 230 9 121 0 231 9 121 0 232 9 121 0 233 9 121 0 234 9 121 0 235 9 121 0 236 9 121 0 237 9 121 0 238 9 121 0 240 9 121 0 242 9 121 0 244 9 121 0 245 9 121 0 246 9 121 0 247 9 121 0 248 9 121 0 249 9 121 0 250 9 121 1 42 9 121 1 43 9 121 1 44 9 121 1 45 9 121 1 46 9 121 1 47] 
#[1 9 125 0 116 9 129 0 144] 
#[0 4 6 0 10 0 116] 
#[0 4 10 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 4 14 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 9 133 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 9 133 0 134 9 133 0 135 9 133 0 136 9 133 0 137 9 133 0 138 9 133 0 139 9 133 0 140 9 133 0 141 9 133 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 9 133 0 213 9 133 0 214 9 133 0 215 9 133 0 219 9 133 0 220 9 133 0 221 9 133 0 222 9 133 0 223 9 133 0 230 9 133 0 231 9 133 0 232 9 133 0 233 9 133 0 234 9 133 0 235 9 133 0 236 9 133 0 237 9 133 0 238 9 133 0 240 9 133 0 242 9 133 0 244 9 133 0 245 9 133 0 246 9 133 0 247 9 133 0 248 9 133 0 249 9 133 0 250 9 133 1 42 9 133 1 43 9 133 1 44 9 133 1 45 9 133 1 46 9 133 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 9 141 0 73 2 173 0 80 9 137 0 86 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 9 141 0 134 9 141 0 135 9 141 0 136 9 141 0 137 9 141 0 138 9 141 0 139 9 141 0 140 9 141 0 141 9 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 9 141 0 213 9 141 0 214 9 141 0 215 9 141 0 219 9 141 0 220 9 141 0 221 9 141 0 222 9 141 0 223 9 141 0 230 9 141 0 231 9 141 0 232 9 141 0 233 9 141 0 234 9 141 0 235 9 141 0 236 9 141 0 237 9 141 0 238 9 141 0 240 9 141 0 242 9 141 0 244 9 141 0 245 9 141 0 246 9 141 0 247 9 141 0 248 9 141 0 249 9 141 0 250 9 141 1 42 9 141 1 43 9 141 1 44 9 141 1 45 9 141 1 46 9 141 1 47] 
#[1 5 201 0 1 1 111 0 3 5 209 0 5 4 18 0 6 5 213 0 7 5 217 0 8 4 18 0 9 5 221 0 10 5 225 0 11 5 229 0 12 4 18 0 13 1 115 0 14 4 18 0 15 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 4 18 0 22 4 18 0 23 6 5 0 24 4 18 0 25 4 18 0 26 1 119 0 29 6 13 0 30 6 17 0 32 4 18 0 34 4 18 0 35 4 18 0 44 4 18 0 47 4 18 0 49 4 18 0 50 4 18 0 53 4 18 0 54 4 18 0 55 4 18 0 56 6 21 0 57 4 18 0 59 4 18 0 60 4 18 0 62 4 18 0 63 4 18 0 64 4 18 0 66 4 18 0 67 4 18 0 68 4 18 0 69 6 25 0 72 4 18 0 73 6 29 0 75 4 18 0 77 4 18 0 79 4 18 0 80 4 18 0 82 4 18 0 83 6 33 0 85 4 18 0 88 4 18 0 89 4 18 0 90 4 18 0 91 4 18 0 92 4 18 0 93 4 18 0 94 4 18 0 96 4 18 0 97 4 18 0 99 4 18 0 100 4 18 0 101 4 18 0 102 4 18 0 103 4 18 0 107 4 18 0 108 4 18 0 109 6 37 0 110 4 18 0 111 4 18 0 117 4 18 0 118 4 18 0 119 4 18 0 120 4 18 0 121 4 18 0 122 4 18 0 123 4 18 0 124 4 18 0 125 4 18 0 127 6 41 0 239 6 45 0 241 6 49 0 243 4 18 1 48] 
#[1 3 98 0 1 3 98 0 3 3 98 0 5 3 98 0 6 3 98 0 7 3 98 0 8 9 145 0 9 3 98 0 10 3 98 0 11 3 98 0 12 3 98 0 13 3 98 0 14 1 123 0 15 3 98 0 16 3 98 0 17 3 98 0 18 3 98 0 19 3 98 0 20 3 98 0 21 3 98 0 22 3 98 0 23 3 98 0 24 3 98 0 25 3 98 0 26 3 98 0 29 3 98 0 30 3 98 0 32 3 98 0 34 3 98 0 35 3 98 0 44 3 98 0 47 3 98 0 49 3 98 0 50 3 98 0 53 3 98 0 54 3 98 0 55 3 98 0 56 3 98 0 57 3 98 0 59 3 98 0 60 3 98 0 62 3 98 0 63 3 98 0 64 3 98 0 66 3 98 0 67 3 98 0 68 3 98 0 69 3 98 0 72 3 98 0 73 3 98 0 75 3 98 0 77 3 98 0 79 3 98 0 80 3 98 0 82 3 98 0 83 3 98 0 85 3 98 0 88 3 98 0 89 3 98 0 90 3 98 0 91 3 98 0 92 3 98 0 93 3 98 0 94 3 98 0 96 3 98 0 97 3 98 0 99 3 98 0 100 3 98 0 101 3 98 0 102 3 98 0 103 3 98 0 107 3 98 0 108 3 98 0 109 3 98 0 110 3 98 0 111 3 98 0 117 3 98 0 118 3 98 0 119 3 98 0 120 3 98 0 121 3 98 0 122 3 98 0 123 3 98 0 124 3 98 0 125 3 98 0 127 9 153 0 229 3 98 1 48] 
#[0 4 22 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 4 26 0 1 4 26 0 3 4 26 0 5 4 26 0 6 4 26 0 7 4 26 0 8 9 157 0 9 4 26 0 10 4 26 0 11 4 26 0 12 4 26 0 13 4 26 0 14 1 127 0 15 4 26 0 16 4 26 0 17 4 26 0 18 4 26 0 19 4 26 0 20 4 26 0 21 4 26 0 22 4 26 0 23 4 26 0 24 4 26 0 25 4 26 0 26 4 26 0 29 4 26 0 30 4 26 0 32 4 26 0 34 4 26 0 35 4 26 0 44 4 26 0 47 4 26 0 49 4 26 0 50 4 26 0 53 4 26 0 54 4 26 0 55 4 26 0 56 4 26 0 57 4 26 0 59 4 26 0 60 4 26 0 62 4 26 0 63 4 26 0 64 4 26 0 66 4 26 0 67 4 26 0 68 4 26 0 69 4 26 0 72 4 26 0 73 4 26 0 75 4 26 0 77 4 26 0 79 4 26 0 80 4 26 0 82 4 26 0 83 4 26 0 85 4 26 0 88 4 26 0 89 4 26 0 90 4 26 0 91 4 26 0 92 4 26 0 93 4 26 0 94 4 26 0 96 4 26 0 97 4 26 0 99 4 26 0 100 4 26 0 101 4 26 0 102 4 26 0 103 4 26 0 107 4 26 0 108 4 26 0 109 4 26 0 110 4 26 0 111 4 26 0 117 4 26 0 118 4 26 0 119 4 26 0 120 4 26 0 121 4 26 0 122 4 26 0 123 4 26 0 124 4 26 0 125 4 26 0 127 9 165 0 228 4 26 1 48] 
#[0 4 30 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 5 201 0 1 1 131 0 3 5 209 0 5 4 34 0 6 5 213 0 7 5 217 0 8 4 34 0 9 5 221 0 10 5 225 0 11 5 229 0 12 4 34 0 13 1 135 0 14 4 34 0 15 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 4 34 0 22 4 34 0 23 6 5 0 24 4 34 0 25 4 34 0 26 1 139 0 29 6 13 0 30 6 17 0 32 4 34 0 34 4 34 0 35 4 34 0 44 4 34 0 47 4 34 0 49 4 34 0 50 4 34 0 53 4 34 0 54 4 34 0 55 4 34 0 56 6 21 0 57 4 34 0 59 4 34 0 60 4 34 0 62 4 34 0 63 4 34 0 64 4 34 0 66 4 34 0 67 4 34 0 68 4 34 0 69 6 25 0 72 4 34 0 73 6 29 0 75 4 34 0 77 4 34 0 79 4 34 0 80 4 34 0 82 4 34 0 83 6 33 0 85 4 34 0 88 4 34 0 89 4 34 0 90 4 34 0 91 4 34 0 92 4 34 0 93 4 34 0 94 4 34 0 96 4 34 0 97 4 34 0 99 4 34 0 100 4 34 0 101 4 34 0 102 4 34 0 103 4 34 0 107 4 34 0 108 4 34 0 109 6 37 0 110 4 34 0 111 4 34 0 117 4 34 0 118 4 34 0 119 4 34 0 120 4 34 0 121 4 34 0 122 4 34 0 123 4 34 0 124 4 34 0 125 4 34 0 127 6 41 0 239 6 45 0 241 6 49 0 243 4 34 1 48] 
#[0 9 169 0 6] 
#[0 4 38 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 5 201 0 1 1 143 0 3 5 209 0 5 4 42 0 6 5 213 0 7 5 217 0 8 4 42 0 9 5 221 0 10 5 225 0 11 5 229 0 12 4 42 0 13 1 147 0 14 4 42 0 15 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 4 42 0 22 4 42 0 23 6 5 0 24 4 42 0 25 4 42 0 26 1 151 0 29 6 13 0 30 6 17 0 32 4 42 0 34 4 42 0 35 4 42 0 44 4 42 0 47 4 42 0 49 4 42 0 50 4 42 0 53 4 42 0 54 4 42 0 55 4 42 0 56 6 21 0 57 4 42 0 59 4 42 0 60 4 42 0 62 4 42 0 63 4 42 0 64 4 42 0 66 4 42 0 67 4 42 0 68 4 42 0 69 6 25 0 72 4 42 0 73 6 29 0 75 4 42 0 77 4 42 0 79 4 42 0 80 4 42 0 82 4 42 0 83 6 33 0 85 4 42 0 88 4 42 0 89 4 42 0 90 4 42 0 91 4 42 0 92 4 42 0 93 4 42 0 94 4 42 0 96 4 42 0 97 4 42 0 99 4 42 0 100 4 42 0 101 4 42 0 102 4 42 0 103 4 42 0 107 4 42 0 108 4 42 0 109 6 37 0 110 4 42 0 111 4 42 0 117 4 42 0 118 4 42 0 119 4 42 0 120 4 42 0 121 4 42 0 122 4 42 0 123 4 42 0 124 4 42 0 125 4 42 0 127 6 41 0 239 6 45 0 241 6 49 0 243 4 42 1 48] 
#[1 5 201 0 1 1 155 0 3 5 209 0 5 4 46 0 6 5 213 0 7 5 217 0 8 4 46 0 9 5 221 0 10 5 225 0 11 5 229 0 12 4 46 0 13 1 159 0 14 4 46 0 15 5 237 0 16 5 241 0 17 5 245 0 18 4 46 0 19 5 253 0 20 6 1 0 21 4 46 0 22 4 46 0 23 6 5 0 24 4 46 0 25 4 46 0 26 1 163 0 29 6 13 0 30 6 17 0 32 4 46 0 34 4 46 0 35 4 46 0 44 4 46 0 47 4 46 0 49 4 46 0 50 4 46 0 53 4 46 0 54 4 46 0 55 4 46 0 56 6 21 0 57 4 46 0 59 4 46 0 60 4 46 0 62 4 46 0 63 4 46 0 64 4 46 0 66 4 46 0 67 4 46 0 68 4 46 0 69 6 25 0 72 4 46 0 73 6 29 0 75 4 46 0 77 4 46 0 79 4 46 0 80 4 46 0 82 4 46 0 83 6 33 0 85 4 46 0 88 4 46 0 89 4 46 0 90 4 46 0 91 4 46 0 92 4 46 0 93 4 46 0 94 4 46 0 96 4 46 0 97 4 46 0 99 4 46 0 100 4 46 0 101 4 46 0 102 4 46 0 103 4 46 0 107 4 46 0 108 4 46 0 109 6 37 0 110 4 46 0 111 4 46 0 117 4 46 0 118 4 46 0 119 4 46 0 120 4 46 0 121 4 46 0 122 4 46 0 123 4 46 0 124 4 46 0 125 4 46 0 127 6 41 0 239 6 45 0 241 6 49 0 243 4 46 1 48] 
#[1 5 201 0 1 1 167 0 3 5 209 0 5 4 50 0 6 5 213 0 7 5 217 0 8 4 50 0 9 5 221 0 10 5 225 0 11 5 229 0 12 4 50 0 13 1 171 0 14 4 50 0 15 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 4 50 0 22 4 50 0 23 6 5 0 24 4 50 0 25 4 50 0 26 1 175 0 29 6 13 0 30 6 17 0 32 4 50 0 34 4 50 0 35 4 50 0 44 4 50 0 47 4 50 0 49 4 50 0 50 4 50 0 53 4 50 0 54 4 50 0 55 4 50 0 56 6 21 0 57 4 50 0 59 4 50 0 60 4 50 0 62 4 50 0 63 4 50 0 64 4 50 0 66 4 50 0 67 4 50 0 68 4 50 0 69 6 25 0 72 4 50 0 73 6 29 0 75 4 50 0 77 4 50 0 79 4 50 0 80 4 50 0 82 4 50 0 83 6 33 0 85 4 50 0 88 4 50 0 89 4 50 0 90 4 50 0 91 4 50 0 92 4 50 0 93 4 50 0 94 4 50 0 96 4 50 0 97 4 50 0 99 4 50 0 100 4 50 0 101 4 50 0 102 4 50 0 103 4 50 0 107 4 50 0 108 4 50 0 109 6 37 0 110 4 50 0 111 4 50 0 117 4 50 0 118 4 50 0 119 4 50 0 120 4 50 0 121 4 50 0 122 4 50 0 123 4 50 0 124 4 50 0 125 4 50 0 127 6 41 0 239 6 45 0 241 6 49 0 243 4 50 1 48] 
#[1 5 201 0 1 1 179 0 3 5 209 0 5 4 54 0 6 5 213 0 7 5 217 0 8 4 54 0 9 5 221 0 10 5 225 0 11 5 229 0 12 4 54 0 13 1 183 0 14 4 54 0 15 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 4 54 0 22 4 54 0 23 6 5 0 24 4 54 0 25 4 54 0 26 1 187 0 29 6 13 0 30 6 17 0 32 4 54 0 34 4 54 0 35 4 54 0 44 4 54 0 47 4 54 0 49 4 54 0 50 4 54 0 53 4 54 0 54 4 54 0 55 4 54 0 56 6 21 0 57 4 54 0 59 4 54 0 60 4 54 0 62 4 54 0 63 4 54 0 64 4 54 0 66 4 54 0 67 4 54 0 68 4 54 0 69 6 25 0 72 4 54 0 73 6 29 0 75 4 54 0 77 4 54 0 79 4 54 0 80 4 54 0 82 4 54 0 83 6 33 0 85 4 54 0 88 4 54 0 89 4 54 0 90 4 54 0 91 4 54 0 92 4 54 0 93 4 54 0 94 4 54 0 96 4 54 0 97 4 54 0 99 4 54 0 100 4 54 0 101 4 54 0 102 4 54 0 103 4 54 0 107 4 54 0 108 4 54 0 109 6 37 0 110 4 54 0 111 4 54 0 117 4 54 0 118 4 54 0 119 4 54 0 120 4 54 0 121 4 54 0 122 4 54 0 123 4 54 0 124 4 54 0 125 4 54 0 127 6 41 0 239 6 45 0 241 6 49 0 243 4 54 1 48] 
#[1 5 201 0 1 1 191 0 3 5 209 0 5 4 58 0 6 5 213 0 7 5 217 0 8 4 58 0 9 5 221 0 10 5 225 0 11 5 229 0 12 4 58 0 13 1 195 0 14 4 58 0 15 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 4 58 0 22 4 58 0 23 6 5 0 24 4 58 0 25 4 58 0 26 1 199 0 29 6 13 0 30 6 17 0 32 4 58 0 34 4 58 0 35 4 58 0 44 4 58 0 47 4 58 0 49 4 58 0 50 4 58 0 53 4 58 0 54 4 58 0 55 4 58 0 56 6 21 0 57 4 58 0 59 4 58 0 60 4 58 0 62 4 58 0 63 4 58 0 64 4 58 0 66 4 58 0 67 4 58 0 68 4 58 0 69 6 25 0 72 4 58 0 73 6 29 0 75 4 58 0 77 4 58 0 79 4 58 0 80 4 58 0 82 4 58 0 83 6 33 0 85 4 58 0 88 4 58 0 89 4 58 0 90 4 58 0 91 4 58 0 92 4 58 0 93 4 58 0 94 4 58 0 96 4 58 0 97 4 58 0 99 4 58 0 100 4 58 0 101 4 58 0 102 4 58 0 103 4 58 0 107 4 58 0 108 4 58 0 109 6 37 0 110 4 58 0 111 4 58 0 117 4 58 0 118 4 58 0 119 4 58 0 120 4 58 0 121 4 58 0 122 4 58 0 123 4 58 0 124 4 58 0 125 4 58 0 127 6 41 0 239 6 45 0 241 6 49 0 243 4 58 1 48] 
#[0 4 62 0 11 0 100 0 124 0 125 0 127] 
#[0 4 66 0 55 0 127] 
#[1 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 9 173 0 134 9 173 0 135 9 173 0 136 9 173 0 137 9 173 0 138 9 173 0 139 9 173 0 140 9 173 0 141 9 173 0 142] 
#[1 4 70 0 6 4 70 0 9 9 177 0 169] 
#[1 2 197 0 122 9 181 0 140] 
#[1 1 197 0 33 9 185 0 167 9 185 0 170 9 185 0 171] 
#[1 2 197 0 122 9 189 0 140] 
#[0 4 74 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 4 78 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 9 193 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 9 193 0 134 9 193 0 135 9 193 0 136 9 193 0 137 9 193 0 138 9 193 0 139 9 193 0 140 9 193 0 141 9 193 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 9 193 0 213 9 193 0 214 9 193 0 215 9 193 0 219 9 193 0 220 9 193 0 221 9 193 0 222 9 193 0 223 9 193 0 230 9 193 0 231 9 193 0 232 9 193 0 233 9 193 0 234 9 193 0 235 9 193 0 236 9 193 0 237 9 193 0 238 9 193 0 240 9 193 0 242 9 193 0 244 9 193 0 245 9 193 0 246 9 193 0 247 9 193 0 248 9 193 0 249 9 193 0 250 9 193 1 42 9 193 1 43 9 193 1 44 9 193 1 45 9 193 1 46 9 193 1 47] 
#[1 2 90 0 6 2 90 0 9 1 177 0 11 6 121 0 19 1 197 0 33 9 197 0 167 9 197 0 170 9 197 0 171 6 129 0 187 9 201 0 188] 
#[1 2 90 0 6 2 90 0 9 6 121 0 19 6 129 0 187 9 205 0 188] 
#[0 4 82 0 6 0 9] 
#[1 0 209 0 11 0 213 0 100 9 209 0 124 0 221 0 125 9 209 0 145 9 209 0 146 9 209 0 147 9 209 0 148 9 209 0 149] 
#[1 2 90 0 6 2 90 0 9 1 177 0 11 6 121 0 19 1 197 0 33 9 213 0 167 9 213 0 170 9 213 0 171 6 129 0 187 9 217 0 188] 
#[1 2 90 0 6 2 90 0 9 6 121 0 19 6 129 0 187 9 221 0 188] 
#[0 4 86 0 6 0 9] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 4 90 0 6 5 213 0 7 5 217 0 8 4 90 0 9 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 6 5 0 24 6 9 0 29 6 13 0 30 6 17 0 32 6 21 0 57 6 25 0 72 6 29 0 75 6 33 0 85 6 37 0 110 6 41 0 239 6 45 0 241 6 49 0 243] 
#[0 4 94 0 6 0 9] 
#[1 2 90 0 6 2 90 0 9 1 177 0 11 6 121 0 19 1 197 0 33 9 225 0 167 9 225 0 170 9 225 0 171 6 129 0 187 9 229 0 188] 
#[1 2 90 0 6 2 90 0 9 6 121 0 19 6 129 0 187 9 233 0 188] 
#[0 4 98 0 6 0 9] 
#[0 4 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 33 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 0 209 0 11 3 225 0 38 3 245 0 40 3 233 0 84 3 237 0 86 0 213 0 100 3 241 0 124 0 221 0 125 3 241 0 145 3 241 0 146 3 241 0 147 3 241 0 148 3 241 0 149 3 245 0 182 9 237 0 186] 
#[0 4 106 0 6 0 9] 
#[0 9 241 0 64] 
#[0 9 245 0 55] 
#[0 9 249 0 89] 
#[0 9 253 0 55] 
#[0 10 1 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 5 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 10 9 0 89] 
#[0 10 13 0 55] 
#[0 10 17 0 89] 
#[0 10 21 0 55] 
#[1 1 130 0 1 1 130 0 3 0 195 0 5 1 130 0 7 0 195 0 8 0 195 0 10 0 195 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 0 6 0 22 0 6 0 23 1 130 0 24 0 6 0 25 0 6 0 26 1 130 0 29 1 130 0 30 1 130 0 32 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 1 130 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 130 0 72 0 6 0 73 1 130 0 75 0 6 0 80 0 6 0 82 1 130 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 1 130 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 25 0 133] 
#[1 1 130 0 1 1 130 0 3 0 195 0 5 1 130 0 7 0 195 0 8 0 195 0 10 0 195 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 0 6 0 22 0 6 0 23 1 130 0 24 0 6 0 25 0 6 0 26 1 130 0 29 1 130 0 30 1 130 0 32 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 1 130 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 130 0 72 0 6 0 73 1 130 0 75 0 6 0 77 0 6 0 80 0 6 0 82 1 130 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 1 130 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 29 0 133] 
#[1 10 33 0 77 1 49 0 119 1 185 0 127 10 37 0 135] 
#[1 0 6 0 77 0 6 0 119 0 6 0 127 10 41 0 133] 
#[1 1 177 0 11 10 45 0 70] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 10 49 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 10 49 0 134 10 49 0 135 10 49 0 136 10 49 0 137 10 49 0 138 10 49 0 139 10 49 0 140 10 49 0 141 10 49 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 10 49 0 213 10 49 0 214 10 49 0 215 10 49 0 219 10 49 0 220 10 49 0 221 10 49 0 222 10 49 0 223 10 49 0 230 10 49 0 231 10 49 0 232 10 49 0 233 10 49 0 234 10 49 0 235 10 49 0 236 10 49 0 237 10 49 0 238 10 49 0 240 10 49 0 242 10 49 0 244 10 49 0 245 10 49 0 246 10 49 0 247 10 49 0 248 10 49 0 249 10 49 0 250 10 49 1 42 10 49 1 43 10 49 1 44 10 49 1 45 10 49 1 46 10 49 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 1 203 0 22 1 207 0 23 1 211 0 25 1 215 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 53 0 6 0 54 0 6 0 55 0 6 0 56 0 6 0 59 1 219 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 1 223 0 73 1 227 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 1 231 0 94 0 6 0 96 1 235 0 100 0 6 0 103 0 6 0 108 0 6 0 109 1 239 0 111 1 243 0 117 1 247 0 118 0 187 0 119 1 251 0 120 1 255 0 121 2 3 0 122 2 7 0 123 2 11 0 124 2 15 0 125 0 6 0 127 10 53 0 133 10 57 0 134 10 57 0 135 10 57 0 136 10 57 0 137 10 57 0 138 10 57 0 139 10 57 0 140 10 57 0 141 10 57 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 10 57 0 213 10 57 0 214 10 57 0 215 10 57 0 219 10 57 0 220 10 57 0 221 10 57 0 222 10 57 0 223 10 57 0 230 10 57 0 231 10 57 0 232 10 57 0 233 10 57 0 234 10 57 0 235 10 57 0 236 10 57 0 237 10 57 0 238 10 57 0 240 10 57 0 242 10 57 0 244 10 57 0 245 10 57 0 246 10 57 0 247 10 57 0 248 10 57 0 249 10 57 0 250 10 57 1 42 10 57 1 43 10 57 1 44 10 57 1 45 10 57 1 46 10 57 1 47] 
#[0 10 61 0 79] 
#[0 4 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 4 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 0 6 0 107 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 10 65 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 69 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 6 0 55 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 10 73 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 77 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 4 118 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 1 86 0 1 1 86 0 3 1 86 0 5 1 86 0 7 1 86 0 8 1 86 0 10 1 86 0 11 1 86 0 12 1 86 0 14 1 86 0 16 1 86 0 17 1 86 0 18 1 86 0 19 1 86 0 20 1 86 0 21 1 86 0 22 1 86 0 23 1 86 0 24 1 86 0 25 1 86 0 26 1 86 0 29 1 86 0 30 1 86 0 32 1 86 0 34 1 86 0 44 1 86 0 49 1 86 0 50 1 86 0 56 1 86 0 57 1 86 0 59 1 86 0 60 1 86 0 62 1 86 0 63 1 86 0 66 1 86 0 67 1 86 0 68 1 86 0 69 1 86 0 72 1 86 0 73 1 86 0 75 1 86 0 80 1 86 0 82 1 86 0 85 1 86 0 88 1 86 0 90 1 86 0 91 1 86 0 92 2 19 0 93 1 86 0 94 1 86 0 96 1 86 0 100 1 86 0 103 1 86 0 108 1 86 0 109 1 86 0 110 1 86 0 111 1 86 0 117 1 86 0 118 1 86 0 119 1 86 0 120 1 86 0 121 1 86 0 122 1 86 0 123 1 86 0 124 1 86 0 125 1 86 0 127] 
#[1 10 85 0 93 1 49 0 119 10 89 0 135] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 10 93 0 153 10 93 0 159 4 89 0 164 10 93 0 172 10 93 0 173 10 93 0 177 10 93 0 178 10 93 0 199 10 93 0 200 10 93 0 201 10 93 0 202 10 93 0 203 10 93 0 205 10 93 0 206 10 93 0 207 10 93 0 208 10 93 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 10 93 0 251 10 93 0 252 10 93 0 253 10 93 0 254 10 93 0 255 10 93 1 0 10 93 1 1 10 93 1 2 10 93 1 3 10 93 1 4 10 93 1 5 10 93 1 6 10 93 1 7 10 93 1 8 10 93 1 9 10 93 1 10 10 93 1 11 10 93 1 12 10 93 1 13 10 93 1 16 10 93 1 22 4 189 1 23 10 93 1 24 10 93 1 25 10 93 1 26 10 93 1 27 10 93 1 28 10 93 1 29 10 93 1 30 10 93 1 31 10 93 1 32 10 93 1 33 10 93 1 34 10 93 1 35 10 93 1 36 10 93 1 37 10 93 1 38 10 93 1 39 10 93 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 4 122 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 4 126 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 10 97 0 99] 
#[0 4 130 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 10 101 0 7 4 134 0 11 4 134 0 55 4 134 0 100 4 134 0 124 4 134 0 125 4 134 0 127] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 4 138 0 22 4 138 0 23 6 5 0 24 4 138 0 25 4 138 0 26 6 9 0 29 6 13 0 30 6 17 0 32 4 138 0 34 4 138 0 35 4 138 0 44 4 138 0 47 4 138 0 49 4 138 0 50 4 138 0 53 4 138 0 54 4 138 0 55 4 138 0 56 6 21 0 57 4 138 0 59 4 138 0 60 4 138 0 62 4 138 0 63 4 138 0 64 4 138 0 66 4 138 0 67 4 138 0 68 4 138 0 69 6 25 0 72 4 138 0 73 6 29 0 75 4 138 0 77 4 138 0 79 4 138 0 80 4 138 0 82 4 138 0 83 6 33 0 85 4 138 0 88 4 138 0 89 4 138 0 90 4 138 0 91 4 138 0 92 4 138 0 93 4 138 0 94 4 138 0 96 4 138 0 99 4 138 0 100 4 138 0 103 4 138 0 107 4 138 0 108 4 138 0 109 6 37 0 110 4 138 0 111 4 138 0 117 4 138 0 118 4 138 0 119 4 138 0 120 4 138 0 121 4 138 0 122 4 138 0 123 4 138 0 124 4 138 0 125 4 138 0 127 6 41 0 239 6 45 0 241 6 49 0 243 4 138 1 48] 
#[1 1 237 0 5 10 105 0 31 10 109 0 183] 
#[1 1 237 0 5 10 113 0 31 10 117 0 183] 
#[0 10 121 0 56] 
#[0 10 125 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 129 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 10 133 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 137 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 141 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 145 0 133] 
#[0 10 149 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 153 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 10 157 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 161 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 10 165 0 99] 
#[0 10 169 0 55] 
#[0 10 173 0 103] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 177 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 181 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 185 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 189 0 133] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 1 197 0 33 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 193 0 133 10 197 0 167 10 197 0 170 10 197 0 171] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 201 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 205 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 209 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 213 0 133] 
#[0 10 217 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 221 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 10 225 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 229 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 10 233 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 237 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 241 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 10 245 0 133] 
#[0 10 249 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 10 253 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 11 1 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 11 5 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 11 9 0 99] 
#[0 11 13 0 55] 
#[1 2 23 0 1 2 27 0 3 2 31 0 5 4 142 0 6 2 35 0 7 2 39 0 8 4 142 0 9 2 43 0 10 2 47 0 11 2 51 0 12 4 142 0 13 2 55 0 14 4 142 0 15 2 59 0 16 2 63 0 17 2 67 0 18 2 71 0 19 2 75 0 20 2 79 0 21 4 142 0 22 4 142 0 23 2 83 0 24 4 142 0 25 4 142 0 26 2 87 0 29 2 91 0 30 2 95 0 32 4 142 0 34 4 142 0 35 4 142 0 44 4 142 0 47 4 142 0 49 4 142 0 50 4 142 0 53 4 142 0 54 4 142 0 55 4 142 0 56 2 99 0 57 4 142 0 59 4 142 0 60 4 142 0 62 4 142 0 63 4 142 0 64 4 142 0 66 4 142 0 67 4 142 0 68 4 142 0 69 2 103 0 72 4 142 0 73 2 107 0 75 4 142 0 77 4 142 0 79 4 142 0 80 4 142 0 82 4 142 0 83 2 111 0 85 4 142 0 88 4 142 0 89 4 142 0 90 4 142 0 91 4 142 0 92 4 142 0 93 4 142 0 94 4 142 0 96 4 142 0 97 4 142 0 99 4 142 0 100 4 142 0 101 4 142 0 102 4 142 0 103 4 142 0 107 4 142 0 108 4 142 0 109 2 115 0 110 4 142 0 111 4 142 0 117 4 142 0 118 4 142 0 119 4 142 0 120 4 142 0 121 4 142 0 122 4 142 0 123 4 142 0 124 4 142 0 125 4 142 0 127 6 41 0 239 6 45 0 241 6 49 0 243 4 142 1 48] 
#[0 4 146 0 10 0 113 0 116] 
#[1 11 17 0 10 11 21 0 116] 
#[1 5 201 0 1 2 119 0 3 5 209 0 5 4 150 0 6 5 213 0 7 5 217 0 8 4 150 0 9 5 221 0 10 5 225 0 11 5 229 0 12 4 150 0 13 2 123 0 14 4 150 0 15 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 4 150 0 22 4 150 0 23 6 5 0 24 4 150 0 25 4 150 0 26 2 127 0 29 6 13 0 30 6 17 0 32 4 150 0 34 4 150 0 35 4 150 0 44 4 150 0 47 4 150 0 49 4 150 0 50 4 150 0 53 4 150 0 54 4 150 0 55 4 150 0 56 6 21 0 57 4 150 0 59 4 150 0 60 4 150 0 62 4 150 0 63 4 150 0 64 4 150 0 66 4 150 0 67 4 150 0 68 4 150 0 69 6 25 0 72 4 150 0 73 6 29 0 75 4 150 0 77 4 150 0 79 4 150 0 80 4 150 0 82 4 150 0 83 6 33 0 85 4 150 0 88 4 150 0 89 4 150 0 90 4 150 0 91 4 150 0 92 4 150 0 93 4 150 0 94 4 150 0 96 4 150 0 97 4 150 0 99 4 150 0 100 4 150 0 101 4 150 0 102 4 150 0 103 4 150 0 107 4 150 0 108 4 150 0 109 6 37 0 110 4 150 0 111 4 150 0 117 4 150 0 118 4 150 0 119 4 150 0 120 4 150 0 121 4 150 0 122 4 150 0 123 4 150 0 124 4 150 0 125 4 150 0 127 6 41 0 239 6 45 0 241 6 49 0 243 4 150 1 48] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 11 25 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 11 25 0 134 11 25 0 135 11 25 0 136 11 25 0 137 11 25 0 138 11 25 0 139 11 25 0 140 11 25 0 141 11 25 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 11 25 0 213 11 25 0 214 11 25 0 215 11 25 0 219 11 25 0 220 11 25 0 221 11 25 0 222 11 25 0 223 11 25 0 230 11 25 0 231 11 25 0 232 11 25 0 233 11 25 0 234 11 25 0 235 11 25 0 236 11 25 0 237 11 25 0 238 11 25 0 240 11 25 0 242 11 25 0 244 11 25 0 245 11 25 0 246 11 25 0 247 11 25 0 248 11 25 0 249 11 25 0 250 11 25 1 42 11 25 1 43 11 25 1 44 11 25 1 45 11 25 1 46 11 25 1 47] 
#[1 5 201 0 1 2 131 0 3 5 209 0 5 4 154 0 6 5 213 0 7 5 217 0 8 4 154 0 9 5 221 0 10 5 225 0 11 5 229 0 12 4 154 0 13 2 135 0 14 4 154 0 15 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 4 154 0 22 4 154 0 23 6 5 0 24 4 154 0 25 4 154 0 26 2 139 0 29 6 13 0 30 6 17 0 32 4 154 0 34 4 154 0 35 4 154 0 44 4 154 0 47 4 154 0 49 4 154 0 50 4 154 0 53 4 154 0 54 4 154 0 55 4 154 0 56 6 21 0 57 4 154 0 59 4 154 0 60 4 154 0 62 4 154 0 63 4 154 0 64 4 154 0 66 4 154 0 67 4 154 0 68 4 154 0 69 6 25 0 72 4 154 0 73 6 29 0 75 4 154 0 77 4 154 0 79 4 154 0 80 4 154 0 82 4 154 0 83 6 33 0 85 4 154 0 88 4 154 0 89 4 154 0 90 4 154 0 91 4 154 0 92 4 154 0 93 4 154 0 94 4 154 0 96 4 154 0 97 4 154 0 99 4 154 0 100 4 154 0 101 4 154 0 102 4 154 0 103 4 154 0 107 4 154 0 108 4 154 0 109 6 37 0 110 4 154 0 111 4 154 0 117 4 154 0 118 4 154 0 119 4 154 0 120 4 154 0 121 4 154 0 122 4 154 0 123 4 154 0 124 4 154 0 125 4 154 0 127 6 41 0 239 6 45 0 241 6 49 0 243 4 154 1 48] 
#[0 4 158 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 4 162 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 38 0 40 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 86 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 4 166 0 1 4 166 0 3 4 166 0 5 4 166 0 6 4 166 0 7 4 166 0 8 9 157 0 9 4 166 0 10 4 166 0 11 4 166 0 12 4 166 0 13 4 166 0 14 2 143 0 15 4 166 0 16 4 166 0 17 4 166 0 18 4 166 0 19 4 166 0 20 4 166 0 21 4 166 0 22 4 166 0 23 4 166 0 24 4 166 0 25 4 166 0 26 4 166 0 29 4 166 0 30 4 166 0 32 4 166 0 34 4 166 0 35 4 166 0 44 4 166 0 47 4 166 0 49 4 166 0 50 4 166 0 53 4 166 0 54 4 166 0 55 4 166 0 56 4 166 0 57 4 166 0 59 4 166 0 60 4 166 0 62 4 166 0 63 4 166 0 64 4 166 0 66 4 166 0 67 4 166 0 68 4 166 0 69 4 166 0 72 4 166 0 73 4 166 0 75 4 166 0 77 4 166 0 79 4 166 0 80 4 166 0 82 4 166 0 83 4 166 0 85 4 166 0 88 4 166 0 89 4 166 0 90 4 166 0 91 4 166 0 92 4 166 0 93 4 166 0 94 4 166 0 96 4 166 0 97 4 166 0 99 4 166 0 100 4 166 0 101 4 166 0 102 4 166 0 103 4 166 0 107 4 166 0 108 4 166 0 109 4 166 0 110 4 166 0 111 4 166 0 117 4 166 0 118 4 166 0 119 4 166 0 120 4 166 0 121 4 166 0 122 4 166 0 123 4 166 0 124 4 166 0 125 4 166 0 127 9 165 0 228 4 166 1 48] 
#[1 4 170 0 1 4 170 0 3 2 137 0 5 4 170 0 6 4 170 0 7 2 141 0 8 4 170 0 9 2 145 0 10 0 209 0 11 4 170 0 12 4 170 0 13 4 170 0 14 4 170 0 15 4 170 0 16 4 170 0 17 4 170 0 18 4 170 0 19 4 170 0 20 4 170 0 21 2 147 0 22 2 151 0 23 4 170 0 24 2 155 0 25 2 159 0 26 4 170 0 29 4 170 0 30 4 170 0 32 4 170 0 34 4 170 0 35 3 225 0 38 7 193 0 40 4 170 0 44 4 170 0 47 4 170 0 49 4 170 0 50 4 170 0 53 4 170 0 54 4 170 0 55 4 170 0 56 4 170 0 57 4 170 0 59 2 163 0 60 4 170 0 62 4 170 0 63 4 170 0 64 4 170 0 66 4 170 0 67 4 170 0 68 4 170 0 69 4 170 0 72 2 167 0 73 4 170 0 75 4 170 0 77 4 170 0 79 2 171 0 80 4 170 0 82 4 170 0 83 4 170 0 85 7 189 0 86 4 170 0 88 4 170 0 89 4 170 0 90 4 170 0 91 4 170 0 92 4 170 0 93 2 175 0 94 4 170 0 96 4 170 0 97 4 170 0 99 2 179 0 100 4 170 0 101 4 170 0 102 4 170 0 103 4 170 0 107 4 170 0 108 4 170 0 109 4 170 0 110 2 183 0 111 2 187 0 117 2 191 0 118 2 195 0 119 2 199 0 120 2 203 0 121 2 207 0 122 2 211 0 123 2 215 0 124 2 219 0 125 4 170 0 127 7 197 0 134 7 197 0 135 7 197 0 136 7 197 0 137 7 197 0 138 7 197 0 139 7 197 0 140 7 197 0 141 7 197 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 7 193 0 182 7 197 0 213 7 197 0 214 7 197 0 215 7 197 0 219 7 197 0 220 7 197 0 221 7 197 0 222 7 197 0 223 11 29 0 224 7 197 0 230 7 197 0 231 7 197 0 232 7 197 0 233 7 197 0 234 7 197 0 235 7 197 0 236 7 197 0 237 7 197 0 238 7 197 0 240 7 197 0 242 7 197 0 244 7 197 0 245 7 197 0 246 7 197 0 247 7 197 0 248 7 197 0 249 7 197 0 250 7 197 1 42 7 197 1 43 7 197 1 44 7 197 1 45 7 197 1 46 7 197 1 47 4 170 1 48] 
#[1 4 174 0 1 4 174 0 3 2 137 0 5 4 174 0 6 4 174 0 7 2 141 0 8 4 174 0 9 2 145 0 10 0 209 0 11 4 174 0 12 4 174 0 13 4 174 0 14 4 174 0 15 4 174 0 16 4 174 0 17 4 174 0 18 4 174 0 19 4 174 0 20 4 174 0 21 2 223 0 22 2 227 0 23 4 174 0 24 2 231 0 25 2 235 0 26 4 174 0 29 4 174 0 30 4 174 0 32 4 174 0 34 4 174 0 35 3 225 0 38 7 193 0 40 4 174 0 44 4 174 0 47 4 174 0 49 4 174 0 50 4 174 0 53 4 174 0 54 4 174 0 55 4 174 0 56 4 174 0 57 4 174 0 59 2 239 0 60 4 174 0 62 4 174 0 63 4 174 0 64 4 174 0 66 4 174 0 67 4 174 0 68 4 174 0 69 4 174 0 72 2 243 0 73 4 174 0 75 4 174 0 77 4 174 0 79 2 247 0 80 4 174 0 82 4 174 0 83 4 174 0 85 7 189 0 86 4 174 0 88 4 174 0 89 4 174 0 90 4 174 0 91 4 174 0 92 4 174 0 93 2 251 0 94 4 174 0 96 4 174 0 97 4 174 0 99 2 255 0 100 4 174 0 101 4 174 0 102 4 174 0 103 4 174 0 107 4 174 0 108 4 174 0 109 4 174 0 110 3 3 0 111 3 7 0 117 3 11 0 118 3 15 0 119 3 19 0 120 3 23 0 121 3 27 0 122 3 31 0 123 3 35 0 124 3 39 0 125 4 174 0 127 7 197 0 134 7 197 0 135 7 197 0 136 7 197 0 137 7 197 0 138 7 197 0 139 7 197 0 140 7 197 0 141 7 197 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 7 193 0 182 7 197 0 213 7 197 0 214 7 197 0 215 7 197 0 219 7 197 0 220 7 197 0 221 7 197 0 222 7 197 0 223 11 33 0 224 7 197 0 230 7 197 0 231 7 197 0 232 7 197 0 233 7 197 0 234 7 197 0 235 7 197 0 236 7 197 0 237 7 197 0 238 7 197 0 240 7 197 0 242 7 197 0 244 7 197 0 245 7 197 0 246 7 197 0 247 7 197 0 248 7 197 0 249 7 197 0 250 7 197 1 42 7 197 1 43 7 197 1 44 7 197 1 45 7 197 1 46 7 197 1 47 4 174 1 48] 
#[0 4 178 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 4 182 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 4 70 0 6 4 70 0 9 11 37 0 169] 
#[1 11 41 0 6 11 45 0 9 11 49 0 168] 
#[1 1 237 0 5 11 53 0 183] 
#[0 4 186 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 1 237 0 5 11 57 0 183] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 6 5 0 24 6 9 0 29 6 13 0 30 6 17 0 32 4 190 0 55 6 21 0 57 6 25 0 72 6 29 0 75 6 33 0 85 4 190 0 100 6 37 0 110 4 190 0 124 4 190 0 125 4 190 0 127 6 41 0 239 6 45 0 241 6 49 0 243] 
#[1 2 90 0 6 2 90 0 9 6 121 0 19 6 129 0 187 11 61 0 188] 
#[0 4 194 0 6 0 9] 
#[0 4 198 0 6 0 9] 
#[1 2 90 0 6 2 90 0 9 1 177 0 11 6 121 0 19 1 197 0 33 11 65 0 167 11 65 0 170 11 65 0 171 6 129 0 187 11 69 0 188] 
#[1 2 90 0 6 2 90 0 9 6 121 0 19 6 129 0 187 11 73 0 188] 
#[0 4 202 0 6 0 9] 
#[0 4 206 0 6 0 9] 
#[1 2 90 0 6 2 90 0 9 6 121 0 19 6 129 0 187 11 77 0 188] 
#[0 4 210 0 6 0 9] 
#[0 4 214 0 6 0 9] 
#[0 4 218 0 6 0 9] 
#[0 4 222 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 11 81 0 64] 
#[0 4 226 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 11 85 0 89] 
#[0 11 89 0 89] 
#[0 11 93 0 55] 
#[0 4 230 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 11 97 0 89] 
#[0 4 234 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 11 101 0 89] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 11 105 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 0 6 0 77 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 11 109 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 11 113 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 4 238 0 5 4 238 0 8 4 238 0 10 4 238 0 11 4 238 0 22 4 238 0 23 4 238 0 25 4 238 0 26 4 238 0 34 4 238 0 44 4 238 0 49 4 238 0 50 4 238 0 53 4 238 0 54 4 238 0 55 4 238 0 56 4 238 0 59 4 238 0 60 4 238 0 62 4 238 0 63 4 238 0 66 4 238 0 67 4 238 0 68 4 238 0 69 4 238 0 73 4 238 0 77 4 238 0 79 4 238 0 80 4 238 0 82 4 238 0 88 4 238 0 90 4 238 0 91 4 238 0 92 4 238 0 93 4 238 0 94 4 238 0 96 4 238 0 100 4 238 0 103 4 238 0 107 3 43 0 108 4 238 0 109 4 238 0 111 4 238 0 117 4 238 0 118 4 238 0 119 4 238 0 120 4 238 0 121 4 238 0 122 4 238 0 123 4 238 0 124 4 238 0 125 4 238 0 127] 
#[0 11 121 0 77] 
#[1 11 125 0 77 1 49 0 119 1 185 0 127 11 129 0 135] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 11 133 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 11 133 0 134 11 133 0 135 11 133 0 136 11 133 0 137 11 133 0 138 11 133 0 139 11 133 0 140 11 133 0 141 11 133 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 11 133 0 213 11 133 0 214 11 133 0 215 11 133 0 219 11 133 0 220 11 133 0 221 11 133 0 222 11 133 0 223 11 133 0 230 11 133 0 231 11 133 0 232 11 133 0 233 11 133 0 234 11 133 0 235 11 133 0 236 11 133 0 237 11 133 0 238 11 133 0 240 11 133 0 242 11 133 0 244 11 133 0 245 11 133 0 246 11 133 0 247 11 133 0 248 11 133 0 249 11 133 0 250 11 133 1 42 11 133 1 43 11 133 1 44 11 133 1 45 11 133 1 46 11 133 1 47] 
#[1 5 201 0 1 1 155 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 1 159 0 14 5 237 0 16 5 241 0 17 5 245 0 18 4 46 0 19 5 253 0 20 6 1 0 21 6 5 0 24 1 163 0 29 6 13 0 30 6 17 0 32 6 21 0 57 6 25 0 72 6 29 0 75 6 33 0 85 11 137 0 102 6 37 0 110 6 41 0 239 6 45 0 241 6 49 0 243] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 6 0 53 0 6 0 54 0 6 0 55 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 11 141 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 11 145 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 4 242 0 22 4 242 0 23 6 5 0 24 4 242 0 25 4 242 0 26 6 9 0 29 6 13 0 30 6 17 0 32 4 242 0 34 4 242 0 44 4 242 0 49 4 242 0 50 3 47 0 53 4 242 0 54 4 242 0 55 4 242 0 56 6 21 0 57 4 242 0 59 4 242 0 60 4 242 0 62 4 242 0 63 4 242 0 66 4 242 0 67 4 242 0 68 4 242 0 69 6 25 0 72 4 242 0 73 6 29 0 75 4 242 0 77 4 242 0 79 4 242 0 80 4 242 0 82 6 33 0 85 4 242 0 88 4 242 0 90 4 242 0 91 4 242 0 92 4 242 0 93 4 242 0 94 4 242 0 96 4 242 0 100 4 242 0 103 4 242 0 107 4 242 0 108 4 242 0 109 6 37 0 110 4 242 0 111 4 242 0 117 4 242 0 118 4 242 0 119 4 242 0 120 4 242 0 121 4 242 0 122 4 242 0 123 4 242 0 124 4 242 0 125 4 242 0 127 6 41 0 239 6 45 0 241 6 49 0 243] 
#[0 4 246 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 11 153 0 107 1 49 0 119 1 185 0 127 11 157 0 135] 
#[1 0 6 0 107 0 6 0 119 0 6 0 127 11 161 0 133] 
#[1 11 165 0 55 1 49 0 119 1 185 0 127 11 169 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 11 173 0 133] 
#[0 4 250 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 4 254 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 11 177 0 93] 
#[0 5 2 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 5 6 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 1 49 0 119 11 181 0 135] 
#[1 2 197 0 122 11 185 0 140] 
#[1 1 197 0 33 11 189 0 167 11 189 0 170 11 189 0 171] 
#[1 2 197 0 122 11 193 0 140] 
#[0 5 10 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 5 14 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 11 197 0 64] 
#[0 11 201 0 55] 
#[0 11 205 0 89] 
#[0 11 209 0 55] 
#[0 11 213 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 11 217 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 11 221 0 89] 
#[0 11 225 0 55] 
#[0 11 229 0 89] 
#[0 11 233 0 55] 
#[0 5 18 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 11 237 0 99] 
#[0 5 22 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 11 241 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 11 245 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 11 249 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 11 253 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 12 1 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 12 5 0 133] 
#[0 12 9 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 12 13 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 12 17 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 12 21 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 12 25 0 99] 
#[0 12 29 0 55] 
#[0 12 33 0 64] 
#[0 12 37 0 55] 
#[0 12 41 0 89] 
#[0 12 45 0 55] 
#[0 12 49 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 12 53 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 12 57 0 89] 
#[0 12 61 0 55] 
#[0 12 65 0 89] 
#[0 12 69 0 55] 
#[0 5 26 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 12 73 0 99] 
#[1 9 125 0 116 12 77 0 144] 
#[0 5 30 0 10 0 113 0 116] 
#[1 5 201 0 1 3 51 0 3 5 209 0 5 5 34 0 6 5 213 0 7 5 217 0 8 5 34 0 9 5 221 0 10 5 225 0 11 5 229 0 12 5 34 0 13 3 55 0 14 5 34 0 15 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 5 34 0 22 5 34 0 23 6 5 0 24 5 34 0 25 5 34 0 26 3 59 0 29 6 13 0 30 6 17 0 32 5 34 0 34 5 34 0 35 5 34 0 44 5 34 0 47 5 34 0 49 5 34 0 50 5 34 0 53 5 34 0 54 5 34 0 55 5 34 0 56 6 21 0 57 5 34 0 59 5 34 0 60 5 34 0 62 5 34 0 63 5 34 0 64 5 34 0 66 5 34 0 67 5 34 0 68 5 34 0 69 6 25 0 72 5 34 0 73 6 29 0 75 5 34 0 77 5 34 0 79 5 34 0 80 5 34 0 82 5 34 0 83 6 33 0 85 5 34 0 88 5 34 0 89 5 34 0 90 5 34 0 91 5 34 0 92 5 34 0 93 5 34 0 94 5 34 0 96 5 34 0 97 5 34 0 99 5 34 0 100 5 34 0 101 5 34 0 102 5 34 0 103 5 34 0 107 5 34 0 108 5 34 0 109 6 37 0 110 5 34 0 111 5 34 0 117 5 34 0 118 5 34 0 119 5 34 0 120 5 34 0 121 5 34 0 122 5 34 0 123 5 34 0 124 5 34 0 125 5 34 0 127 6 41 0 239 6 45 0 241 6 49 0 243 5 34 1 48] 
#[0 5 38 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 5 42 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 12 81 0 6 11 45 0 9 11 49 0 168] 
#[0 5 46 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 12 85 0 134 12 85 0 135 12 85 0 136 12 85 0 137 12 85 0 138 12 85 0 139 12 85 0 140 12 85 0 141 12 85 0 142] 
#[0 5 50 0 6 0 9] 
#[1 1 197 0 33 12 89 0 167 12 89 0 170 12 89 0 171] 
#[0 5 54 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 5 58 0 6 0 9] 
#[1 2 90 0 6 2 90 0 9 6 121 0 19 6 129 0 187 12 93 0 188] 
#[0 5 62 0 6 0 9] 
#[0 5 66 0 6 0 9] 
#[0 5 70 0 6 0 9] 
#[0 5 74 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 5 78 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 5 82 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 12 97 0 89] 
#[0 5 86 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 5 90 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 0 6 0 77 0 6 0 119 0 6 0 127 12 101 0 133] 
#[1 12 105 0 77 1 49 0 119 1 185 0 127 12 109 0 135] 
#[1 0 6 0 77 0 6 0 119 0 6 0 127 12 113 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 12 117 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 12 117 0 213 5 141 0 214 5 141 0 215 12 117 0 219 12 117 0 220 12 117 0 221 12 117 0 222 12 117 0 223 12 117 0 230 12 117 0 231 12 117 0 232 12 117 0 233 12 117 0 234 12 117 0 235 12 117 0 236 12 117 0 237 12 117 0 238 12 117 0 240 12 117 0 242 12 117 0 244 12 117 0 245 12 117 0 246 12 117 0 247 12 117 0 248 12 117 0 249 12 117 0 250 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45 5 141 1 46 5 141 1 47] 
#[1 5 94 0 5 5 94 0 8 5 94 0 10 5 94 0 11 5 94 0 22 5 94 0 23 5 94 0 25 5 94 0 26 5 94 0 34 5 94 0 44 5 94 0 49 5 94 0 50 5 94 0 53 5 94 0 54 5 94 0 55 5 94 0 56 5 94 0 59 5 94 0 60 5 94 0 62 5 94 0 63 5 94 0 66 5 94 0 67 5 94 0 68 5 94 0 69 5 94 0 73 5 94 0 77 5 94 0 79 5 94 0 80 5 94 0 82 5 94 0 88 5 94 0 90 5 94 0 91 5 94 0 92 5 94 0 93 5 94 0 94 5 94 0 96 5 94 0 100 5 94 0 103 5 94 0 107 3 63 0 108 5 94 0 109 5 94 0 111 5 94 0 117 5 94 0 118 5 94 0 119 5 94 0 120 5 94 0 121 5 94 0 122 5 94 0 123 5 94 0 124 5 94 0 125 5 94 0 127] 
#[1 5 98 0 5 5 98 0 8 5 98 0 10 5 98 0 11 5 98 0 22 5 98 0 23 5 98 0 25 5 98 0 26 5 98 0 34 5 98 0 44 5 98 0 49 5 98 0 50 5 98 0 53 5 98 0 54 5 98 0 55 5 98 0 56 5 98 0 59 5 98 0 60 5 98 0 62 5 98 0 63 5 98 0 66 5 98 0 67 5 98 0 68 5 98 0 69 5 98 0 73 5 98 0 77 5 98 0 79 5 98 0 80 5 98 0 82 5 98 0 88 5 98 0 90 5 98 0 91 5 98 0 92 5 98 0 93 5 98 0 94 5 98 0 96 5 98 0 100 5 98 0 103 12 125 0 104 5 98 0 107 3 67 0 108 5 98 0 109 5 98 0 111 5 98 0 117 5 98 0 118 5 98 0 119 5 98 0 120 5 98 0 121 5 98 0 122 5 98 0 123 5 98 0 124 5 98 0 125 5 98 0 127] 
#[0 12 133 0 77] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 0 6 0 22 0 6 0 23 6 5 0 24 0 6 0 25 0 6 0 26 6 9 0 29 6 13 0 30 6 17 0 32 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 6 21 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 6 25 0 72 0 6 0 73 6 29 0 75 0 6 0 79 0 6 0 80 0 6 0 82 6 33 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 6 37 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 12 137 0 133 6 41 0 239 6 45 0 241 6 49 0 243] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 12 141 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 12 141 0 134 12 141 0 135 12 141 0 136 12 141 0 137 12 141 0 138 12 141 0 139 12 141 0 140 12 141 0 141 12 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 12 141 0 213 12 141 0 214 12 141 0 215 12 141 0 219 12 141 0 220 12 141 0 221 12 141 0 222 12 141 0 223 12 141 0 230 12 141 0 231 12 141 0 232 12 141 0 233 12 141 0 234 12 141 0 235 12 141 0 236 12 141 0 237 12 141 0 238 12 141 0 240 12 141 0 242 12 141 0 244 12 141 0 245 12 141 0 246 12 141 0 247 12 141 0 248 12 141 0 249 12 141 0 250 12 141 1 42 12 141 1 43 12 141 1 44 12 141 1 45 12 141 1 46 12 141 1 47] 
#[1 12 145 0 53 12 149 0 54 12 153 0 55 1 49 0 119 1 185 0 127 12 157 0 135 12 161 1 14 12 165 1 15 12 161 1 17 12 161 1 18 12 161 1 19] 
#[1 0 6 0 53 0 6 0 54 0 6 0 55 0 6 0 119 0 6 0 127 12 181 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 12 185 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 12 185 0 134 12 185 0 135 12 185 0 136 12 185 0 137 12 185 0 138 12 185 0 139 12 185 0 140 12 185 0 141 12 185 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 12 185 0 213 12 185 0 214 12 185 0 215 12 185 0 219 12 185 0 220 12 185 0 221 12 185 0 222 12 185 0 223 12 185 0 230 12 185 0 231 12 185 0 232 12 185 0 233 12 185 0 234 12 185 0 235 12 185 0 236 12 185 0 237 12 185 0 238 12 185 0 240 12 185 0 242 12 185 0 244 12 185 0 245 12 185 0 246 12 185 0 247 12 185 0 248 12 185 0 249 12 185 0 250 12 185 1 42 12 185 1 43 12 185 1 44 12 185 1 45 12 185 1 46 12 185 1 47] 
#[0 5 102 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 12 189 0 107] 
#[1 12 193 0 107 1 49 0 119 1 185 0 127 12 197 0 135] 
#[0 12 201 0 109] 
#[0 12 205 0 55] 
#[1 12 209 0 55 1 49 0 119 1 185 0 127 12 213 0 135] 
#[0 5 106 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 5 110 0 11 0 55 0 100 0 124 0 125 0 127] 
#[1 1 237 0 5 12 217 0 183] 
#[0 5 114 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 1 237 0 5 12 221 0 183] 
#[0 5 118 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 12 225 0 64] 
#[0 5 122 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 12 229 0 89] 
#[0 12 233 0 89] 
#[0 12 237 0 55] 
#[0 5 126 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 12 241 0 89] 
#[0 5 130 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 12 245 0 89] 
#[0 5 134 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 12 249 0 64] 
#[0 12 253 0 55] 
#[0 13 1 0 89] 
#[0 13 5 0 55] 
#[0 13 9 0 55] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 1 185 0 127 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 13 13 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 13 17 0 89] 
#[0 13 21 0 55] 
#[0 13 25 0 89] 
#[0 13 29 0 55] 
#[0 5 138 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 13 33 0 99] 
#[0 5 142 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 13 37 0 64] 
#[0 5 146 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 13 41 0 89] 
#[0 13 45 0 89] 
#[0 13 49 0 55] 
#[0 5 150 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 13 53 0 89] 
#[0 5 154 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 13 57 0 89] 
#[0 5 158 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 13 61 0 10 11 21 0 116] 
#[0 5 162 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 19 0 22 0 23 0 25 0 26 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 83 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 99 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[0 5 166 0 6 0 9] 
#[0 5 170 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 5 174 0 6 0 9] 
#[0 5 178 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 13 65 0 77 1 49 0 119 1 185 0 127 13 69 0 135] 
#[0 5 182 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 73 0 77] 
#[1 13 77 0 77 1 49 0 119 1 185 0 127 13 81 0 135] 
#[1 1 130 0 1 1 130 0 3 3 71 0 5 1 130 0 7 3 71 0 8 3 71 0 10 3 71 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 5 186 0 22 5 186 0 23 1 130 0 24 5 186 0 25 5 186 0 26 1 130 0 29 1 130 0 30 1 130 0 32 5 186 0 34 5 186 0 44 5 186 0 49 5 186 0 50 5 186 0 53 5 186 0 54 5 186 0 55 5 186 0 56 1 130 0 57 5 186 0 59 5 186 0 60 5 186 0 62 5 186 0 63 5 186 0 66 5 186 0 67 5 186 0 68 5 186 0 69 1 130 0 72 5 186 0 73 1 130 0 75 5 186 0 77 5 186 0 79 5 186 0 80 5 186 0 82 1 130 0 85 5 186 0 88 5 186 0 90 5 186 0 91 5 186 0 92 5 186 0 93 5 186 0 94 5 186 0 96 5 186 0 100 5 186 0 103 5 186 0 107 5 186 0 108 5 186 0 109 1 130 0 110 5 186 0 111 5 186 0 117 5 186 0 118 5 186 0 119 5 186 0 120 5 186 0 121 5 186 0 122 5 186 0 123 5 186 0 124 5 186 0 125 5 186 0 127] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 13 85 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 13 85 0 213 5 141 0 214 5 141 0 215 13 85 0 219 13 85 0 220 13 85 0 221 13 85 0 222 13 85 0 223 13 85 0 230 13 85 0 231 13 85 0 232 13 85 0 233 13 85 0 234 13 85 0 235 13 85 0 236 13 85 0 237 13 85 0 238 13 85 0 240 13 85 0 242 13 85 0 244 13 85 0 245 13 85 0 246 13 85 0 247 13 85 0 248 13 85 0 249 13 85 0 250 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45 5 141 1 46 5 141 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 13 89 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 13 89 0 213 5 141 0 214 5 141 0 215 13 89 0 219 13 89 0 220 13 89 0 221 13 89 0 222 13 89 0 223 13 89 0 230 13 89 0 231 13 89 0 232 13 89 0 233 13 89 0 234 13 89 0 235 13 89 0 236 13 89 0 237 13 89 0 238 13 89 0 240 13 89 0 242 13 89 0 244 13 89 0 245 13 89 0 246 13 89 0 247 13 89 0 248 13 89 0 249 13 89 0 250 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45 5 141 1 46 5 141 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 13 93 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 13 93 0 213 5 141 0 214 5 141 0 215 13 93 0 219 13 93 0 220 13 93 0 221 13 93 0 222 13 93 0 223 13 93 0 230 13 93 0 231 13 93 0 232 13 93 0 233 13 93 0 234 13 93 0 235 13 93 0 236 13 93 0 237 13 93 0 238 13 93 0 240 13 93 0 242 13 93 0 244 13 93 0 245 13 93 0 246 13 93 0 247 13 93 0 248 13 93 0 249 13 93 0 250 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45 5 141 1 46 5 141 1 47] 
#[1 5 190 0 5 5 190 0 8 5 190 0 10 5 190 0 11 5 190 0 22 5 190 0 23 5 190 0 25 5 190 0 26 5 190 0 34 5 190 0 44 5 190 0 49 5 190 0 50 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 59 5 190 0 60 5 190 0 62 5 190 0 63 5 190 0 66 5 190 0 67 5 190 0 68 5 190 0 69 5 190 0 73 5 190 0 77 5 190 0 79 5 190 0 80 5 190 0 82 5 190 0 88 5 190 0 90 5 190 0 91 5 190 0 92 5 190 0 93 5 190 0 94 5 190 0 96 5 190 0 100 5 190 0 103 13 97 0 104 5 190 0 107 3 75 0 108 5 190 0 109 5 190 0 111 5 190 0 117 5 190 0 118 5 190 0 119 5 190 0 120 5 190 0 121 5 190 0 122 5 190 0 123 5 190 0 124 5 190 0 125 5 190 0 127] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 0 6 0 79 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 13 105 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 13 109 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 0 6 0 22 0 6 0 23 6 5 0 24 0 6 0 25 0 6 0 26 6 9 0 29 6 13 0 30 6 17 0 32 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 6 21 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 6 25 0 72 0 6 0 73 6 29 0 75 0 6 0 79 0 6 0 80 0 6 0 82 6 33 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 13 113 0 97 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 6 37 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 117 0 133 6 41 0 239 6 45 0 241 6 49 0 243] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 13 121 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 13 125 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 13 125 0 134 13 125 0 135 13 125 0 136 13 125 0 137 13 125 0 138 13 125 0 139 13 125 0 140 13 125 0 141 13 125 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 13 125 0 213 13 125 0 214 13 125 0 215 13 125 0 219 13 125 0 220 13 125 0 221 13 125 0 222 13 125 0 223 13 125 0 230 13 125 0 231 13 125 0 232 13 125 0 233 13 125 0 234 13 125 0 235 13 125 0 236 13 125 0 237 13 125 0 238 13 125 0 240 13 125 0 242 13 125 0 244 13 125 0 245 13 125 0 246 13 125 0 247 13 125 0 248 13 125 0 249 13 125 0 250 13 125 1 42 13 125 1 43 13 125 1 44 13 125 1 45 13 125 1 46 13 125 1 47] 
#[0 13 129 0 69] 
#[1 13 133 0 53 13 137 0 55] 
#[0 5 194 0 53 0 54 0 55] 
#[1 13 141 0 53 12 149 0 54 13 145 0 55 13 149 1 14 13 149 1 17 13 149 1 18 13 149 1 19] 
#[0 5 198 0 53 0 54 0 55] 
#[0 5 202 0 53 0 54 0 55] 
#[0 5 206 0 53 0 54 0 55] 
#[1 13 153 0 53 12 149 0 54 13 157 0 55 1 49 0 119 1 185 0 127 13 161 0 135 12 161 1 14 13 165 1 15 12 161 1 17 12 161 1 18 12 161 1 19] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 5 210 0 22 5 210 0 23 6 5 0 24 5 210 0 25 5 210 0 26 6 9 0 29 6 13 0 30 6 17 0 32 5 210 0 34 5 210 0 44 5 210 0 49 5 210 0 50 5 210 0 53 5 210 0 54 5 210 0 55 5 210 0 56 6 21 0 57 5 210 0 59 5 210 0 60 5 210 0 62 5 210 0 63 5 210 0 66 5 210 0 67 5 210 0 68 5 210 0 69 6 25 0 72 5 210 0 73 6 29 0 75 5 210 0 77 5 210 0 79 5 210 0 80 5 210 0 82 6 33 0 85 5 210 0 88 5 210 0 90 5 210 0 91 5 210 0 92 5 210 0 93 5 210 0 94 5 210 0 96 5 210 0 100 5 210 0 103 5 210 0 107 5 210 0 108 5 210 0 109 6 37 0 110 5 210 0 111 5 210 0 117 5 210 0 118 5 210 0 119 5 210 0 120 5 210 0 121 5 210 0 122 5 210 0 123 5 210 0 124 5 210 0 125 5 210 0 127 6 41 0 239 6 45 0 241 6 49 0 243] 
#[0 5 214 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 5 218 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 169 0 107] 
#[0 5 222 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 173 0 109] 
#[0 13 177 0 109] 
#[0 13 181 0 55] 
#[1 1 197 0 33 13 185 0 167 13 185 0 170 13 185 0 171] 
#[0 5 226 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 5 230 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 5 234 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 5 238 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 13 189 0 89] 
#[0 5 242 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 5 246 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 5 250 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 13 193 0 64] 
#[0 5 254 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 13 197 0 89] 
#[0 13 201 0 89] 
#[0 13 205 0 55] 
#[0 6 2 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 13 209 0 89] 
#[0 6 6 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 13 213 0 89] 
#[0 6 10 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 6 14 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 6 18 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 6 22 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 13 217 0 89] 
#[0 6 26 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 6 30 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 9 125 0 116 13 221 0 144] 
#[0 6 34 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 225 0 77] 
#[0 6 38 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 42 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 13 229 0 77] 
#[1 1 130 0 1 1 130 0 3 3 79 0 5 1 130 0 7 3 79 0 8 3 79 0 10 3 79 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 6 46 0 22 6 46 0 23 1 130 0 24 6 46 0 25 6 46 0 26 1 130 0 29 1 130 0 30 1 130 0 32 6 46 0 34 6 46 0 44 6 46 0 49 6 46 0 50 6 46 0 53 6 46 0 54 6 46 0 55 6 46 0 56 1 130 0 57 6 46 0 59 6 46 0 60 6 46 0 62 6 46 0 63 6 46 0 66 6 46 0 67 6 46 0 68 6 46 0 69 1 130 0 72 6 46 0 73 1 130 0 75 6 46 0 77 6 46 0 79 6 46 0 80 6 46 0 82 1 130 0 85 6 46 0 88 6 46 0 90 6 46 0 91 6 46 0 92 6 46 0 93 6 46 0 94 6 46 0 96 6 46 0 100 6 46 0 103 6 46 0 107 6 46 0 108 6 46 0 109 1 130 0 110 6 46 0 111 6 46 0 117 6 46 0 118 6 46 0 119 6 46 0 120 6 46 0 121 6 46 0 122 6 46 0 123 6 46 0 124 6 46 0 125 6 46 0 127] 
#[1 1 130 0 1 1 130 0 3 3 83 0 5 1 130 0 7 3 83 0 8 3 83 0 10 3 83 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 6 50 0 22 6 50 0 23 1 130 0 24 6 50 0 25 6 50 0 26 1 130 0 29 1 130 0 30 1 130 0 32 6 50 0 34 6 50 0 44 6 50 0 49 6 50 0 50 6 50 0 53 6 50 0 54 6 50 0 55 6 50 0 56 1 130 0 57 6 50 0 59 6 50 0 60 6 50 0 62 6 50 0 63 6 50 0 66 6 50 0 67 6 50 0 68 6 50 0 69 1 130 0 72 6 50 0 73 1 130 0 75 6 50 0 77 6 50 0 79 6 50 0 80 6 50 0 82 1 130 0 85 6 50 0 88 6 50 0 90 6 50 0 91 6 50 0 92 6 50 0 93 6 50 0 94 6 50 0 96 6 50 0 100 6 50 0 103 6 50 0 107 6 50 0 108 6 50 0 109 1 130 0 110 6 50 0 111 6 50 0 117 6 50 0 118 6 50 0 119 6 50 0 120 6 50 0 121 6 50 0 122 6 50 0 123 6 50 0 124 6 50 0 125 6 50 0 127] 
#[1 1 130 0 1 1 130 0 3 3 87 0 5 1 130 0 7 3 87 0 8 3 87 0 10 3 87 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 6 54 0 22 6 54 0 23 1 130 0 24 6 54 0 25 6 54 0 26 1 130 0 29 1 130 0 30 1 130 0 32 6 54 0 34 6 54 0 44 6 54 0 49 6 54 0 50 6 54 0 53 6 54 0 54 6 54 0 55 6 54 0 56 1 130 0 57 6 54 0 59 6 54 0 60 6 54 0 62 6 54 0 63 6 54 0 66 6 54 0 67 6 54 0 68 6 54 0 69 1 130 0 72 6 54 0 73 1 130 0 75 6 54 0 77 6 54 0 79 6 54 0 80 6 54 0 82 1 130 0 85 6 54 0 88 6 54 0 90 6 54 0 91 6 54 0 92 6 54 0 93 6 54 0 94 6 54 0 96 6 54 0 100 6 54 0 103 6 54 0 107 6 54 0 108 6 54 0 109 1 130 0 110 6 54 0 111 6 54 0 117 6 54 0 118 6 54 0 119 6 54 0 120 6 54 0 121 6 54 0 122 6 54 0 123 6 54 0 124 6 54 0 125 6 54 0 127] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 13 233 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 13 233 0 213 5 141 0 214 5 141 0 215 13 233 0 219 13 233 0 220 13 233 0 221 13 233 0 222 13 233 0 223 13 233 0 230 13 233 0 231 13 233 0 232 13 233 0 233 13 233 0 234 13 233 0 235 13 233 0 236 13 233 0 237 13 233 0 238 13 233 0 240 13 233 0 242 13 233 0 244 13 233 0 245 13 233 0 246 13 233 0 247 13 233 0 248 13 233 0 249 13 233 0 250 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45 5 141 1 46 5 141 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 13 237 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 5 141 0 134 5 141 0 135 5 141 0 136 5 141 0 137 5 141 0 138 5 141 0 139 5 141 0 140 5 141 0 141 5 141 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 13 237 0 213 5 141 0 214 5 141 0 215 13 237 0 219 13 237 0 220 13 237 0 221 13 237 0 222 13 237 0 223 13 237 0 230 13 237 0 231 13 237 0 232 13 237 0 233 13 237 0 234 13 237 0 235 13 237 0 236 13 237 0 237 13 237 0 238 13 237 0 240 13 237 0 242 13 237 0 244 13 237 0 245 13 237 0 246 13 237 0 247 13 237 0 248 13 237 0 249 13 237 0 250 5 141 1 42 5 141 1 43 5 141 1 44 5 141 1 45 5 141 1 46 5 141 1 47] 
#[1 13 241 0 79 1 49 0 119 1 185 0 127 13 245 0 135] 
#[1 0 6 0 79 0 6 0 119 0 6 0 127 13 249 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 2 165 0 60 13 253 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 13 253 0 134 13 253 0 135 13 253 0 136 13 253 0 137 13 253 0 138 13 253 0 139 13 253 0 140 13 253 0 141 13 253 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 13 253 0 213 13 253 0 214 13 253 0 215 13 253 0 219 13 253 0 220 13 253 0 221 13 253 0 222 13 253 0 223 13 253 0 230 13 253 0 231 13 253 0 232 13 253 0 233 13 253 0 234 13 253 0 235 13 253 0 236 13 253 0 237 13 253 0 238 13 253 0 240 13 253 0 242 13 253 0 244 13 253 0 245 13 253 0 246 13 253 0 247 13 253 0 248 13 253 0 249 13 253 0 250 13 253 1 42 13 253 1 43 13 253 1 44 13 253 1 45 13 253 1 46 13 253 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 0 6 0 79 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 14 1 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 14 5 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 6 0 55 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 14 9 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 14 13 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 6 5 0 24 6 9 0 29 6 13 0 30 6 17 0 32 6 21 0 57 6 25 0 72 6 29 0 75 6 33 0 85 14 17 0 101 6 37 0 110 6 41 0 239 6 45 0 241 6 49 0 243] 
#[0 6 58 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 21 0 133] 
#[0 14 25 0 69] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 29 0 133] 
#[0 14 33 0 69] 
#[0 6 62 0 53 0 54 0 55] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 37 0 133] 
#[0 14 41 0 69] 
#[1 14 45 0 53 14 49 0 55] 
#[1 14 53 0 53 12 149 0 54 14 57 0 55 13 149 1 14 13 149 1 17 13 149 1 18 13 149 1 19] 
#[0 6 66 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 70 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 74 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 14 61 0 109] 
#[0 6 78 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 6 82 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 6 86 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 6 90 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 6 94 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 14 65 0 89] 
#[0 6 98 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 6 102 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[0 6 106 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 14 69 0 10 11 21 0 116] 
#[0 6 110 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 114 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 1 130 0 1 1 130 0 3 3 91 0 5 1 130 0 7 3 91 0 8 3 91 0 10 3 91 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 6 118 0 22 6 118 0 23 1 130 0 24 6 118 0 25 6 118 0 26 1 130 0 29 1 130 0 30 1 130 0 32 6 118 0 34 6 118 0 44 6 118 0 49 6 118 0 50 6 118 0 53 6 118 0 54 6 118 0 55 6 118 0 56 1 130 0 57 6 118 0 59 6 118 0 60 6 118 0 62 6 118 0 63 6 118 0 66 6 118 0 67 6 118 0 68 6 118 0 69 1 130 0 72 6 118 0 73 1 130 0 75 6 118 0 77 6 118 0 79 6 118 0 80 6 118 0 82 1 130 0 85 6 118 0 88 6 118 0 90 6 118 0 91 6 118 0 92 6 118 0 93 6 118 0 94 6 118 0 96 6 118 0 100 6 118 0 103 6 118 0 107 6 118 0 108 6 118 0 109 1 130 0 110 6 118 0 111 6 118 0 117 6 118 0 118 6 118 0 119 6 118 0 120 6 118 0 121 6 118 0 122 6 118 0 123 6 118 0 124 6 118 0 125 6 118 0 127] 
#[1 1 130 0 1 1 130 0 3 3 95 0 5 1 130 0 7 3 95 0 8 3 95 0 10 3 95 0 11 1 130 0 12 1 130 0 14 1 130 0 16 1 130 0 17 1 130 0 18 1 130 0 19 1 130 0 20 1 130 0 21 6 122 0 22 6 122 0 23 1 130 0 24 6 122 0 25 6 122 0 26 1 130 0 29 1 130 0 30 1 130 0 32 6 122 0 34 6 122 0 44 6 122 0 49 6 122 0 50 6 122 0 53 6 122 0 54 6 122 0 55 6 122 0 56 1 130 0 57 6 122 0 59 6 122 0 60 6 122 0 62 6 122 0 63 6 122 0 66 6 122 0 67 6 122 0 68 6 122 0 69 1 130 0 72 6 122 0 73 1 130 0 75 6 122 0 77 6 122 0 79 6 122 0 80 6 122 0 82 1 130 0 85 6 122 0 88 6 122 0 90 6 122 0 91 6 122 0 92 6 122 0 93 6 122 0 94 6 122 0 96 6 122 0 100 6 122 0 103 6 122 0 107 6 122 0 108 6 122 0 109 1 130 0 110 6 122 0 111 6 122 0 117 6 122 0 118 6 122 0 119 6 122 0 120 6 122 0 121 6 122 0 122 6 122 0 123 6 122 0 124 6 122 0 125 6 122 0 127] 
#[1 6 126 0 5 6 126 0 8 6 126 0 10 0 209 0 11 6 126 0 22 6 126 0 23 6 126 0 25 6 126 0 26 6 126 0 34 6 126 0 44 6 126 0 49 6 126 0 50 6 126 0 53 6 126 0 54 6 126 0 55 6 126 0 56 6 126 0 59 6 126 0 60 6 126 0 62 6 126 0 63 6 126 0 66 6 126 0 67 6 126 0 68 6 126 0 69 6 126 0 73 6 126 0 77 6 126 0 79 6 126 0 80 6 126 0 82 6 126 0 88 6 126 0 90 6 126 0 91 6 126 0 92 6 126 0 93 6 126 0 94 6 126 0 96 3 99 0 100 6 126 0 103 6 126 0 107 6 126 0 108 6 126 0 109 6 126 0 111 6 126 0 117 6 126 0 118 6 126 0 119 6 126 0 120 6 126 0 121 6 126 0 122 6 126 0 123 3 103 0 124 3 107 0 125 6 126 0 127 14 73 0 145 14 73 0 146 14 73 0 147 14 73 0 148 14 73 0 149] 
#[0 14 77 0 79] 
#[1 14 81 0 79 1 49 0 119 1 185 0 127 14 85 0 135] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 0 6 0 22 0 6 0 23 6 5 0 24 0 6 0 25 0 6 0 26 6 9 0 29 6 13 0 30 6 17 0 32 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 56 6 21 0 57 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 6 25 0 72 0 6 0 73 6 29 0 75 0 6 0 79 0 6 0 80 0 6 0 82 6 33 0 85 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 6 37 0 110 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 89 0 133 6 41 0 239 6 45 0 241 6 49 0 243] 
#[1 14 93 0 79 1 49 0 119 1 185 0 127 14 97 0 135] 
#[1 0 6 0 79 0 6 0 119 0 6 0 127 14 101 0 133] 
#[1 14 105 0 55 1 49 0 119 1 185 0 127 14 109 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 14 113 0 133] 
#[1 3 111 0 5 3 111 0 8 3 111 0 10 3 111 0 11 6 130 0 13 3 111 0 22 3 111 0 23 3 111 0 25 3 111 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 3 111 0 53 3 111 0 54 3 111 0 55 0 6 0 56 0 6 0 59 3 111 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 3 111 0 73 3 111 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 3 111 0 94 0 6 0 96 3 111 0 100 0 6 0 103 0 6 0 108 0 6 0 109 3 111 0 111 3 111 0 117 3 111 0 118 3 111 0 119 3 111 0 120 3 111 0 121 3 111 0 122 3 111 0 123 3 111 0 124 3 111 0 125 0 6 0 127 14 117 0 133 14 121 1 21] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 6 0 55 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 14 125 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 14 129 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 6 134 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 6 0 55 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 14 133 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 14 137 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 6 138 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 6 0 55 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 14 141 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 14 145 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 6 142 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 149 0 133] 
#[0 14 153 0 69] 
#[1 0 6 0 5 0 6 0 8 0 6 0 10 0 6 0 11 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 26 0 6 0 34 0 6 0 44 0 6 0 49 0 6 0 50 0 6 0 55 0 6 0 56 0 6 0 59 0 6 0 60 0 6 0 62 0 6 0 63 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 73 0 6 0 80 0 6 0 82 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 100 0 6 0 103 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 117 0 6 0 118 0 6 0 119 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 124 0 6 0 125 0 6 0 127 14 157 0 133] 
#[0 14 161 0 69] 
#[0 6 146 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 150 0 34 0 35 0 44 0 47 0 49 0 56 0 59 0 63 0 64 0 66 0 83 0 88 0 89 0 90 0 91 0 96 0 99 0 103 0 127 1 48] 
#[1 9 125 0 116 14 165 0 144] 
#[1 6 154 0 5 6 154 0 8 6 154 0 10 1 177 0 11 6 154 0 22 6 154 0 23 6 154 0 25 6 154 0 26 6 154 0 34 6 154 0 44 6 154 0 49 6 154 0 50 6 154 0 53 6 154 0 54 6 154 0 55 6 154 0 56 6 154 0 59 6 154 0 60 6 154 0 62 6 154 0 63 6 154 0 66 6 154 0 67 6 154 0 68 6 154 0 69 6 154 0 73 6 154 0 77 6 154 0 79 6 154 0 80 6 154 0 82 6 154 0 88 6 154 0 90 6 154 0 91 6 154 0 92 6 154 0 93 6 154 0 94 6 154 0 96 6 154 0 100 6 154 0 103 6 154 0 107 6 154 0 108 6 154 0 109 6 154 0 111 6 154 0 117 6 154 0 118 6 154 0 119 6 154 0 120 6 154 0 121 6 154 0 122 6 154 0 123 6 154 0 124 6 154 0 125 6 154 0 127] 
#[1 6 158 0 5 6 158 0 8 6 158 0 10 0 209 0 11 6 158 0 22 6 158 0 23 6 158 0 25 6 158 0 26 6 158 0 34 6 158 0 44 6 158 0 49 6 158 0 50 6 158 0 53 6 158 0 54 6 158 0 55 6 158 0 56 6 158 0 59 6 158 0 60 6 158 0 62 6 158 0 63 6 158 0 66 6 158 0 67 6 158 0 68 6 158 0 69 6 158 0 73 6 158 0 77 6 158 0 79 6 158 0 80 6 158 0 82 6 158 0 88 6 158 0 90 6 158 0 91 6 158 0 92 6 158 0 93 6 158 0 94 6 158 0 96 3 115 0 100 6 158 0 103 6 158 0 107 6 158 0 108 6 158 0 109 6 158 0 111 6 158 0 117 6 158 0 118 6 158 0 119 6 158 0 120 6 158 0 121 6 158 0 122 6 158 0 123 3 119 0 124 3 123 0 125 6 158 0 127 14 169 0 145 14 169 0 146 14 169 0 147 14 169 0 148 14 169 0 149] 
#[1 6 162 0 5 6 162 0 8 6 162 0 10 0 209 0 11 6 162 0 22 6 162 0 23 6 162 0 25 6 162 0 26 6 162 0 34 6 162 0 44 6 162 0 49 6 162 0 50 6 162 0 53 6 162 0 54 6 162 0 55 6 162 0 56 6 162 0 59 6 162 0 60 6 162 0 62 6 162 0 63 6 162 0 66 6 162 0 67 6 162 0 68 6 162 0 69 6 162 0 73 6 162 0 77 6 162 0 79 6 162 0 80 6 162 0 82 6 162 0 88 6 162 0 90 6 162 0 91 6 162 0 92 6 162 0 93 6 162 0 94 6 162 0 96 3 127 0 100 6 162 0 103 6 162 0 107 6 162 0 108 6 162 0 109 6 162 0 111 6 162 0 117 6 162 0 118 6 162 0 119 6 162 0 120 6 162 0 121 6 162 0 122 6 162 0 123 3 131 0 124 3 135 0 125 6 162 0 127 14 173 0 145 14 173 0 146 14 173 0 147 14 173 0 148 14 173 0 149] 
#[0 14 177 0 79] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 0 6 0 79 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 14 181 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 14 185 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 6 166 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 14 189 0 79] 
#[1 14 193 0 79 1 49 0 119 1 185 0 127 14 197 0 135] 
#[0 14 201 0 69] 
#[0 14 205 0 55] 
#[1 14 209 0 55 1 49 0 119 1 185 0 127 14 213 0 135] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 6 0 53 0 6 0 54 0 6 0 55 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 14 217 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 14 221 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 14 225 0 13 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 6 170 0 53 6 170 0 54 6 170 0 55 2 165 0 60 14 229 0 73 2 173 0 80 2 177 0 94 0 213 0 100 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 2 241 0 124 0 221 0 125 14 229 0 134 14 229 0 135 14 229 0 136 14 229 0 137 14 229 0 138 14 229 0 139 14 229 0 140 14 229 0 141 14 229 0 142 2 241 0 145 2 241 0 146 2 241 0 147 2 241 0 148 2 241 0 149 14 229 0 213 14 229 0 214 14 229 0 215 14 229 0 219 14 229 0 220 14 229 0 221 14 229 0 222 14 229 0 223 14 229 0 230 14 229 0 231 14 229 0 232 14 229 0 233 14 229 0 234 14 229 0 235 14 229 0 236 14 229 0 237 14 229 0 238 14 229 0 240 14 229 0 242 14 229 0 244 14 229 0 245 14 229 0 246 14 229 0 247 14 229 0 248 14 229 0 249 14 229 0 250 14 233 1 20 14 229 1 42 14 229 1 43 14 229 1 44 14 229 1 45 14 229 1 46 14 229 1 47] 
#[1 14 237 0 55 1 49 0 119 1 185 0 127 14 241 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 14 245 0 133] 
#[1 14 249 0 55 1 185 0 127] 
#[1 0 6 0 55 0 6 0 127 14 253 0 133] 
#[1 15 1 0 55 1 49 0 119 1 185 0 127 15 5 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 15 9 0 133] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 6 0 55 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 0 187 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 15 13 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 15 17 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 6 174 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 2 137 0 5 2 141 0 8 2 145 0 10 0 209 0 11 2 149 0 22 2 153 0 23 2 157 0 25 2 161 0 26 0 9 0 34 0 17 0 44 0 25 0 49 4 33 0 50 0 6 0 55 0 29 0 56 0 33 0 59 2 165 0 60 4 37 0 62 4 89 0 63 4 89 0 66 4 41 0 67 4 45 0 68 4 49 0 69 4 101 0 73 2 173 0 80 4 53 0 82 4 89 0 88 4 89 0 90 0 65 0 91 4 57 0 92 2 177 0 94 4 61 0 96 0 213 0 100 0 77 0 103 4 65 0 108 4 69 0 109 2 181 0 111 2 185 0 117 2 189 0 118 1 49 0 119 1 97 0 120 2 193 0 121 2 197 0 122 2 201 0 123 4 73 0 124 0 221 0 125 0 191 0 127 15 21 0 133 4 101 0 134 4 101 0 135 4 101 0 136 4 101 0 137 4 101 0 138 4 101 0 139 4 101 0 140 4 101 0 141 4 101 0 142 4 73 0 145 4 73 0 146 4 73 0 147 4 73 0 148 4 73 0 149 4 81 0 153 4 81 0 159 15 25 0 160 4 89 0 164 4 81 0 172 4 81 0 173 4 81 0 177 4 81 0 178 4 81 0 199 4 81 0 200 4 81 0 201 4 81 0 202 4 81 0 203 4 81 0 205 4 81 0 206 4 81 0 207 4 81 0 208 4 81 0 212 4 101 0 213 4 101 0 214 4 101 0 215 4 101 0 219 4 101 0 220 4 101 0 221 4 101 0 222 4 101 0 223 4 101 0 230 4 101 0 231 4 101 0 232 4 101 0 233 4 101 0 234 4 101 0 235 4 101 0 236 4 101 0 237 4 101 0 238 4 101 0 240 4 101 0 242 4 101 0 244 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 81 0 251 4 81 0 252 4 81 0 253 4 81 0 254 4 81 0 255 4 81 1 0 4 81 1 1 4 81 1 2 4 81 1 3 4 81 1 4 4 81 1 5 4 81 1 6 4 81 1 7 4 81 1 8 4 81 1 9 4 81 1 10 4 81 1 11 4 81 1 12 4 81 1 13 4 81 1 16 4 81 1 22 4 189 1 23 4 81 1 24 4 81 1 25 4 81 1 26 4 81 1 27 4 81 1 28 4 81 1 29 4 81 1 30 4 81 1 31 4 81 1 32 4 81 1 33 4 81 1 34 4 81 1 35 4 81 1 36 4 81 1 37 4 81 1 38 4 81 1 39 4 81 1 41 5 5 1 42 5 5 1 43 5 5 1 44 5 5 1 45 5 5 1 46 5 5 1 47] 
#[0 6 178 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[1 15 29 0 113 11 21 0 116] 
#[1 6 182 0 5 6 182 0 8 6 182 0 10 1 177 0 11 6 182 0 22 6 182 0 23 6 182 0 25 6 182 0 26 6 182 0 34 6 182 0 44 6 182 0 49 6 182 0 50 6 182 0 53 6 182 0 54 6 182 0 55 6 182 0 56 6 182 0 59 6 182 0 60 6 182 0 62 6 182 0 63 6 182 0 66 6 182 0 67 6 182 0 68 6 182 0 69 6 182 0 73 6 182 0 77 6 182 0 79 6 182 0 80 6 182 0 82 6 182 0 88 6 182 0 90 6 182 0 91 6 182 0 92 6 182 0 93 6 182 0 94 6 182 0 96 6 182 0 100 6 182 0 103 6 182 0 107 6 182 0 108 6 182 0 109 6 182 0 111 6 182 0 117 6 182 0 118 6 182 0 119 6 182 0 120 6 182 0 121 6 182 0 122 6 182 0 123 6 182 0 124 6 182 0 125 6 182 0 127] 
#[1 6 186 0 5 6 186 0 8 6 186 0 10 1 177 0 11 6 186 0 22 6 186 0 23 6 186 0 25 6 186 0 26 6 186 0 34 6 186 0 44 6 186 0 49 6 186 0 50 6 186 0 53 6 186 0 54 6 186 0 55 6 186 0 56 6 186 0 59 6 186 0 60 6 186 0 62 6 186 0 63 6 186 0 66 6 186 0 67 6 186 0 68 6 186 0 69 6 186 0 73 6 186 0 77 6 186 0 79 6 186 0 80 6 186 0 82 6 186 0 88 6 186 0 90 6 186 0 91 6 186 0 92 6 186 0 93 6 186 0 94 6 186 0 96 6 186 0 100 6 186 0 103 6 186 0 107 6 186 0 108 6 186 0 109 6 186 0 111 6 186 0 117 6 186 0 118 6 186 0 119 6 186 0 120 6 186 0 121 6 186 0 122 6 186 0 123 6 186 0 124 6 186 0 125 6 186 0 127] 
#[1 6 190 0 5 6 190 0 8 6 190 0 10 0 209 0 11 6 190 0 22 6 190 0 23 6 190 0 25 6 190 0 26 6 190 0 34 6 190 0 44 6 190 0 49 6 190 0 50 6 190 0 53 6 190 0 54 6 190 0 55 6 190 0 56 6 190 0 59 6 190 0 60 6 190 0 62 6 190 0 63 6 190 0 66 6 190 0 67 6 190 0 68 6 190 0 69 6 190 0 73 6 190 0 77 6 190 0 79 6 190 0 80 6 190 0 82 6 190 0 88 6 190 0 90 6 190 0 91 6 190 0 92 6 190 0 93 6 190 0 94 6 190 0 96 3 139 0 100 6 190 0 103 6 190 0 107 6 190 0 108 6 190 0 109 6 190 0 111 6 190 0 117 6 190 0 118 6 190 0 119 6 190 0 120 6 190 0 121 6 190 0 122 6 190 0 123 3 143 0 124 3 147 0 125 6 190 0 127 15 33 0 145 15 33 0 146 15 33 0 147 15 33 0 148 15 33 0 149] 
#[1 15 37 0 79 1 49 0 119 1 185 0 127 15 41 0 135] 
#[1 0 6 0 79 0 6 0 119 0 6 0 127 15 45 0 133] 
#[0 6 194 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 198 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 49 0 79] 
#[0 6 202 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 53 0 69] 
#[0 15 57 0 69] 
#[0 15 61 0 55] 
#[1 6 206 0 53 6 206 0 54 6 206 0 55 1 185 0 127] 
#[1 0 6 0 53 0 6 0 54 0 6 0 55 0 6 0 127 15 65 0 133] 
#[0 6 210 0 5 0 8 0 10 0 11 0 13 0 22 0 23 0 25 0 26 0 53 0 54 0 55 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[1 5 201 0 1 5 205 0 3 5 209 0 5 5 213 0 7 5 217 0 8 5 221 0 10 5 225 0 11 5 229 0 12 15 69 0 13 5 233 0 14 5 237 0 16 5 241 0 17 5 245 0 18 5 249 0 19 5 253 0 20 6 1 0 21 6 5 0 24 6 9 0 29 6 13 0 30 6 17 0 32 6 21 0 57 6 25 0 72 6 29 0 75 6 33 0 85 6 37 0 110 6 41 0 239 6 45 0 241 6 49 0 243] 
#[0 6 214 0 5 0 8 0 10 0 11 0 13 0 22 0 23 0 25 0 26 0 53 0 54 0 55 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 15 73 0 69] 
#[0 15 77 0 55] 
#[1 15 81 0 55 1 49 0 119 1 185 0 127 15 85 0 135] 
#[0 15 89 0 69] 
#[1 15 93 0 55 1 185 0 127] 
#[0 15 97 0 69] 
#[0 15 101 0 55] 
#[1 15 105 0 55 1 49 0 119 1 185 0 127 15 109 0 135] 
#[1 15 113 0 55 1 49 0 119 1 185 0 127 15 117 0 135] 
#[1 0 6 0 55 0 6 0 119 0 6 0 127 15 121 0 133] 
#[1 15 125 0 55 1 185 0 127] 
#[1 0 6 0 55 0 6 0 127 15 129 0 133] 
#[0 6 218 0 1 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 34 0 35 0 44 0 47 0 49 0 50 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 77 0 79 0 80 0 82 0 83 0 85 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 96 0 97 0 99 0 100 0 101 0 102 0 103 0 107 0 108 0 109 0 110 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127 1 48] 
#[1 6 222 0 5 6 222 0 8 6 222 0 10 1 177 0 11 6 222 0 22 6 222 0 23 6 222 0 25 6 222 0 26 6 222 0 34 6 222 0 44 6 222 0 49 6 222 0 50 6 222 0 53 6 222 0 54 6 222 0 55 6 222 0 56 6 222 0 59 6 222 0 60 6 222 0 62 6 222 0 63 6 222 0 66 6 222 0 67 6 222 0 68 6 222 0 69 6 222 0 73 6 222 0 77 6 222 0 79 6 222 0 80 6 222 0 82 6 222 0 88 6 222 0 90 6 222 0 91 6 222 0 92 6 222 0 93 6 222 0 94 6 222 0 96 6 222 0 100 6 222 0 103 6 222 0 107 6 222 0 108 6 222 0 109 6 222 0 111 6 222 0 117 6 222 0 118 6 222 0 119 6 222 0 120 6 222 0 121 6 222 0 122 6 222 0 123 6 222 0 124 6 222 0 125 6 222 0 127] 
#[0 6 226 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 133 0 79] 
#[1 15 137 0 79 1 49 0 119 1 185 0 127 15 141 0 135] 
#[0 6 230 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 234 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 6 238 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 145 0 69] 
#[1 6 242 0 53 6 242 0 54 6 242 0 55 1 185 0 127] 
#[0 6 246 0 5 0 8 0 10 0 11 0 13 0 22 0 23 0 25 0 26 0 53 0 54 0 55 0 60 0 73 0 80 0 94 0 100 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125] 
#[0 6 250 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 149 0 69] 
#[0 15 153 0 69] 
#[0 15 157 0 55] 
#[0 6 254 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 161 0 69] 
#[0 7 2 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 165 0 69] 
#[0 15 169 0 69] 
#[0 15 173 0 55] 
#[0 15 177 0 69] 
#[0 15 181 0 55] 
#[1 15 185 0 55 1 49 0 119 1 185 0 127 15 189 0 135] 
#[0 15 193 0 69] 
#[1 15 197 0 55 1 185 0 127] 
#[0 7 6 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 10 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 201 0 79] 
#[0 7 14 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 18 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 22 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 205 0 69] 
#[0 7 26 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 30 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 34 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 209 0 69] 
#[0 7 38 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 213 0 69] 
#[0 15 217 0 69] 
#[0 15 221 0 55] 
#[0 7 42 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 225 0 69] 
#[0 7 46 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 50 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 54 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 58 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 62 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 15 229 0 69] 
#[0 7 66 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127] 
#[0 7 70 0 5 0 8 0 10 0 11 0 22 0 23 0 25 0 26 0 34 0 44 0 49 0 50 0 53 0 54 0 55 0 56 0 59 0 60 0 62 0 63 0 66 0 67 0 68 0 69 0 73 0 77 0 79 0 80 0 82 0 88 0 90 0 91 0 92 0 93 0 94 0 96 0 100 0 103 0 107 0 108 0 109 0 111 0 117 0 118 0 119 0 120 0 121 0 122 0 123 0 124 0 125 0 127]
	).
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAddressOfClause1: nodes [
	| result |
	result := VBAddressOfClauseNode new.
	result addressOfToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument1: nodes [
	| result |
	result := VBArgumentNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument2: nodes [
	| result |
	result := VBArgumentNode new.
	result paramarrayToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument3: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument4: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result arguments.
	result addTokens: ((nodes at: 2) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 3) to: result arguments.
	result addNode: (nodes at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result timesToken: ((nodes at: 2) at: 1).
	result plusToken: ((nodes at: 2) at: 2).
	result minusToken: ((nodes at: 2) at: 3).
	result divideToken: ((nodes at: 2) at: 4).
	result upArrowToken: ((nodes at: 2) at: 5).
	result _Token: ((nodes at: 2) at: 6).
	result modToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator4: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator6: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator7: nodes [
	| result |
	result := Array new: 7.
	result at: 7 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignementOrEquals1: nodes [
	| result |
	result := VBAssignementOrEqualsNode new.
	result left: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBModuleAttributeNode new.
	result attributeToken: (nodes at: 1).
	result setting: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBaseType11: nodes [
	| result |
	result := VBBaseTypeNode new.
	result variantToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addObject: (nodes at: 1) to: result statements.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addObjects: ((nodes at: 2) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanBinaryOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result andToken: ((nodes at: 2) at: 1).
	result orToken: ((nodes at: 2) at: 2).
	result xorToken: ((nodes at: 2) at: 3).
	result eqvToken: ((nodes at: 2) at: 4).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanLiteral1: nodes [
	| result |
	result := VBBooleanLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForColorLiteral1: nodes [
	| result |
	result := VBColorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperation1: nodes [
	| result |
	result := VBComparisonOperationNode new.
	result left: (nodes at: 1).
	result greaterThanToken: ((nodes at: 2) at: 1).
	result lessThanToken: ((nodes at: 2) at: 2).
	result lessThanGreaterThanToken: ((nodes at: 2) at: 3).
	result lessThanEqualToken: ((nodes at: 2) at: 4).
	result greaterThanEqualToken: ((nodes at: 2) at: 5).
	result isToken: ((nodes at: 2) at: 6).
	result likeToken: ((nodes at: 2) at: 7).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator5: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType1: nodes [
	| result |
	result := VBComplexTypeNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConcatenationOperation1: nodes [
	| result |
	result := VBConcatenationOperationNode new.
	result left: (nodes at: 1).
	result andToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConfiguration1: nodes [
	| result |
	result := VBConfigurationNode new.
	result beginToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result settings.
	result addNodes: ((nodes at: 4) at: 1) to: result settings.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDateLiteral1: nodes [
	| result |
	result := VBDateLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction1: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction2: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction3: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction4: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	result type: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub1: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result parameters: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub2: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result libToken: (nodes at: 4).
	result library: (nodes at: 5).
	result aliasToken: (nodes at: 6).
	result alias: (nodes at: 7).
	result parameters: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub3: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result parameters: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub4: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result libToken: (nodes at: 5).
	result library: (nodes at: 6).
	result aliasToken: (nodes at: 7).
	result alias: (nodes at: 8).
	result parameters: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum1: nodes [
	| result |
	result := VBDefineEnumNode new.
	result addToken: (nodes at: 1) to: result enumTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum2: nodes [
	| result |
	result := VBDefineEnumNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction1: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction2: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction3: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction4: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction5: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction6: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result functionTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction7: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction8: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result functionTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub1: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result selector: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub2: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub3: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub4: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub5: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub6: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result subTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub7: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result subTokens.
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub8: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result subTokens.
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType1: nodes [
	| result |
	result := VBDefineTypeNode new.
	result addToken: (nodes at: 1) to: result typeTokens.
	result name: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result fields.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType2: nodes [
	| result |
	result := VBDefineTypeNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result typeTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariable1: nodes [
	| result |
	result := VBDimVariableNode new.
	result dimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariables1: nodes [
	| result |
	result := VBDimMultipleVariablesNode new.
	result dimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess1: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result receiver: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue1: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	result untilToken: (nodes at: 6).
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue2: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	result untilToken: (nodes at: 7).
	result condition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue1: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result loopToken: (nodes at: 4).
	result whileToken: (nodes at: 5).
	result condition: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue2: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result endLineNumber: (nodes at: 4).
	result loopToken: (nodes at: 5).
	result whileToken: (nodes at: 6).
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue3: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	result whileToken: (nodes at: 6).
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue4: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	result whileToken: (nodes at: 7).
	result condition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfBlock1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfBlock2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result ifMatch: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIfColon1: nodes [
	| result |
	result := VBElseIfColonNode new.
	result elseifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 4) at: 2) to: result ifMatches.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry1: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry2: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent1: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result selector: (nodes at: 2).
	result parameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent2: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result eventToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitDo1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result doToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFor1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result forToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFunction1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result functionToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitProperty1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result propertyToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitSub1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result subToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result setToken: (nodes at: 1).
	result left: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result right: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement3: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result left: (nodes at: 1).
	result colonEqualToken: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitCall1: nodes [
	| result |
	result := VBExplicitCallNode new.
	result callToken: (nodes at: 1).
	result call: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFloatLiteral1: nodes [
	| result |
	result := VBFloatLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach1: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach2: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result nextToken: (nodes at: 8).
	result addObject: (nodes at: 9) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach3: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach4: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result nextToken: (nodes at: 9).
	result addObject: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach5: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach6: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	result addObject: (nodes at: 10) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach7: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach8: nodes [
	| result |
	result := VBForEachNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result addObject: (nodes at: 3) to: result elements.
	result inToken: (nodes at: 4).
	result group: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result body: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	result addObject: (nodes at: 11) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext1: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext2: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext3: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result nextToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext4: nodes [
	| result |
	result := VBForNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result body: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext1: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext2: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext3: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result nextToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext4: nodes [
	| result |
	result := VBForStepNextNode new.
	result forToken: (nodes at: 1).
	result counter: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result initialValue: (nodes at: 4).
	result toToken: (nodes at: 5).
	result limit: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result body: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endLineNumber: (nodes at: 12).
	result nextToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLabel1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result gosubToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSubLine1: nodes [
	| result |
	result := VBGoSubLineNode new.
	result gosubToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result gotoToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToLine1: nodes [
	| result |
	result := VBGoToLineNode new.
	result gotoToken: (nodes at: 1).
	result lineNumber: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGuidLiteral1: nodes [
	| result |
	result := VBGuidLiteralNode new.
	result leftBraceToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 3) to: result minusTokens.
	result addTokens: (nodes at: 4) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 5) to: result minusTokens.
	result addTokens: (nodes at: 6) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 7) to: result minusTokens.
	result addTokens: (nodes at: 8) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 9) to: result minusTokens.
	result addTokens: (nodes at: 10) to: result hEX_INTEGERTokens.
	result rightBraceToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHashIdentifier1: nodes [
	| result |
	result := VBHashIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHeadlessIdentifier1: nodes [
	| result |
	result := VBHeadlessIdentifierNode new.
	result periodToken: (nodes at: 1).
	result token: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThen4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenColon1: nodes [
	| result |
	result := VBIfThenColonNode new.
	result ifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result
		ifTrue: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse10: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse11: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse12: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse13: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse14: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse15: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result
		ifFalse: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse16: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseLineNumber: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result
		ifFalse: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endLineNumber: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result addTokens: (nodes at: 8) to: result eolTokens.
	result endLineNumber: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result
		ifFalse: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseToken: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result
		ifFalse: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse5: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse6: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endLineNumber: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse7: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse8: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result elseLineNumber: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result
		ifFalse: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endLineNumber: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse9: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIf1: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIf2: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse1: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result addTokens: (nodes at: 9) to: result eolTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse2: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result addNodes: (nodes at: 6) to: result cases.
	result elseToken: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result otherwise: (nodes at: 9).
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse3: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result addTokens: (nodes at: 10) to: result eolTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseIfElse4: nodes [
	| result |
	result := VBIfThenElseIfElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result
		ifTrue: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result elseToken: (nodes at: 8).
	result addTokens: (nodes at: 9) to: result eolTokens.
	result otherwise: (nodes at: 10).
	result addTokens: (nodes at: 11) to: result eolTokens.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine1: nodes [
	| result |
	result := VBIfThenColonNode new.
	result ifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result
		ifTrue: (nodes at: 4).
	result elseToken: (nodes at: 5).
	result
		ifFalse: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall1: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result identifier: (nodes at: 1).
	result arguments: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop1: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result loopToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop2: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	result endLineNumber: (nodes at: 4).
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop3: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop4: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result body: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral1: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabel1: nodes [
	| result |
	result := VBGoToLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub1: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result returnToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub2: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result returnToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub3: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result block: (nodes at: 3).
	result returnToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelSub4: nodes [
	| result |
	result := VBGoSubLabelNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result block: (nodes at: 3).
	result endLineNumber: (nodes at: 4).
	result returnToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess1: nodes [
	| result |
	result := VBMemberAccessNode new.
	result receiver: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant1: nodes [
	| result |
	result := VBModuleConstantNode new.
	result constToken: (nodes at: 1).
	result constant: (nodes at: 2).
	result equalToken: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant2: nodes [
	| result |
	result := VBModuleConstantNode new.
	result constToken: (nodes at: 1).
	result constant: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant3: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: (nodes at: 2).
	result constant: (nodes at: 3).
	result equalToken: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant4: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: (nodes at: 2).
	result constant: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: (nodes at: 5).
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperties1: nodes [
	| result |
	result := VBModuleMultiplePropertiesNode new.
	result visibility: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperty1: nodes [
	| result |
	result := VBModulePropertyNode new.
	result visibility: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet10: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet11: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet12: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet13: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet14: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet15: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet16: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result getToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: (nodes at: 8) to: result eolTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result getToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet9: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result getToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result letToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result letToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result letToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result letToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result letToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result setToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result setToken: (nodes at: 2).
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result propertyTokens.
	result setToken: (nodes at: 3).
	result selector: (nodes at: 4).
	result parameters: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result setToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result propertyTokens.
	result setToken: (nodes at: 4).
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addTokens: (nodes at: 7) to: result eolTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNegatedOperation1: nodes [
	| result |
	result := VBNegatedOperationNode new.
	result minusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNewClause1: nodes [
	| result |
	result := VBNewClauseNode new.
	result nEWToken: (nodes at: 1).
	result typeName: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation1: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNull1: nodes [
	| result |
	result := VBNullNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorGoTo1: nodes [
	| result |
	result := VBOnErrorGoToNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorResumeNext1: nodes [
	| result |
	result := VBOnErrorResumeNextNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result resumeToken: (nodes at: 3).
	result nextToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnExpressionGo1: nodes [
	| result |
	result := VBOnExpressionGoNode new.
	result onToken: (nodes at: 1).
	result integerExpression: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption1: nodes [
	| result |
	result := VBOptionValueNode new.
	result optionToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption2: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result databaseToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption3: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result binaryToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption4: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result compareToken: (nodes at: 2).
	result compare: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption5: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result optionToken: (nodes at: 1).
	result explicitToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption6: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result optionToken: (nodes at: 1).
	result privateToken: (nodes at: 2).
	result moduleToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter10: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter11: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter12: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter13: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter14: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter15: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter16: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result strategy: (nodes at: 2).
	result paramarrayToken: (nodes at: 3).
	result name: (nodes at: 4).
	result type: (nodes at: 5).
	result equalToken: ((nodes at: 6) at: 1).
	result default: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result equalToken: ((nodes at: 2) at: 1).
	result default: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equalToken: ((nodes at: 4) at: 1).
	result default: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result paramarrayToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result equalToken: ((nodes at: 5) at: 1).
	result default: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter9: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equalToken: ((nodes at: 3) at: 1).
	result default: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList1: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result rightParenToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList2: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result parameters.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterPassingStrategy2: nodes [
	| result |
	result := VBParameterPassingStrategyNode new.
	result byrefToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression1: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPositiveOperation1: nodes [
	| result |
	result := VBPositiveOperationNode new.
	result plusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess1: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result receiver: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForQualifiedIdentifier1: nodes [
	| result |
	result := VBQualifiedIdentifierNode new.
	result token: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseEvent1: nodes [
	| result |
	result := VBRaiseEventNode new.
	result raiseEventToken: (nodes at: 1).
	result call: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable1: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable2: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables1: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables2: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeLabel1: nodes [
	| result |
	result := VBResumeLabelNode new.
	result resumeToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeNext1: nodes [
	| result |
	result := VBResumeNextNode new.
	result resumeToken: (nodes at: 1).
	result nextToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSetUpAssignation1: nodes [
	| result |
	result := VBSetUpAssignationNode new.
	result identifier: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleIdentifier2: nodes [
	| result |
	result := VBSimpleIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariable1: nodes [
	| result |
	result := VBStaticVariableNode new.
	result staticToken: (nodes at: 1).
	result variable: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariables1: nodes [
	| result |
	result := VBStaticMultipleVariablesNode new.
	result staticToken: (nodes at: 1).
	result variables: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStringLiteral1: nodes [
	| result |
	result := VBStringLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry1: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry2: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing1: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing2: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result asToken: (nodes at: 1).
	result nEWToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParenToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result sizes.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing1: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing2: nodes [
	| result |
	result := VBAsTypeNode new.
	result asToken: (nodes at: 1).
	result type: (nodes at: 2).
	result leftParenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result sizes.
	result addTokens: ((nodes at: 5) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result sizes.
	result rightParenToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue1: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue2: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result untilToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable1: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable2: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable3: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable4: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result name: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariableList1: nodes [
	| result |
	result := VBVariableListNode new.
	result addNode: (nodes at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result variables.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue1: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue2: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue3: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue4: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result whileToken: (nodes at: 2).
	result condition: (nodes at: 3).
	result addTokens: (nodes at: 4) to: result eolTokens.
	result body: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result endLineNumber: (nodes at: 7).
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend1: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result wendToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend2: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend3: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend4: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result body: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result wendToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith1: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith2: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	result endLineNumber: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith3: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith4: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result with: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result block: (nodes at: 4).
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endLineNumber: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________2: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument_________________4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Argument__argument__________________2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_HEX_INTEGER___1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___Expression__ifMatch__________1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___Expression__ifMatch__________2: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Expression__default___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____Expression__default___2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______Variable__variable____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______________Argument__argument____3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___eol___EnumEntry__field___2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader1: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader2: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result version: (nodes at: 2).
	result classToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule1: nodes [
	| result |
	result := VBModuleNode new.
	result addNode: (nodes at: 1) to: result elements.
	result addNodes: ((nodes at: 2) at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule2: nodes [
	| result |
	result := VBModuleNode new.
	result header: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result elements.
	result addNodes: ((nodes at: 4) at: 1) to: result elements.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]
